{"ast":null,"code":"'use strict';\n/* jshint ignore:start */\n\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n\n/* jshint ignore:end */\n\nvar Q = require('q');\n/* jshint ignore:line */\n\n\nvar _ = require('lodash');\n/* jshint ignore:line */\n\n\nvar util = require('util');\n/* jshint ignore:line */\n\n\nvar Page = require('../../../../base/Page');\n/* jshint ignore:line */\n\n\nvar deserialize = require('../../../../base/deserialize');\n/* jshint ignore:line */\n\n\nvar values = require('../../../../base/values');\n/* jshint ignore:line */\n\n\nvar SubscribedEventList;\nvar SubscribedEventPage;\nvar SubscribedEventInstance;\nvar SubscribedEventContext;\n/* jshint ignore:start */\n\n/**\n * Initialize the SubscribedEventList\n *\n * PLEASE NOTE that this class contains beta products that are subject to change.\n * Use them with caution.\n *\n * @constructor Twilio.Events.V1.SubscriptionContext.SubscribedEventList\n *\n * @param {Twilio.Events.V1} version - Version of the resource\n * @param {string} subscriptionSid - Subscription SID.\n */\n\n/* jshint ignore:end */\n\nSubscribedEventList = function SubscribedEventList(version, subscriptionSid) {\n  /* jshint ignore:start */\n\n  /**\n   * @function subscribedEvents\n   * @memberof Twilio.Events.V1.SubscriptionContext#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Events.V1.SubscriptionContext.SubscribedEventContext}\n   */\n\n  /* jshint ignore:end */\n  function SubscribedEventListInstance(sid) {\n    return SubscribedEventListInstance.get(sid);\n  }\n\n  SubscribedEventListInstance._version = version; // Path Solution\n\n  SubscribedEventListInstance._solution = {\n    subscriptionSid: subscriptionSid\n  };\n  SubscribedEventListInstance._uri = `/Subscriptions/${subscriptionSid}/SubscribedEvents`;\n  /* jshint ignore:start */\n\n  /**\n   * Streams SubscribedEventInstance records from the API.\n   *\n   * This operation lazily loads records as efficiently as possible until the limit\n   * is reached.\n   *\n   * The results are passed into the callback function, so this operation is memory\n   * efficient.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function each\n   * @memberof Twilio.Events.V1.SubscriptionContext.SubscribedEventList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         each() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no pageSize is defined but a limit is defined,\n   *         each() will attempt to read the limit with the most efficient\n   *         page size, i.e. min(limit, 1000)\n   * @param {Function} [opts.callback] -\n   *         Function to process each record. If this and a positional\n   *         callback are passed, this one will be used\n   * @param {Function} [opts.done] -\n   *          Function to be called upon completion of streaming\n   * @param {Function} [callback] - Function to process each record\n   */\n\n  /* jshint ignore:end */\n\n  SubscribedEventListInstance.each = function each(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n\n    if (opts.callback) {\n      callback = opts.callback;\n    }\n\n    if (_.isUndefined(callback)) {\n      throw new Error('Callback function must be provided');\n    }\n\n    var done = false;\n    var currentPage = 1;\n    var currentResource = 0;\n\n    var limits = this._version.readLimits({\n      limit: opts.limit,\n      pageSize: opts.pageSize\n    });\n\n    function onComplete(error) {\n      done = true;\n\n      if (_.isFunction(opts.done)) {\n        opts.done(error);\n      }\n    }\n\n    function fetchNextPage(fn) {\n      var promise = fn();\n\n      if (_.isUndefined(promise)) {\n        onComplete();\n        return;\n      }\n\n      promise.then(function (page) {\n        _.each(page.instances, function (instance) {\n          if (done || !_.isUndefined(opts.limit) && currentResource >= opts.limit) {\n            done = true;\n            return false;\n          }\n\n          currentResource++;\n          callback(instance, onComplete);\n        });\n\n        if (!done) {\n          currentPage++;\n          fetchNextPage(_.bind(page.nextPage, page));\n        } else {\n          onComplete();\n        }\n      });\n      promise.catch(onComplete);\n    }\n\n    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Lists SubscribedEventInstance records from the API as a list.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function list\n   * @memberof Twilio.Events.V1.SubscriptionContext.SubscribedEventList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         list() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no page_size is defined but a limit is defined,\n   *         list() will attempt to read the limit with the most\n   *         efficient page size, i.e. min(limit, 1000)\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  SubscribedEventListInstance.list = function list(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n    var deferred = Q.defer();\n    var allResources = [];\n\n    opts.callback = function (resource, done) {\n      allResources.push(resource);\n\n      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {\n        done();\n      }\n    };\n\n    opts.done = function (error) {\n      if (_.isUndefined(error)) {\n        deferred.resolve(allResources);\n      } else {\n        deferred.reject(error);\n      }\n    };\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    this.each(opts);\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Retrieve a single page of SubscribedEventInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function page\n   * @memberof Twilio.Events.V1.SubscriptionContext.SubscribedEventList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.pageToken] - PageToken provided by the API\n   * @param {number} [opts.pageNumber] -\n   *          Page Number, this value is simply for client state\n   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  SubscribedEventListInstance.page = function page(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n    var deferred = Q.defer();\n    var data = values.of({\n      'PageToken': opts.pageToken,\n      'Page': opts.pageNumber,\n      'PageSize': opts.pageSize\n    });\n\n    var promise = this._version.page({\n      uri: this._uri,\n      method: 'GET',\n      params: data\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new SubscribedEventPage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Retrieve a single target page of SubscribedEventInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function getPage\n   * @memberof Twilio.Events.V1.SubscriptionContext.SubscribedEventList#\n   *\n   * @param {string} [targetUrl] - API-generated URL for the requested results page\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  SubscribedEventListInstance.getPage = function getPage(targetUrl, callback) {\n    var deferred = Q.defer();\n\n    var promise = this._version._domain.twilio.request({\n      method: 'GET',\n      uri: targetUrl\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new SubscribedEventPage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * create a SubscribedEventInstance\n   *\n   * @function create\n   * @memberof Twilio.Events.V1.SubscriptionContext.SubscribedEventList#\n   *\n   * @param {object} opts - Options for request\n   * @param {string} opts.type - Type of event being subscribed to.\n   * @param {number} [opts.schemaVersion] -\n   *          The schema version that the subscription should use.\n   * @param {function} [callback] - Callback to handle processed record\n   *\n   * @returns {Promise} Resolves to processed SubscribedEventInstance\n   */\n\n  /* jshint ignore:end */\n\n\n  SubscribedEventListInstance.create = function create(opts, callback) {\n    if (_.isUndefined(opts)) {\n      throw new Error('Required parameter \"opts\" missing.');\n    }\n\n    if (_.isUndefined(opts['type'])) {\n      throw new Error('Required parameter \"opts[\\'type\\']\" missing.');\n    }\n\n    var deferred = Q.defer();\n    var data = values.of({\n      'Type': _.get(opts, 'type'),\n      'SchemaVersion': _.get(opts, 'schemaVersion')\n    });\n\n    var promise = this._version.create({\n      uri: this._uri,\n      method: 'POST',\n      data: data\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new SubscribedEventInstance(this._version, payload, this._solution.subscriptionSid, this._solution.type));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Constructs a subscribed_event\n   *\n   * @function get\n   * @memberof Twilio.Events.V1.SubscriptionContext.SubscribedEventList#\n   *\n   * @param {string} type - Type of event being subscribed to.\n   *\n   * @returns {Twilio.Events.V1.SubscriptionContext.SubscribedEventContext}\n   */\n\n  /* jshint ignore:end */\n\n\n  SubscribedEventListInstance.get = function get(type) {\n    return new SubscribedEventContext(this._version, this._solution.subscriptionSid, type);\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Events.V1.SubscriptionContext.SubscribedEventList#\n   *\n   * @returns Object\n   */\n\n  /* jshint ignore:end */\n\n\n  SubscribedEventListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n\n  SubscribedEventListInstance[util.inspect.custom] = function inspect(depth, options) {\n    return util.inspect(this.toJSON(), options);\n  };\n\n  return SubscribedEventListInstance;\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the SubscribedEventPage\n *\n * PLEASE NOTE that this class contains beta products that are subject to change.\n * Use them with caution.\n *\n * @constructor Twilio.Events.V1.SubscriptionContext.SubscribedEventPage\n *\n * @param {V1} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {SubscribedEventSolution} solution - Path solution\n *\n * @returns SubscribedEventPage\n */\n\n/* jshint ignore:end */\n\n\nSubscribedEventPage = function SubscribedEventPage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n\n_.extend(SubscribedEventPage.prototype, Page.prototype);\n\nSubscribedEventPage.prototype.constructor = SubscribedEventPage;\n/* jshint ignore:start */\n\n/**\n * Build an instance of SubscribedEventInstance\n *\n * @function getInstance\n * @memberof Twilio.Events.V1.SubscriptionContext.SubscribedEventPage#\n *\n * @param {SubscribedEventPayload} payload - Payload response from the API\n *\n * @returns SubscribedEventInstance\n */\n\n/* jshint ignore:end */\n\nSubscribedEventPage.prototype.getInstance = function getInstance(payload) {\n  return new SubscribedEventInstance(this._version, payload, this._solution.subscriptionSid);\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Events.V1.SubscriptionContext.SubscribedEventPage#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nSubscribedEventPage.prototype.toJSON = function toJSON() {\n  let clone = {};\n\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n\n  return clone;\n};\n\nSubscribedEventPage.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the SubscribedEventContext\n *\n * PLEASE NOTE that this class contains beta products that are subject to change.\n * Use them with caution.\n *\n * @constructor Twilio.Events.V1.SubscriptionContext.SubscribedEventInstance\n *\n * @property {string} accountSid - Account SID.\n * @property {string} type - Type of event being subscribed to.\n * @property {number} schemaVersion -\n *          The schema version that the subscription should use.\n * @property {string} subscriptionSid - Subscription SID.\n * @property {string} url - The URL of this resource.\n *\n * @param {V1} version - Version of the resource\n * @param {SubscribedEventPayload} payload - The instance payload\n * @param {sid} subscriptionSid - Subscription SID.\n * @param {string} type - Type of event being subscribed to.\n */\n\n/* jshint ignore:end */\n\n\nSubscribedEventInstance = function SubscribedEventInstance(version, payload, subscriptionSid, type) {\n  this._version = version; // Marshaled Properties\n\n  this.accountSid = payload.account_sid; // jshint ignore:line\n\n  this.type = payload.type; // jshint ignore:line\n\n  this.schemaVersion = deserialize.integer(payload.schema_version); // jshint ignore:line\n\n  this.subscriptionSid = payload.subscription_sid; // jshint ignore:line\n\n  this.url = payload.url; // jshint ignore:line\n  // Context\n\n  this._context = undefined;\n  this._solution = {\n    subscriptionSid: subscriptionSid,\n    type: type || this.type\n  };\n};\n\nObject.defineProperty(SubscribedEventInstance.prototype, '_proxy', {\n  get: function () {\n    if (!this._context) {\n      this._context = new SubscribedEventContext(this._version, this._solution.subscriptionSid, this._solution.type);\n    }\n\n    return this._context;\n  }\n});\n/* jshint ignore:start */\n\n/**\n * fetch a SubscribedEventInstance\n *\n * @function fetch\n * @memberof Twilio.Events.V1.SubscriptionContext.SubscribedEventInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed SubscribedEventInstance\n */\n\n/* jshint ignore:end */\n\nSubscribedEventInstance.prototype.fetch = function fetch(callback) {\n  return this._proxy.fetch(callback);\n};\n/* jshint ignore:start */\n\n/**\n * update a SubscribedEventInstance\n *\n * @function update\n * @memberof Twilio.Events.V1.SubscriptionContext.SubscribedEventInstance#\n *\n * @param {object} [opts] - Options for request\n * @param {number} [opts.schemaVersion] -\n *          The schema version that the subscription should use.\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed SubscribedEventInstance\n */\n\n/* jshint ignore:end */\n\n\nSubscribedEventInstance.prototype.update = function update(opts, callback) {\n  return this._proxy.update(opts, callback);\n};\n/* jshint ignore:start */\n\n/**\n * remove a SubscribedEventInstance\n *\n * @function remove\n * @memberof Twilio.Events.V1.SubscriptionContext.SubscribedEventInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed SubscribedEventInstance\n */\n\n/* jshint ignore:end */\n\n\nSubscribedEventInstance.prototype.remove = function remove(callback) {\n  return this._proxy.remove(callback);\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Events.V1.SubscriptionContext.SubscribedEventInstance#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nSubscribedEventInstance.prototype.toJSON = function toJSON() {\n  let clone = {};\n\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n\n  return clone;\n};\n\nSubscribedEventInstance.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the SubscribedEventContext\n *\n * PLEASE NOTE that this class contains beta products that are subject to change.\n * Use them with caution.\n *\n * @constructor Twilio.Events.V1.SubscriptionContext.SubscribedEventContext\n *\n * @param {V1} version - Version of the resource\n * @param {sid} subscriptionSid - Subscription SID.\n * @param {string} type - Type of event being subscribed to.\n */\n\n/* jshint ignore:end */\n\n\nSubscribedEventContext = function SubscribedEventContext(version, subscriptionSid, type) {\n  this._version = version; // Path Solution\n\n  this._solution = {\n    subscriptionSid: subscriptionSid,\n    type: type\n  };\n  this._uri = `/Subscriptions/${subscriptionSid}/SubscribedEvents/${type}`;\n};\n/* jshint ignore:start */\n\n/**\n * fetch a SubscribedEventInstance\n *\n * @function fetch\n * @memberof Twilio.Events.V1.SubscriptionContext.SubscribedEventContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed SubscribedEventInstance\n */\n\n/* jshint ignore:end */\n\n\nSubscribedEventContext.prototype.fetch = function fetch(callback) {\n  var deferred = Q.defer();\n\n  var promise = this._version.fetch({\n    uri: this._uri,\n    method: 'GET'\n  });\n\n  promise = promise.then(function (payload) {\n    deferred.resolve(new SubscribedEventInstance(this._version, payload, this._solution.subscriptionSid, this._solution.type));\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n/* jshint ignore:start */\n\n/**\n * update a SubscribedEventInstance\n *\n * @function update\n * @memberof Twilio.Events.V1.SubscriptionContext.SubscribedEventContext#\n *\n * @param {object} [opts] - Options for request\n * @param {number} [opts.schemaVersion] -\n *          The schema version that the subscription should use.\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed SubscribedEventInstance\n */\n\n/* jshint ignore:end */\n\n\nSubscribedEventContext.prototype.update = function update(opts, callback) {\n  if (_.isFunction(opts)) {\n    callback = opts;\n    opts = {};\n  }\n\n  opts = opts || {};\n  var deferred = Q.defer();\n  var data = values.of({\n    'SchemaVersion': _.get(opts, 'schemaVersion')\n  });\n\n  var promise = this._version.update({\n    uri: this._uri,\n    method: 'POST',\n    data: data\n  });\n\n  promise = promise.then(function (payload) {\n    deferred.resolve(new SubscribedEventInstance(this._version, payload, this._solution.subscriptionSid, this._solution.type));\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n/* jshint ignore:start */\n\n/**\n * remove a SubscribedEventInstance\n *\n * @function remove\n * @memberof Twilio.Events.V1.SubscriptionContext.SubscribedEventContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed SubscribedEventInstance\n */\n\n/* jshint ignore:end */\n\n\nSubscribedEventContext.prototype.remove = function remove(callback) {\n  var deferred = Q.defer();\n\n  var promise = this._version.remove({\n    uri: this._uri,\n    method: 'DELETE'\n  });\n\n  promise = promise.then(function (payload) {\n    deferred.resolve(payload);\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Events.V1.SubscriptionContext.SubscribedEventContext#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nSubscribedEventContext.prototype.toJSON = function toJSON() {\n  return this._solution;\n};\n\nSubscribedEventContext.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\nmodule.exports = {\n  SubscribedEventList: SubscribedEventList,\n  SubscribedEventPage: SubscribedEventPage,\n  SubscribedEventInstance: SubscribedEventInstance,\n  SubscribedEventContext: SubscribedEventContext\n};","map":{"version":3,"names":["Q","require","_","util","Page","deserialize","values","SubscribedEventList","SubscribedEventPage","SubscribedEventInstance","SubscribedEventContext","version","subscriptionSid","SubscribedEventListInstance","sid","get","_version","_solution","_uri","each","opts","callback","isFunction","isUndefined","Error","done","currentPage","currentResource","limits","readLimits","limit","pageSize","onComplete","error","fetchNextPage","fn","promise","then","page","instances","instance","bind","nextPage","catch","merge","list","deferred","defer","allResources","resource","push","length","resolve","reject","nodeify","data","of","pageToken","pageNumber","uri","method","params","payload","getPage","targetUrl","_domain","twilio","request","create","type","toJSON","inspect","custom","depth","options","response","solution","prototype","constructor","call","extend","getInstance","clone","forOwn","value","key","startsWith","accountSid","account_sid","schemaVersion","integer","schema_version","subscription_sid","url","_context","undefined","Object","defineProperty","fetch","_proxy","update","remove","module","exports"],"sources":["/Users/hooniesun/rmit/fwp/assessment1/lan/node_modules/twilio/lib/rest/events/v1/subscription/subscribedEvent.js"],"sourcesContent":["'use strict';\n\n/* jshint ignore:start */\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n/* jshint ignore:end */\n\nvar Q = require('q');  /* jshint ignore:line */\nvar _ = require('lodash');  /* jshint ignore:line */\nvar util = require('util');  /* jshint ignore:line */\nvar Page = require('../../../../base/Page');  /* jshint ignore:line */\nvar deserialize = require(\n    '../../../../base/deserialize');  /* jshint ignore:line */\nvar values = require('../../../../base/values');  /* jshint ignore:line */\n\nvar SubscribedEventList;\nvar SubscribedEventPage;\nvar SubscribedEventInstance;\nvar SubscribedEventContext;\n\n/* jshint ignore:start */\n/**\n * Initialize the SubscribedEventList\n *\n * PLEASE NOTE that this class contains beta products that are subject to change.\n * Use them with caution.\n *\n * @constructor Twilio.Events.V1.SubscriptionContext.SubscribedEventList\n *\n * @param {Twilio.Events.V1} version - Version of the resource\n * @param {string} subscriptionSid - Subscription SID.\n */\n/* jshint ignore:end */\nSubscribedEventList = function SubscribedEventList(version, subscriptionSid) {\n  /* jshint ignore:start */\n  /**\n   * @function subscribedEvents\n   * @memberof Twilio.Events.V1.SubscriptionContext#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Events.V1.SubscriptionContext.SubscribedEventContext}\n   */\n  /* jshint ignore:end */\n  function SubscribedEventListInstance(sid) {\n    return SubscribedEventListInstance.get(sid);\n  }\n\n  SubscribedEventListInstance._version = version;\n  // Path Solution\n  SubscribedEventListInstance._solution = {subscriptionSid: subscriptionSid};\n  SubscribedEventListInstance._uri = `/Subscriptions/${subscriptionSid}/SubscribedEvents`;\n  /* jshint ignore:start */\n  /**\n   * Streams SubscribedEventInstance records from the API.\n   *\n   * This operation lazily loads records as efficiently as possible until the limit\n   * is reached.\n   *\n   * The results are passed into the callback function, so this operation is memory\n   * efficient.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function each\n   * @memberof Twilio.Events.V1.SubscriptionContext.SubscribedEventList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         each() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no pageSize is defined but a limit is defined,\n   *         each() will attempt to read the limit with the most efficient\n   *         page size, i.e. min(limit, 1000)\n   * @param {Function} [opts.callback] -\n   *         Function to process each record. If this and a positional\n   *         callback are passed, this one will be used\n   * @param {Function} [opts.done] -\n   *          Function to be called upon completion of streaming\n   * @param {Function} [callback] - Function to process each record\n   */\n  /* jshint ignore:end */\n  SubscribedEventListInstance.each = function each(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    if (opts.callback) {\n      callback = opts.callback;\n    }\n    if (_.isUndefined(callback)) {\n      throw new Error('Callback function must be provided');\n    }\n\n    var done = false;\n    var currentPage = 1;\n    var currentResource = 0;\n    var limits = this._version.readLimits({\n      limit: opts.limit,\n      pageSize: opts.pageSize\n    });\n\n    function onComplete(error) {\n      done = true;\n      if (_.isFunction(opts.done)) {\n        opts.done(error);\n      }\n    }\n\n    function fetchNextPage(fn) {\n      var promise = fn();\n      if (_.isUndefined(promise)) {\n        onComplete();\n        return;\n      }\n\n      promise.then(function(page) {\n        _.each(page.instances, function(instance) {\n          if (done || (!_.isUndefined(opts.limit) && currentResource >= opts.limit)) {\n            done = true;\n            return false;\n          }\n\n          currentResource++;\n          callback(instance, onComplete);\n        });\n\n        if (!done) {\n          currentPage++;\n          fetchNextPage(_.bind(page.nextPage, page));\n        } else {\n          onComplete();\n        }\n      });\n\n      promise.catch(onComplete);\n    }\n\n    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Lists SubscribedEventInstance records from the API as a list.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function list\n   * @memberof Twilio.Events.V1.SubscriptionContext.SubscribedEventList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         list() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no page_size is defined but a limit is defined,\n   *         list() will attempt to read the limit with the most\n   *         efficient page size, i.e. min(limit, 1000)\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  SubscribedEventListInstance.list = function list(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    var deferred = Q.defer();\n    var allResources = [];\n    opts.callback = function(resource, done) {\n      allResources.push(resource);\n\n      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {\n        done();\n      }\n    };\n\n    opts.done = function(error) {\n      if (_.isUndefined(error)) {\n        deferred.resolve(allResources);\n      } else {\n        deferred.reject(error);\n      }\n    };\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    this.each(opts);\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single page of SubscribedEventInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function page\n   * @memberof Twilio.Events.V1.SubscriptionContext.SubscribedEventList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.pageToken] - PageToken provided by the API\n   * @param {number} [opts.pageNumber] -\n   *          Page Number, this value is simply for client state\n   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  SubscribedEventListInstance.page = function page(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n\n    var deferred = Q.defer();\n    var data = values.of({\n      'PageToken': opts.pageToken,\n      'Page': opts.pageNumber,\n      'PageSize': opts.pageSize\n    });\n\n    var promise = this._version.page({uri: this._uri, method: 'GET', params: data});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new SubscribedEventPage(this._version, payload, this._solution));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single target page of SubscribedEventInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function getPage\n   * @memberof Twilio.Events.V1.SubscriptionContext.SubscribedEventList#\n   *\n   * @param {string} [targetUrl] - API-generated URL for the requested results page\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  SubscribedEventListInstance.getPage = function getPage(targetUrl, callback) {\n    var deferred = Q.defer();\n\n    var promise = this._version._domain.twilio.request({method: 'GET', uri: targetUrl});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new SubscribedEventPage(this._version, payload, this._solution));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * create a SubscribedEventInstance\n   *\n   * @function create\n   * @memberof Twilio.Events.V1.SubscriptionContext.SubscribedEventList#\n   *\n   * @param {object} opts - Options for request\n   * @param {string} opts.type - Type of event being subscribed to.\n   * @param {number} [opts.schemaVersion] -\n   *          The schema version that the subscription should use.\n   * @param {function} [callback] - Callback to handle processed record\n   *\n   * @returns {Promise} Resolves to processed SubscribedEventInstance\n   */\n  /* jshint ignore:end */\n  SubscribedEventListInstance.create = function create(opts, callback) {\n    if (_.isUndefined(opts)) {\n      throw new Error('Required parameter \"opts\" missing.');\n    }\n    if (_.isUndefined(opts['type'])) {\n      throw new Error('Required parameter \"opts[\\'type\\']\" missing.');\n    }\n\n    var deferred = Q.defer();\n    var data = values.of({'Type': _.get(opts, 'type'), 'SchemaVersion': _.get(opts, 'schemaVersion')});\n\n    var promise = this._version.create({uri: this._uri, method: 'POST', data: data});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new SubscribedEventInstance(\n        this._version,\n        payload,\n        this._solution.subscriptionSid,\n        this._solution.type\n      ));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Constructs a subscribed_event\n   *\n   * @function get\n   * @memberof Twilio.Events.V1.SubscriptionContext.SubscribedEventList#\n   *\n   * @param {string} type - Type of event being subscribed to.\n   *\n   * @returns {Twilio.Events.V1.SubscriptionContext.SubscribedEventContext}\n   */\n  /* jshint ignore:end */\n  SubscribedEventListInstance.get = function get(type) {\n    return new SubscribedEventContext(this._version, this._solution.subscriptionSid, type);\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Events.V1.SubscriptionContext.SubscribedEventList#\n   *\n   * @returns Object\n   */\n  /* jshint ignore:end */\n  SubscribedEventListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n\n  SubscribedEventListInstance[util.inspect.custom] = function inspect(depth,\n      options) {\n    return util.inspect(this.toJSON(), options);\n  };\n\n  return SubscribedEventListInstance;\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the SubscribedEventPage\n *\n * PLEASE NOTE that this class contains beta products that are subject to change.\n * Use them with caution.\n *\n * @constructor Twilio.Events.V1.SubscriptionContext.SubscribedEventPage\n *\n * @param {V1} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {SubscribedEventSolution} solution - Path solution\n *\n * @returns SubscribedEventPage\n */\n/* jshint ignore:end */\nSubscribedEventPage = function SubscribedEventPage(version, response, solution)\n                                                    {\n  // Path Solution\n  this._solution = solution;\n\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n\n_.extend(SubscribedEventPage.prototype, Page.prototype);\nSubscribedEventPage.prototype.constructor = SubscribedEventPage;\n\n/* jshint ignore:start */\n/**\n * Build an instance of SubscribedEventInstance\n *\n * @function getInstance\n * @memberof Twilio.Events.V1.SubscriptionContext.SubscribedEventPage#\n *\n * @param {SubscribedEventPayload} payload - Payload response from the API\n *\n * @returns SubscribedEventInstance\n */\n/* jshint ignore:end */\nSubscribedEventPage.prototype.getInstance = function getInstance(payload) {\n  return new SubscribedEventInstance(this._version, payload, this._solution.subscriptionSid);\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Events.V1.SubscriptionContext.SubscribedEventPage#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nSubscribedEventPage.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function(value, key) {\n    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\n\nSubscribedEventPage.prototype[util.inspect.custom] = function inspect(depth,\n    options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the SubscribedEventContext\n *\n * PLEASE NOTE that this class contains beta products that are subject to change.\n * Use them with caution.\n *\n * @constructor Twilio.Events.V1.SubscriptionContext.SubscribedEventInstance\n *\n * @property {string} accountSid - Account SID.\n * @property {string} type - Type of event being subscribed to.\n * @property {number} schemaVersion -\n *          The schema version that the subscription should use.\n * @property {string} subscriptionSid - Subscription SID.\n * @property {string} url - The URL of this resource.\n *\n * @param {V1} version - Version of the resource\n * @param {SubscribedEventPayload} payload - The instance payload\n * @param {sid} subscriptionSid - Subscription SID.\n * @param {string} type - Type of event being subscribed to.\n */\n/* jshint ignore:end */\nSubscribedEventInstance = function SubscribedEventInstance(version, payload,\n                                                            subscriptionSid,\n                                                            type) {\n  this._version = version;\n\n  // Marshaled Properties\n  this.accountSid = payload.account_sid; // jshint ignore:line\n  this.type = payload.type; // jshint ignore:line\n  this.schemaVersion = deserialize.integer(payload.schema_version); // jshint ignore:line\n  this.subscriptionSid = payload.subscription_sid; // jshint ignore:line\n  this.url = payload.url; // jshint ignore:line\n\n  // Context\n  this._context = undefined;\n  this._solution = {subscriptionSid: subscriptionSid, type: type || this.type, };\n};\n\nObject.defineProperty(SubscribedEventInstance.prototype,\n  '_proxy', {\n    get: function() {\n      if (!this._context) {\n        this._context = new SubscribedEventContext(\n          this._version,\n          this._solution.subscriptionSid,\n          this._solution.type\n        );\n      }\n\n      return this._context;\n    }\n});\n\n/* jshint ignore:start */\n/**\n * fetch a SubscribedEventInstance\n *\n * @function fetch\n * @memberof Twilio.Events.V1.SubscriptionContext.SubscribedEventInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed SubscribedEventInstance\n */\n/* jshint ignore:end */\nSubscribedEventInstance.prototype.fetch = function fetch(callback) {\n  return this._proxy.fetch(callback);\n};\n\n/* jshint ignore:start */\n/**\n * update a SubscribedEventInstance\n *\n * @function update\n * @memberof Twilio.Events.V1.SubscriptionContext.SubscribedEventInstance#\n *\n * @param {object} [opts] - Options for request\n * @param {number} [opts.schemaVersion] -\n *          The schema version that the subscription should use.\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed SubscribedEventInstance\n */\n/* jshint ignore:end */\nSubscribedEventInstance.prototype.update = function update(opts, callback) {\n  return this._proxy.update(opts, callback);\n};\n\n/* jshint ignore:start */\n/**\n * remove a SubscribedEventInstance\n *\n * @function remove\n * @memberof Twilio.Events.V1.SubscriptionContext.SubscribedEventInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed SubscribedEventInstance\n */\n/* jshint ignore:end */\nSubscribedEventInstance.prototype.remove = function remove(callback) {\n  return this._proxy.remove(callback);\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Events.V1.SubscriptionContext.SubscribedEventInstance#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nSubscribedEventInstance.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function(value, key) {\n    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\n\nSubscribedEventInstance.prototype[util.inspect.custom] = function inspect(depth,\n    options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the SubscribedEventContext\n *\n * PLEASE NOTE that this class contains beta products that are subject to change.\n * Use them with caution.\n *\n * @constructor Twilio.Events.V1.SubscriptionContext.SubscribedEventContext\n *\n * @param {V1} version - Version of the resource\n * @param {sid} subscriptionSid - Subscription SID.\n * @param {string} type - Type of event being subscribed to.\n */\n/* jshint ignore:end */\nSubscribedEventContext = function SubscribedEventContext(version,\n                                                          subscriptionSid, type)\n                                                          {\n  this._version = version;\n\n  // Path Solution\n  this._solution = {subscriptionSid: subscriptionSid, type: type, };\n  this._uri = `/Subscriptions/${subscriptionSid}/SubscribedEvents/${type}`;\n};\n\n/* jshint ignore:start */\n/**\n * fetch a SubscribedEventInstance\n *\n * @function fetch\n * @memberof Twilio.Events.V1.SubscriptionContext.SubscribedEventContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed SubscribedEventInstance\n */\n/* jshint ignore:end */\nSubscribedEventContext.prototype.fetch = function fetch(callback) {\n  var deferred = Q.defer();\n  var promise = this._version.fetch({uri: this._uri, method: 'GET'});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(new SubscribedEventInstance(\n      this._version,\n      payload,\n      this._solution.subscriptionSid,\n      this._solution.type\n    ));\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * update a SubscribedEventInstance\n *\n * @function update\n * @memberof Twilio.Events.V1.SubscriptionContext.SubscribedEventContext#\n *\n * @param {object} [opts] - Options for request\n * @param {number} [opts.schemaVersion] -\n *          The schema version that the subscription should use.\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed SubscribedEventInstance\n */\n/* jshint ignore:end */\nSubscribedEventContext.prototype.update = function update(opts, callback) {\n  if (_.isFunction(opts)) {\n    callback = opts;\n    opts = {};\n  }\n  opts = opts || {};\n\n  var deferred = Q.defer();\n  var data = values.of({'SchemaVersion': _.get(opts, 'schemaVersion')});\n\n  var promise = this._version.update({uri: this._uri, method: 'POST', data: data});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(new SubscribedEventInstance(\n      this._version,\n      payload,\n      this._solution.subscriptionSid,\n      this._solution.type\n    ));\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * remove a SubscribedEventInstance\n *\n * @function remove\n * @memberof Twilio.Events.V1.SubscriptionContext.SubscribedEventContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed SubscribedEventInstance\n */\n/* jshint ignore:end */\nSubscribedEventContext.prototype.remove = function remove(callback) {\n  var deferred = Q.defer();\n  var promise = this._version.remove({uri: this._uri, method: 'DELETE'});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(payload);\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Events.V1.SubscriptionContext.SubscribedEventContext#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nSubscribedEventContext.prototype.toJSON = function toJSON() {\n  return this._solution;\n};\n\nSubscribedEventContext.prototype[util.inspect.custom] = function inspect(depth,\n    options) {\n  return util.inspect(this.toJSON(), options);\n};\n\nmodule.exports = {\n  SubscribedEventList: SubscribedEventList,\n  SubscribedEventPage: SubscribedEventPage,\n  SubscribedEventInstance: SubscribedEventInstance,\n  SubscribedEventContext: SubscribedEventContext\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}