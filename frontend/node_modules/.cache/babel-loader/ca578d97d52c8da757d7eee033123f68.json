{"ast":null,"code":"'use strict';\n/* jshint ignore:start */\n\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n\n/* jshint ignore:end */\n\nvar Q = require('q');\n/* jshint ignore:line */\n\n\nvar _ = require('lodash');\n/* jshint ignore:line */\n\n\nvar util = require('util');\n/* jshint ignore:line */\n\n\nvar Page = require('../../../../../base/Page');\n/* jshint ignore:line */\n\n\nvar deserialize = require('../../../../../base/deserialize');\n/* jshint ignore:line */\n\n\nvar values = require('../../../../../base/values');\n/* jshint ignore:line */\n\n\nvar PublishedTrackList;\nvar PublishedTrackPage;\nvar PublishedTrackInstance;\nvar PublishedTrackContext;\n/* jshint ignore:start */\n\n/**\n * Initialize the PublishedTrackList\n *\n * @constructor Twilio.Video.V1.RoomContext.ParticipantContext.PublishedTrackList\n *\n * @param {Twilio.Video.V1} version - Version of the resource\n * @param {string} roomSid -\n *          The SID of the Room resource where the track is published\n * @param {string} participantSid -\n *          The SID of the Participant resource with the published track\n */\n\n/* jshint ignore:end */\n\nPublishedTrackList = function PublishedTrackList(version, roomSid, participantSid) {\n  /* jshint ignore:start */\n\n  /**\n   * @function publishedTracks\n   * @memberof Twilio.Video.V1.RoomContext.ParticipantContext#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Video.V1.RoomContext.ParticipantContext.PublishedTrackContext}\n   */\n\n  /* jshint ignore:end */\n  function PublishedTrackListInstance(sid) {\n    return PublishedTrackListInstance.get(sid);\n  }\n\n  PublishedTrackListInstance._version = version; // Path Solution\n\n  PublishedTrackListInstance._solution = {\n    roomSid: roomSid,\n    participantSid: participantSid\n  };\n  PublishedTrackListInstance._uri = `/Rooms/${roomSid}/Participants/${participantSid}/PublishedTracks`;\n  /* jshint ignore:start */\n\n  /**\n   * Streams PublishedTrackInstance records from the API.\n   *\n   * This operation lazily loads records as efficiently as possible until the limit\n   * is reached.\n   *\n   * The results are passed into the callback function, so this operation is memory\n   * efficient.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function each\n   * @memberof Twilio.Video.V1.RoomContext.ParticipantContext.PublishedTrackList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         each() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no pageSize is defined but a limit is defined,\n   *         each() will attempt to read the limit with the most efficient\n   *         page size, i.e. min(limit, 1000)\n   * @param {Function} [opts.callback] -\n   *         Function to process each record. If this and a positional\n   *         callback are passed, this one will be used\n   * @param {Function} [opts.done] -\n   *          Function to be called upon completion of streaming\n   * @param {Function} [callback] - Function to process each record\n   */\n\n  /* jshint ignore:end */\n\n  PublishedTrackListInstance.each = function each(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n\n    if (opts.callback) {\n      callback = opts.callback;\n    }\n\n    if (_.isUndefined(callback)) {\n      throw new Error('Callback function must be provided');\n    }\n\n    var done = false;\n    var currentPage = 1;\n    var currentResource = 0;\n\n    var limits = this._version.readLimits({\n      limit: opts.limit,\n      pageSize: opts.pageSize\n    });\n\n    function onComplete(error) {\n      done = true;\n\n      if (_.isFunction(opts.done)) {\n        opts.done(error);\n      }\n    }\n\n    function fetchNextPage(fn) {\n      var promise = fn();\n\n      if (_.isUndefined(promise)) {\n        onComplete();\n        return;\n      }\n\n      promise.then(function (page) {\n        _.each(page.instances, function (instance) {\n          if (done || !_.isUndefined(opts.limit) && currentResource >= opts.limit) {\n            done = true;\n            return false;\n          }\n\n          currentResource++;\n          callback(instance, onComplete);\n        });\n\n        if (!done) {\n          currentPage++;\n          fetchNextPage(_.bind(page.nextPage, page));\n        } else {\n          onComplete();\n        }\n      });\n      promise.catch(onComplete);\n    }\n\n    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Lists PublishedTrackInstance records from the API as a list.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function list\n   * @memberof Twilio.Video.V1.RoomContext.ParticipantContext.PublishedTrackList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         list() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no page_size is defined but a limit is defined,\n   *         list() will attempt to read the limit with the most\n   *         efficient page size, i.e. min(limit, 1000)\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  PublishedTrackListInstance.list = function list(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n    var deferred = Q.defer();\n    var allResources = [];\n\n    opts.callback = function (resource, done) {\n      allResources.push(resource);\n\n      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {\n        done();\n      }\n    };\n\n    opts.done = function (error) {\n      if (_.isUndefined(error)) {\n        deferred.resolve(allResources);\n      } else {\n        deferred.reject(error);\n      }\n    };\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    this.each(opts);\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Retrieve a single page of PublishedTrackInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function page\n   * @memberof Twilio.Video.V1.RoomContext.ParticipantContext.PublishedTrackList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.pageToken] - PageToken provided by the API\n   * @param {number} [opts.pageNumber] -\n   *          Page Number, this value is simply for client state\n   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  PublishedTrackListInstance.page = function page(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n    var deferred = Q.defer();\n    var data = values.of({\n      'PageToken': opts.pageToken,\n      'Page': opts.pageNumber,\n      'PageSize': opts.pageSize\n    });\n\n    var promise = this._version.page({\n      uri: this._uri,\n      method: 'GET',\n      params: data\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new PublishedTrackPage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Retrieve a single target page of PublishedTrackInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function getPage\n   * @memberof Twilio.Video.V1.RoomContext.ParticipantContext.PublishedTrackList#\n   *\n   * @param {string} [targetUrl] - API-generated URL for the requested results page\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  PublishedTrackListInstance.getPage = function getPage(targetUrl, callback) {\n    var deferred = Q.defer();\n\n    var promise = this._version._domain.twilio.request({\n      method: 'GET',\n      uri: targetUrl\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new PublishedTrackPage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Constructs a published_track\n   *\n   * @function get\n   * @memberof Twilio.Video.V1.RoomContext.ParticipantContext.PublishedTrackList#\n   *\n   * @param {string} sid - The SID that identifies the resource to fetch\n   *\n   * @returns {Twilio.Video.V1.RoomContext.ParticipantContext.PublishedTrackContext}\n   */\n\n  /* jshint ignore:end */\n\n\n  PublishedTrackListInstance.get = function get(sid) {\n    return new PublishedTrackContext(this._version, this._solution.roomSid, this._solution.participantSid, sid);\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Video.V1.RoomContext.ParticipantContext.PublishedTrackList#\n   *\n   * @returns Object\n   */\n\n  /* jshint ignore:end */\n\n\n  PublishedTrackListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n\n  PublishedTrackListInstance[util.inspect.custom] = function inspect(depth, options) {\n    return util.inspect(this.toJSON(), options);\n  };\n\n  return PublishedTrackListInstance;\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the PublishedTrackPage\n *\n * @constructor Twilio.Video.V1.RoomContext.ParticipantContext.PublishedTrackPage\n *\n * @param {V1} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {PublishedTrackSolution} solution - Path solution\n *\n * @returns PublishedTrackPage\n */\n\n/* jshint ignore:end */\n\n\nPublishedTrackPage = function PublishedTrackPage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n\n_.extend(PublishedTrackPage.prototype, Page.prototype);\n\nPublishedTrackPage.prototype.constructor = PublishedTrackPage;\n/* jshint ignore:start */\n\n/**\n * Build an instance of PublishedTrackInstance\n *\n * @function getInstance\n * @memberof Twilio.Video.V1.RoomContext.ParticipantContext.PublishedTrackPage#\n *\n * @param {PublishedTrackPayload} payload - Payload response from the API\n *\n * @returns PublishedTrackInstance\n */\n\n/* jshint ignore:end */\n\nPublishedTrackPage.prototype.getInstance = function getInstance(payload) {\n  return new PublishedTrackInstance(this._version, payload, this._solution.roomSid, this._solution.participantSid);\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Video.V1.RoomContext.ParticipantContext.PublishedTrackPage#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nPublishedTrackPage.prototype.toJSON = function toJSON() {\n  let clone = {};\n\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n\n  return clone;\n};\n\nPublishedTrackPage.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the PublishedTrackContext\n *\n * @constructor Twilio.Video.V1.RoomContext.ParticipantContext.PublishedTrackInstance\n *\n * @property {string} sid - The unique string that identifies the resource\n * @property {string} participantSid -\n *          The SID of the Participant resource with the published track\n * @property {string} roomSid -\n *          The SID of the Room resource where the track is published\n * @property {string} name - The track name\n * @property {Date} dateCreated -\n *          The ISO 8601 date and time in GMT when the resource was created\n * @property {Date} dateUpdated -\n *          The ISO 8601 date and time in GMT when the resource was last updated\n * @property {boolean} enabled - Whether the track is enabled\n * @property {published_track.kind} kind - The track type\n * @property {string} url - The absolute URL of the resource\n *\n * @param {V1} version - Version of the resource\n * @param {PublishedTrackPayload} payload - The instance payload\n * @param {sid} roomSid - The SID of the Room resource where the track is published\n * @param {sid} participantSid -\n *          The SID of the Participant resource with the published track\n * @param {sid_like} sid - The SID that identifies the resource to fetch\n */\n\n/* jshint ignore:end */\n\n\nPublishedTrackInstance = function PublishedTrackInstance(version, payload, roomSid, participantSid, sid) {\n  this._version = version; // Marshaled Properties\n\n  this.sid = payload.sid; // jshint ignore:line\n\n  this.participantSid = payload.participant_sid; // jshint ignore:line\n\n  this.roomSid = payload.room_sid; // jshint ignore:line\n\n  this.name = payload.name; // jshint ignore:line\n\n  this.dateCreated = deserialize.iso8601DateTime(payload.date_created); // jshint ignore:line\n\n  this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated); // jshint ignore:line\n\n  this.enabled = payload.enabled; // jshint ignore:line\n\n  this.kind = payload.kind; // jshint ignore:line\n\n  this.url = payload.url; // jshint ignore:line\n  // Context\n\n  this._context = undefined;\n  this._solution = {\n    roomSid: roomSid,\n    participantSid: participantSid,\n    sid: sid || this.sid\n  };\n};\n\nObject.defineProperty(PublishedTrackInstance.prototype, '_proxy', {\n  get: function () {\n    if (!this._context) {\n      this._context = new PublishedTrackContext(this._version, this._solution.roomSid, this._solution.participantSid, this._solution.sid);\n    }\n\n    return this._context;\n  }\n});\n/* jshint ignore:start */\n\n/**\n * fetch a PublishedTrackInstance\n *\n * @function fetch\n * @memberof Twilio.Video.V1.RoomContext.ParticipantContext.PublishedTrackInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed PublishedTrackInstance\n */\n\n/* jshint ignore:end */\n\nPublishedTrackInstance.prototype.fetch = function fetch(callback) {\n  return this._proxy.fetch(callback);\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Video.V1.RoomContext.ParticipantContext.PublishedTrackInstance#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nPublishedTrackInstance.prototype.toJSON = function toJSON() {\n  let clone = {};\n\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n\n  return clone;\n};\n\nPublishedTrackInstance.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the PublishedTrackContext\n *\n * @constructor Twilio.Video.V1.RoomContext.ParticipantContext.PublishedTrackContext\n *\n * @param {V1} version - Version of the resource\n * @param {sid_like} roomSid -\n *          The SID of the Room resource where the Track resource to fetch is published\n * @param {sid_like} participantSid -\n *          The SID of the Participant resource with the published track to fetch\n * @param {sid_like} sid - The SID that identifies the resource to fetch\n */\n\n/* jshint ignore:end */\n\n\nPublishedTrackContext = function PublishedTrackContext(version, roomSid, participantSid, sid) {\n  this._version = version; // Path Solution\n\n  this._solution = {\n    roomSid: roomSid,\n    participantSid: participantSid,\n    sid: sid\n  };\n  this._uri = `/Rooms/${roomSid}/Participants/${participantSid}/PublishedTracks/${sid}`;\n};\n/* jshint ignore:start */\n\n/**\n * fetch a PublishedTrackInstance\n *\n * @function fetch\n * @memberof Twilio.Video.V1.RoomContext.ParticipantContext.PublishedTrackContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed PublishedTrackInstance\n */\n\n/* jshint ignore:end */\n\n\nPublishedTrackContext.prototype.fetch = function fetch(callback) {\n  var deferred = Q.defer();\n\n  var promise = this._version.fetch({\n    uri: this._uri,\n    method: 'GET'\n  });\n\n  promise = promise.then(function (payload) {\n    deferred.resolve(new PublishedTrackInstance(this._version, payload, this._solution.roomSid, this._solution.participantSid, this._solution.sid));\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Video.V1.RoomContext.ParticipantContext.PublishedTrackContext#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nPublishedTrackContext.prototype.toJSON = function toJSON() {\n  return this._solution;\n};\n\nPublishedTrackContext.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\nmodule.exports = {\n  PublishedTrackList: PublishedTrackList,\n  PublishedTrackPage: PublishedTrackPage,\n  PublishedTrackInstance: PublishedTrackInstance,\n  PublishedTrackContext: PublishedTrackContext\n};","map":{"version":3,"names":["Q","require","_","util","Page","deserialize","values","PublishedTrackList","PublishedTrackPage","PublishedTrackInstance","PublishedTrackContext","version","roomSid","participantSid","PublishedTrackListInstance","sid","get","_version","_solution","_uri","each","opts","callback","isFunction","isUndefined","Error","done","currentPage","currentResource","limits","readLimits","limit","pageSize","onComplete","error","fetchNextPage","fn","promise","then","page","instances","instance","bind","nextPage","catch","merge","list","deferred","defer","allResources","resource","push","length","resolve","reject","nodeify","data","of","pageToken","pageNumber","uri","method","params","payload","getPage","targetUrl","_domain","twilio","request","toJSON","inspect","custom","depth","options","response","solution","prototype","constructor","call","extend","getInstance","clone","forOwn","value","key","startsWith","participant_sid","room_sid","name","dateCreated","iso8601DateTime","date_created","dateUpdated","date_updated","enabled","kind","url","_context","undefined","Object","defineProperty","fetch","_proxy","module","exports"],"sources":["/Users/hooniesun/rmit/fwp/assessment1/lan/node_modules/twilio/lib/rest/video/v1/room/roomParticipant/roomParticipantPublishedTrack.js"],"sourcesContent":["'use strict';\n\n/* jshint ignore:start */\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n/* jshint ignore:end */\n\nvar Q = require('q');  /* jshint ignore:line */\nvar _ = require('lodash');  /* jshint ignore:line */\nvar util = require('util');  /* jshint ignore:line */\nvar Page = require('../../../../../base/Page');  /* jshint ignore:line */\nvar deserialize = require(\n    '../../../../../base/deserialize');  /* jshint ignore:line */\nvar values = require('../../../../../base/values');  /* jshint ignore:line */\n\nvar PublishedTrackList;\nvar PublishedTrackPage;\nvar PublishedTrackInstance;\nvar PublishedTrackContext;\n\n/* jshint ignore:start */\n/**\n * Initialize the PublishedTrackList\n *\n * @constructor Twilio.Video.V1.RoomContext.ParticipantContext.PublishedTrackList\n *\n * @param {Twilio.Video.V1} version - Version of the resource\n * @param {string} roomSid -\n *          The SID of the Room resource where the track is published\n * @param {string} participantSid -\n *          The SID of the Participant resource with the published track\n */\n/* jshint ignore:end */\nPublishedTrackList = function PublishedTrackList(version, roomSid,\n                                                  participantSid) {\n  /* jshint ignore:start */\n  /**\n   * @function publishedTracks\n   * @memberof Twilio.Video.V1.RoomContext.ParticipantContext#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Video.V1.RoomContext.ParticipantContext.PublishedTrackContext}\n   */\n  /* jshint ignore:end */\n  function PublishedTrackListInstance(sid) {\n    return PublishedTrackListInstance.get(sid);\n  }\n\n  PublishedTrackListInstance._version = version;\n  // Path Solution\n  PublishedTrackListInstance._solution = {roomSid: roomSid, participantSid: participantSid};\n  PublishedTrackListInstance._uri = `/Rooms/${roomSid}/Participants/${participantSid}/PublishedTracks`;\n  /* jshint ignore:start */\n  /**\n   * Streams PublishedTrackInstance records from the API.\n   *\n   * This operation lazily loads records as efficiently as possible until the limit\n   * is reached.\n   *\n   * The results are passed into the callback function, so this operation is memory\n   * efficient.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function each\n   * @memberof Twilio.Video.V1.RoomContext.ParticipantContext.PublishedTrackList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         each() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no pageSize is defined but a limit is defined,\n   *         each() will attempt to read the limit with the most efficient\n   *         page size, i.e. min(limit, 1000)\n   * @param {Function} [opts.callback] -\n   *         Function to process each record. If this and a positional\n   *         callback are passed, this one will be used\n   * @param {Function} [opts.done] -\n   *          Function to be called upon completion of streaming\n   * @param {Function} [callback] - Function to process each record\n   */\n  /* jshint ignore:end */\n  PublishedTrackListInstance.each = function each(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    if (opts.callback) {\n      callback = opts.callback;\n    }\n    if (_.isUndefined(callback)) {\n      throw new Error('Callback function must be provided');\n    }\n\n    var done = false;\n    var currentPage = 1;\n    var currentResource = 0;\n    var limits = this._version.readLimits({\n      limit: opts.limit,\n      pageSize: opts.pageSize\n    });\n\n    function onComplete(error) {\n      done = true;\n      if (_.isFunction(opts.done)) {\n        opts.done(error);\n      }\n    }\n\n    function fetchNextPage(fn) {\n      var promise = fn();\n      if (_.isUndefined(promise)) {\n        onComplete();\n        return;\n      }\n\n      promise.then(function(page) {\n        _.each(page.instances, function(instance) {\n          if (done || (!_.isUndefined(opts.limit) && currentResource >= opts.limit)) {\n            done = true;\n            return false;\n          }\n\n          currentResource++;\n          callback(instance, onComplete);\n        });\n\n        if (!done) {\n          currentPage++;\n          fetchNextPage(_.bind(page.nextPage, page));\n        } else {\n          onComplete();\n        }\n      });\n\n      promise.catch(onComplete);\n    }\n\n    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Lists PublishedTrackInstance records from the API as a list.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function list\n   * @memberof Twilio.Video.V1.RoomContext.ParticipantContext.PublishedTrackList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         list() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no page_size is defined but a limit is defined,\n   *         list() will attempt to read the limit with the most\n   *         efficient page size, i.e. min(limit, 1000)\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  PublishedTrackListInstance.list = function list(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    var deferred = Q.defer();\n    var allResources = [];\n    opts.callback = function(resource, done) {\n      allResources.push(resource);\n\n      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {\n        done();\n      }\n    };\n\n    opts.done = function(error) {\n      if (_.isUndefined(error)) {\n        deferred.resolve(allResources);\n      } else {\n        deferred.reject(error);\n      }\n    };\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    this.each(opts);\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single page of PublishedTrackInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function page\n   * @memberof Twilio.Video.V1.RoomContext.ParticipantContext.PublishedTrackList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.pageToken] - PageToken provided by the API\n   * @param {number} [opts.pageNumber] -\n   *          Page Number, this value is simply for client state\n   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  PublishedTrackListInstance.page = function page(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n\n    var deferred = Q.defer();\n    var data = values.of({\n      'PageToken': opts.pageToken,\n      'Page': opts.pageNumber,\n      'PageSize': opts.pageSize\n    });\n\n    var promise = this._version.page({uri: this._uri, method: 'GET', params: data});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new PublishedTrackPage(this._version, payload, this._solution));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single target page of PublishedTrackInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function getPage\n   * @memberof Twilio.Video.V1.RoomContext.ParticipantContext.PublishedTrackList#\n   *\n   * @param {string} [targetUrl] - API-generated URL for the requested results page\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  PublishedTrackListInstance.getPage = function getPage(targetUrl, callback) {\n    var deferred = Q.defer();\n\n    var promise = this._version._domain.twilio.request({method: 'GET', uri: targetUrl});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new PublishedTrackPage(this._version, payload, this._solution));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Constructs a published_track\n   *\n   * @function get\n   * @memberof Twilio.Video.V1.RoomContext.ParticipantContext.PublishedTrackList#\n   *\n   * @param {string} sid - The SID that identifies the resource to fetch\n   *\n   * @returns {Twilio.Video.V1.RoomContext.ParticipantContext.PublishedTrackContext}\n   */\n  /* jshint ignore:end */\n  PublishedTrackListInstance.get = function get(sid) {\n    return new PublishedTrackContext(\n      this._version,\n      this._solution.roomSid,\n      this._solution.participantSid,\n      sid\n    );\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Video.V1.RoomContext.ParticipantContext.PublishedTrackList#\n   *\n   * @returns Object\n   */\n  /* jshint ignore:end */\n  PublishedTrackListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n\n  PublishedTrackListInstance[util.inspect.custom] = function inspect(depth,\n      options) {\n    return util.inspect(this.toJSON(), options);\n  };\n\n  return PublishedTrackListInstance;\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the PublishedTrackPage\n *\n * @constructor Twilio.Video.V1.RoomContext.ParticipantContext.PublishedTrackPage\n *\n * @param {V1} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {PublishedTrackSolution} solution - Path solution\n *\n * @returns PublishedTrackPage\n */\n/* jshint ignore:end */\nPublishedTrackPage = function PublishedTrackPage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n\n_.extend(PublishedTrackPage.prototype, Page.prototype);\nPublishedTrackPage.prototype.constructor = PublishedTrackPage;\n\n/* jshint ignore:start */\n/**\n * Build an instance of PublishedTrackInstance\n *\n * @function getInstance\n * @memberof Twilio.Video.V1.RoomContext.ParticipantContext.PublishedTrackPage#\n *\n * @param {PublishedTrackPayload} payload - Payload response from the API\n *\n * @returns PublishedTrackInstance\n */\n/* jshint ignore:end */\nPublishedTrackPage.prototype.getInstance = function getInstance(payload) {\n  return new PublishedTrackInstance(\n    this._version,\n    payload,\n    this._solution.roomSid,\n    this._solution.participantSid\n  );\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Video.V1.RoomContext.ParticipantContext.PublishedTrackPage#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nPublishedTrackPage.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function(value, key) {\n    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\n\nPublishedTrackPage.prototype[util.inspect.custom] = function inspect(depth,\n    options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the PublishedTrackContext\n *\n * @constructor Twilio.Video.V1.RoomContext.ParticipantContext.PublishedTrackInstance\n *\n * @property {string} sid - The unique string that identifies the resource\n * @property {string} participantSid -\n *          The SID of the Participant resource with the published track\n * @property {string} roomSid -\n *          The SID of the Room resource where the track is published\n * @property {string} name - The track name\n * @property {Date} dateCreated -\n *          The ISO 8601 date and time in GMT when the resource was created\n * @property {Date} dateUpdated -\n *          The ISO 8601 date and time in GMT when the resource was last updated\n * @property {boolean} enabled - Whether the track is enabled\n * @property {published_track.kind} kind - The track type\n * @property {string} url - The absolute URL of the resource\n *\n * @param {V1} version - Version of the resource\n * @param {PublishedTrackPayload} payload - The instance payload\n * @param {sid} roomSid - The SID of the Room resource where the track is published\n * @param {sid} participantSid -\n *          The SID of the Participant resource with the published track\n * @param {sid_like} sid - The SID that identifies the resource to fetch\n */\n/* jshint ignore:end */\nPublishedTrackInstance = function PublishedTrackInstance(version, payload,\n                                                          roomSid,\n                                                          participantSid, sid) {\n  this._version = version;\n\n  // Marshaled Properties\n  this.sid = payload.sid; // jshint ignore:line\n  this.participantSid = payload.participant_sid; // jshint ignore:line\n  this.roomSid = payload.room_sid; // jshint ignore:line\n  this.name = payload.name; // jshint ignore:line\n  this.dateCreated = deserialize.iso8601DateTime(payload.date_created); // jshint ignore:line\n  this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated); // jshint ignore:line\n  this.enabled = payload.enabled; // jshint ignore:line\n  this.kind = payload.kind; // jshint ignore:line\n  this.url = payload.url; // jshint ignore:line\n\n  // Context\n  this._context = undefined;\n  this._solution = {roomSid: roomSid, participantSid: participantSid, sid: sid || this.sid, };\n};\n\nObject.defineProperty(PublishedTrackInstance.prototype,\n  '_proxy', {\n    get: function() {\n      if (!this._context) {\n        this._context = new PublishedTrackContext(\n          this._version,\n          this._solution.roomSid,\n          this._solution.participantSid,\n          this._solution.sid\n        );\n      }\n\n      return this._context;\n    }\n});\n\n/* jshint ignore:start */\n/**\n * fetch a PublishedTrackInstance\n *\n * @function fetch\n * @memberof Twilio.Video.V1.RoomContext.ParticipantContext.PublishedTrackInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed PublishedTrackInstance\n */\n/* jshint ignore:end */\nPublishedTrackInstance.prototype.fetch = function fetch(callback) {\n  return this._proxy.fetch(callback);\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Video.V1.RoomContext.ParticipantContext.PublishedTrackInstance#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nPublishedTrackInstance.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function(value, key) {\n    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\n\nPublishedTrackInstance.prototype[util.inspect.custom] = function inspect(depth,\n    options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the PublishedTrackContext\n *\n * @constructor Twilio.Video.V1.RoomContext.ParticipantContext.PublishedTrackContext\n *\n * @param {V1} version - Version of the resource\n * @param {sid_like} roomSid -\n *          The SID of the Room resource where the Track resource to fetch is published\n * @param {sid_like} participantSid -\n *          The SID of the Participant resource with the published track to fetch\n * @param {sid_like} sid - The SID that identifies the resource to fetch\n */\n/* jshint ignore:end */\nPublishedTrackContext = function PublishedTrackContext(version, roomSid,\n                                                        participantSid, sid) {\n  this._version = version;\n\n  // Path Solution\n  this._solution = {roomSid: roomSid, participantSid: participantSid, sid: sid, };\n  this._uri = `/Rooms/${roomSid}/Participants/${participantSid}/PublishedTracks/${sid}`;\n};\n\n/* jshint ignore:start */\n/**\n * fetch a PublishedTrackInstance\n *\n * @function fetch\n * @memberof Twilio.Video.V1.RoomContext.ParticipantContext.PublishedTrackContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed PublishedTrackInstance\n */\n/* jshint ignore:end */\nPublishedTrackContext.prototype.fetch = function fetch(callback) {\n  var deferred = Q.defer();\n  var promise = this._version.fetch({uri: this._uri, method: 'GET'});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(new PublishedTrackInstance(\n      this._version,\n      payload,\n      this._solution.roomSid,\n      this._solution.participantSid,\n      this._solution.sid\n    ));\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Video.V1.RoomContext.ParticipantContext.PublishedTrackContext#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nPublishedTrackContext.prototype.toJSON = function toJSON() {\n  return this._solution;\n};\n\nPublishedTrackContext.prototype[util.inspect.custom] = function inspect(depth,\n    options) {\n  return util.inspect(this.toJSON(), options);\n};\n\nmodule.exports = {\n  PublishedTrackList: PublishedTrackList,\n  PublishedTrackPage: PublishedTrackPage,\n  PublishedTrackInstance: PublishedTrackInstance,\n  PublishedTrackContext: PublishedTrackContext\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}