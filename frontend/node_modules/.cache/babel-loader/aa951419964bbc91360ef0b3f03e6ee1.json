{"ast":null,"code":"var _jsxFileName = \"/Users/hooniesun/rmit/fwp/assessment1/lan/src/UI/SignUpForm.js\",\n    _s = $RefreshSig$();\n\nimport * as React from \"react\";\nimport { Container, Button, Form } from \"react-bootstrap\";\nimport { useOutletContext } from \"react-router-dom\";\nimport Loading from \"./Loading\";\nimport MFA from \"./MFA\";\nimport formatDate from \"./formatDate\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function SignUpForm() {\n  _s();\n\n  const [, dispatchUser, users] = useOutletContext(); // a variable to store user information before the user authenticates herself\n\n  function validateEmail(email) {\n    return !(email in users);\n  }\n\n  function validatePassword(password) {\n    /* A regex pattern that matches invalid passwords\n        - Anything with less than eight characters OR\n        - Anything with no numbers OR\n        - Anything with no uppercase letter OR\n        - Anything with no lowercase letter OR\n        - Anything with no special characters\n    */\n    const regex = \"^(.{0,7}|[^0-9]*|[^A-Z]*|[^a-z]*|[a-zA-Z0-9]*)$\"; // If there are any matches, the password is invalid\n\n    return password.match(regex) ? false : true;\n  }\n\n  function confirmPassword(password) {\n    return password === document.querySelector(\"#formSignupPassword\").value;\n  } // The 3 handlers below only validate after timeDelayed microseconds\n\n\n  const validateEmailHandler = event => {\n    clearTimeout(validateEmailTimeoutId);\n    validateEmailTimeoutId = setTimeout(() => {\n      setIsEmailValid(validateEmail(event.target.value));\n    }, timeDelayed);\n  };\n\n  const validatePasswordHandler = event => {\n    clearTimeout(validatePasswordTimeoutId);\n    validatePasswordTimeoutId = setTimeout(() => {\n      setIsPasswordValid(validatePassword(event.target.value));\n    }, timeDelayed);\n  };\n\n  const confirmPasswordHandler = event => {\n    clearTimeout(confirmPasswordTimeoutId);\n    confirmPasswordTimeoutId = setTimeout(() => {\n      setIsPasswordIdentical(confirmPassword(event.target.value));\n    }, timeDelayed);\n  };\n\n  const submitHandler = event => {\n    event.preventDefault();\n    let email = event.target[2].value;\n    let password = event.target[3].value;\n    let confirmedPassword = event.target[4].value; // Make sure to check whether all the entries are valid once more\n\n    if (validateEmail(email) && validatePassword(password) && confirmPassword(confirmedPassword)) {\n      // Before storing the user data, ensure the user has scanned a QR code in Google Authenticator\n      setIsMFAVisible(true);\n      setUser({\n        firstName: event.target[0].value,\n        lastName: event.target[1].value,\n        email: email,\n        password: confirmedPassword,\n        joinedDate: formatDate(),\n        avatarsrc: `https://avatars.dicebear.com/api/${avatars[Math.floor(Math.random() * avatars.length)]}/${email}.svg`,\n        posts: []\n      });\n    } else {\n      setIsEmailValid(validateEmail(email));\n      setIsPasswordValid(validatePassword(password));\n      setIsPasswordIdentical(confirmPassword(confirmedPassword));\n    }\n  }; // The function gets called within MFA if the user has successfully scanned the QR code and typed in the OTP\n\n\n  const signUpAuthenticatedUser = secret => {\n    dispatchUser({\n      type: \"SIGNUP_USER\",\n      payload: { ...user,\n        secret: secret\n      }\n    });\n    setIsLoading(true);\n    clearTimeout(validateEmailTimeoutId);\n    clearTimeout(confirmPasswordTimeoutId);\n    clearTimeout(validatePasswordTimeoutId);\n    setTimeout(() => {\n      setIsLoading(false);\n      navigate(\"/profile\");\n    }, timeDelayed);\n  };\n\n  const togglePasswordVisability = event => {\n    setIsPasswordVisble(!isPasswordVisible);\n  };\n\n  return /*#__PURE__*/_jsxDEV(Container, {\n    children: [/*#__PURE__*/_jsxDEV(Loading, {\n      show: isLoading,\n      children: \"Logging in\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(MFA, {\n      show: isMFAVisible,\n      setShow: setIsMFAVisible,\n      hideQRcode: false,\n      signUpAuthenticatedUser: signUpAuthenticatedUser,\n      user: null\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Form, {\n      className: \"my-5\",\n      onSubmit: submitHandler,\n      children: [/*#__PURE__*/_jsxDEV(\"header\", {\n        className: \"mb-5\",\n        children: /*#__PURE__*/_jsxDEV(\"h1\", {\n          className: \"text-center\",\n          children: \"Sign up\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n        className: \"mb-4\",\n        controlId: \"formSignupFirstName\",\n        children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n          visuallyHidden: \"true\",\n          children: \"First name\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 131,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n          type: \"text\",\n          required: true,\n          placeholder: \"First name\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 132,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n        className: \"mb-4\",\n        controlId: \"formSignupLastName\",\n        children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n          visuallyHidden: \"true\",\n          children: \"Last name\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 139,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n          type: \"text\",\n          required: true,\n          placeholder: \"Last name\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 140,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n        className: \"mb-5\",\n        controlId: \"formSignupEmail\",\n        children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n          visuallyHidden: true,\n          children: \"Email\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 147,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n          type: \"email\",\n          required: true,\n          placeholder: \"Email\",\n          onChange: validateEmailHandler,\n          isInvalid: !isEmailValid\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 148,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Form.Control.Feedback, {\n          type: \"invalid\",\n          children: \"The email already exists\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 155,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n        className: \"mb-4\",\n        controlId: \"formSignupPassword\",\n        children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n          visuallyHidden: true,\n          children: \"Password\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 161,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n          type: isPasswordVisible ? \"text\" : \"password\",\n          required: true,\n          placeholder: \"Password\",\n          onChange: validatePasswordHandler,\n          isInvalid: !isPasswordValid\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 162,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Form.Control.Feedback, {\n          type: \"invalid\",\n          children: \"Use 8 or more character with a mix of lowercase and uppercase letters, numbers & symbols\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 169,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n        className: \"mb-2\",\n        controlId: \"formSignupPasswordConfirm\",\n        children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n          visuallyHidden: \"true\",\n          children: \"Confirm Password\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 176,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n          type: isPasswordVisible ? \"text\" : \"password\",\n          required: true,\n          placeholder: \"Confirm\",\n          isInvalid: !isPasswordIdentical,\n          onChange: confirmPasswordHandler\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 177,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Form.Control.Feedback, {\n          type: \"invalid\",\n          children: \"Passwords are not identical\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 184,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Form.Text, {\n          className: \"text-muted\",\n          children: \"Use 8 or more character with a mix of lowercase and uppercase letters, numbers & symbols\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 187,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n        className: \"mb-3\",\n        controlId: \"formSignupShowPassword\",\n        children: /*#__PURE__*/_jsxDEV(Form.Check, {\n          type: \"checkbox\",\n          label: \"Show password\",\n          onClick: togglePasswordVisability\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 193,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 192,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"primary\",\n        type: \"submit\",\n        children: \"Sign Up\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 199,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 117,\n    columnNumber: 5\n  }, this);\n}\n\n_s(SignUpForm, \"VYA/UysXaJ1t+HDxrks0INo1QeM=\", false, function () {\n  return [useOutletContext];\n});\n\n_c = SignUpForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"SignUpForm\");","map":{"version":3,"names":["React","Container","Button","Form","useOutletContext","Loading","MFA","formatDate","SignUpForm","dispatchUser","users","validateEmail","email","validatePassword","password","regex","match","confirmPassword","document","querySelector","value","validateEmailHandler","event","clearTimeout","validateEmailTimeoutId","setTimeout","setIsEmailValid","target","timeDelayed","validatePasswordHandler","validatePasswordTimeoutId","setIsPasswordValid","confirmPasswordHandler","confirmPasswordTimeoutId","setIsPasswordIdentical","submitHandler","preventDefault","confirmedPassword","setIsMFAVisible","setUser","firstName","lastName","joinedDate","avatarsrc","avatars","Math","floor","random","length","posts","signUpAuthenticatedUser","secret","type","payload","user","setIsLoading","navigate","togglePasswordVisability","setIsPasswordVisble","isPasswordVisible","isLoading","isMFAVisible","isEmailValid","isPasswordValid","isPasswordIdentical"],"sources":["/Users/hooniesun/rmit/fwp/assessment1/lan/src/UI/SignUpForm.js"],"sourcesContent":["import * as React from \"react\";\nimport { Container, Button, Form } from \"react-bootstrap\";\nimport { useOutletContext} from \"react-router-dom\";\nimport Loading from \"./Loading\";\nimport MFA from \"./MFA\";\nimport formatDate from \"./formatDate\";\n\nexport default function SignUpForm() {\n  const [, dispatchUser, users] = useOutletContext();\n  \n\n  // a variable to store user information before the user authenticates herself\n\n\n\n  function validateEmail(email) {\n    return !(email in users);\n  }\n\n  function validatePassword(password) {\n    /* A regex pattern that matches invalid passwords\n        - Anything with less than eight characters OR\n        - Anything with no numbers OR\n        - Anything with no uppercase letter OR\n        - Anything with no lowercase letter OR\n        - Anything with no special characters\n    */\n    const regex = \"^(.{0,7}|[^0-9]*|[^A-Z]*|[^a-z]*|[a-zA-Z0-9]*)$\";\n    // If there are any matches, the password is invalid\n    return password.match(regex) ? false : true;\n  }\n\n  function confirmPassword(password) {\n    return password === document.querySelector(\"#formSignupPassword\").value;\n  }\n\n  // The 3 handlers below only validate after timeDelayed microseconds\n\n  const validateEmailHandler = (event) => {\n    clearTimeout(validateEmailTimeoutId);\n    validateEmailTimeoutId = setTimeout(() => {\n      setIsEmailValid(validateEmail(event.target.value));\n    }, timeDelayed);\n  };\n\n  const validatePasswordHandler = (event) => {\n    clearTimeout(validatePasswordTimeoutId);\n    validatePasswordTimeoutId = setTimeout(() => {\n      setIsPasswordValid(validatePassword(event.target.value));\n    }, timeDelayed);\n  };\n\n  const confirmPasswordHandler = (event) => {\n    clearTimeout(confirmPasswordTimeoutId);\n    confirmPasswordTimeoutId = setTimeout(() => {\n      setIsPasswordIdentical(confirmPassword(event.target.value));\n    }, timeDelayed);\n  };\n\n  const submitHandler = (event) => {\n    event.preventDefault();\n\n    let email = event.target[2].value;\n    let password = event.target[3].value;\n    let confirmedPassword = event.target[4].value;\n\n    // Make sure to check whether all the entries are valid once more\n    if (\n      validateEmail(email) &&\n      validatePassword(password) &&\n      confirmPassword(confirmedPassword)\n    ) {\n      // Before storing the user data, ensure the user has scanned a QR code in Google Authenticator\n      setIsMFAVisible(true);\n\n      setUser({\n        firstName: event.target[0].value,\n        lastName: event.target[1].value,\n        email: email,\n        password: confirmedPassword,\n        joinedDate: formatDate(),\n        avatarsrc: `https://avatars.dicebear.com/api/${\n          avatars[Math.floor(Math.random() * avatars.length)]\n        }/${email}.svg`,\n        posts: [],\n      });\n    } else {\n      setIsEmailValid(validateEmail(email));\n      setIsPasswordValid(validatePassword(password));\n      setIsPasswordIdentical(confirmPassword(confirmedPassword));\n    }\n  };\n\n  // The function gets called within MFA if the user has successfully scanned the QR code and typed in the OTP\n  const signUpAuthenticatedUser = (secret) => {\n    dispatchUser({\n      type: \"SIGNUP_USER\",\n      payload: { ...user, secret: secret },\n    });\n    setIsLoading(true);\n\n    clearTimeout(validateEmailTimeoutId);\n    clearTimeout(confirmPasswordTimeoutId);\n    clearTimeout(validatePasswordTimeoutId);\n\n    setTimeout(() => {\n      setIsLoading(false);\n      navigate(\"/profile\");\n    }, timeDelayed);\n  };\n\n  const togglePasswordVisability = (event) => {\n    setIsPasswordVisble(!isPasswordVisible);\n  };\n\n  return (\n    <Container>\n      <Loading show={isLoading}>Logging in</Loading>\n      <MFA\n        show={isMFAVisible}\n        setShow={setIsMFAVisible}\n        hideQRcode={false}\n        signUpAuthenticatedUser={signUpAuthenticatedUser}\n        user={null}\n      ></MFA>\n      <Form className=\"my-5\" onSubmit={submitHandler}>\n        <header className=\"mb-5\">\n          <h1 className=\"text-center\">Sign up</h1>\n        </header>\n        <Form.Group className=\"mb-4\" controlId=\"formSignupFirstName\">\n          <Form.Label visuallyHidden=\"true\">First name</Form.Label>\n          <Form.Control\n            type=\"text\"\n            required\n            placeholder=\"First name\"\n          ></Form.Control>\n        </Form.Group>\n        <Form.Group className=\"mb-4\" controlId=\"formSignupLastName\">\n          <Form.Label visuallyHidden=\"true\">Last name</Form.Label>\n          <Form.Control\n            type=\"text\"\n            required\n            placeholder=\"Last name\"\n          ></Form.Control>\n        </Form.Group>\n        <Form.Group className=\"mb-5\" controlId=\"formSignupEmail\">\n          <Form.Label visuallyHidden>Email</Form.Label>\n          <Form.Control\n            type=\"email\"\n            required\n            placeholder=\"Email\"\n            onChange={validateEmailHandler}\n            isInvalid={!isEmailValid}\n          />\n          <Form.Control.Feedback type=\"invalid\">\n            The email already exists\n          </Form.Control.Feedback>\n        </Form.Group>\n\n        <Form.Group className=\"mb-4\" controlId=\"formSignupPassword\">\n          <Form.Label visuallyHidden>Password</Form.Label>\n          <Form.Control\n            type={isPasswordVisible ? \"text\" : \"password\"}\n            required\n            placeholder=\"Password\"\n            onChange={validatePasswordHandler}\n            isInvalid={!isPasswordValid}\n          />\n          <Form.Control.Feedback type=\"invalid\">\n            Use 8 or more character with a mix of lowercase and uppercase\n            letters, numbers & symbols\n          </Form.Control.Feedback>\n        </Form.Group>\n\n        <Form.Group className=\"mb-2\" controlId=\"formSignupPasswordConfirm\">\n          <Form.Label visuallyHidden=\"true\">Confirm Password</Form.Label>\n          <Form.Control\n            type={isPasswordVisible ? \"text\" : \"password\"}\n            required\n            placeholder=\"Confirm\"\n            isInvalid={!isPasswordIdentical}\n            onChange={confirmPasswordHandler}\n          />\n          <Form.Control.Feedback type=\"invalid\">\n            Passwords are not identical\n          </Form.Control.Feedback>\n          <Form.Text className=\"text-muted\">\n            Use 8 or more character with a mix of lowercase and uppercase\n            letters, numbers & symbols\n          </Form.Text>\n        </Form.Group>\n        <Form.Group className=\"mb-3\" controlId=\"formSignupShowPassword\">\n          <Form.Check\n            type=\"checkbox\"\n            label=\"Show password\"\n            onClick={togglePasswordVisability}\n          />\n        </Form.Group>\n        <Button variant=\"primary\" type=\"submit\">\n          Sign Up\n        </Button>\n      </Form>\n    </Container>\n  );\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}