{"ast":null,"code":"'use strict';\n/* jshint ignore:start */\n\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n\n/* jshint ignore:end */\n\nvar Q = require('q');\n/* jshint ignore:line */\n\n\nvar _ = require('lodash');\n/* jshint ignore:line */\n\n\nvar util = require('util');\n/* jshint ignore:line */\n\n\nvar BindingList = require('./service/binding').BindingList;\n\nvar NotificationList = require('./service/notification').NotificationList;\n\nvar Page = require('../../../base/Page');\n/* jshint ignore:line */\n\n\nvar deserialize = require('../../../base/deserialize');\n/* jshint ignore:line */\n\n\nvar serialize = require('../../../base/serialize');\n/* jshint ignore:line */\n\n\nvar values = require('../../../base/values');\n/* jshint ignore:line */\n\n\nvar ServiceList;\nvar ServicePage;\nvar ServiceInstance;\nvar ServiceContext;\n/* jshint ignore:start */\n\n/**\n * Initialize the ServiceList\n *\n * PLEASE NOTE that this class contains beta products that are subject to change.\n * Use them with caution.\n *\n * @constructor Twilio.Notify.V1.ServiceList\n *\n * @param {Twilio.Notify.V1} version - Version of the resource\n */\n\n/* jshint ignore:end */\n\nServiceList = function ServiceList(version) {\n  /* jshint ignore:start */\n\n  /**\n   * @function services\n   * @memberof Twilio.Notify.V1#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Notify.V1.ServiceContext}\n   */\n\n  /* jshint ignore:end */\n  function ServiceListInstance(sid) {\n    return ServiceListInstance.get(sid);\n  }\n\n  ServiceListInstance._version = version; // Path Solution\n\n  ServiceListInstance._solution = {};\n  ServiceListInstance._uri = `/Services`;\n  /* jshint ignore:start */\n\n  /**\n   * create a ServiceInstance\n   *\n   * @function create\n   * @memberof Twilio.Notify.V1.ServiceList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.friendlyName] - A string to describe the resource\n   * @param {string} [opts.apnCredentialSid] -\n   *          The SID of the Credential to use for APN Bindings\n   * @param {string} [opts.gcmCredentialSid] -\n   *          The SID of the Credential to use for GCM Bindings\n   * @param {string} [opts.messagingServiceSid] -\n   *          The SID of the Messaging Service to use for SMS Bindings\n   * @param {string} [opts.facebookMessengerPageId] - Deprecated\n   * @param {string} [opts.defaultApnNotificationProtocolVersion] -\n   *          The protocol version to use for sending APNS notifications\n   * @param {string} [opts.defaultGcmNotificationProtocolVersion] -\n   *          The protocol version to use for sending GCM notifications\n   * @param {string} [opts.fcmCredentialSid] -\n   *          The SID of the Credential to use for FCM Bindings\n   * @param {string} [opts.defaultFcmNotificationProtocolVersion] -\n   *          The protocol version to use for sending FCM notifications\n   * @param {boolean} [opts.logEnabled] - Whether to log notifications\n   * @param {string} [opts.alexaSkillId] - Deprecated\n   * @param {string} [opts.defaultAlexaNotificationProtocolVersion] - Deprecated\n   * @param {string} [opts.deliveryCallbackUrl] - Webhook URL\n   * @param {boolean} [opts.deliveryCallbackEnabled] - Enable delivery callbacks\n   * @param {function} [callback] - Callback to handle processed record\n   *\n   * @returns {Promise} Resolves to processed ServiceInstance\n   */\n\n  /* jshint ignore:end */\n\n  ServiceListInstance.create = function create(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n    var deferred = Q.defer();\n    var data = values.of({\n      'FriendlyName': _.get(opts, 'friendlyName'),\n      'ApnCredentialSid': _.get(opts, 'apnCredentialSid'),\n      'GcmCredentialSid': _.get(opts, 'gcmCredentialSid'),\n      'MessagingServiceSid': _.get(opts, 'messagingServiceSid'),\n      'FacebookMessengerPageId': _.get(opts, 'facebookMessengerPageId'),\n      'DefaultApnNotificationProtocolVersion': _.get(opts, 'defaultApnNotificationProtocolVersion'),\n      'DefaultGcmNotificationProtocolVersion': _.get(opts, 'defaultGcmNotificationProtocolVersion'),\n      'FcmCredentialSid': _.get(opts, 'fcmCredentialSid'),\n      'DefaultFcmNotificationProtocolVersion': _.get(opts, 'defaultFcmNotificationProtocolVersion'),\n      'LogEnabled': serialize.bool(_.get(opts, 'logEnabled')),\n      'AlexaSkillId': _.get(opts, 'alexaSkillId'),\n      'DefaultAlexaNotificationProtocolVersion': _.get(opts, 'defaultAlexaNotificationProtocolVersion'),\n      'DeliveryCallbackUrl': _.get(opts, 'deliveryCallbackUrl'),\n      'DeliveryCallbackEnabled': serialize.bool(_.get(opts, 'deliveryCallbackEnabled'))\n    });\n\n    var promise = this._version.create({\n      uri: this._uri,\n      method: 'POST',\n      data: data\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new ServiceInstance(this._version, payload, this._solution.sid));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Streams ServiceInstance records from the API.\n   *\n   * This operation lazily loads records as efficiently as possible until the limit\n   * is reached.\n   *\n   * The results are passed into the callback function, so this operation is memory\n   * efficient.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function each\n   * @memberof Twilio.Notify.V1.ServiceList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.friendlyName] -\n   *          The string that identifies the Service resources to read\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         each() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no pageSize is defined but a limit is defined,\n   *         each() will attempt to read the limit with the most efficient\n   *         page size, i.e. min(limit, 1000)\n   * @param {Function} [opts.callback] -\n   *         Function to process each record. If this and a positional\n   *         callback are passed, this one will be used\n   * @param {Function} [opts.done] -\n   *          Function to be called upon completion of streaming\n   * @param {Function} [callback] - Function to process each record\n   */\n\n  /* jshint ignore:end */\n\n\n  ServiceListInstance.each = function each(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n\n    if (opts.callback) {\n      callback = opts.callback;\n    }\n\n    if (_.isUndefined(callback)) {\n      throw new Error('Callback function must be provided');\n    }\n\n    var done = false;\n    var currentPage = 1;\n    var currentResource = 0;\n\n    var limits = this._version.readLimits({\n      limit: opts.limit,\n      pageSize: opts.pageSize\n    });\n\n    function onComplete(error) {\n      done = true;\n\n      if (_.isFunction(opts.done)) {\n        opts.done(error);\n      }\n    }\n\n    function fetchNextPage(fn) {\n      var promise = fn();\n\n      if (_.isUndefined(promise)) {\n        onComplete();\n        return;\n      }\n\n      promise.then(function (page) {\n        _.each(page.instances, function (instance) {\n          if (done || !_.isUndefined(opts.limit) && currentResource >= opts.limit) {\n            done = true;\n            return false;\n          }\n\n          currentResource++;\n          callback(instance, onComplete);\n        });\n\n        if (!done) {\n          currentPage++;\n          fetchNextPage(_.bind(page.nextPage, page));\n        } else {\n          onComplete();\n        }\n      });\n      promise.catch(onComplete);\n    }\n\n    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Lists ServiceInstance records from the API as a list.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function list\n   * @memberof Twilio.Notify.V1.ServiceList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.friendlyName] -\n   *          The string that identifies the Service resources to read\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         list() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no page_size is defined but a limit is defined,\n   *         list() will attempt to read the limit with the most\n   *         efficient page size, i.e. min(limit, 1000)\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  ServiceListInstance.list = function list(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n    var deferred = Q.defer();\n    var allResources = [];\n\n    opts.callback = function (resource, done) {\n      allResources.push(resource);\n\n      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {\n        done();\n      }\n    };\n\n    opts.done = function (error) {\n      if (_.isUndefined(error)) {\n        deferred.resolve(allResources);\n      } else {\n        deferred.reject(error);\n      }\n    };\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    this.each(opts);\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Retrieve a single page of ServiceInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function page\n   * @memberof Twilio.Notify.V1.ServiceList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.friendlyName] -\n   *          The string that identifies the Service resources to read\n   * @param {string} [opts.pageToken] - PageToken provided by the API\n   * @param {number} [opts.pageNumber] -\n   *          Page Number, this value is simply for client state\n   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  ServiceListInstance.page = function page(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n    var deferred = Q.defer();\n    var data = values.of({\n      'FriendlyName': _.get(opts, 'friendlyName'),\n      'PageToken': opts.pageToken,\n      'Page': opts.pageNumber,\n      'PageSize': opts.pageSize\n    });\n\n    var promise = this._version.page({\n      uri: this._uri,\n      method: 'GET',\n      params: data\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new ServicePage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Retrieve a single target page of ServiceInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function getPage\n   * @memberof Twilio.Notify.V1.ServiceList#\n   *\n   * @param {string} [targetUrl] - API-generated URL for the requested results page\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  ServiceListInstance.getPage = function getPage(targetUrl, callback) {\n    var deferred = Q.defer();\n\n    var promise = this._version._domain.twilio.request({\n      method: 'GET',\n      uri: targetUrl\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new ServicePage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Constructs a service\n   *\n   * @function get\n   * @memberof Twilio.Notify.V1.ServiceList#\n   *\n   * @param {string} sid - The unique string that identifies the resource\n   *\n   * @returns {Twilio.Notify.V1.ServiceContext}\n   */\n\n  /* jshint ignore:end */\n\n\n  ServiceListInstance.get = function get(sid) {\n    return new ServiceContext(this._version, sid);\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Notify.V1.ServiceList#\n   *\n   * @returns Object\n   */\n\n  /* jshint ignore:end */\n\n\n  ServiceListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n\n  ServiceListInstance[util.inspect.custom] = function inspect(depth, options) {\n    return util.inspect(this.toJSON(), options);\n  };\n\n  return ServiceListInstance;\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the ServicePage\n *\n * PLEASE NOTE that this class contains beta products that are subject to change.\n * Use them with caution.\n *\n * @constructor Twilio.Notify.V1.ServicePage\n *\n * @param {V1} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {ServiceSolution} solution - Path solution\n *\n * @returns ServicePage\n */\n\n/* jshint ignore:end */\n\n\nServicePage = function ServicePage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n\n_.extend(ServicePage.prototype, Page.prototype);\n\nServicePage.prototype.constructor = ServicePage;\n/* jshint ignore:start */\n\n/**\n * Build an instance of ServiceInstance\n *\n * @function getInstance\n * @memberof Twilio.Notify.V1.ServicePage#\n *\n * @param {ServicePayload} payload - Payload response from the API\n *\n * @returns ServiceInstance\n */\n\n/* jshint ignore:end */\n\nServicePage.prototype.getInstance = function getInstance(payload) {\n  return new ServiceInstance(this._version, payload);\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Notify.V1.ServicePage#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nServicePage.prototype.toJSON = function toJSON() {\n  let clone = {};\n\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n\n  return clone;\n};\n\nServicePage.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the ServiceContext\n *\n * PLEASE NOTE that this class contains beta products that are subject to change.\n * Use them with caution.\n *\n * @constructor Twilio.Notify.V1.ServiceInstance\n *\n * @property {string} sid - The unique string that identifies the resource\n * @property {string} accountSid - The SID of the Account that created the resource\n * @property {string} friendlyName -\n *          The string that you assigned to describe the resource\n * @property {Date} dateCreated -\n *          The RFC 2822 date and time in GMT when the resource was created\n * @property {Date} dateUpdated -\n *          The RFC 2822 date and time in GMT when the resource was last updated\n * @property {string} apnCredentialSid -\n *          The SID of the Credential to use for APN Bindings\n * @property {string} gcmCredentialSid -\n *          The SID of the Credential to use for GCM Bindings\n * @property {string} fcmCredentialSid -\n *          The SID of the Credential to use for FCM Bindings\n * @property {string} messagingServiceSid -\n *          The SID of the Messaging Service to use for SMS Bindings\n * @property {string} facebookMessengerPageId - Deprecated\n * @property {string} defaultApnNotificationProtocolVersion -\n *          The protocol version to use for sending APNS notifications\n * @property {string} defaultGcmNotificationProtocolVersion -\n *          The protocol version to use for sending GCM notifications\n * @property {string} defaultFcmNotificationProtocolVersion -\n *          The protocol version to use for sending FCM notifications\n * @property {boolean} logEnabled - Whether to log notifications\n * @property {string} url - The absolute URL of the Service resource\n * @property {string} links - The URLs of the resources related to the service\n * @property {string} alexaSkillId - Deprecated\n * @property {string} defaultAlexaNotificationProtocolVersion - Deprecated\n * @property {string} deliveryCallbackUrl - Webhook URL\n * @property {boolean} deliveryCallbackEnabled - Enable delivery callbacks\n *\n * @param {V1} version - Version of the resource\n * @param {ServicePayload} payload - The instance payload\n * @param {sid} sid - The unique string that identifies the resource\n */\n\n/* jshint ignore:end */\n\n\nServiceInstance = function ServiceInstance(version, payload, sid) {\n  this._version = version; // Marshaled Properties\n\n  this.sid = payload.sid; // jshint ignore:line\n\n  this.accountSid = payload.account_sid; // jshint ignore:line\n\n  this.friendlyName = payload.friendly_name; // jshint ignore:line\n\n  this.dateCreated = deserialize.iso8601DateTime(payload.date_created); // jshint ignore:line\n\n  this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated); // jshint ignore:line\n\n  this.apnCredentialSid = payload.apn_credential_sid; // jshint ignore:line\n\n  this.gcmCredentialSid = payload.gcm_credential_sid; // jshint ignore:line\n\n  this.fcmCredentialSid = payload.fcm_credential_sid; // jshint ignore:line\n\n  this.messagingServiceSid = payload.messaging_service_sid; // jshint ignore:line\n\n  this.facebookMessengerPageId = payload.facebook_messenger_page_id; // jshint ignore:line\n\n  this.defaultApnNotificationProtocolVersion = payload.default_apn_notification_protocol_version; // jshint ignore:line\n\n  this.defaultGcmNotificationProtocolVersion = payload.default_gcm_notification_protocol_version; // jshint ignore:line\n\n  this.defaultFcmNotificationProtocolVersion = payload.default_fcm_notification_protocol_version; // jshint ignore:line\n\n  this.logEnabled = payload.log_enabled; // jshint ignore:line\n\n  this.url = payload.url; // jshint ignore:line\n\n  this.links = payload.links; // jshint ignore:line\n\n  this.alexaSkillId = payload.alexa_skill_id; // jshint ignore:line\n\n  this.defaultAlexaNotificationProtocolVersion = payload.default_alexa_notification_protocol_version; // jshint ignore:line\n\n  this.deliveryCallbackUrl = payload.delivery_callback_url; // jshint ignore:line\n\n  this.deliveryCallbackEnabled = payload.delivery_callback_enabled; // jshint ignore:line\n  // Context\n\n  this._context = undefined;\n  this._solution = {\n    sid: sid || this.sid\n  };\n};\n\nObject.defineProperty(ServiceInstance.prototype, '_proxy', {\n  get: function () {\n    if (!this._context) {\n      this._context = new ServiceContext(this._version, this._solution.sid);\n    }\n\n    return this._context;\n  }\n});\n/* jshint ignore:start */\n\n/**\n * remove a ServiceInstance\n *\n * @function remove\n * @memberof Twilio.Notify.V1.ServiceInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed ServiceInstance\n */\n\n/* jshint ignore:end */\n\nServiceInstance.prototype.remove = function remove(callback) {\n  return this._proxy.remove(callback);\n};\n/* jshint ignore:start */\n\n/**\n * fetch a ServiceInstance\n *\n * @function fetch\n * @memberof Twilio.Notify.V1.ServiceInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed ServiceInstance\n */\n\n/* jshint ignore:end */\n\n\nServiceInstance.prototype.fetch = function fetch(callback) {\n  return this._proxy.fetch(callback);\n};\n/* jshint ignore:start */\n\n/**\n * update a ServiceInstance\n *\n * @function update\n * @memberof Twilio.Notify.V1.ServiceInstance#\n *\n * @param {object} [opts] - Options for request\n * @param {string} [opts.friendlyName] - A string to describe the resource\n * @param {string} [opts.apnCredentialSid] -\n *          The SID of the Credential to use for APN Bindings\n * @param {string} [opts.gcmCredentialSid] -\n *          The SID of the Credential to use for GCM Bindings\n * @param {string} [opts.messagingServiceSid] -\n *          The SID of the Messaging Service to use for SMS Bindings\n * @param {string} [opts.facebookMessengerPageId] - Deprecated\n * @param {string} [opts.defaultApnNotificationProtocolVersion] -\n *          The protocol version to use for sending APNS notifications\n * @param {string} [opts.defaultGcmNotificationProtocolVersion] -\n *          The protocol version to use for sending GCM notifications\n * @param {string} [opts.fcmCredentialSid] -\n *          The SID of the Credential to use for FCM Bindings\n * @param {string} [opts.defaultFcmNotificationProtocolVersion] -\n *          The protocol version to use for sending FCM notifications\n * @param {boolean} [opts.logEnabled] - Whether to log notifications\n * @param {string} [opts.alexaSkillId] - Deprecated\n * @param {string} [opts.defaultAlexaNotificationProtocolVersion] - Deprecated\n * @param {string} [opts.deliveryCallbackUrl] - Webhook URL\n * @param {boolean} [opts.deliveryCallbackEnabled] - Enable delivery callbacks\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed ServiceInstance\n */\n\n/* jshint ignore:end */\n\n\nServiceInstance.prototype.update = function update(opts, callback) {\n  return this._proxy.update(opts, callback);\n};\n/* jshint ignore:start */\n\n/**\n * Access the bindings\n *\n * @function bindings\n * @memberof Twilio.Notify.V1.ServiceInstance#\n *\n * @returns {Twilio.Notify.V1.ServiceContext.BindingList}\n */\n\n/* jshint ignore:end */\n\n\nServiceInstance.prototype.bindings = function bindings() {\n  return this._proxy.bindings;\n};\n/* jshint ignore:start */\n\n/**\n * Access the notifications\n *\n * @function notifications\n * @memberof Twilio.Notify.V1.ServiceInstance#\n *\n * @returns {Twilio.Notify.V1.ServiceContext.NotificationList}\n */\n\n/* jshint ignore:end */\n\n\nServiceInstance.prototype.notifications = function notifications() {\n  return this._proxy.notifications;\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Notify.V1.ServiceInstance#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nServiceInstance.prototype.toJSON = function toJSON() {\n  let clone = {};\n\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n\n  return clone;\n};\n\nServiceInstance.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the ServiceContext\n *\n * PLEASE NOTE that this class contains beta products that are subject to change.\n * Use them with caution.\n *\n * @constructor Twilio.Notify.V1.ServiceContext\n *\n * @property {Twilio.Notify.V1.ServiceContext.BindingList} bindings -\n *          bindings resource\n * @property {Twilio.Notify.V1.ServiceContext.NotificationList} notifications -\n *          notifications resource\n *\n * @param {V1} version - Version of the resource\n * @param {sid} sid - The unique string that identifies the resource\n */\n\n/* jshint ignore:end */\n\n\nServiceContext = function ServiceContext(version, sid) {\n  this._version = version; // Path Solution\n\n  this._solution = {\n    sid: sid\n  };\n  this._uri = `/Services/${sid}`; // Dependents\n\n  this._bindings = undefined;\n  this._notifications = undefined;\n};\n/* jshint ignore:start */\n\n/**\n * remove a ServiceInstance\n *\n * @function remove\n * @memberof Twilio.Notify.V1.ServiceContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed ServiceInstance\n */\n\n/* jshint ignore:end */\n\n\nServiceContext.prototype.remove = function remove(callback) {\n  var deferred = Q.defer();\n\n  var promise = this._version.remove({\n    uri: this._uri,\n    method: 'DELETE'\n  });\n\n  promise = promise.then(function (payload) {\n    deferred.resolve(payload);\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n/* jshint ignore:start */\n\n/**\n * fetch a ServiceInstance\n *\n * @function fetch\n * @memberof Twilio.Notify.V1.ServiceContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed ServiceInstance\n */\n\n/* jshint ignore:end */\n\n\nServiceContext.prototype.fetch = function fetch(callback) {\n  var deferred = Q.defer();\n\n  var promise = this._version.fetch({\n    uri: this._uri,\n    method: 'GET'\n  });\n\n  promise = promise.then(function (payload) {\n    deferred.resolve(new ServiceInstance(this._version, payload, this._solution.sid));\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n/* jshint ignore:start */\n\n/**\n * update a ServiceInstance\n *\n * @function update\n * @memberof Twilio.Notify.V1.ServiceContext#\n *\n * @param {object} [opts] - Options for request\n * @param {string} [opts.friendlyName] - A string to describe the resource\n * @param {string} [opts.apnCredentialSid] -\n *          The SID of the Credential to use for APN Bindings\n * @param {string} [opts.gcmCredentialSid] -\n *          The SID of the Credential to use for GCM Bindings\n * @param {string} [opts.messagingServiceSid] -\n *          The SID of the Messaging Service to use for SMS Bindings\n * @param {string} [opts.facebookMessengerPageId] - Deprecated\n * @param {string} [opts.defaultApnNotificationProtocolVersion] -\n *          The protocol version to use for sending APNS notifications\n * @param {string} [opts.defaultGcmNotificationProtocolVersion] -\n *          The protocol version to use for sending GCM notifications\n * @param {string} [opts.fcmCredentialSid] -\n *          The SID of the Credential to use for FCM Bindings\n * @param {string} [opts.defaultFcmNotificationProtocolVersion] -\n *          The protocol version to use for sending FCM notifications\n * @param {boolean} [opts.logEnabled] - Whether to log notifications\n * @param {string} [opts.alexaSkillId] - Deprecated\n * @param {string} [opts.defaultAlexaNotificationProtocolVersion] - Deprecated\n * @param {string} [opts.deliveryCallbackUrl] - Webhook URL\n * @param {boolean} [opts.deliveryCallbackEnabled] - Enable delivery callbacks\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed ServiceInstance\n */\n\n/* jshint ignore:end */\n\n\nServiceContext.prototype.update = function update(opts, callback) {\n  if (_.isFunction(opts)) {\n    callback = opts;\n    opts = {};\n  }\n\n  opts = opts || {};\n  var deferred = Q.defer();\n  var data = values.of({\n    'FriendlyName': _.get(opts, 'friendlyName'),\n    'ApnCredentialSid': _.get(opts, 'apnCredentialSid'),\n    'GcmCredentialSid': _.get(opts, 'gcmCredentialSid'),\n    'MessagingServiceSid': _.get(opts, 'messagingServiceSid'),\n    'FacebookMessengerPageId': _.get(opts, 'facebookMessengerPageId'),\n    'DefaultApnNotificationProtocolVersion': _.get(opts, 'defaultApnNotificationProtocolVersion'),\n    'DefaultGcmNotificationProtocolVersion': _.get(opts, 'defaultGcmNotificationProtocolVersion'),\n    'FcmCredentialSid': _.get(opts, 'fcmCredentialSid'),\n    'DefaultFcmNotificationProtocolVersion': _.get(opts, 'defaultFcmNotificationProtocolVersion'),\n    'LogEnabled': serialize.bool(_.get(opts, 'logEnabled')),\n    'AlexaSkillId': _.get(opts, 'alexaSkillId'),\n    'DefaultAlexaNotificationProtocolVersion': _.get(opts, 'defaultAlexaNotificationProtocolVersion'),\n    'DeliveryCallbackUrl': _.get(opts, 'deliveryCallbackUrl'),\n    'DeliveryCallbackEnabled': serialize.bool(_.get(opts, 'deliveryCallbackEnabled'))\n  });\n\n  var promise = this._version.update({\n    uri: this._uri,\n    method: 'POST',\n    data: data\n  });\n\n  promise = promise.then(function (payload) {\n    deferred.resolve(new ServiceInstance(this._version, payload, this._solution.sid));\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\nObject.defineProperty(ServiceContext.prototype, 'bindings', {\n  get: function () {\n    if (!this._bindings) {\n      this._bindings = new BindingList(this._version, this._solution.sid);\n    }\n\n    return this._bindings;\n  }\n});\nObject.defineProperty(ServiceContext.prototype, 'notifications', {\n  get: function () {\n    if (!this._notifications) {\n      this._notifications = new NotificationList(this._version, this._solution.sid);\n    }\n\n    return this._notifications;\n  }\n});\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Notify.V1.ServiceContext#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\nServiceContext.prototype.toJSON = function toJSON() {\n  return this._solution;\n};\n\nServiceContext.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\nmodule.exports = {\n  ServiceList: ServiceList,\n  ServicePage: ServicePage,\n  ServiceInstance: ServiceInstance,\n  ServiceContext: ServiceContext\n};","map":{"version":3,"names":["Q","require","_","util","BindingList","NotificationList","Page","deserialize","serialize","values","ServiceList","ServicePage","ServiceInstance","ServiceContext","version","ServiceListInstance","sid","get","_version","_solution","_uri","create","opts","callback","isFunction","deferred","defer","data","of","bool","promise","uri","method","then","payload","resolve","bind","catch","error","reject","nodeify","each","isUndefined","Error","done","currentPage","currentResource","limits","readLimits","limit","pageSize","onComplete","fetchNextPage","fn","page","instances","instance","nextPage","merge","list","allResources","resource","push","length","pageToken","pageNumber","params","getPage","targetUrl","_domain","twilio","request","toJSON","inspect","custom","depth","options","response","solution","prototype","constructor","call","extend","getInstance","clone","forOwn","value","key","startsWith","accountSid","account_sid","friendlyName","friendly_name","dateCreated","iso8601DateTime","date_created","dateUpdated","date_updated","apnCredentialSid","apn_credential_sid","gcmCredentialSid","gcm_credential_sid","fcmCredentialSid","fcm_credential_sid","messagingServiceSid","messaging_service_sid","facebookMessengerPageId","facebook_messenger_page_id","defaultApnNotificationProtocolVersion","default_apn_notification_protocol_version","defaultGcmNotificationProtocolVersion","default_gcm_notification_protocol_version","defaultFcmNotificationProtocolVersion","default_fcm_notification_protocol_version","logEnabled","log_enabled","url","links","alexaSkillId","alexa_skill_id","defaultAlexaNotificationProtocolVersion","default_alexa_notification_protocol_version","deliveryCallbackUrl","delivery_callback_url","deliveryCallbackEnabled","delivery_callback_enabled","_context","undefined","Object","defineProperty","remove","_proxy","fetch","update","bindings","notifications","_bindings","_notifications","module","exports"],"sources":["/Users/hooniesun/rmit/fwp/assessment1/lan/node_modules/twilio/lib/rest/notify/v1/service.js"],"sourcesContent":["'use strict';\n\n/* jshint ignore:start */\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n/* jshint ignore:end */\n\nvar Q = require('q');  /* jshint ignore:line */\nvar _ = require('lodash');  /* jshint ignore:line */\nvar util = require('util');  /* jshint ignore:line */\nvar BindingList = require('./service/binding').BindingList;\nvar NotificationList = require('./service/notification').NotificationList;\nvar Page = require('../../../base/Page');  /* jshint ignore:line */\nvar deserialize = require(\n    '../../../base/deserialize');  /* jshint ignore:line */\nvar serialize = require('../../../base/serialize');  /* jshint ignore:line */\nvar values = require('../../../base/values');  /* jshint ignore:line */\n\nvar ServiceList;\nvar ServicePage;\nvar ServiceInstance;\nvar ServiceContext;\n\n/* jshint ignore:start */\n/**\n * Initialize the ServiceList\n *\n * PLEASE NOTE that this class contains beta products that are subject to change.\n * Use them with caution.\n *\n * @constructor Twilio.Notify.V1.ServiceList\n *\n * @param {Twilio.Notify.V1} version - Version of the resource\n */\n/* jshint ignore:end */\nServiceList = function ServiceList(version) {\n  /* jshint ignore:start */\n  /**\n   * @function services\n   * @memberof Twilio.Notify.V1#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Notify.V1.ServiceContext}\n   */\n  /* jshint ignore:end */\n  function ServiceListInstance(sid) {\n    return ServiceListInstance.get(sid);\n  }\n\n  ServiceListInstance._version = version;\n  // Path Solution\n  ServiceListInstance._solution = {};\n  ServiceListInstance._uri = `/Services`;\n  /* jshint ignore:start */\n  /**\n   * create a ServiceInstance\n   *\n   * @function create\n   * @memberof Twilio.Notify.V1.ServiceList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.friendlyName] - A string to describe the resource\n   * @param {string} [opts.apnCredentialSid] -\n   *          The SID of the Credential to use for APN Bindings\n   * @param {string} [opts.gcmCredentialSid] -\n   *          The SID of the Credential to use for GCM Bindings\n   * @param {string} [opts.messagingServiceSid] -\n   *          The SID of the Messaging Service to use for SMS Bindings\n   * @param {string} [opts.facebookMessengerPageId] - Deprecated\n   * @param {string} [opts.defaultApnNotificationProtocolVersion] -\n   *          The protocol version to use for sending APNS notifications\n   * @param {string} [opts.defaultGcmNotificationProtocolVersion] -\n   *          The protocol version to use for sending GCM notifications\n   * @param {string} [opts.fcmCredentialSid] -\n   *          The SID of the Credential to use for FCM Bindings\n   * @param {string} [opts.defaultFcmNotificationProtocolVersion] -\n   *          The protocol version to use for sending FCM notifications\n   * @param {boolean} [opts.logEnabled] - Whether to log notifications\n   * @param {string} [opts.alexaSkillId] - Deprecated\n   * @param {string} [opts.defaultAlexaNotificationProtocolVersion] - Deprecated\n   * @param {string} [opts.deliveryCallbackUrl] - Webhook URL\n   * @param {boolean} [opts.deliveryCallbackEnabled] - Enable delivery callbacks\n   * @param {function} [callback] - Callback to handle processed record\n   *\n   * @returns {Promise} Resolves to processed ServiceInstance\n   */\n  /* jshint ignore:end */\n  ServiceListInstance.create = function create(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n\n    var deferred = Q.defer();\n    var data = values.of({\n      'FriendlyName': _.get(opts, 'friendlyName'),\n      'ApnCredentialSid': _.get(opts, 'apnCredentialSid'),\n      'GcmCredentialSid': _.get(opts, 'gcmCredentialSid'),\n      'MessagingServiceSid': _.get(opts, 'messagingServiceSid'),\n      'FacebookMessengerPageId': _.get(opts, 'facebookMessengerPageId'),\n      'DefaultApnNotificationProtocolVersion': _.get(opts, 'defaultApnNotificationProtocolVersion'),\n      'DefaultGcmNotificationProtocolVersion': _.get(opts, 'defaultGcmNotificationProtocolVersion'),\n      'FcmCredentialSid': _.get(opts, 'fcmCredentialSid'),\n      'DefaultFcmNotificationProtocolVersion': _.get(opts, 'defaultFcmNotificationProtocolVersion'),\n      'LogEnabled': serialize.bool(_.get(opts, 'logEnabled')),\n      'AlexaSkillId': _.get(opts, 'alexaSkillId'),\n      'DefaultAlexaNotificationProtocolVersion': _.get(opts, 'defaultAlexaNotificationProtocolVersion'),\n      'DeliveryCallbackUrl': _.get(opts, 'deliveryCallbackUrl'),\n      'DeliveryCallbackEnabled': serialize.bool(_.get(opts, 'deliveryCallbackEnabled'))\n    });\n\n    var promise = this._version.create({uri: this._uri, method: 'POST', data: data});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new ServiceInstance(this._version, payload, this._solution.sid));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Streams ServiceInstance records from the API.\n   *\n   * This operation lazily loads records as efficiently as possible until the limit\n   * is reached.\n   *\n   * The results are passed into the callback function, so this operation is memory\n   * efficient.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function each\n   * @memberof Twilio.Notify.V1.ServiceList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.friendlyName] -\n   *          The string that identifies the Service resources to read\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         each() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no pageSize is defined but a limit is defined,\n   *         each() will attempt to read the limit with the most efficient\n   *         page size, i.e. min(limit, 1000)\n   * @param {Function} [opts.callback] -\n   *         Function to process each record. If this and a positional\n   *         callback are passed, this one will be used\n   * @param {Function} [opts.done] -\n   *          Function to be called upon completion of streaming\n   * @param {Function} [callback] - Function to process each record\n   */\n  /* jshint ignore:end */\n  ServiceListInstance.each = function each(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    if (opts.callback) {\n      callback = opts.callback;\n    }\n    if (_.isUndefined(callback)) {\n      throw new Error('Callback function must be provided');\n    }\n\n    var done = false;\n    var currentPage = 1;\n    var currentResource = 0;\n    var limits = this._version.readLimits({\n      limit: opts.limit,\n      pageSize: opts.pageSize\n    });\n\n    function onComplete(error) {\n      done = true;\n      if (_.isFunction(opts.done)) {\n        opts.done(error);\n      }\n    }\n\n    function fetchNextPage(fn) {\n      var promise = fn();\n      if (_.isUndefined(promise)) {\n        onComplete();\n        return;\n      }\n\n      promise.then(function(page) {\n        _.each(page.instances, function(instance) {\n          if (done || (!_.isUndefined(opts.limit) && currentResource >= opts.limit)) {\n            done = true;\n            return false;\n          }\n\n          currentResource++;\n          callback(instance, onComplete);\n        });\n\n        if (!done) {\n          currentPage++;\n          fetchNextPage(_.bind(page.nextPage, page));\n        } else {\n          onComplete();\n        }\n      });\n\n      promise.catch(onComplete);\n    }\n\n    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Lists ServiceInstance records from the API as a list.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function list\n   * @memberof Twilio.Notify.V1.ServiceList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.friendlyName] -\n   *          The string that identifies the Service resources to read\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         list() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no page_size is defined but a limit is defined,\n   *         list() will attempt to read the limit with the most\n   *         efficient page size, i.e. min(limit, 1000)\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  ServiceListInstance.list = function list(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    var deferred = Q.defer();\n    var allResources = [];\n    opts.callback = function(resource, done) {\n      allResources.push(resource);\n\n      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {\n        done();\n      }\n    };\n\n    opts.done = function(error) {\n      if (_.isUndefined(error)) {\n        deferred.resolve(allResources);\n      } else {\n        deferred.reject(error);\n      }\n    };\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    this.each(opts);\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single page of ServiceInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function page\n   * @memberof Twilio.Notify.V1.ServiceList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.friendlyName] -\n   *          The string that identifies the Service resources to read\n   * @param {string} [opts.pageToken] - PageToken provided by the API\n   * @param {number} [opts.pageNumber] -\n   *          Page Number, this value is simply for client state\n   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  ServiceListInstance.page = function page(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n\n    var deferred = Q.defer();\n    var data = values.of({\n      'FriendlyName': _.get(opts, 'friendlyName'),\n      'PageToken': opts.pageToken,\n      'Page': opts.pageNumber,\n      'PageSize': opts.pageSize\n    });\n\n    var promise = this._version.page({uri: this._uri, method: 'GET', params: data});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new ServicePage(this._version, payload, this._solution));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single target page of ServiceInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function getPage\n   * @memberof Twilio.Notify.V1.ServiceList#\n   *\n   * @param {string} [targetUrl] - API-generated URL for the requested results page\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  ServiceListInstance.getPage = function getPage(targetUrl, callback) {\n    var deferred = Q.defer();\n\n    var promise = this._version._domain.twilio.request({method: 'GET', uri: targetUrl});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new ServicePage(this._version, payload, this._solution));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Constructs a service\n   *\n   * @function get\n   * @memberof Twilio.Notify.V1.ServiceList#\n   *\n   * @param {string} sid - The unique string that identifies the resource\n   *\n   * @returns {Twilio.Notify.V1.ServiceContext}\n   */\n  /* jshint ignore:end */\n  ServiceListInstance.get = function get(sid) {\n    return new ServiceContext(this._version, sid);\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Notify.V1.ServiceList#\n   *\n   * @returns Object\n   */\n  /* jshint ignore:end */\n  ServiceListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n\n  ServiceListInstance[util.inspect.custom] = function inspect(depth, options) {\n    return util.inspect(this.toJSON(), options);\n  };\n\n  return ServiceListInstance;\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the ServicePage\n *\n * PLEASE NOTE that this class contains beta products that are subject to change.\n * Use them with caution.\n *\n * @constructor Twilio.Notify.V1.ServicePage\n *\n * @param {V1} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {ServiceSolution} solution - Path solution\n *\n * @returns ServicePage\n */\n/* jshint ignore:end */\nServicePage = function ServicePage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n\n_.extend(ServicePage.prototype, Page.prototype);\nServicePage.prototype.constructor = ServicePage;\n\n/* jshint ignore:start */\n/**\n * Build an instance of ServiceInstance\n *\n * @function getInstance\n * @memberof Twilio.Notify.V1.ServicePage#\n *\n * @param {ServicePayload} payload - Payload response from the API\n *\n * @returns ServiceInstance\n */\n/* jshint ignore:end */\nServicePage.prototype.getInstance = function getInstance(payload) {\n  return new ServiceInstance(this._version, payload);\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Notify.V1.ServicePage#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nServicePage.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function(value, key) {\n    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\n\nServicePage.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the ServiceContext\n *\n * PLEASE NOTE that this class contains beta products that are subject to change.\n * Use them with caution.\n *\n * @constructor Twilio.Notify.V1.ServiceInstance\n *\n * @property {string} sid - The unique string that identifies the resource\n * @property {string} accountSid - The SID of the Account that created the resource\n * @property {string} friendlyName -\n *          The string that you assigned to describe the resource\n * @property {Date} dateCreated -\n *          The RFC 2822 date and time in GMT when the resource was created\n * @property {Date} dateUpdated -\n *          The RFC 2822 date and time in GMT when the resource was last updated\n * @property {string} apnCredentialSid -\n *          The SID of the Credential to use for APN Bindings\n * @property {string} gcmCredentialSid -\n *          The SID of the Credential to use for GCM Bindings\n * @property {string} fcmCredentialSid -\n *          The SID of the Credential to use for FCM Bindings\n * @property {string} messagingServiceSid -\n *          The SID of the Messaging Service to use for SMS Bindings\n * @property {string} facebookMessengerPageId - Deprecated\n * @property {string} defaultApnNotificationProtocolVersion -\n *          The protocol version to use for sending APNS notifications\n * @property {string} defaultGcmNotificationProtocolVersion -\n *          The protocol version to use for sending GCM notifications\n * @property {string} defaultFcmNotificationProtocolVersion -\n *          The protocol version to use for sending FCM notifications\n * @property {boolean} logEnabled - Whether to log notifications\n * @property {string} url - The absolute URL of the Service resource\n * @property {string} links - The URLs of the resources related to the service\n * @property {string} alexaSkillId - Deprecated\n * @property {string} defaultAlexaNotificationProtocolVersion - Deprecated\n * @property {string} deliveryCallbackUrl - Webhook URL\n * @property {boolean} deliveryCallbackEnabled - Enable delivery callbacks\n *\n * @param {V1} version - Version of the resource\n * @param {ServicePayload} payload - The instance payload\n * @param {sid} sid - The unique string that identifies the resource\n */\n/* jshint ignore:end */\nServiceInstance = function ServiceInstance(version, payload, sid) {\n  this._version = version;\n\n  // Marshaled Properties\n  this.sid = payload.sid; // jshint ignore:line\n  this.accountSid = payload.account_sid; // jshint ignore:line\n  this.friendlyName = payload.friendly_name; // jshint ignore:line\n  this.dateCreated = deserialize.iso8601DateTime(payload.date_created); // jshint ignore:line\n  this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated); // jshint ignore:line\n  this.apnCredentialSid = payload.apn_credential_sid; // jshint ignore:line\n  this.gcmCredentialSid = payload.gcm_credential_sid; // jshint ignore:line\n  this.fcmCredentialSid = payload.fcm_credential_sid; // jshint ignore:line\n  this.messagingServiceSid = payload.messaging_service_sid; // jshint ignore:line\n  this.facebookMessengerPageId = payload.facebook_messenger_page_id; // jshint ignore:line\n  this.defaultApnNotificationProtocolVersion = payload.default_apn_notification_protocol_version; // jshint ignore:line\n  this.defaultGcmNotificationProtocolVersion = payload.default_gcm_notification_protocol_version; // jshint ignore:line\n  this.defaultFcmNotificationProtocolVersion = payload.default_fcm_notification_protocol_version; // jshint ignore:line\n  this.logEnabled = payload.log_enabled; // jshint ignore:line\n  this.url = payload.url; // jshint ignore:line\n  this.links = payload.links; // jshint ignore:line\n  this.alexaSkillId = payload.alexa_skill_id; // jshint ignore:line\n  this.defaultAlexaNotificationProtocolVersion = payload.default_alexa_notification_protocol_version; // jshint ignore:line\n  this.deliveryCallbackUrl = payload.delivery_callback_url; // jshint ignore:line\n  this.deliveryCallbackEnabled = payload.delivery_callback_enabled; // jshint ignore:line\n\n  // Context\n  this._context = undefined;\n  this._solution = {sid: sid || this.sid, };\n};\n\nObject.defineProperty(ServiceInstance.prototype,\n  '_proxy', {\n    get: function() {\n      if (!this._context) {\n        this._context = new ServiceContext(this._version, this._solution.sid);\n      }\n\n      return this._context;\n    }\n});\n\n/* jshint ignore:start */\n/**\n * remove a ServiceInstance\n *\n * @function remove\n * @memberof Twilio.Notify.V1.ServiceInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed ServiceInstance\n */\n/* jshint ignore:end */\nServiceInstance.prototype.remove = function remove(callback) {\n  return this._proxy.remove(callback);\n};\n\n/* jshint ignore:start */\n/**\n * fetch a ServiceInstance\n *\n * @function fetch\n * @memberof Twilio.Notify.V1.ServiceInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed ServiceInstance\n */\n/* jshint ignore:end */\nServiceInstance.prototype.fetch = function fetch(callback) {\n  return this._proxy.fetch(callback);\n};\n\n/* jshint ignore:start */\n/**\n * update a ServiceInstance\n *\n * @function update\n * @memberof Twilio.Notify.V1.ServiceInstance#\n *\n * @param {object} [opts] - Options for request\n * @param {string} [opts.friendlyName] - A string to describe the resource\n * @param {string} [opts.apnCredentialSid] -\n *          The SID of the Credential to use for APN Bindings\n * @param {string} [opts.gcmCredentialSid] -\n *          The SID of the Credential to use for GCM Bindings\n * @param {string} [opts.messagingServiceSid] -\n *          The SID of the Messaging Service to use for SMS Bindings\n * @param {string} [opts.facebookMessengerPageId] - Deprecated\n * @param {string} [opts.defaultApnNotificationProtocolVersion] -\n *          The protocol version to use for sending APNS notifications\n * @param {string} [opts.defaultGcmNotificationProtocolVersion] -\n *          The protocol version to use for sending GCM notifications\n * @param {string} [opts.fcmCredentialSid] -\n *          The SID of the Credential to use for FCM Bindings\n * @param {string} [opts.defaultFcmNotificationProtocolVersion] -\n *          The protocol version to use for sending FCM notifications\n * @param {boolean} [opts.logEnabled] - Whether to log notifications\n * @param {string} [opts.alexaSkillId] - Deprecated\n * @param {string} [opts.defaultAlexaNotificationProtocolVersion] - Deprecated\n * @param {string} [opts.deliveryCallbackUrl] - Webhook URL\n * @param {boolean} [opts.deliveryCallbackEnabled] - Enable delivery callbacks\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed ServiceInstance\n */\n/* jshint ignore:end */\nServiceInstance.prototype.update = function update(opts, callback) {\n  return this._proxy.update(opts, callback);\n};\n\n/* jshint ignore:start */\n/**\n * Access the bindings\n *\n * @function bindings\n * @memberof Twilio.Notify.V1.ServiceInstance#\n *\n * @returns {Twilio.Notify.V1.ServiceContext.BindingList}\n */\n/* jshint ignore:end */\nServiceInstance.prototype.bindings = function bindings() {\n  return this._proxy.bindings;\n};\n\n/* jshint ignore:start */\n/**\n * Access the notifications\n *\n * @function notifications\n * @memberof Twilio.Notify.V1.ServiceInstance#\n *\n * @returns {Twilio.Notify.V1.ServiceContext.NotificationList}\n */\n/* jshint ignore:end */\nServiceInstance.prototype.notifications = function notifications() {\n  return this._proxy.notifications;\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Notify.V1.ServiceInstance#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nServiceInstance.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function(value, key) {\n    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\n\nServiceInstance.prototype[util.inspect.custom] = function inspect(depth,\n    options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the ServiceContext\n *\n * PLEASE NOTE that this class contains beta products that are subject to change.\n * Use them with caution.\n *\n * @constructor Twilio.Notify.V1.ServiceContext\n *\n * @property {Twilio.Notify.V1.ServiceContext.BindingList} bindings -\n *          bindings resource\n * @property {Twilio.Notify.V1.ServiceContext.NotificationList} notifications -\n *          notifications resource\n *\n * @param {V1} version - Version of the resource\n * @param {sid} sid - The unique string that identifies the resource\n */\n/* jshint ignore:end */\nServiceContext = function ServiceContext(version, sid) {\n  this._version = version;\n\n  // Path Solution\n  this._solution = {sid: sid, };\n  this._uri = `/Services/${sid}`;\n\n  // Dependents\n  this._bindings = undefined;\n  this._notifications = undefined;\n};\n\n/* jshint ignore:start */\n/**\n * remove a ServiceInstance\n *\n * @function remove\n * @memberof Twilio.Notify.V1.ServiceContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed ServiceInstance\n */\n/* jshint ignore:end */\nServiceContext.prototype.remove = function remove(callback) {\n  var deferred = Q.defer();\n  var promise = this._version.remove({uri: this._uri, method: 'DELETE'});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(payload);\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * fetch a ServiceInstance\n *\n * @function fetch\n * @memberof Twilio.Notify.V1.ServiceContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed ServiceInstance\n */\n/* jshint ignore:end */\nServiceContext.prototype.fetch = function fetch(callback) {\n  var deferred = Q.defer();\n  var promise = this._version.fetch({uri: this._uri, method: 'GET'});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(new ServiceInstance(this._version, payload, this._solution.sid));\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * update a ServiceInstance\n *\n * @function update\n * @memberof Twilio.Notify.V1.ServiceContext#\n *\n * @param {object} [opts] - Options for request\n * @param {string} [opts.friendlyName] - A string to describe the resource\n * @param {string} [opts.apnCredentialSid] -\n *          The SID of the Credential to use for APN Bindings\n * @param {string} [opts.gcmCredentialSid] -\n *          The SID of the Credential to use for GCM Bindings\n * @param {string} [opts.messagingServiceSid] -\n *          The SID of the Messaging Service to use for SMS Bindings\n * @param {string} [opts.facebookMessengerPageId] - Deprecated\n * @param {string} [opts.defaultApnNotificationProtocolVersion] -\n *          The protocol version to use for sending APNS notifications\n * @param {string} [opts.defaultGcmNotificationProtocolVersion] -\n *          The protocol version to use for sending GCM notifications\n * @param {string} [opts.fcmCredentialSid] -\n *          The SID of the Credential to use for FCM Bindings\n * @param {string} [opts.defaultFcmNotificationProtocolVersion] -\n *          The protocol version to use for sending FCM notifications\n * @param {boolean} [opts.logEnabled] - Whether to log notifications\n * @param {string} [opts.alexaSkillId] - Deprecated\n * @param {string} [opts.defaultAlexaNotificationProtocolVersion] - Deprecated\n * @param {string} [opts.deliveryCallbackUrl] - Webhook URL\n * @param {boolean} [opts.deliveryCallbackEnabled] - Enable delivery callbacks\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed ServiceInstance\n */\n/* jshint ignore:end */\nServiceContext.prototype.update = function update(opts, callback) {\n  if (_.isFunction(opts)) {\n    callback = opts;\n    opts = {};\n  }\n  opts = opts || {};\n\n  var deferred = Q.defer();\n  var data = values.of({\n    'FriendlyName': _.get(opts, 'friendlyName'),\n    'ApnCredentialSid': _.get(opts, 'apnCredentialSid'),\n    'GcmCredentialSid': _.get(opts, 'gcmCredentialSid'),\n    'MessagingServiceSid': _.get(opts, 'messagingServiceSid'),\n    'FacebookMessengerPageId': _.get(opts, 'facebookMessengerPageId'),\n    'DefaultApnNotificationProtocolVersion': _.get(opts, 'defaultApnNotificationProtocolVersion'),\n    'DefaultGcmNotificationProtocolVersion': _.get(opts, 'defaultGcmNotificationProtocolVersion'),\n    'FcmCredentialSid': _.get(opts, 'fcmCredentialSid'),\n    'DefaultFcmNotificationProtocolVersion': _.get(opts, 'defaultFcmNotificationProtocolVersion'),\n    'LogEnabled': serialize.bool(_.get(opts, 'logEnabled')),\n    'AlexaSkillId': _.get(opts, 'alexaSkillId'),\n    'DefaultAlexaNotificationProtocolVersion': _.get(opts, 'defaultAlexaNotificationProtocolVersion'),\n    'DeliveryCallbackUrl': _.get(opts, 'deliveryCallbackUrl'),\n    'DeliveryCallbackEnabled': serialize.bool(_.get(opts, 'deliveryCallbackEnabled'))\n  });\n\n  var promise = this._version.update({uri: this._uri, method: 'POST', data: data});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(new ServiceInstance(this._version, payload, this._solution.sid));\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\nObject.defineProperty(ServiceContext.prototype,\n  'bindings', {\n    get: function() {\n      if (!this._bindings) {\n        this._bindings = new BindingList(this._version, this._solution.sid);\n      }\n      return this._bindings;\n    }\n});\n\nObject.defineProperty(ServiceContext.prototype,\n  'notifications', {\n    get: function() {\n      if (!this._notifications) {\n        this._notifications = new NotificationList(this._version, this._solution.sid);\n      }\n      return this._notifications;\n    }\n});\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Notify.V1.ServiceContext#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nServiceContext.prototype.toJSON = function toJSON() {\n  return this._solution;\n};\n\nServiceContext.prototype[util.inspect.custom] = function inspect(depth, options)\n    {\n  return util.inspect(this.toJSON(), options);\n};\n\nmodule.exports = {\n  ServiceList: ServiceList,\n  ServicePage: ServicePage,\n  ServiceInstance: ServiceInstance,\n  ServiceContext: ServiceContext\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}