{"ast":null,"code":"'use strict';\n/* jshint ignore:start */\n\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n\n/* jshint ignore:end */\n\nvar Q = require('q');\n/* jshint ignore:line */\n\n\nvar _ = require('lodash');\n/* jshint ignore:line */\n\n\nvar util = require('util');\n/* jshint ignore:line */\n\n\nvar InteractionList = require('./session/interaction').InteractionList;\n\nvar Page = require('../../../../base/Page');\n/* jshint ignore:line */\n\n\nvar ParticipantList = require('./session/participant').ParticipantList;\n\nvar deserialize = require('../../../../base/deserialize');\n/* jshint ignore:line */\n\n\nvar serialize = require('../../../../base/serialize');\n/* jshint ignore:line */\n\n\nvar values = require('../../../../base/values');\n/* jshint ignore:line */\n\n\nvar SessionList;\nvar SessionPage;\nvar SessionInstance;\nvar SessionContext;\n/* jshint ignore:start */\n\n/**\n * Initialize the SessionList\n *\n * PLEASE NOTE that this class contains beta products that are subject to change.\n * Use them with caution.\n *\n * @constructor Twilio.Proxy.V1.ServiceContext.SessionList\n *\n * @param {Twilio.Proxy.V1} version - Version of the resource\n * @param {string} serviceSid - The SID of the resource's parent Service\n */\n\n/* jshint ignore:end */\n\nSessionList = function SessionList(version, serviceSid) {\n  /* jshint ignore:start */\n\n  /**\n   * @function sessions\n   * @memberof Twilio.Proxy.V1.ServiceContext#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Proxy.V1.ServiceContext.SessionContext}\n   */\n\n  /* jshint ignore:end */\n  function SessionListInstance(sid) {\n    return SessionListInstance.get(sid);\n  }\n\n  SessionListInstance._version = version; // Path Solution\n\n  SessionListInstance._solution = {\n    serviceSid: serviceSid\n  };\n  SessionListInstance._uri = `/Services/${serviceSid}/Sessions`;\n  /* jshint ignore:start */\n\n  /**\n   * Streams SessionInstance records from the API.\n   *\n   * This operation lazily loads records as efficiently as possible until the limit\n   * is reached.\n   *\n   * The results are passed into the callback function, so this operation is memory\n   * efficient.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function each\n   * @memberof Twilio.Proxy.V1.ServiceContext.SessionList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         each() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no pageSize is defined but a limit is defined,\n   *         each() will attempt to read the limit with the most efficient\n   *         page size, i.e. min(limit, 1000)\n   * @param {Function} [opts.callback] -\n   *         Function to process each record. If this and a positional\n   *         callback are passed, this one will be used\n   * @param {Function} [opts.done] -\n   *          Function to be called upon completion of streaming\n   * @param {Function} [callback] - Function to process each record\n   */\n\n  /* jshint ignore:end */\n\n  SessionListInstance.each = function each(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n\n    if (opts.callback) {\n      callback = opts.callback;\n    }\n\n    if (_.isUndefined(callback)) {\n      throw new Error('Callback function must be provided');\n    }\n\n    var done = false;\n    var currentPage = 1;\n    var currentResource = 0;\n\n    var limits = this._version.readLimits({\n      limit: opts.limit,\n      pageSize: opts.pageSize\n    });\n\n    function onComplete(error) {\n      done = true;\n\n      if (_.isFunction(opts.done)) {\n        opts.done(error);\n      }\n    }\n\n    function fetchNextPage(fn) {\n      var promise = fn();\n\n      if (_.isUndefined(promise)) {\n        onComplete();\n        return;\n      }\n\n      promise.then(function (page) {\n        _.each(page.instances, function (instance) {\n          if (done || !_.isUndefined(opts.limit) && currentResource >= opts.limit) {\n            done = true;\n            return false;\n          }\n\n          currentResource++;\n          callback(instance, onComplete);\n        });\n\n        if (!done) {\n          currentPage++;\n          fetchNextPage(_.bind(page.nextPage, page));\n        } else {\n          onComplete();\n        }\n      });\n      promise.catch(onComplete);\n    }\n\n    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Lists SessionInstance records from the API as a list.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function list\n   * @memberof Twilio.Proxy.V1.ServiceContext.SessionList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         list() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no page_size is defined but a limit is defined,\n   *         list() will attempt to read the limit with the most\n   *         efficient page size, i.e. min(limit, 1000)\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  SessionListInstance.list = function list(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n    var deferred = Q.defer();\n    var allResources = [];\n\n    opts.callback = function (resource, done) {\n      allResources.push(resource);\n\n      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {\n        done();\n      }\n    };\n\n    opts.done = function (error) {\n      if (_.isUndefined(error)) {\n        deferred.resolve(allResources);\n      } else {\n        deferred.reject(error);\n      }\n    };\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    this.each(opts);\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Retrieve a single page of SessionInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function page\n   * @memberof Twilio.Proxy.V1.ServiceContext.SessionList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.pageToken] - PageToken provided by the API\n   * @param {number} [opts.pageNumber] -\n   *          Page Number, this value is simply for client state\n   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  SessionListInstance.page = function page(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n    var deferred = Q.defer();\n    var data = values.of({\n      'PageToken': opts.pageToken,\n      'Page': opts.pageNumber,\n      'PageSize': opts.pageSize\n    });\n\n    var promise = this._version.page({\n      uri: this._uri,\n      method: 'GET',\n      params: data\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new SessionPage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Retrieve a single target page of SessionInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function getPage\n   * @memberof Twilio.Proxy.V1.ServiceContext.SessionList#\n   *\n   * @param {string} [targetUrl] - API-generated URL for the requested results page\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  SessionListInstance.getPage = function getPage(targetUrl, callback) {\n    var deferred = Q.defer();\n\n    var promise = this._version._domain.twilio.request({\n      method: 'GET',\n      uri: targetUrl\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new SessionPage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * create a SessionInstance\n   *\n   * @function create\n   * @memberof Twilio.Proxy.V1.ServiceContext.SessionList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.uniqueName] -\n   *          An application-defined string that uniquely identifies the resource\n   * @param {Date} [opts.dateExpiry] -\n   *          The ISO 8601 date when the Session should expire\n   * @param {number} [opts.ttl] - When the session will expire\n   * @param {session.mode} [opts.mode] - The Mode of the Session\n   * @param {session.status} [opts.status] - Session status\n   * @param {object|list} [opts.participants] -\n   *          The Participant objects to include in the new session\n   * @param {boolean} [opts.failOnParticipantConflict] -\n   *          An experimental parameter to override the ProxyAllowParticipantConflict account flag on a per-request basis.\n   * @param {function} [callback] - Callback to handle processed record\n   *\n   * @returns {Promise} Resolves to processed SessionInstance\n   */\n\n  /* jshint ignore:end */\n\n\n  SessionListInstance.create = function create(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n    var deferred = Q.defer();\n    var data = values.of({\n      'UniqueName': _.get(opts, 'uniqueName'),\n      'DateExpiry': serialize.iso8601DateTime(_.get(opts, 'dateExpiry')),\n      'Ttl': _.get(opts, 'ttl'),\n      'Mode': _.get(opts, 'mode'),\n      'Status': _.get(opts, 'status'),\n      'Participants': serialize.map(_.get(opts, 'participants'), function (e) {\n        return serialize.object(e);\n      }),\n      'FailOnParticipantConflict': serialize.bool(_.get(opts, 'failOnParticipantConflict'))\n    });\n\n    var promise = this._version.create({\n      uri: this._uri,\n      method: 'POST',\n      data: data\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new SessionInstance(this._version, payload, this._solution.serviceSid, this._solution.sid));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Constructs a session\n   *\n   * @function get\n   * @memberof Twilio.Proxy.V1.ServiceContext.SessionList#\n   *\n   * @param {string} sid - The unique string that identifies the resource\n   *\n   * @returns {Twilio.Proxy.V1.ServiceContext.SessionContext}\n   */\n\n  /* jshint ignore:end */\n\n\n  SessionListInstance.get = function get(sid) {\n    return new SessionContext(this._version, this._solution.serviceSid, sid);\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Proxy.V1.ServiceContext.SessionList#\n   *\n   * @returns Object\n   */\n\n  /* jshint ignore:end */\n\n\n  SessionListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n\n  SessionListInstance[util.inspect.custom] = function inspect(depth, options) {\n    return util.inspect(this.toJSON(), options);\n  };\n\n  return SessionListInstance;\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the SessionPage\n *\n * PLEASE NOTE that this class contains beta products that are subject to change.\n * Use them with caution.\n *\n * @constructor Twilio.Proxy.V1.ServiceContext.SessionPage\n *\n * @param {V1} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {SessionSolution} solution - Path solution\n *\n * @returns SessionPage\n */\n\n/* jshint ignore:end */\n\n\nSessionPage = function SessionPage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n\n_.extend(SessionPage.prototype, Page.prototype);\n\nSessionPage.prototype.constructor = SessionPage;\n/* jshint ignore:start */\n\n/**\n * Build an instance of SessionInstance\n *\n * @function getInstance\n * @memberof Twilio.Proxy.V1.ServiceContext.SessionPage#\n *\n * @param {SessionPayload} payload - Payload response from the API\n *\n * @returns SessionInstance\n */\n\n/* jshint ignore:end */\n\nSessionPage.prototype.getInstance = function getInstance(payload) {\n  return new SessionInstance(this._version, payload, this._solution.serviceSid);\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Proxy.V1.ServiceContext.SessionPage#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nSessionPage.prototype.toJSON = function toJSON() {\n  let clone = {};\n\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n\n  return clone;\n};\n\nSessionPage.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the SessionContext\n *\n * PLEASE NOTE that this class contains beta products that are subject to change.\n * Use them with caution.\n *\n * @constructor Twilio.Proxy.V1.ServiceContext.SessionInstance\n *\n * @property {string} sid - The unique string that identifies the resource\n * @property {string} serviceSid - The SID of the resource's parent Service\n * @property {string} accountSid - The SID of the Account that created the resource\n * @property {Date} dateStarted - The ISO 8601 date when the Session started\n * @property {Date} dateEnded - The ISO 8601 date when the Session ended\n * @property {Date} dateLastInteraction -\n *          The ISO 8601 date when the Session last had an interaction\n * @property {Date} dateExpiry - The ISO 8601 date when the Session should expire\n * @property {string} uniqueName -\n *          An application-defined string that uniquely identifies the resource\n * @property {session.status} status - The status of the Session\n * @property {string} closedReason - The reason the Session ended\n * @property {number} ttl - When the session will expire\n * @property {session.mode} mode - The Mode of the Session\n * @property {Date} dateCreated -\n *          The ISO 8601 date and time in GMT when the resource was created\n * @property {Date} dateUpdated -\n *          The ISO 8601 date and time in GMT when the resource was last updated\n * @property {string} url - The absolute URL of the Session resource\n * @property {string} links - The URLs of resources related to the Session\n *\n * @param {V1} version - Version of the resource\n * @param {SessionPayload} payload - The instance payload\n * @param {sid} serviceSid - The SID of the resource's parent Service\n * @param {sid_like} sid - The unique string that identifies the resource\n */\n\n/* jshint ignore:end */\n\n\nSessionInstance = function SessionInstance(version, payload, serviceSid, sid) {\n  this._version = version; // Marshaled Properties\n\n  this.sid = payload.sid; // jshint ignore:line\n\n  this.serviceSid = payload.service_sid; // jshint ignore:line\n\n  this.accountSid = payload.account_sid; // jshint ignore:line\n\n  this.dateStarted = deserialize.iso8601DateTime(payload.date_started); // jshint ignore:line\n\n  this.dateEnded = deserialize.iso8601DateTime(payload.date_ended); // jshint ignore:line\n\n  this.dateLastInteraction = deserialize.iso8601DateTime(payload.date_last_interaction); // jshint ignore:line\n\n  this.dateExpiry = deserialize.iso8601DateTime(payload.date_expiry); // jshint ignore:line\n\n  this.uniqueName = payload.unique_name; // jshint ignore:line\n\n  this.status = payload.status; // jshint ignore:line\n\n  this.closedReason = payload.closed_reason; // jshint ignore:line\n\n  this.ttl = deserialize.integer(payload.ttl); // jshint ignore:line\n\n  this.mode = payload.mode; // jshint ignore:line\n\n  this.dateCreated = deserialize.iso8601DateTime(payload.date_created); // jshint ignore:line\n\n  this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated); // jshint ignore:line\n\n  this.url = payload.url; // jshint ignore:line\n\n  this.links = payload.links; // jshint ignore:line\n  // Context\n\n  this._context = undefined;\n  this._solution = {\n    serviceSid: serviceSid,\n    sid: sid || this.sid\n  };\n};\n\nObject.defineProperty(SessionInstance.prototype, '_proxy', {\n  get: function () {\n    if (!this._context) {\n      this._context = new SessionContext(this._version, this._solution.serviceSid, this._solution.sid);\n    }\n\n    return this._context;\n  }\n});\n/* jshint ignore:start */\n\n/**\n * fetch a SessionInstance\n *\n * @function fetch\n * @memberof Twilio.Proxy.V1.ServiceContext.SessionInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed SessionInstance\n */\n\n/* jshint ignore:end */\n\nSessionInstance.prototype.fetch = function fetch(callback) {\n  return this._proxy.fetch(callback);\n};\n/* jshint ignore:start */\n\n/**\n * remove a SessionInstance\n *\n * @function remove\n * @memberof Twilio.Proxy.V1.ServiceContext.SessionInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed SessionInstance\n */\n\n/* jshint ignore:end */\n\n\nSessionInstance.prototype.remove = function remove(callback) {\n  return this._proxy.remove(callback);\n};\n/* jshint ignore:start */\n\n/**\n * update a SessionInstance\n *\n * @function update\n * @memberof Twilio.Proxy.V1.ServiceContext.SessionInstance#\n *\n * @param {object} [opts] - Options for request\n * @param {Date} [opts.dateExpiry] -\n *          The ISO 8601 date when the Session should expire\n * @param {number} [opts.ttl] - When the session will expire\n * @param {session.status} [opts.status] - The new status of the resource\n * @param {boolean} [opts.failOnParticipantConflict] -\n *          An experimental parameter to override the ProxyAllowParticipantConflict account flag on a per-request basis.\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed SessionInstance\n */\n\n/* jshint ignore:end */\n\n\nSessionInstance.prototype.update = function update(opts, callback) {\n  return this._proxy.update(opts, callback);\n};\n/* jshint ignore:start */\n\n/**\n * Access the interactions\n *\n * @function interactions\n * @memberof Twilio.Proxy.V1.ServiceContext.SessionInstance#\n *\n * @returns {Twilio.Proxy.V1.ServiceContext.SessionContext.InteractionList}\n */\n\n/* jshint ignore:end */\n\n\nSessionInstance.prototype.interactions = function interactions() {\n  return this._proxy.interactions;\n};\n/* jshint ignore:start */\n\n/**\n * Access the participants\n *\n * @function participants\n * @memberof Twilio.Proxy.V1.ServiceContext.SessionInstance#\n *\n * @returns {Twilio.Proxy.V1.ServiceContext.SessionContext.ParticipantList}\n */\n\n/* jshint ignore:end */\n\n\nSessionInstance.prototype.participants = function participants() {\n  return this._proxy.participants;\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Proxy.V1.ServiceContext.SessionInstance#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nSessionInstance.prototype.toJSON = function toJSON() {\n  let clone = {};\n\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n\n  return clone;\n};\n\nSessionInstance.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the SessionContext\n *\n * PLEASE NOTE that this class contains beta products that are subject to change.\n * Use them with caution.\n *\n * @constructor Twilio.Proxy.V1.ServiceContext.SessionContext\n *\n * @property {Twilio.Proxy.V1.ServiceContext.SessionContext.InteractionList} interactions -\n *          interactions resource\n * @property {Twilio.Proxy.V1.ServiceContext.SessionContext.ParticipantList} participants -\n *          participants resource\n *\n * @param {V1} version - Version of the resource\n * @param {sid} serviceSid - The SID of the Service to fetch the resource from\n * @param {sid_like} sid - The unique string that identifies the resource\n */\n\n/* jshint ignore:end */\n\n\nSessionContext = function SessionContext(version, serviceSid, sid) {\n  this._version = version; // Path Solution\n\n  this._solution = {\n    serviceSid: serviceSid,\n    sid: sid\n  };\n  this._uri = `/Services/${serviceSid}/Sessions/${sid}`; // Dependents\n\n  this._interactions = undefined;\n  this._participants = undefined;\n};\n/* jshint ignore:start */\n\n/**\n * fetch a SessionInstance\n *\n * @function fetch\n * @memberof Twilio.Proxy.V1.ServiceContext.SessionContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed SessionInstance\n */\n\n/* jshint ignore:end */\n\n\nSessionContext.prototype.fetch = function fetch(callback) {\n  var deferred = Q.defer();\n\n  var promise = this._version.fetch({\n    uri: this._uri,\n    method: 'GET'\n  });\n\n  promise = promise.then(function (payload) {\n    deferred.resolve(new SessionInstance(this._version, payload, this._solution.serviceSid, this._solution.sid));\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n/* jshint ignore:start */\n\n/**\n * remove a SessionInstance\n *\n * @function remove\n * @memberof Twilio.Proxy.V1.ServiceContext.SessionContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed SessionInstance\n */\n\n/* jshint ignore:end */\n\n\nSessionContext.prototype.remove = function remove(callback) {\n  var deferred = Q.defer();\n\n  var promise = this._version.remove({\n    uri: this._uri,\n    method: 'DELETE'\n  });\n\n  promise = promise.then(function (payload) {\n    deferred.resolve(payload);\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n/* jshint ignore:start */\n\n/**\n * update a SessionInstance\n *\n * @function update\n * @memberof Twilio.Proxy.V1.ServiceContext.SessionContext#\n *\n * @param {object} [opts] - Options for request\n * @param {Date} [opts.dateExpiry] -\n *          The ISO 8601 date when the Session should expire\n * @param {number} [opts.ttl] - When the session will expire\n * @param {session.status} [opts.status] - The new status of the resource\n * @param {boolean} [opts.failOnParticipantConflict] -\n *          An experimental parameter to override the ProxyAllowParticipantConflict account flag on a per-request basis.\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed SessionInstance\n */\n\n/* jshint ignore:end */\n\n\nSessionContext.prototype.update = function update(opts, callback) {\n  if (_.isFunction(opts)) {\n    callback = opts;\n    opts = {};\n  }\n\n  opts = opts || {};\n  var deferred = Q.defer();\n  var data = values.of({\n    'DateExpiry': serialize.iso8601DateTime(_.get(opts, 'dateExpiry')),\n    'Ttl': _.get(opts, 'ttl'),\n    'Status': _.get(opts, 'status'),\n    'FailOnParticipantConflict': serialize.bool(_.get(opts, 'failOnParticipantConflict'))\n  });\n\n  var promise = this._version.update({\n    uri: this._uri,\n    method: 'POST',\n    data: data\n  });\n\n  promise = promise.then(function (payload) {\n    deferred.resolve(new SessionInstance(this._version, payload, this._solution.serviceSid, this._solution.sid));\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\nObject.defineProperty(SessionContext.prototype, 'interactions', {\n  get: function () {\n    if (!this._interactions) {\n      this._interactions = new InteractionList(this._version, this._solution.serviceSid, this._solution.sid);\n    }\n\n    return this._interactions;\n  }\n});\nObject.defineProperty(SessionContext.prototype, 'participants', {\n  get: function () {\n    if (!this._participants) {\n      this._participants = new ParticipantList(this._version, this._solution.serviceSid, this._solution.sid);\n    }\n\n    return this._participants;\n  }\n});\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Proxy.V1.ServiceContext.SessionContext#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\nSessionContext.prototype.toJSON = function toJSON() {\n  return this._solution;\n};\n\nSessionContext.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\nmodule.exports = {\n  SessionList: SessionList,\n  SessionPage: SessionPage,\n  SessionInstance: SessionInstance,\n  SessionContext: SessionContext\n};","map":{"version":3,"names":["Q","require","_","util","InteractionList","Page","ParticipantList","deserialize","serialize","values","SessionList","SessionPage","SessionInstance","SessionContext","version","serviceSid","SessionListInstance","sid","get","_version","_solution","_uri","each","opts","callback","isFunction","isUndefined","Error","done","currentPage","currentResource","limits","readLimits","limit","pageSize","onComplete","error","fetchNextPage","fn","promise","then","page","instances","instance","bind","nextPage","catch","merge","list","deferred","defer","allResources","resource","push","length","resolve","reject","nodeify","data","of","pageToken","pageNumber","uri","method","params","payload","getPage","targetUrl","_domain","twilio","request","create","iso8601DateTime","map","e","object","bool","toJSON","inspect","custom","depth","options","response","solution","prototype","constructor","call","extend","getInstance","clone","forOwn","value","key","startsWith","service_sid","accountSid","account_sid","dateStarted","date_started","dateEnded","date_ended","dateLastInteraction","date_last_interaction","dateExpiry","date_expiry","uniqueName","unique_name","status","closedReason","closed_reason","ttl","integer","mode","dateCreated","date_created","dateUpdated","date_updated","url","links","_context","undefined","Object","defineProperty","fetch","_proxy","remove","update","interactions","participants","_interactions","_participants","module","exports"],"sources":["/Users/hooniesun/rmit/fwp/assessment1/lan/node_modules/twilio/lib/rest/proxy/v1/service/session.js"],"sourcesContent":["'use strict';\n\n/* jshint ignore:start */\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n/* jshint ignore:end */\n\nvar Q = require('q');  /* jshint ignore:line */\nvar _ = require('lodash');  /* jshint ignore:line */\nvar util = require('util');  /* jshint ignore:line */\nvar InteractionList = require('./session/interaction').InteractionList;\nvar Page = require('../../../../base/Page');  /* jshint ignore:line */\nvar ParticipantList = require('./session/participant').ParticipantList;\nvar deserialize = require(\n    '../../../../base/deserialize');  /* jshint ignore:line */\nvar serialize = require('../../../../base/serialize');  /* jshint ignore:line */\nvar values = require('../../../../base/values');  /* jshint ignore:line */\n\nvar SessionList;\nvar SessionPage;\nvar SessionInstance;\nvar SessionContext;\n\n/* jshint ignore:start */\n/**\n * Initialize the SessionList\n *\n * PLEASE NOTE that this class contains beta products that are subject to change.\n * Use them with caution.\n *\n * @constructor Twilio.Proxy.V1.ServiceContext.SessionList\n *\n * @param {Twilio.Proxy.V1} version - Version of the resource\n * @param {string} serviceSid - The SID of the resource's parent Service\n */\n/* jshint ignore:end */\nSessionList = function SessionList(version, serviceSid) {\n  /* jshint ignore:start */\n  /**\n   * @function sessions\n   * @memberof Twilio.Proxy.V1.ServiceContext#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Proxy.V1.ServiceContext.SessionContext}\n   */\n  /* jshint ignore:end */\n  function SessionListInstance(sid) {\n    return SessionListInstance.get(sid);\n  }\n\n  SessionListInstance._version = version;\n  // Path Solution\n  SessionListInstance._solution = {serviceSid: serviceSid};\n  SessionListInstance._uri = `/Services/${serviceSid}/Sessions`;\n  /* jshint ignore:start */\n  /**\n   * Streams SessionInstance records from the API.\n   *\n   * This operation lazily loads records as efficiently as possible until the limit\n   * is reached.\n   *\n   * The results are passed into the callback function, so this operation is memory\n   * efficient.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function each\n   * @memberof Twilio.Proxy.V1.ServiceContext.SessionList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         each() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no pageSize is defined but a limit is defined,\n   *         each() will attempt to read the limit with the most efficient\n   *         page size, i.e. min(limit, 1000)\n   * @param {Function} [opts.callback] -\n   *         Function to process each record. If this and a positional\n   *         callback are passed, this one will be used\n   * @param {Function} [opts.done] -\n   *          Function to be called upon completion of streaming\n   * @param {Function} [callback] - Function to process each record\n   */\n  /* jshint ignore:end */\n  SessionListInstance.each = function each(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    if (opts.callback) {\n      callback = opts.callback;\n    }\n    if (_.isUndefined(callback)) {\n      throw new Error('Callback function must be provided');\n    }\n\n    var done = false;\n    var currentPage = 1;\n    var currentResource = 0;\n    var limits = this._version.readLimits({\n      limit: opts.limit,\n      pageSize: opts.pageSize\n    });\n\n    function onComplete(error) {\n      done = true;\n      if (_.isFunction(opts.done)) {\n        opts.done(error);\n      }\n    }\n\n    function fetchNextPage(fn) {\n      var promise = fn();\n      if (_.isUndefined(promise)) {\n        onComplete();\n        return;\n      }\n\n      promise.then(function(page) {\n        _.each(page.instances, function(instance) {\n          if (done || (!_.isUndefined(opts.limit) && currentResource >= opts.limit)) {\n            done = true;\n            return false;\n          }\n\n          currentResource++;\n          callback(instance, onComplete);\n        });\n\n        if (!done) {\n          currentPage++;\n          fetchNextPage(_.bind(page.nextPage, page));\n        } else {\n          onComplete();\n        }\n      });\n\n      promise.catch(onComplete);\n    }\n\n    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Lists SessionInstance records from the API as a list.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function list\n   * @memberof Twilio.Proxy.V1.ServiceContext.SessionList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         list() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no page_size is defined but a limit is defined,\n   *         list() will attempt to read the limit with the most\n   *         efficient page size, i.e. min(limit, 1000)\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  SessionListInstance.list = function list(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    var deferred = Q.defer();\n    var allResources = [];\n    opts.callback = function(resource, done) {\n      allResources.push(resource);\n\n      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {\n        done();\n      }\n    };\n\n    opts.done = function(error) {\n      if (_.isUndefined(error)) {\n        deferred.resolve(allResources);\n      } else {\n        deferred.reject(error);\n      }\n    };\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    this.each(opts);\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single page of SessionInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function page\n   * @memberof Twilio.Proxy.V1.ServiceContext.SessionList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.pageToken] - PageToken provided by the API\n   * @param {number} [opts.pageNumber] -\n   *          Page Number, this value is simply for client state\n   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  SessionListInstance.page = function page(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n\n    var deferred = Q.defer();\n    var data = values.of({\n      'PageToken': opts.pageToken,\n      'Page': opts.pageNumber,\n      'PageSize': opts.pageSize\n    });\n\n    var promise = this._version.page({uri: this._uri, method: 'GET', params: data});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new SessionPage(this._version, payload, this._solution));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single target page of SessionInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function getPage\n   * @memberof Twilio.Proxy.V1.ServiceContext.SessionList#\n   *\n   * @param {string} [targetUrl] - API-generated URL for the requested results page\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  SessionListInstance.getPage = function getPage(targetUrl, callback) {\n    var deferred = Q.defer();\n\n    var promise = this._version._domain.twilio.request({method: 'GET', uri: targetUrl});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new SessionPage(this._version, payload, this._solution));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * create a SessionInstance\n   *\n   * @function create\n   * @memberof Twilio.Proxy.V1.ServiceContext.SessionList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.uniqueName] -\n   *          An application-defined string that uniquely identifies the resource\n   * @param {Date} [opts.dateExpiry] -\n   *          The ISO 8601 date when the Session should expire\n   * @param {number} [opts.ttl] - When the session will expire\n   * @param {session.mode} [opts.mode] - The Mode of the Session\n   * @param {session.status} [opts.status] - Session status\n   * @param {object|list} [opts.participants] -\n   *          The Participant objects to include in the new session\n   * @param {boolean} [opts.failOnParticipantConflict] -\n   *          An experimental parameter to override the ProxyAllowParticipantConflict account flag on a per-request basis.\n   * @param {function} [callback] - Callback to handle processed record\n   *\n   * @returns {Promise} Resolves to processed SessionInstance\n   */\n  /* jshint ignore:end */\n  SessionListInstance.create = function create(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n\n    var deferred = Q.defer();\n    var data = values.of({\n      'UniqueName': _.get(opts, 'uniqueName'),\n      'DateExpiry': serialize.iso8601DateTime(_.get(opts, 'dateExpiry')),\n      'Ttl': _.get(opts, 'ttl'),\n      'Mode': _.get(opts, 'mode'),\n      'Status': _.get(opts, 'status'),\n      'Participants': serialize.map(_.get(opts, 'participants'), function(e) { return serialize.object(e); }),\n      'FailOnParticipantConflict': serialize.bool(_.get(opts, 'failOnParticipantConflict'))\n    });\n\n    var promise = this._version.create({uri: this._uri, method: 'POST', data: data});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new SessionInstance(\n        this._version,\n        payload,\n        this._solution.serviceSid,\n        this._solution.sid\n      ));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Constructs a session\n   *\n   * @function get\n   * @memberof Twilio.Proxy.V1.ServiceContext.SessionList#\n   *\n   * @param {string} sid - The unique string that identifies the resource\n   *\n   * @returns {Twilio.Proxy.V1.ServiceContext.SessionContext}\n   */\n  /* jshint ignore:end */\n  SessionListInstance.get = function get(sid) {\n    return new SessionContext(this._version, this._solution.serviceSid, sid);\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Proxy.V1.ServiceContext.SessionList#\n   *\n   * @returns Object\n   */\n  /* jshint ignore:end */\n  SessionListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n\n  SessionListInstance[util.inspect.custom] = function inspect(depth, options) {\n    return util.inspect(this.toJSON(), options);\n  };\n\n  return SessionListInstance;\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the SessionPage\n *\n * PLEASE NOTE that this class contains beta products that are subject to change.\n * Use them with caution.\n *\n * @constructor Twilio.Proxy.V1.ServiceContext.SessionPage\n *\n * @param {V1} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {SessionSolution} solution - Path solution\n *\n * @returns SessionPage\n */\n/* jshint ignore:end */\nSessionPage = function SessionPage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n\n_.extend(SessionPage.prototype, Page.prototype);\nSessionPage.prototype.constructor = SessionPage;\n\n/* jshint ignore:start */\n/**\n * Build an instance of SessionInstance\n *\n * @function getInstance\n * @memberof Twilio.Proxy.V1.ServiceContext.SessionPage#\n *\n * @param {SessionPayload} payload - Payload response from the API\n *\n * @returns SessionInstance\n */\n/* jshint ignore:end */\nSessionPage.prototype.getInstance = function getInstance(payload) {\n  return new SessionInstance(this._version, payload, this._solution.serviceSid);\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Proxy.V1.ServiceContext.SessionPage#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nSessionPage.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function(value, key) {\n    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\n\nSessionPage.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the SessionContext\n *\n * PLEASE NOTE that this class contains beta products that are subject to change.\n * Use them with caution.\n *\n * @constructor Twilio.Proxy.V1.ServiceContext.SessionInstance\n *\n * @property {string} sid - The unique string that identifies the resource\n * @property {string} serviceSid - The SID of the resource's parent Service\n * @property {string} accountSid - The SID of the Account that created the resource\n * @property {Date} dateStarted - The ISO 8601 date when the Session started\n * @property {Date} dateEnded - The ISO 8601 date when the Session ended\n * @property {Date} dateLastInteraction -\n *          The ISO 8601 date when the Session last had an interaction\n * @property {Date} dateExpiry - The ISO 8601 date when the Session should expire\n * @property {string} uniqueName -\n *          An application-defined string that uniquely identifies the resource\n * @property {session.status} status - The status of the Session\n * @property {string} closedReason - The reason the Session ended\n * @property {number} ttl - When the session will expire\n * @property {session.mode} mode - The Mode of the Session\n * @property {Date} dateCreated -\n *          The ISO 8601 date and time in GMT when the resource was created\n * @property {Date} dateUpdated -\n *          The ISO 8601 date and time in GMT when the resource was last updated\n * @property {string} url - The absolute URL of the Session resource\n * @property {string} links - The URLs of resources related to the Session\n *\n * @param {V1} version - Version of the resource\n * @param {SessionPayload} payload - The instance payload\n * @param {sid} serviceSid - The SID of the resource's parent Service\n * @param {sid_like} sid - The unique string that identifies the resource\n */\n/* jshint ignore:end */\nSessionInstance = function SessionInstance(version, payload, serviceSid, sid) {\n  this._version = version;\n\n  // Marshaled Properties\n  this.sid = payload.sid; // jshint ignore:line\n  this.serviceSid = payload.service_sid; // jshint ignore:line\n  this.accountSid = payload.account_sid; // jshint ignore:line\n  this.dateStarted = deserialize.iso8601DateTime(payload.date_started); // jshint ignore:line\n  this.dateEnded = deserialize.iso8601DateTime(payload.date_ended); // jshint ignore:line\n  this.dateLastInteraction = deserialize.iso8601DateTime(payload.date_last_interaction); // jshint ignore:line\n  this.dateExpiry = deserialize.iso8601DateTime(payload.date_expiry); // jshint ignore:line\n  this.uniqueName = payload.unique_name; // jshint ignore:line\n  this.status = payload.status; // jshint ignore:line\n  this.closedReason = payload.closed_reason; // jshint ignore:line\n  this.ttl = deserialize.integer(payload.ttl); // jshint ignore:line\n  this.mode = payload.mode; // jshint ignore:line\n  this.dateCreated = deserialize.iso8601DateTime(payload.date_created); // jshint ignore:line\n  this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated); // jshint ignore:line\n  this.url = payload.url; // jshint ignore:line\n  this.links = payload.links; // jshint ignore:line\n\n  // Context\n  this._context = undefined;\n  this._solution = {serviceSid: serviceSid, sid: sid || this.sid, };\n};\n\nObject.defineProperty(SessionInstance.prototype,\n  '_proxy', {\n    get: function() {\n      if (!this._context) {\n        this._context = new SessionContext(this._version, this._solution.serviceSid, this._solution.sid);\n      }\n\n      return this._context;\n    }\n});\n\n/* jshint ignore:start */\n/**\n * fetch a SessionInstance\n *\n * @function fetch\n * @memberof Twilio.Proxy.V1.ServiceContext.SessionInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed SessionInstance\n */\n/* jshint ignore:end */\nSessionInstance.prototype.fetch = function fetch(callback) {\n  return this._proxy.fetch(callback);\n};\n\n/* jshint ignore:start */\n/**\n * remove a SessionInstance\n *\n * @function remove\n * @memberof Twilio.Proxy.V1.ServiceContext.SessionInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed SessionInstance\n */\n/* jshint ignore:end */\nSessionInstance.prototype.remove = function remove(callback) {\n  return this._proxy.remove(callback);\n};\n\n/* jshint ignore:start */\n/**\n * update a SessionInstance\n *\n * @function update\n * @memberof Twilio.Proxy.V1.ServiceContext.SessionInstance#\n *\n * @param {object} [opts] - Options for request\n * @param {Date} [opts.dateExpiry] -\n *          The ISO 8601 date when the Session should expire\n * @param {number} [opts.ttl] - When the session will expire\n * @param {session.status} [opts.status] - The new status of the resource\n * @param {boolean} [opts.failOnParticipantConflict] -\n *          An experimental parameter to override the ProxyAllowParticipantConflict account flag on a per-request basis.\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed SessionInstance\n */\n/* jshint ignore:end */\nSessionInstance.prototype.update = function update(opts, callback) {\n  return this._proxy.update(opts, callback);\n};\n\n/* jshint ignore:start */\n/**\n * Access the interactions\n *\n * @function interactions\n * @memberof Twilio.Proxy.V1.ServiceContext.SessionInstance#\n *\n * @returns {Twilio.Proxy.V1.ServiceContext.SessionContext.InteractionList}\n */\n/* jshint ignore:end */\nSessionInstance.prototype.interactions = function interactions() {\n  return this._proxy.interactions;\n};\n\n/* jshint ignore:start */\n/**\n * Access the participants\n *\n * @function participants\n * @memberof Twilio.Proxy.V1.ServiceContext.SessionInstance#\n *\n * @returns {Twilio.Proxy.V1.ServiceContext.SessionContext.ParticipantList}\n */\n/* jshint ignore:end */\nSessionInstance.prototype.participants = function participants() {\n  return this._proxy.participants;\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Proxy.V1.ServiceContext.SessionInstance#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nSessionInstance.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function(value, key) {\n    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\n\nSessionInstance.prototype[util.inspect.custom] = function inspect(depth,\n    options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the SessionContext\n *\n * PLEASE NOTE that this class contains beta products that are subject to change.\n * Use them with caution.\n *\n * @constructor Twilio.Proxy.V1.ServiceContext.SessionContext\n *\n * @property {Twilio.Proxy.V1.ServiceContext.SessionContext.InteractionList} interactions -\n *          interactions resource\n * @property {Twilio.Proxy.V1.ServiceContext.SessionContext.ParticipantList} participants -\n *          participants resource\n *\n * @param {V1} version - Version of the resource\n * @param {sid} serviceSid - The SID of the Service to fetch the resource from\n * @param {sid_like} sid - The unique string that identifies the resource\n */\n/* jshint ignore:end */\nSessionContext = function SessionContext(version, serviceSid, sid) {\n  this._version = version;\n\n  // Path Solution\n  this._solution = {serviceSid: serviceSid, sid: sid, };\n  this._uri = `/Services/${serviceSid}/Sessions/${sid}`;\n\n  // Dependents\n  this._interactions = undefined;\n  this._participants = undefined;\n};\n\n/* jshint ignore:start */\n/**\n * fetch a SessionInstance\n *\n * @function fetch\n * @memberof Twilio.Proxy.V1.ServiceContext.SessionContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed SessionInstance\n */\n/* jshint ignore:end */\nSessionContext.prototype.fetch = function fetch(callback) {\n  var deferred = Q.defer();\n  var promise = this._version.fetch({uri: this._uri, method: 'GET'});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(new SessionInstance(\n      this._version,\n      payload,\n      this._solution.serviceSid,\n      this._solution.sid\n    ));\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * remove a SessionInstance\n *\n * @function remove\n * @memberof Twilio.Proxy.V1.ServiceContext.SessionContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed SessionInstance\n */\n/* jshint ignore:end */\nSessionContext.prototype.remove = function remove(callback) {\n  var deferred = Q.defer();\n  var promise = this._version.remove({uri: this._uri, method: 'DELETE'});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(payload);\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * update a SessionInstance\n *\n * @function update\n * @memberof Twilio.Proxy.V1.ServiceContext.SessionContext#\n *\n * @param {object} [opts] - Options for request\n * @param {Date} [opts.dateExpiry] -\n *          The ISO 8601 date when the Session should expire\n * @param {number} [opts.ttl] - When the session will expire\n * @param {session.status} [opts.status] - The new status of the resource\n * @param {boolean} [opts.failOnParticipantConflict] -\n *          An experimental parameter to override the ProxyAllowParticipantConflict account flag on a per-request basis.\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed SessionInstance\n */\n/* jshint ignore:end */\nSessionContext.prototype.update = function update(opts, callback) {\n  if (_.isFunction(opts)) {\n    callback = opts;\n    opts = {};\n  }\n  opts = opts || {};\n\n  var deferred = Q.defer();\n  var data = values.of({\n    'DateExpiry': serialize.iso8601DateTime(_.get(opts, 'dateExpiry')),\n    'Ttl': _.get(opts, 'ttl'),\n    'Status': _.get(opts, 'status'),\n    'FailOnParticipantConflict': serialize.bool(_.get(opts, 'failOnParticipantConflict'))\n  });\n\n  var promise = this._version.update({uri: this._uri, method: 'POST', data: data});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(new SessionInstance(\n      this._version,\n      payload,\n      this._solution.serviceSid,\n      this._solution.sid\n    ));\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\nObject.defineProperty(SessionContext.prototype,\n  'interactions', {\n    get: function() {\n      if (!this._interactions) {\n        this._interactions = new InteractionList(\n          this._version,\n          this._solution.serviceSid,\n          this._solution.sid\n        );\n      }\n      return this._interactions;\n    }\n});\n\nObject.defineProperty(SessionContext.prototype,\n  'participants', {\n    get: function() {\n      if (!this._participants) {\n        this._participants = new ParticipantList(\n          this._version,\n          this._solution.serviceSid,\n          this._solution.sid\n        );\n      }\n      return this._participants;\n    }\n});\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Proxy.V1.ServiceContext.SessionContext#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nSessionContext.prototype.toJSON = function toJSON() {\n  return this._solution;\n};\n\nSessionContext.prototype[util.inspect.custom] = function inspect(depth, options)\n    {\n  return util.inspect(this.toJSON(), options);\n};\n\nmodule.exports = {\n  SessionList: SessionList,\n  SessionPage: SessionPage,\n  SessionInstance: SessionInstance,\n  SessionContext: SessionContext\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}