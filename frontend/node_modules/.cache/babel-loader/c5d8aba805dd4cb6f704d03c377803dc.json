{"ast":null,"code":"'use strict';\n/* jshint ignore:start */\n\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n\n/* jshint ignore:end */\n\nvar Q = require('q');\n/* jshint ignore:line */\n\n\nvar _ = require('lodash');\n/* jshint ignore:line */\n\n\nvar util = require('util');\n/* jshint ignore:line */\n\n\nvar Page = require('../../../../base/Page');\n/* jshint ignore:line */\n\n\nvar deserialize = require('../../../../base/deserialize');\n/* jshint ignore:line */\n\n\nvar values = require('../../../../base/values');\n/* jshint ignore:line */\n\n\nvar DeploymentList;\nvar DeploymentPage;\nvar DeploymentInstance;\nvar DeploymentContext;\n/* jshint ignore:start */\n\n/**\n * Initialize the DeploymentList\n *\n * PLEASE NOTE that this class contains preview products that are subject to\n * change. Use them with caution. If you currently do not have developer preview\n * access, please contact help@twilio.com.\n *\n * @constructor Twilio.Preview.DeployedDevices.FleetContext.DeploymentList\n *\n * @param {Twilio.Preview.DeployedDevices} version - Version of the resource\n * @param {string} fleetSid - The unique identifier of the Fleet.\n */\n\n/* jshint ignore:end */\n\nDeploymentList = function DeploymentList(version, fleetSid) {\n  /* jshint ignore:start */\n\n  /**\n   * @function deployments\n   * @memberof Twilio.Preview.DeployedDevices.FleetContext#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Preview.DeployedDevices.FleetContext.DeploymentContext}\n   */\n\n  /* jshint ignore:end */\n  function DeploymentListInstance(sid) {\n    return DeploymentListInstance.get(sid);\n  }\n\n  DeploymentListInstance._version = version; // Path Solution\n\n  DeploymentListInstance._solution = {\n    fleetSid: fleetSid\n  };\n  DeploymentListInstance._uri = `/Fleets/${fleetSid}/Deployments`;\n  /* jshint ignore:start */\n\n  /**\n   * create a DeploymentInstance\n   *\n   * @function create\n   * @memberof Twilio.Preview.DeployedDevices.FleetContext.DeploymentList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.friendlyName] -\n   *          A human readable description for this Deployment.\n   * @param {string} [opts.syncServiceSid] -\n   *          The unique identifier of the Sync service instance.\n   * @param {function} [callback] - Callback to handle processed record\n   *\n   * @returns {Promise} Resolves to processed DeploymentInstance\n   */\n\n  /* jshint ignore:end */\n\n  DeploymentListInstance.create = function create(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n    var deferred = Q.defer();\n    var data = values.of({\n      'FriendlyName': _.get(opts, 'friendlyName'),\n      'SyncServiceSid': _.get(opts, 'syncServiceSid')\n    });\n\n    var promise = this._version.create({\n      uri: this._uri,\n      method: 'POST',\n      data: data\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new DeploymentInstance(this._version, payload, this._solution.fleetSid, this._solution.sid));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Streams DeploymentInstance records from the API.\n   *\n   * This operation lazily loads records as efficiently as possible until the limit\n   * is reached.\n   *\n   * The results are passed into the callback function, so this operation is memory\n   * efficient.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function each\n   * @memberof Twilio.Preview.DeployedDevices.FleetContext.DeploymentList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         each() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no pageSize is defined but a limit is defined,\n   *         each() will attempt to read the limit with the most efficient\n   *         page size, i.e. min(limit, 1000)\n   * @param {Function} [opts.callback] -\n   *         Function to process each record. If this and a positional\n   *         callback are passed, this one will be used\n   * @param {Function} [opts.done] -\n   *          Function to be called upon completion of streaming\n   * @param {Function} [callback] - Function to process each record\n   */\n\n  /* jshint ignore:end */\n\n\n  DeploymentListInstance.each = function each(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n\n    if (opts.callback) {\n      callback = opts.callback;\n    }\n\n    if (_.isUndefined(callback)) {\n      throw new Error('Callback function must be provided');\n    }\n\n    var done = false;\n    var currentPage = 1;\n    var currentResource = 0;\n\n    var limits = this._version.readLimits({\n      limit: opts.limit,\n      pageSize: opts.pageSize\n    });\n\n    function onComplete(error) {\n      done = true;\n\n      if (_.isFunction(opts.done)) {\n        opts.done(error);\n      }\n    }\n\n    function fetchNextPage(fn) {\n      var promise = fn();\n\n      if (_.isUndefined(promise)) {\n        onComplete();\n        return;\n      }\n\n      promise.then(function (page) {\n        _.each(page.instances, function (instance) {\n          if (done || !_.isUndefined(opts.limit) && currentResource >= opts.limit) {\n            done = true;\n            return false;\n          }\n\n          currentResource++;\n          callback(instance, onComplete);\n        });\n\n        if (!done) {\n          currentPage++;\n          fetchNextPage(_.bind(page.nextPage, page));\n        } else {\n          onComplete();\n        }\n      });\n      promise.catch(onComplete);\n    }\n\n    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Lists DeploymentInstance records from the API as a list.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function list\n   * @memberof Twilio.Preview.DeployedDevices.FleetContext.DeploymentList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         list() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no page_size is defined but a limit is defined,\n   *         list() will attempt to read the limit with the most\n   *         efficient page size, i.e. min(limit, 1000)\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  DeploymentListInstance.list = function list(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n    var deferred = Q.defer();\n    var allResources = [];\n\n    opts.callback = function (resource, done) {\n      allResources.push(resource);\n\n      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {\n        done();\n      }\n    };\n\n    opts.done = function (error) {\n      if (_.isUndefined(error)) {\n        deferred.resolve(allResources);\n      } else {\n        deferred.reject(error);\n      }\n    };\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    this.each(opts);\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Retrieve a single page of DeploymentInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function page\n   * @memberof Twilio.Preview.DeployedDevices.FleetContext.DeploymentList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.pageToken] - PageToken provided by the API\n   * @param {number} [opts.pageNumber] -\n   *          Page Number, this value is simply for client state\n   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  DeploymentListInstance.page = function page(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n    var deferred = Q.defer();\n    var data = values.of({\n      'PageToken': opts.pageToken,\n      'Page': opts.pageNumber,\n      'PageSize': opts.pageSize\n    });\n\n    var promise = this._version.page({\n      uri: this._uri,\n      method: 'GET',\n      params: data\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new DeploymentPage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Retrieve a single target page of DeploymentInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function getPage\n   * @memberof Twilio.Preview.DeployedDevices.FleetContext.DeploymentList#\n   *\n   * @param {string} [targetUrl] - API-generated URL for the requested results page\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  DeploymentListInstance.getPage = function getPage(targetUrl, callback) {\n    var deferred = Q.defer();\n\n    var promise = this._version._domain.twilio.request({\n      method: 'GET',\n      uri: targetUrl\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new DeploymentPage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Constructs a deployment\n   *\n   * @function get\n   * @memberof Twilio.Preview.DeployedDevices.FleetContext.DeploymentList#\n   *\n   * @param {string} sid - A string that uniquely identifies the Deployment.\n   *\n   * @returns {Twilio.Preview.DeployedDevices.FleetContext.DeploymentContext}\n   */\n\n  /* jshint ignore:end */\n\n\n  DeploymentListInstance.get = function get(sid) {\n    return new DeploymentContext(this._version, this._solution.fleetSid, sid);\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Preview.DeployedDevices.FleetContext.DeploymentList#\n   *\n   * @returns Object\n   */\n\n  /* jshint ignore:end */\n\n\n  DeploymentListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n\n  DeploymentListInstance[util.inspect.custom] = function inspect(depth, options) {\n    return util.inspect(this.toJSON(), options);\n  };\n\n  return DeploymentListInstance;\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the DeploymentPage\n *\n * PLEASE NOTE that this class contains preview products that are subject to\n * change. Use them with caution. If you currently do not have developer preview\n * access, please contact help@twilio.com.\n *\n * @constructor Twilio.Preview.DeployedDevices.FleetContext.DeploymentPage\n *\n * @param {DeployedDevices} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {DeploymentSolution} solution - Path solution\n *\n * @returns DeploymentPage\n */\n\n/* jshint ignore:end */\n\n\nDeploymentPage = function DeploymentPage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n\n_.extend(DeploymentPage.prototype, Page.prototype);\n\nDeploymentPage.prototype.constructor = DeploymentPage;\n/* jshint ignore:start */\n\n/**\n * Build an instance of DeploymentInstance\n *\n * @function getInstance\n * @memberof Twilio.Preview.DeployedDevices.FleetContext.DeploymentPage#\n *\n * @param {DeploymentPayload} payload - Payload response from the API\n *\n * @returns DeploymentInstance\n */\n\n/* jshint ignore:end */\n\nDeploymentPage.prototype.getInstance = function getInstance(payload) {\n  return new DeploymentInstance(this._version, payload, this._solution.fleetSid);\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Preview.DeployedDevices.FleetContext.DeploymentPage#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nDeploymentPage.prototype.toJSON = function toJSON() {\n  let clone = {};\n\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n\n  return clone;\n};\n\nDeploymentPage.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the DeploymentContext\n *\n * PLEASE NOTE that this class contains preview products that are subject to\n * change. Use them with caution. If you currently do not have developer preview\n * access, please contact help@twilio.com.\n *\n * @constructor Twilio.Preview.DeployedDevices.FleetContext.DeploymentInstance\n *\n * @property {string} sid - A string that uniquely identifies this Deployment.\n * @property {string} url - URL of this Deployment.\n * @property {string} friendlyName -\n *          A human readable description for this Deployment\n * @property {string} fleetSid - The unique identifier of the Fleet.\n * @property {string} accountSid - The unique SID that identifies this Account.\n * @property {string} syncServiceSid -\n *          The unique identifier of the Sync service instance.\n * @property {Date} dateCreated - The date this Deployment was created.\n * @property {Date} dateUpdated - The date this Deployment was updated.\n *\n * @param {DeployedDevices} version - Version of the resource\n * @param {DeploymentPayload} payload - The instance payload\n * @param {sid_like} fleetSid - The unique identifier of the Fleet.\n * @param {sid} sid - A string that uniquely identifies the Deployment.\n */\n\n/* jshint ignore:end */\n\n\nDeploymentInstance = function DeploymentInstance(version, payload, fleetSid, sid) {\n  this._version = version; // Marshaled Properties\n\n  this.sid = payload.sid; // jshint ignore:line\n\n  this.url = payload.url; // jshint ignore:line\n\n  this.friendlyName = payload.friendly_name; // jshint ignore:line\n\n  this.fleetSid = payload.fleet_sid; // jshint ignore:line\n\n  this.accountSid = payload.account_sid; // jshint ignore:line\n\n  this.syncServiceSid = payload.sync_service_sid; // jshint ignore:line\n\n  this.dateCreated = deserialize.iso8601DateTime(payload.date_created); // jshint ignore:line\n\n  this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated); // jshint ignore:line\n  // Context\n\n  this._context = undefined;\n  this._solution = {\n    fleetSid: fleetSid,\n    sid: sid || this.sid\n  };\n};\n\nObject.defineProperty(DeploymentInstance.prototype, '_proxy', {\n  get: function () {\n    if (!this._context) {\n      this._context = new DeploymentContext(this._version, this._solution.fleetSid, this._solution.sid);\n    }\n\n    return this._context;\n  }\n});\n/* jshint ignore:start */\n\n/**\n * fetch a DeploymentInstance\n *\n * @function fetch\n * @memberof Twilio.Preview.DeployedDevices.FleetContext.DeploymentInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed DeploymentInstance\n */\n\n/* jshint ignore:end */\n\nDeploymentInstance.prototype.fetch = function fetch(callback) {\n  return this._proxy.fetch(callback);\n};\n/* jshint ignore:start */\n\n/**\n * remove a DeploymentInstance\n *\n * @function remove\n * @memberof Twilio.Preview.DeployedDevices.FleetContext.DeploymentInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed DeploymentInstance\n */\n\n/* jshint ignore:end */\n\n\nDeploymentInstance.prototype.remove = function remove(callback) {\n  return this._proxy.remove(callback);\n};\n/* jshint ignore:start */\n\n/**\n * update a DeploymentInstance\n *\n * @function update\n * @memberof Twilio.Preview.DeployedDevices.FleetContext.DeploymentInstance#\n *\n * @param {object} [opts] - Options for request\n * @param {string} [opts.friendlyName] -\n *          A human readable description for this Deployment.\n * @param {string} [opts.syncServiceSid] -\n *          The unique identifier of the Sync service instance.\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed DeploymentInstance\n */\n\n/* jshint ignore:end */\n\n\nDeploymentInstance.prototype.update = function update(opts, callback) {\n  return this._proxy.update(opts, callback);\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Preview.DeployedDevices.FleetContext.DeploymentInstance#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nDeploymentInstance.prototype.toJSON = function toJSON() {\n  let clone = {};\n\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n\n  return clone;\n};\n\nDeploymentInstance.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the DeploymentContext\n *\n * PLEASE NOTE that this class contains preview products that are subject to\n * change. Use them with caution. If you currently do not have developer preview\n * access, please contact help@twilio.com.\n *\n * @constructor Twilio.Preview.DeployedDevices.FleetContext.DeploymentContext\n *\n * @param {DeployedDevices} version - Version of the resource\n * @param {sid_like} fleetSid - The fleet_sid\n * @param {sid} sid - A string that uniquely identifies the Deployment.\n */\n\n/* jshint ignore:end */\n\n\nDeploymentContext = function DeploymentContext(version, fleetSid, sid) {\n  this._version = version; // Path Solution\n\n  this._solution = {\n    fleetSid: fleetSid,\n    sid: sid\n  };\n  this._uri = `/Fleets/${fleetSid}/Deployments/${sid}`;\n};\n/* jshint ignore:start */\n\n/**\n * fetch a DeploymentInstance\n *\n * @function fetch\n * @memberof Twilio.Preview.DeployedDevices.FleetContext.DeploymentContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed DeploymentInstance\n */\n\n/* jshint ignore:end */\n\n\nDeploymentContext.prototype.fetch = function fetch(callback) {\n  var deferred = Q.defer();\n\n  var promise = this._version.fetch({\n    uri: this._uri,\n    method: 'GET'\n  });\n\n  promise = promise.then(function (payload) {\n    deferred.resolve(new DeploymentInstance(this._version, payload, this._solution.fleetSid, this._solution.sid));\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n/* jshint ignore:start */\n\n/**\n * remove a DeploymentInstance\n *\n * @function remove\n * @memberof Twilio.Preview.DeployedDevices.FleetContext.DeploymentContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed DeploymentInstance\n */\n\n/* jshint ignore:end */\n\n\nDeploymentContext.prototype.remove = function remove(callback) {\n  var deferred = Q.defer();\n\n  var promise = this._version.remove({\n    uri: this._uri,\n    method: 'DELETE'\n  });\n\n  promise = promise.then(function (payload) {\n    deferred.resolve(payload);\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n/* jshint ignore:start */\n\n/**\n * update a DeploymentInstance\n *\n * @function update\n * @memberof Twilio.Preview.DeployedDevices.FleetContext.DeploymentContext#\n *\n * @param {object} [opts] - Options for request\n * @param {string} [opts.friendlyName] -\n *          A human readable description for this Deployment.\n * @param {string} [opts.syncServiceSid] -\n *          The unique identifier of the Sync service instance.\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed DeploymentInstance\n */\n\n/* jshint ignore:end */\n\n\nDeploymentContext.prototype.update = function update(opts, callback) {\n  if (_.isFunction(opts)) {\n    callback = opts;\n    opts = {};\n  }\n\n  opts = opts || {};\n  var deferred = Q.defer();\n  var data = values.of({\n    'FriendlyName': _.get(opts, 'friendlyName'),\n    'SyncServiceSid': _.get(opts, 'syncServiceSid')\n  });\n\n  var promise = this._version.update({\n    uri: this._uri,\n    method: 'POST',\n    data: data\n  });\n\n  promise = promise.then(function (payload) {\n    deferred.resolve(new DeploymentInstance(this._version, payload, this._solution.fleetSid, this._solution.sid));\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Preview.DeployedDevices.FleetContext.DeploymentContext#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nDeploymentContext.prototype.toJSON = function toJSON() {\n  return this._solution;\n};\n\nDeploymentContext.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\nmodule.exports = {\n  DeploymentList: DeploymentList,\n  DeploymentPage: DeploymentPage,\n  DeploymentInstance: DeploymentInstance,\n  DeploymentContext: DeploymentContext\n};","map":{"version":3,"names":["Q","require","_","util","Page","deserialize","values","DeploymentList","DeploymentPage","DeploymentInstance","DeploymentContext","version","fleetSid","DeploymentListInstance","sid","get","_version","_solution","_uri","create","opts","callback","isFunction","deferred","defer","data","of","promise","uri","method","then","payload","resolve","bind","catch","error","reject","nodeify","each","isUndefined","Error","done","currentPage","currentResource","limits","readLimits","limit","pageSize","onComplete","fetchNextPage","fn","page","instances","instance","nextPage","merge","list","allResources","resource","push","length","pageToken","pageNumber","params","getPage","targetUrl","_domain","twilio","request","toJSON","inspect","custom","depth","options","response","solution","prototype","constructor","call","extend","getInstance","clone","forOwn","value","key","startsWith","url","friendlyName","friendly_name","fleet_sid","accountSid","account_sid","syncServiceSid","sync_service_sid","dateCreated","iso8601DateTime","date_created","dateUpdated","date_updated","_context","undefined","Object","defineProperty","fetch","_proxy","remove","update","module","exports"],"sources":["/Users/hooniesun/rmit/fwp/assessment1/lan/node_modules/twilio/lib/rest/preview/deployed_devices/fleet/deployment.js"],"sourcesContent":["'use strict';\n\n/* jshint ignore:start */\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n/* jshint ignore:end */\n\nvar Q = require('q');  /* jshint ignore:line */\nvar _ = require('lodash');  /* jshint ignore:line */\nvar util = require('util');  /* jshint ignore:line */\nvar Page = require('../../../../base/Page');  /* jshint ignore:line */\nvar deserialize = require(\n    '../../../../base/deserialize');  /* jshint ignore:line */\nvar values = require('../../../../base/values');  /* jshint ignore:line */\n\nvar DeploymentList;\nvar DeploymentPage;\nvar DeploymentInstance;\nvar DeploymentContext;\n\n/* jshint ignore:start */\n/**\n * Initialize the DeploymentList\n *\n * PLEASE NOTE that this class contains preview products that are subject to\n * change. Use them with caution. If you currently do not have developer preview\n * access, please contact help@twilio.com.\n *\n * @constructor Twilio.Preview.DeployedDevices.FleetContext.DeploymentList\n *\n * @param {Twilio.Preview.DeployedDevices} version - Version of the resource\n * @param {string} fleetSid - The unique identifier of the Fleet.\n */\n/* jshint ignore:end */\nDeploymentList = function DeploymentList(version, fleetSid) {\n  /* jshint ignore:start */\n  /**\n   * @function deployments\n   * @memberof Twilio.Preview.DeployedDevices.FleetContext#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Preview.DeployedDevices.FleetContext.DeploymentContext}\n   */\n  /* jshint ignore:end */\n  function DeploymentListInstance(sid) {\n    return DeploymentListInstance.get(sid);\n  }\n\n  DeploymentListInstance._version = version;\n  // Path Solution\n  DeploymentListInstance._solution = {fleetSid: fleetSid};\n  DeploymentListInstance._uri = `/Fleets/${fleetSid}/Deployments`;\n  /* jshint ignore:start */\n  /**\n   * create a DeploymentInstance\n   *\n   * @function create\n   * @memberof Twilio.Preview.DeployedDevices.FleetContext.DeploymentList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.friendlyName] -\n   *          A human readable description for this Deployment.\n   * @param {string} [opts.syncServiceSid] -\n   *          The unique identifier of the Sync service instance.\n   * @param {function} [callback] - Callback to handle processed record\n   *\n   * @returns {Promise} Resolves to processed DeploymentInstance\n   */\n  /* jshint ignore:end */\n  DeploymentListInstance.create = function create(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n\n    var deferred = Q.defer();\n    var data = values.of({\n      'FriendlyName': _.get(opts, 'friendlyName'),\n      'SyncServiceSid': _.get(opts, 'syncServiceSid')\n    });\n\n    var promise = this._version.create({uri: this._uri, method: 'POST', data: data});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new DeploymentInstance(\n        this._version,\n        payload,\n        this._solution.fleetSid,\n        this._solution.sid\n      ));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Streams DeploymentInstance records from the API.\n   *\n   * This operation lazily loads records as efficiently as possible until the limit\n   * is reached.\n   *\n   * The results are passed into the callback function, so this operation is memory\n   * efficient.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function each\n   * @memberof Twilio.Preview.DeployedDevices.FleetContext.DeploymentList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         each() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no pageSize is defined but a limit is defined,\n   *         each() will attempt to read the limit with the most efficient\n   *         page size, i.e. min(limit, 1000)\n   * @param {Function} [opts.callback] -\n   *         Function to process each record. If this and a positional\n   *         callback are passed, this one will be used\n   * @param {Function} [opts.done] -\n   *          Function to be called upon completion of streaming\n   * @param {Function} [callback] - Function to process each record\n   */\n  /* jshint ignore:end */\n  DeploymentListInstance.each = function each(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    if (opts.callback) {\n      callback = opts.callback;\n    }\n    if (_.isUndefined(callback)) {\n      throw new Error('Callback function must be provided');\n    }\n\n    var done = false;\n    var currentPage = 1;\n    var currentResource = 0;\n    var limits = this._version.readLimits({\n      limit: opts.limit,\n      pageSize: opts.pageSize\n    });\n\n    function onComplete(error) {\n      done = true;\n      if (_.isFunction(opts.done)) {\n        opts.done(error);\n      }\n    }\n\n    function fetchNextPage(fn) {\n      var promise = fn();\n      if (_.isUndefined(promise)) {\n        onComplete();\n        return;\n      }\n\n      promise.then(function(page) {\n        _.each(page.instances, function(instance) {\n          if (done || (!_.isUndefined(opts.limit) && currentResource >= opts.limit)) {\n            done = true;\n            return false;\n          }\n\n          currentResource++;\n          callback(instance, onComplete);\n        });\n\n        if (!done) {\n          currentPage++;\n          fetchNextPage(_.bind(page.nextPage, page));\n        } else {\n          onComplete();\n        }\n      });\n\n      promise.catch(onComplete);\n    }\n\n    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Lists DeploymentInstance records from the API as a list.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function list\n   * @memberof Twilio.Preview.DeployedDevices.FleetContext.DeploymentList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         list() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no page_size is defined but a limit is defined,\n   *         list() will attempt to read the limit with the most\n   *         efficient page size, i.e. min(limit, 1000)\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  DeploymentListInstance.list = function list(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    var deferred = Q.defer();\n    var allResources = [];\n    opts.callback = function(resource, done) {\n      allResources.push(resource);\n\n      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {\n        done();\n      }\n    };\n\n    opts.done = function(error) {\n      if (_.isUndefined(error)) {\n        deferred.resolve(allResources);\n      } else {\n        deferred.reject(error);\n      }\n    };\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    this.each(opts);\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single page of DeploymentInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function page\n   * @memberof Twilio.Preview.DeployedDevices.FleetContext.DeploymentList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.pageToken] - PageToken provided by the API\n   * @param {number} [opts.pageNumber] -\n   *          Page Number, this value is simply for client state\n   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  DeploymentListInstance.page = function page(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n\n    var deferred = Q.defer();\n    var data = values.of({\n      'PageToken': opts.pageToken,\n      'Page': opts.pageNumber,\n      'PageSize': opts.pageSize\n    });\n\n    var promise = this._version.page({uri: this._uri, method: 'GET', params: data});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new DeploymentPage(this._version, payload, this._solution));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single target page of DeploymentInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function getPage\n   * @memberof Twilio.Preview.DeployedDevices.FleetContext.DeploymentList#\n   *\n   * @param {string} [targetUrl] - API-generated URL for the requested results page\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  DeploymentListInstance.getPage = function getPage(targetUrl, callback) {\n    var deferred = Q.defer();\n\n    var promise = this._version._domain.twilio.request({method: 'GET', uri: targetUrl});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new DeploymentPage(this._version, payload, this._solution));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Constructs a deployment\n   *\n   * @function get\n   * @memberof Twilio.Preview.DeployedDevices.FleetContext.DeploymentList#\n   *\n   * @param {string} sid - A string that uniquely identifies the Deployment.\n   *\n   * @returns {Twilio.Preview.DeployedDevices.FleetContext.DeploymentContext}\n   */\n  /* jshint ignore:end */\n  DeploymentListInstance.get = function get(sid) {\n    return new DeploymentContext(this._version, this._solution.fleetSid, sid);\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Preview.DeployedDevices.FleetContext.DeploymentList#\n   *\n   * @returns Object\n   */\n  /* jshint ignore:end */\n  DeploymentListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n\n  DeploymentListInstance[util.inspect.custom] = function inspect(depth, options) {\n    return util.inspect(this.toJSON(), options);\n  };\n\n  return DeploymentListInstance;\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the DeploymentPage\n *\n * PLEASE NOTE that this class contains preview products that are subject to\n * change. Use them with caution. If you currently do not have developer preview\n * access, please contact help@twilio.com.\n *\n * @constructor Twilio.Preview.DeployedDevices.FleetContext.DeploymentPage\n *\n * @param {DeployedDevices} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {DeploymentSolution} solution - Path solution\n *\n * @returns DeploymentPage\n */\n/* jshint ignore:end */\nDeploymentPage = function DeploymentPage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n\n_.extend(DeploymentPage.prototype, Page.prototype);\nDeploymentPage.prototype.constructor = DeploymentPage;\n\n/* jshint ignore:start */\n/**\n * Build an instance of DeploymentInstance\n *\n * @function getInstance\n * @memberof Twilio.Preview.DeployedDevices.FleetContext.DeploymentPage#\n *\n * @param {DeploymentPayload} payload - Payload response from the API\n *\n * @returns DeploymentInstance\n */\n/* jshint ignore:end */\nDeploymentPage.prototype.getInstance = function getInstance(payload) {\n  return new DeploymentInstance(this._version, payload, this._solution.fleetSid);\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Preview.DeployedDevices.FleetContext.DeploymentPage#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nDeploymentPage.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function(value, key) {\n    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\n\nDeploymentPage.prototype[util.inspect.custom] = function inspect(depth, options)\n    {\n  return util.inspect(this.toJSON(), options);\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the DeploymentContext\n *\n * PLEASE NOTE that this class contains preview products that are subject to\n * change. Use them with caution. If you currently do not have developer preview\n * access, please contact help@twilio.com.\n *\n * @constructor Twilio.Preview.DeployedDevices.FleetContext.DeploymentInstance\n *\n * @property {string} sid - A string that uniquely identifies this Deployment.\n * @property {string} url - URL of this Deployment.\n * @property {string} friendlyName -\n *          A human readable description for this Deployment\n * @property {string} fleetSid - The unique identifier of the Fleet.\n * @property {string} accountSid - The unique SID that identifies this Account.\n * @property {string} syncServiceSid -\n *          The unique identifier of the Sync service instance.\n * @property {Date} dateCreated - The date this Deployment was created.\n * @property {Date} dateUpdated - The date this Deployment was updated.\n *\n * @param {DeployedDevices} version - Version of the resource\n * @param {DeploymentPayload} payload - The instance payload\n * @param {sid_like} fleetSid - The unique identifier of the Fleet.\n * @param {sid} sid - A string that uniquely identifies the Deployment.\n */\n/* jshint ignore:end */\nDeploymentInstance = function DeploymentInstance(version, payload, fleetSid,\n                                                  sid) {\n  this._version = version;\n\n  // Marshaled Properties\n  this.sid = payload.sid; // jshint ignore:line\n  this.url = payload.url; // jshint ignore:line\n  this.friendlyName = payload.friendly_name; // jshint ignore:line\n  this.fleetSid = payload.fleet_sid; // jshint ignore:line\n  this.accountSid = payload.account_sid; // jshint ignore:line\n  this.syncServiceSid = payload.sync_service_sid; // jshint ignore:line\n  this.dateCreated = deserialize.iso8601DateTime(payload.date_created); // jshint ignore:line\n  this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated); // jshint ignore:line\n\n  // Context\n  this._context = undefined;\n  this._solution = {fleetSid: fleetSid, sid: sid || this.sid, };\n};\n\nObject.defineProperty(DeploymentInstance.prototype,\n  '_proxy', {\n    get: function() {\n      if (!this._context) {\n        this._context = new DeploymentContext(this._version, this._solution.fleetSid, this._solution.sid);\n      }\n\n      return this._context;\n    }\n});\n\n/* jshint ignore:start */\n/**\n * fetch a DeploymentInstance\n *\n * @function fetch\n * @memberof Twilio.Preview.DeployedDevices.FleetContext.DeploymentInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed DeploymentInstance\n */\n/* jshint ignore:end */\nDeploymentInstance.prototype.fetch = function fetch(callback) {\n  return this._proxy.fetch(callback);\n};\n\n/* jshint ignore:start */\n/**\n * remove a DeploymentInstance\n *\n * @function remove\n * @memberof Twilio.Preview.DeployedDevices.FleetContext.DeploymentInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed DeploymentInstance\n */\n/* jshint ignore:end */\nDeploymentInstance.prototype.remove = function remove(callback) {\n  return this._proxy.remove(callback);\n};\n\n/* jshint ignore:start */\n/**\n * update a DeploymentInstance\n *\n * @function update\n * @memberof Twilio.Preview.DeployedDevices.FleetContext.DeploymentInstance#\n *\n * @param {object} [opts] - Options for request\n * @param {string} [opts.friendlyName] -\n *          A human readable description for this Deployment.\n * @param {string} [opts.syncServiceSid] -\n *          The unique identifier of the Sync service instance.\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed DeploymentInstance\n */\n/* jshint ignore:end */\nDeploymentInstance.prototype.update = function update(opts, callback) {\n  return this._proxy.update(opts, callback);\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Preview.DeployedDevices.FleetContext.DeploymentInstance#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nDeploymentInstance.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function(value, key) {\n    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\n\nDeploymentInstance.prototype[util.inspect.custom] = function inspect(depth,\n    options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the DeploymentContext\n *\n * PLEASE NOTE that this class contains preview products that are subject to\n * change. Use them with caution. If you currently do not have developer preview\n * access, please contact help@twilio.com.\n *\n * @constructor Twilio.Preview.DeployedDevices.FleetContext.DeploymentContext\n *\n * @param {DeployedDevices} version - Version of the resource\n * @param {sid_like} fleetSid - The fleet_sid\n * @param {sid} sid - A string that uniquely identifies the Deployment.\n */\n/* jshint ignore:end */\nDeploymentContext = function DeploymentContext(version, fleetSid, sid) {\n  this._version = version;\n\n  // Path Solution\n  this._solution = {fleetSid: fleetSid, sid: sid, };\n  this._uri = `/Fleets/${fleetSid}/Deployments/${sid}`;\n};\n\n/* jshint ignore:start */\n/**\n * fetch a DeploymentInstance\n *\n * @function fetch\n * @memberof Twilio.Preview.DeployedDevices.FleetContext.DeploymentContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed DeploymentInstance\n */\n/* jshint ignore:end */\nDeploymentContext.prototype.fetch = function fetch(callback) {\n  var deferred = Q.defer();\n  var promise = this._version.fetch({uri: this._uri, method: 'GET'});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(new DeploymentInstance(\n      this._version,\n      payload,\n      this._solution.fleetSid,\n      this._solution.sid\n    ));\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * remove a DeploymentInstance\n *\n * @function remove\n * @memberof Twilio.Preview.DeployedDevices.FleetContext.DeploymentContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed DeploymentInstance\n */\n/* jshint ignore:end */\nDeploymentContext.prototype.remove = function remove(callback) {\n  var deferred = Q.defer();\n  var promise = this._version.remove({uri: this._uri, method: 'DELETE'});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(payload);\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * update a DeploymentInstance\n *\n * @function update\n * @memberof Twilio.Preview.DeployedDevices.FleetContext.DeploymentContext#\n *\n * @param {object} [opts] - Options for request\n * @param {string} [opts.friendlyName] -\n *          A human readable description for this Deployment.\n * @param {string} [opts.syncServiceSid] -\n *          The unique identifier of the Sync service instance.\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed DeploymentInstance\n */\n/* jshint ignore:end */\nDeploymentContext.prototype.update = function update(opts, callback) {\n  if (_.isFunction(opts)) {\n    callback = opts;\n    opts = {};\n  }\n  opts = opts || {};\n\n  var deferred = Q.defer();\n  var data = values.of({\n    'FriendlyName': _.get(opts, 'friendlyName'),\n    'SyncServiceSid': _.get(opts, 'syncServiceSid')\n  });\n\n  var promise = this._version.update({uri: this._uri, method: 'POST', data: data});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(new DeploymentInstance(\n      this._version,\n      payload,\n      this._solution.fleetSid,\n      this._solution.sid\n    ));\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Preview.DeployedDevices.FleetContext.DeploymentContext#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nDeploymentContext.prototype.toJSON = function toJSON() {\n  return this._solution;\n};\n\nDeploymentContext.prototype[util.inspect.custom] = function inspect(depth,\n    options) {\n  return util.inspect(this.toJSON(), options);\n};\n\nmodule.exports = {\n  DeploymentList: DeploymentList,\n  DeploymentPage: DeploymentPage,\n  DeploymentInstance: DeploymentInstance,\n  DeploymentContext: DeploymentContext\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}