{"ast":null,"code":"'use strict';\n/* jshint ignore:start */\n\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n\n/* jshint ignore:end */\n\nvar Q = require('q');\n/* jshint ignore:line */\n\n\nvar _ = require('lodash');\n/* jshint ignore:line */\n\n\nvar util = require('util');\n/* jshint ignore:line */\n\n\nvar DeploymentList = require('./environment/deployment').DeploymentList;\n\nvar LogList = require('./environment/log').LogList;\n\nvar Page = require('../../../../base/Page');\n/* jshint ignore:line */\n\n\nvar VariableList = require('./environment/variable').VariableList;\n\nvar deserialize = require('../../../../base/deserialize');\n/* jshint ignore:line */\n\n\nvar values = require('../../../../base/values');\n/* jshint ignore:line */\n\n\nvar EnvironmentList;\nvar EnvironmentPage;\nvar EnvironmentInstance;\nvar EnvironmentContext;\n/* jshint ignore:start */\n\n/**\n * Initialize the EnvironmentList\n *\n * PLEASE NOTE that this class contains beta products that are subject to change.\n * Use them with caution.\n *\n * @constructor Twilio.Serverless.V1.ServiceContext.EnvironmentList\n *\n * @param {Twilio.Serverless.V1} version - Version of the resource\n * @param {string} serviceSid -\n *          The SID of the Service that the Environment resource is associated with\n */\n\n/* jshint ignore:end */\n\nEnvironmentList = function EnvironmentList(version, serviceSid) {\n  /* jshint ignore:start */\n\n  /**\n   * @function environments\n   * @memberof Twilio.Serverless.V1.ServiceContext#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Serverless.V1.ServiceContext.EnvironmentContext}\n   */\n\n  /* jshint ignore:end */\n  function EnvironmentListInstance(sid) {\n    return EnvironmentListInstance.get(sid);\n  }\n\n  EnvironmentListInstance._version = version; // Path Solution\n\n  EnvironmentListInstance._solution = {\n    serviceSid: serviceSid\n  };\n  EnvironmentListInstance._uri = `/Services/${serviceSid}/Environments`;\n  /* jshint ignore:start */\n\n  /**\n   * Streams EnvironmentInstance records from the API.\n   *\n   * This operation lazily loads records as efficiently as possible until the limit\n   * is reached.\n   *\n   * The results are passed into the callback function, so this operation is memory\n   * efficient.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function each\n   * @memberof Twilio.Serverless.V1.ServiceContext.EnvironmentList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         each() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no pageSize is defined but a limit is defined,\n   *         each() will attempt to read the limit with the most efficient\n   *         page size, i.e. min(limit, 1000)\n   * @param {Function} [opts.callback] -\n   *         Function to process each record. If this and a positional\n   *         callback are passed, this one will be used\n   * @param {Function} [opts.done] -\n   *          Function to be called upon completion of streaming\n   * @param {Function} [callback] - Function to process each record\n   */\n\n  /* jshint ignore:end */\n\n  EnvironmentListInstance.each = function each(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n\n    if (opts.callback) {\n      callback = opts.callback;\n    }\n\n    if (_.isUndefined(callback)) {\n      throw new Error('Callback function must be provided');\n    }\n\n    var done = false;\n    var currentPage = 1;\n    var currentResource = 0;\n\n    var limits = this._version.readLimits({\n      limit: opts.limit,\n      pageSize: opts.pageSize\n    });\n\n    function onComplete(error) {\n      done = true;\n\n      if (_.isFunction(opts.done)) {\n        opts.done(error);\n      }\n    }\n\n    function fetchNextPage(fn) {\n      var promise = fn();\n\n      if (_.isUndefined(promise)) {\n        onComplete();\n        return;\n      }\n\n      promise.then(function (page) {\n        _.each(page.instances, function (instance) {\n          if (done || !_.isUndefined(opts.limit) && currentResource >= opts.limit) {\n            done = true;\n            return false;\n          }\n\n          currentResource++;\n          callback(instance, onComplete);\n        });\n\n        if (!done) {\n          currentPage++;\n          fetchNextPage(_.bind(page.nextPage, page));\n        } else {\n          onComplete();\n        }\n      });\n      promise.catch(onComplete);\n    }\n\n    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Lists EnvironmentInstance records from the API as a list.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function list\n   * @memberof Twilio.Serverless.V1.ServiceContext.EnvironmentList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         list() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no page_size is defined but a limit is defined,\n   *         list() will attempt to read the limit with the most\n   *         efficient page size, i.e. min(limit, 1000)\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  EnvironmentListInstance.list = function list(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n    var deferred = Q.defer();\n    var allResources = [];\n\n    opts.callback = function (resource, done) {\n      allResources.push(resource);\n\n      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {\n        done();\n      }\n    };\n\n    opts.done = function (error) {\n      if (_.isUndefined(error)) {\n        deferred.resolve(allResources);\n      } else {\n        deferred.reject(error);\n      }\n    };\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    this.each(opts);\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Retrieve a single page of EnvironmentInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function page\n   * @memberof Twilio.Serverless.V1.ServiceContext.EnvironmentList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.pageToken] - PageToken provided by the API\n   * @param {number} [opts.pageNumber] -\n   *          Page Number, this value is simply for client state\n   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  EnvironmentListInstance.page = function page(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n    var deferred = Q.defer();\n    var data = values.of({\n      'PageToken': opts.pageToken,\n      'Page': opts.pageNumber,\n      'PageSize': opts.pageSize\n    });\n\n    var promise = this._version.page({\n      uri: this._uri,\n      method: 'GET',\n      params: data\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new EnvironmentPage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Retrieve a single target page of EnvironmentInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function getPage\n   * @memberof Twilio.Serverless.V1.ServiceContext.EnvironmentList#\n   *\n   * @param {string} [targetUrl] - API-generated URL for the requested results page\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  EnvironmentListInstance.getPage = function getPage(targetUrl, callback) {\n    var deferred = Q.defer();\n\n    var promise = this._version._domain.twilio.request({\n      method: 'GET',\n      uri: targetUrl\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new EnvironmentPage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * create a EnvironmentInstance\n   *\n   * @function create\n   * @memberof Twilio.Serverless.V1.ServiceContext.EnvironmentList#\n   *\n   * @param {object} opts - Options for request\n   * @param {string} opts.uniqueName -\n   *          A user-defined string that uniquely identifies the Environment resource\n   * @param {string} [opts.domainSuffix] -\n   *          A URL-friendly name that represents the environment\n   * @param {function} [callback] - Callback to handle processed record\n   *\n   * @returns {Promise} Resolves to processed EnvironmentInstance\n   */\n\n  /* jshint ignore:end */\n\n\n  EnvironmentListInstance.create = function create(opts, callback) {\n    if (_.isUndefined(opts)) {\n      throw new Error('Required parameter \"opts\" missing.');\n    }\n\n    if (_.isUndefined(opts['uniqueName'])) {\n      throw new Error('Required parameter \"opts[\\'uniqueName\\']\" missing.');\n    }\n\n    var deferred = Q.defer();\n    var data = values.of({\n      'UniqueName': _.get(opts, 'uniqueName'),\n      'DomainSuffix': _.get(opts, 'domainSuffix')\n    });\n\n    var promise = this._version.create({\n      uri: this._uri,\n      method: 'POST',\n      data: data\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new EnvironmentInstance(this._version, payload, this._solution.serviceSid, this._solution.sid));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Constructs a environment\n   *\n   * @function get\n   * @memberof Twilio.Serverless.V1.ServiceContext.EnvironmentList#\n   *\n   * @param {string} sid - The SID of the Environment resource to fetch\n   *\n   * @returns {Twilio.Serverless.V1.ServiceContext.EnvironmentContext}\n   */\n\n  /* jshint ignore:end */\n\n\n  EnvironmentListInstance.get = function get(sid) {\n    return new EnvironmentContext(this._version, this._solution.serviceSid, sid);\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Serverless.V1.ServiceContext.EnvironmentList#\n   *\n   * @returns Object\n   */\n\n  /* jshint ignore:end */\n\n\n  EnvironmentListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n\n  EnvironmentListInstance[util.inspect.custom] = function inspect(depth, options) {\n    return util.inspect(this.toJSON(), options);\n  };\n\n  return EnvironmentListInstance;\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the EnvironmentPage\n *\n * PLEASE NOTE that this class contains beta products that are subject to change.\n * Use them with caution.\n *\n * @constructor Twilio.Serverless.V1.ServiceContext.EnvironmentPage\n *\n * @param {V1} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {EnvironmentSolution} solution - Path solution\n *\n * @returns EnvironmentPage\n */\n\n/* jshint ignore:end */\n\n\nEnvironmentPage = function EnvironmentPage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n\n_.extend(EnvironmentPage.prototype, Page.prototype);\n\nEnvironmentPage.prototype.constructor = EnvironmentPage;\n/* jshint ignore:start */\n\n/**\n * Build an instance of EnvironmentInstance\n *\n * @function getInstance\n * @memberof Twilio.Serverless.V1.ServiceContext.EnvironmentPage#\n *\n * @param {EnvironmentPayload} payload - Payload response from the API\n *\n * @returns EnvironmentInstance\n */\n\n/* jshint ignore:end */\n\nEnvironmentPage.prototype.getInstance = function getInstance(payload) {\n  return new EnvironmentInstance(this._version, payload, this._solution.serviceSid);\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Serverless.V1.ServiceContext.EnvironmentPage#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nEnvironmentPage.prototype.toJSON = function toJSON() {\n  let clone = {};\n\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n\n  return clone;\n};\n\nEnvironmentPage.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the EnvironmentContext\n *\n * PLEASE NOTE that this class contains beta products that are subject to change.\n * Use them with caution.\n *\n * @constructor Twilio.Serverless.V1.ServiceContext.EnvironmentInstance\n *\n * @property {string} sid -\n *          The unique string that identifies the Environment resource\n * @property {string} accountSid -\n *          The SID of the Account that created the Environment resource\n * @property {string} serviceSid -\n *          The SID of the Service that the Environment resource is associated with\n * @property {string} buildSid - The SID of the build deployed in the environment\n * @property {string} uniqueName -\n *          A user-defined string that uniquely identifies the Environment resource\n * @property {string} domainSuffix -\n *          A URL-friendly name that represents the environment\n * @property {string} domainName -\n *          The domain name for all Functions and Assets deployed in the Environment\n * @property {Date} dateCreated -\n *          The ISO 8601 date and time in GMT when the Environment resource was created\n * @property {Date} dateUpdated -\n *          The ISO 8601 date and time in GMT when the Environment resource was last updated\n * @property {string} url - The absolute URL of the Environment resource\n * @property {string} links -\n *          The URLs of the Environment resource's nested resources\n *\n * @param {V1} version - Version of the resource\n * @param {EnvironmentPayload} payload - The instance payload\n * @param {sid} serviceSid -\n *          The SID of the Service that the Environment resource is associated with\n * @param {sid} sid - The SID of the Environment resource to fetch\n */\n\n/* jshint ignore:end */\n\n\nEnvironmentInstance = function EnvironmentInstance(version, payload, serviceSid, sid) {\n  this._version = version; // Marshaled Properties\n\n  this.sid = payload.sid; // jshint ignore:line\n\n  this.accountSid = payload.account_sid; // jshint ignore:line\n\n  this.serviceSid = payload.service_sid; // jshint ignore:line\n\n  this.buildSid = payload.build_sid; // jshint ignore:line\n\n  this.uniqueName = payload.unique_name; // jshint ignore:line\n\n  this.domainSuffix = payload.domain_suffix; // jshint ignore:line\n\n  this.domainName = payload.domain_name; // jshint ignore:line\n\n  this.dateCreated = deserialize.iso8601DateTime(payload.date_created); // jshint ignore:line\n\n  this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated); // jshint ignore:line\n\n  this.url = payload.url; // jshint ignore:line\n\n  this.links = payload.links; // jshint ignore:line\n  // Context\n\n  this._context = undefined;\n  this._solution = {\n    serviceSid: serviceSid,\n    sid: sid || this.sid\n  };\n};\n\nObject.defineProperty(EnvironmentInstance.prototype, '_proxy', {\n  get: function () {\n    if (!this._context) {\n      this._context = new EnvironmentContext(this._version, this._solution.serviceSid, this._solution.sid);\n    }\n\n    return this._context;\n  }\n});\n/* jshint ignore:start */\n\n/**\n * fetch a EnvironmentInstance\n *\n * @function fetch\n * @memberof Twilio.Serverless.V1.ServiceContext.EnvironmentInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed EnvironmentInstance\n */\n\n/* jshint ignore:end */\n\nEnvironmentInstance.prototype.fetch = function fetch(callback) {\n  return this._proxy.fetch(callback);\n};\n/* jshint ignore:start */\n\n/**\n * remove a EnvironmentInstance\n *\n * @function remove\n * @memberof Twilio.Serverless.V1.ServiceContext.EnvironmentInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed EnvironmentInstance\n */\n\n/* jshint ignore:end */\n\n\nEnvironmentInstance.prototype.remove = function remove(callback) {\n  return this._proxy.remove(callback);\n};\n/* jshint ignore:start */\n\n/**\n * Access the variables\n *\n * @function variables\n * @memberof Twilio.Serverless.V1.ServiceContext.EnvironmentInstance#\n *\n * @returns {Twilio.Serverless.V1.ServiceContext.EnvironmentContext.VariableList}\n */\n\n/* jshint ignore:end */\n\n\nEnvironmentInstance.prototype.variables = function variables() {\n  return this._proxy.variables;\n};\n/* jshint ignore:start */\n\n/**\n * Access the deployments\n *\n * @function deployments\n * @memberof Twilio.Serverless.V1.ServiceContext.EnvironmentInstance#\n *\n * @returns {Twilio.Serverless.V1.ServiceContext.EnvironmentContext.DeploymentList}\n */\n\n/* jshint ignore:end */\n\n\nEnvironmentInstance.prototype.deployments = function deployments() {\n  return this._proxy.deployments;\n};\n/* jshint ignore:start */\n\n/**\n * Access the logs\n *\n * @function logs\n * @memberof Twilio.Serverless.V1.ServiceContext.EnvironmentInstance#\n *\n * @returns {Twilio.Serverless.V1.ServiceContext.EnvironmentContext.LogList}\n */\n\n/* jshint ignore:end */\n\n\nEnvironmentInstance.prototype.logs = function logs() {\n  return this._proxy.logs;\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Serverless.V1.ServiceContext.EnvironmentInstance#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nEnvironmentInstance.prototype.toJSON = function toJSON() {\n  let clone = {};\n\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n\n  return clone;\n};\n\nEnvironmentInstance.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the EnvironmentContext\n *\n * PLEASE NOTE that this class contains beta products that are subject to change.\n * Use them with caution.\n *\n * @constructor Twilio.Serverless.V1.ServiceContext.EnvironmentContext\n *\n * @property {Twilio.Serverless.V1.ServiceContext.EnvironmentContext.VariableList} variables -\n *          variables resource\n * @property {Twilio.Serverless.V1.ServiceContext.EnvironmentContext.DeploymentList} deployments -\n *          deployments resource\n * @property {Twilio.Serverless.V1.ServiceContext.EnvironmentContext.LogList} logs -\n *          logs resource\n *\n * @param {V1} version - Version of the resource\n * @param {sid_like} serviceSid -\n *          The SID of the Service to fetch the Environment resource from\n * @param {sid} sid - The SID of the Environment resource to fetch\n */\n\n/* jshint ignore:end */\n\n\nEnvironmentContext = function EnvironmentContext(version, serviceSid, sid) {\n  this._version = version; // Path Solution\n\n  this._solution = {\n    serviceSid: serviceSid,\n    sid: sid\n  };\n  this._uri = `/Services/${serviceSid}/Environments/${sid}`; // Dependents\n\n  this._variables = undefined;\n  this._deployments = undefined;\n  this._logs = undefined;\n};\n/* jshint ignore:start */\n\n/**\n * fetch a EnvironmentInstance\n *\n * @function fetch\n * @memberof Twilio.Serverless.V1.ServiceContext.EnvironmentContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed EnvironmentInstance\n */\n\n/* jshint ignore:end */\n\n\nEnvironmentContext.prototype.fetch = function fetch(callback) {\n  var deferred = Q.defer();\n\n  var promise = this._version.fetch({\n    uri: this._uri,\n    method: 'GET'\n  });\n\n  promise = promise.then(function (payload) {\n    deferred.resolve(new EnvironmentInstance(this._version, payload, this._solution.serviceSid, this._solution.sid));\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n/* jshint ignore:start */\n\n/**\n * remove a EnvironmentInstance\n *\n * @function remove\n * @memberof Twilio.Serverless.V1.ServiceContext.EnvironmentContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed EnvironmentInstance\n */\n\n/* jshint ignore:end */\n\n\nEnvironmentContext.prototype.remove = function remove(callback) {\n  var deferred = Q.defer();\n\n  var promise = this._version.remove({\n    uri: this._uri,\n    method: 'DELETE'\n  });\n\n  promise = promise.then(function (payload) {\n    deferred.resolve(payload);\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\nObject.defineProperty(EnvironmentContext.prototype, 'variables', {\n  get: function () {\n    if (!this._variables) {\n      this._variables = new VariableList(this._version, this._solution.serviceSid, this._solution.sid);\n    }\n\n    return this._variables;\n  }\n});\nObject.defineProperty(EnvironmentContext.prototype, 'deployments', {\n  get: function () {\n    if (!this._deployments) {\n      this._deployments = new DeploymentList(this._version, this._solution.serviceSid, this._solution.sid);\n    }\n\n    return this._deployments;\n  }\n});\nObject.defineProperty(EnvironmentContext.prototype, 'logs', {\n  get: function () {\n    if (!this._logs) {\n      this._logs = new LogList(this._version, this._solution.serviceSid, this._solution.sid);\n    }\n\n    return this._logs;\n  }\n});\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Serverless.V1.ServiceContext.EnvironmentContext#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\nEnvironmentContext.prototype.toJSON = function toJSON() {\n  return this._solution;\n};\n\nEnvironmentContext.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\nmodule.exports = {\n  EnvironmentList: EnvironmentList,\n  EnvironmentPage: EnvironmentPage,\n  EnvironmentInstance: EnvironmentInstance,\n  EnvironmentContext: EnvironmentContext\n};","map":{"version":3,"names":["Q","require","_","util","DeploymentList","LogList","Page","VariableList","deserialize","values","EnvironmentList","EnvironmentPage","EnvironmentInstance","EnvironmentContext","version","serviceSid","EnvironmentListInstance","sid","get","_version","_solution","_uri","each","opts","callback","isFunction","isUndefined","Error","done","currentPage","currentResource","limits","readLimits","limit","pageSize","onComplete","error","fetchNextPage","fn","promise","then","page","instances","instance","bind","nextPage","catch","merge","list","deferred","defer","allResources","resource","push","length","resolve","reject","nodeify","data","of","pageToken","pageNumber","uri","method","params","payload","getPage","targetUrl","_domain","twilio","request","create","toJSON","inspect","custom","depth","options","response","solution","prototype","constructor","call","extend","getInstance","clone","forOwn","value","key","startsWith","accountSid","account_sid","service_sid","buildSid","build_sid","uniqueName","unique_name","domainSuffix","domain_suffix","domainName","domain_name","dateCreated","iso8601DateTime","date_created","dateUpdated","date_updated","url","links","_context","undefined","Object","defineProperty","fetch","_proxy","remove","variables","deployments","logs","_variables","_deployments","_logs","module","exports"],"sources":["/Users/hooniesun/rmit/fwp/assessment1/lan/node_modules/twilio/lib/rest/serverless/v1/service/environment.js"],"sourcesContent":["'use strict';\n\n/* jshint ignore:start */\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n/* jshint ignore:end */\n\nvar Q = require('q');  /* jshint ignore:line */\nvar _ = require('lodash');  /* jshint ignore:line */\nvar util = require('util');  /* jshint ignore:line */\nvar DeploymentList = require('./environment/deployment').DeploymentList;\nvar LogList = require('./environment/log').LogList;\nvar Page = require('../../../../base/Page');  /* jshint ignore:line */\nvar VariableList = require('./environment/variable').VariableList;\nvar deserialize = require(\n    '../../../../base/deserialize');  /* jshint ignore:line */\nvar values = require('../../../../base/values');  /* jshint ignore:line */\n\nvar EnvironmentList;\nvar EnvironmentPage;\nvar EnvironmentInstance;\nvar EnvironmentContext;\n\n/* jshint ignore:start */\n/**\n * Initialize the EnvironmentList\n *\n * PLEASE NOTE that this class contains beta products that are subject to change.\n * Use them with caution.\n *\n * @constructor Twilio.Serverless.V1.ServiceContext.EnvironmentList\n *\n * @param {Twilio.Serverless.V1} version - Version of the resource\n * @param {string} serviceSid -\n *          The SID of the Service that the Environment resource is associated with\n */\n/* jshint ignore:end */\nEnvironmentList = function EnvironmentList(version, serviceSid) {\n  /* jshint ignore:start */\n  /**\n   * @function environments\n   * @memberof Twilio.Serverless.V1.ServiceContext#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Serverless.V1.ServiceContext.EnvironmentContext}\n   */\n  /* jshint ignore:end */\n  function EnvironmentListInstance(sid) {\n    return EnvironmentListInstance.get(sid);\n  }\n\n  EnvironmentListInstance._version = version;\n  // Path Solution\n  EnvironmentListInstance._solution = {serviceSid: serviceSid};\n  EnvironmentListInstance._uri = `/Services/${serviceSid}/Environments`;\n  /* jshint ignore:start */\n  /**\n   * Streams EnvironmentInstance records from the API.\n   *\n   * This operation lazily loads records as efficiently as possible until the limit\n   * is reached.\n   *\n   * The results are passed into the callback function, so this operation is memory\n   * efficient.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function each\n   * @memberof Twilio.Serverless.V1.ServiceContext.EnvironmentList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         each() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no pageSize is defined but a limit is defined,\n   *         each() will attempt to read the limit with the most efficient\n   *         page size, i.e. min(limit, 1000)\n   * @param {Function} [opts.callback] -\n   *         Function to process each record. If this and a positional\n   *         callback are passed, this one will be used\n   * @param {Function} [opts.done] -\n   *          Function to be called upon completion of streaming\n   * @param {Function} [callback] - Function to process each record\n   */\n  /* jshint ignore:end */\n  EnvironmentListInstance.each = function each(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    if (opts.callback) {\n      callback = opts.callback;\n    }\n    if (_.isUndefined(callback)) {\n      throw new Error('Callback function must be provided');\n    }\n\n    var done = false;\n    var currentPage = 1;\n    var currentResource = 0;\n    var limits = this._version.readLimits({\n      limit: opts.limit,\n      pageSize: opts.pageSize\n    });\n\n    function onComplete(error) {\n      done = true;\n      if (_.isFunction(opts.done)) {\n        opts.done(error);\n      }\n    }\n\n    function fetchNextPage(fn) {\n      var promise = fn();\n      if (_.isUndefined(promise)) {\n        onComplete();\n        return;\n      }\n\n      promise.then(function(page) {\n        _.each(page.instances, function(instance) {\n          if (done || (!_.isUndefined(opts.limit) && currentResource >= opts.limit)) {\n            done = true;\n            return false;\n          }\n\n          currentResource++;\n          callback(instance, onComplete);\n        });\n\n        if (!done) {\n          currentPage++;\n          fetchNextPage(_.bind(page.nextPage, page));\n        } else {\n          onComplete();\n        }\n      });\n\n      promise.catch(onComplete);\n    }\n\n    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Lists EnvironmentInstance records from the API as a list.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function list\n   * @memberof Twilio.Serverless.V1.ServiceContext.EnvironmentList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         list() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no page_size is defined but a limit is defined,\n   *         list() will attempt to read the limit with the most\n   *         efficient page size, i.e. min(limit, 1000)\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  EnvironmentListInstance.list = function list(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    var deferred = Q.defer();\n    var allResources = [];\n    opts.callback = function(resource, done) {\n      allResources.push(resource);\n\n      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {\n        done();\n      }\n    };\n\n    opts.done = function(error) {\n      if (_.isUndefined(error)) {\n        deferred.resolve(allResources);\n      } else {\n        deferred.reject(error);\n      }\n    };\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    this.each(opts);\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single page of EnvironmentInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function page\n   * @memberof Twilio.Serverless.V1.ServiceContext.EnvironmentList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.pageToken] - PageToken provided by the API\n   * @param {number} [opts.pageNumber] -\n   *          Page Number, this value is simply for client state\n   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  EnvironmentListInstance.page = function page(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n\n    var deferred = Q.defer();\n    var data = values.of({\n      'PageToken': opts.pageToken,\n      'Page': opts.pageNumber,\n      'PageSize': opts.pageSize\n    });\n\n    var promise = this._version.page({uri: this._uri, method: 'GET', params: data});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new EnvironmentPage(this._version, payload, this._solution));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single target page of EnvironmentInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function getPage\n   * @memberof Twilio.Serverless.V1.ServiceContext.EnvironmentList#\n   *\n   * @param {string} [targetUrl] - API-generated URL for the requested results page\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  EnvironmentListInstance.getPage = function getPage(targetUrl, callback) {\n    var deferred = Q.defer();\n\n    var promise = this._version._domain.twilio.request({method: 'GET', uri: targetUrl});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new EnvironmentPage(this._version, payload, this._solution));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * create a EnvironmentInstance\n   *\n   * @function create\n   * @memberof Twilio.Serverless.V1.ServiceContext.EnvironmentList#\n   *\n   * @param {object} opts - Options for request\n   * @param {string} opts.uniqueName -\n   *          A user-defined string that uniquely identifies the Environment resource\n   * @param {string} [opts.domainSuffix] -\n   *          A URL-friendly name that represents the environment\n   * @param {function} [callback] - Callback to handle processed record\n   *\n   * @returns {Promise} Resolves to processed EnvironmentInstance\n   */\n  /* jshint ignore:end */\n  EnvironmentListInstance.create = function create(opts, callback) {\n    if (_.isUndefined(opts)) {\n      throw new Error('Required parameter \"opts\" missing.');\n    }\n    if (_.isUndefined(opts['uniqueName'])) {\n      throw new Error('Required parameter \"opts[\\'uniqueName\\']\" missing.');\n    }\n\n    var deferred = Q.defer();\n    var data = values.of({\n      'UniqueName': _.get(opts, 'uniqueName'),\n      'DomainSuffix': _.get(opts, 'domainSuffix')\n    });\n\n    var promise = this._version.create({uri: this._uri, method: 'POST', data: data});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new EnvironmentInstance(\n        this._version,\n        payload,\n        this._solution.serviceSid,\n        this._solution.sid\n      ));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Constructs a environment\n   *\n   * @function get\n   * @memberof Twilio.Serverless.V1.ServiceContext.EnvironmentList#\n   *\n   * @param {string} sid - The SID of the Environment resource to fetch\n   *\n   * @returns {Twilio.Serverless.V1.ServiceContext.EnvironmentContext}\n   */\n  /* jshint ignore:end */\n  EnvironmentListInstance.get = function get(sid) {\n    return new EnvironmentContext(this._version, this._solution.serviceSid, sid);\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Serverless.V1.ServiceContext.EnvironmentList#\n   *\n   * @returns Object\n   */\n  /* jshint ignore:end */\n  EnvironmentListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n\n  EnvironmentListInstance[util.inspect.custom] = function inspect(depth, options)\n      {\n    return util.inspect(this.toJSON(), options);\n  };\n\n  return EnvironmentListInstance;\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the EnvironmentPage\n *\n * PLEASE NOTE that this class contains beta products that are subject to change.\n * Use them with caution.\n *\n * @constructor Twilio.Serverless.V1.ServiceContext.EnvironmentPage\n *\n * @param {V1} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {EnvironmentSolution} solution - Path solution\n *\n * @returns EnvironmentPage\n */\n/* jshint ignore:end */\nEnvironmentPage = function EnvironmentPage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n\n_.extend(EnvironmentPage.prototype, Page.prototype);\nEnvironmentPage.prototype.constructor = EnvironmentPage;\n\n/* jshint ignore:start */\n/**\n * Build an instance of EnvironmentInstance\n *\n * @function getInstance\n * @memberof Twilio.Serverless.V1.ServiceContext.EnvironmentPage#\n *\n * @param {EnvironmentPayload} payload - Payload response from the API\n *\n * @returns EnvironmentInstance\n */\n/* jshint ignore:end */\nEnvironmentPage.prototype.getInstance = function getInstance(payload) {\n  return new EnvironmentInstance(this._version, payload, this._solution.serviceSid);\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Serverless.V1.ServiceContext.EnvironmentPage#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nEnvironmentPage.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function(value, key) {\n    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\n\nEnvironmentPage.prototype[util.inspect.custom] = function inspect(depth,\n    options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the EnvironmentContext\n *\n * PLEASE NOTE that this class contains beta products that are subject to change.\n * Use them with caution.\n *\n * @constructor Twilio.Serverless.V1.ServiceContext.EnvironmentInstance\n *\n * @property {string} sid -\n *          The unique string that identifies the Environment resource\n * @property {string} accountSid -\n *          The SID of the Account that created the Environment resource\n * @property {string} serviceSid -\n *          The SID of the Service that the Environment resource is associated with\n * @property {string} buildSid - The SID of the build deployed in the environment\n * @property {string} uniqueName -\n *          A user-defined string that uniquely identifies the Environment resource\n * @property {string} domainSuffix -\n *          A URL-friendly name that represents the environment\n * @property {string} domainName -\n *          The domain name for all Functions and Assets deployed in the Environment\n * @property {Date} dateCreated -\n *          The ISO 8601 date and time in GMT when the Environment resource was created\n * @property {Date} dateUpdated -\n *          The ISO 8601 date and time in GMT when the Environment resource was last updated\n * @property {string} url - The absolute URL of the Environment resource\n * @property {string} links -\n *          The URLs of the Environment resource's nested resources\n *\n * @param {V1} version - Version of the resource\n * @param {EnvironmentPayload} payload - The instance payload\n * @param {sid} serviceSid -\n *          The SID of the Service that the Environment resource is associated with\n * @param {sid} sid - The SID of the Environment resource to fetch\n */\n/* jshint ignore:end */\nEnvironmentInstance = function EnvironmentInstance(version, payload, serviceSid,\n                                                    sid) {\n  this._version = version;\n\n  // Marshaled Properties\n  this.sid = payload.sid; // jshint ignore:line\n  this.accountSid = payload.account_sid; // jshint ignore:line\n  this.serviceSid = payload.service_sid; // jshint ignore:line\n  this.buildSid = payload.build_sid; // jshint ignore:line\n  this.uniqueName = payload.unique_name; // jshint ignore:line\n  this.domainSuffix = payload.domain_suffix; // jshint ignore:line\n  this.domainName = payload.domain_name; // jshint ignore:line\n  this.dateCreated = deserialize.iso8601DateTime(payload.date_created); // jshint ignore:line\n  this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated); // jshint ignore:line\n  this.url = payload.url; // jshint ignore:line\n  this.links = payload.links; // jshint ignore:line\n\n  // Context\n  this._context = undefined;\n  this._solution = {serviceSid: serviceSid, sid: sid || this.sid, };\n};\n\nObject.defineProperty(EnvironmentInstance.prototype,\n  '_proxy', {\n    get: function() {\n      if (!this._context) {\n        this._context = new EnvironmentContext(\n          this._version,\n          this._solution.serviceSid,\n          this._solution.sid\n        );\n      }\n\n      return this._context;\n    }\n});\n\n/* jshint ignore:start */\n/**\n * fetch a EnvironmentInstance\n *\n * @function fetch\n * @memberof Twilio.Serverless.V1.ServiceContext.EnvironmentInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed EnvironmentInstance\n */\n/* jshint ignore:end */\nEnvironmentInstance.prototype.fetch = function fetch(callback) {\n  return this._proxy.fetch(callback);\n};\n\n/* jshint ignore:start */\n/**\n * remove a EnvironmentInstance\n *\n * @function remove\n * @memberof Twilio.Serverless.V1.ServiceContext.EnvironmentInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed EnvironmentInstance\n */\n/* jshint ignore:end */\nEnvironmentInstance.prototype.remove = function remove(callback) {\n  return this._proxy.remove(callback);\n};\n\n/* jshint ignore:start */\n/**\n * Access the variables\n *\n * @function variables\n * @memberof Twilio.Serverless.V1.ServiceContext.EnvironmentInstance#\n *\n * @returns {Twilio.Serverless.V1.ServiceContext.EnvironmentContext.VariableList}\n */\n/* jshint ignore:end */\nEnvironmentInstance.prototype.variables = function variables() {\n  return this._proxy.variables;\n};\n\n/* jshint ignore:start */\n/**\n * Access the deployments\n *\n * @function deployments\n * @memberof Twilio.Serverless.V1.ServiceContext.EnvironmentInstance#\n *\n * @returns {Twilio.Serverless.V1.ServiceContext.EnvironmentContext.DeploymentList}\n */\n/* jshint ignore:end */\nEnvironmentInstance.prototype.deployments = function deployments() {\n  return this._proxy.deployments;\n};\n\n/* jshint ignore:start */\n/**\n * Access the logs\n *\n * @function logs\n * @memberof Twilio.Serverless.V1.ServiceContext.EnvironmentInstance#\n *\n * @returns {Twilio.Serverless.V1.ServiceContext.EnvironmentContext.LogList}\n */\n/* jshint ignore:end */\nEnvironmentInstance.prototype.logs = function logs() {\n  return this._proxy.logs;\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Serverless.V1.ServiceContext.EnvironmentInstance#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nEnvironmentInstance.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function(value, key) {\n    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\n\nEnvironmentInstance.prototype[util.inspect.custom] = function inspect(depth,\n    options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the EnvironmentContext\n *\n * PLEASE NOTE that this class contains beta products that are subject to change.\n * Use them with caution.\n *\n * @constructor Twilio.Serverless.V1.ServiceContext.EnvironmentContext\n *\n * @property {Twilio.Serverless.V1.ServiceContext.EnvironmentContext.VariableList} variables -\n *          variables resource\n * @property {Twilio.Serverless.V1.ServiceContext.EnvironmentContext.DeploymentList} deployments -\n *          deployments resource\n * @property {Twilio.Serverless.V1.ServiceContext.EnvironmentContext.LogList} logs -\n *          logs resource\n *\n * @param {V1} version - Version of the resource\n * @param {sid_like} serviceSid -\n *          The SID of the Service to fetch the Environment resource from\n * @param {sid} sid - The SID of the Environment resource to fetch\n */\n/* jshint ignore:end */\nEnvironmentContext = function EnvironmentContext(version, serviceSid, sid) {\n  this._version = version;\n\n  // Path Solution\n  this._solution = {serviceSid: serviceSid, sid: sid, };\n  this._uri = `/Services/${serviceSid}/Environments/${sid}`;\n\n  // Dependents\n  this._variables = undefined;\n  this._deployments = undefined;\n  this._logs = undefined;\n};\n\n/* jshint ignore:start */\n/**\n * fetch a EnvironmentInstance\n *\n * @function fetch\n * @memberof Twilio.Serverless.V1.ServiceContext.EnvironmentContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed EnvironmentInstance\n */\n/* jshint ignore:end */\nEnvironmentContext.prototype.fetch = function fetch(callback) {\n  var deferred = Q.defer();\n  var promise = this._version.fetch({uri: this._uri, method: 'GET'});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(new EnvironmentInstance(\n      this._version,\n      payload,\n      this._solution.serviceSid,\n      this._solution.sid\n    ));\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * remove a EnvironmentInstance\n *\n * @function remove\n * @memberof Twilio.Serverless.V1.ServiceContext.EnvironmentContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed EnvironmentInstance\n */\n/* jshint ignore:end */\nEnvironmentContext.prototype.remove = function remove(callback) {\n  var deferred = Q.defer();\n  var promise = this._version.remove({uri: this._uri, method: 'DELETE'});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(payload);\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\nObject.defineProperty(EnvironmentContext.prototype,\n  'variables', {\n    get: function() {\n      if (!this._variables) {\n        this._variables = new VariableList(this._version, this._solution.serviceSid, this._solution.sid);\n      }\n      return this._variables;\n    }\n});\n\nObject.defineProperty(EnvironmentContext.prototype,\n  'deployments', {\n    get: function() {\n      if (!this._deployments) {\n        this._deployments = new DeploymentList(\n          this._version,\n          this._solution.serviceSid,\n          this._solution.sid\n        );\n      }\n      return this._deployments;\n    }\n});\n\nObject.defineProperty(EnvironmentContext.prototype,\n  'logs', {\n    get: function() {\n      if (!this._logs) {\n        this._logs = new LogList(this._version, this._solution.serviceSid, this._solution.sid);\n      }\n      return this._logs;\n    }\n});\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Serverless.V1.ServiceContext.EnvironmentContext#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nEnvironmentContext.prototype.toJSON = function toJSON() {\n  return this._solution;\n};\n\nEnvironmentContext.prototype[util.inspect.custom] = function inspect(depth,\n    options) {\n  return util.inspect(this.toJSON(), options);\n};\n\nmodule.exports = {\n  EnvironmentList: EnvironmentList,\n  EnvironmentPage: EnvironmentPage,\n  EnvironmentInstance: EnvironmentInstance,\n  EnvironmentContext: EnvironmentContext\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}