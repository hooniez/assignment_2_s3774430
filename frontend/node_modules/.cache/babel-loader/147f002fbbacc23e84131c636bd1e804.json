{"ast":null,"code":"// Generated by CoffeeScript 2.4.1\n(function () {\n  var NodeType,\n      XMLAttribute,\n      XMLElement,\n      XMLNamedNodeMap,\n      XMLNode,\n      getValue,\n      isFunction,\n      isObject,\n      hasProp = {}.hasOwnProperty;\n  ({\n    isObject,\n    isFunction,\n    getValue\n  } = require('./Utility'));\n  XMLNode = require('./XMLNode');\n  NodeType = require('./NodeType');\n  XMLAttribute = require('./XMLAttribute');\n  XMLNamedNodeMap = require('./XMLNamedNodeMap'); // Represents an element of the XML document\n\n  module.exports = XMLElement = function () {\n    class XMLElement extends XMLNode {\n      // Initializes a new instance of `XMLElement`\n      // `parent` the parent node\n      // `name` element name\n      // `attributes` an object containing name/value pairs of attributes\n      constructor(parent, name, attributes) {\n        var child, j, len, ref;\n        super(parent);\n\n        if (name == null) {\n          throw new Error(\"Missing element name. \" + this.debugInfo());\n        }\n\n        this.name = this.stringify.name(name);\n        this.type = NodeType.Element;\n        this.attribs = {};\n        this.schemaTypeInfo = null;\n\n        if (attributes != null) {\n          this.attribute(attributes);\n        } // set properties if this is the root node\n\n\n        if (parent.type === NodeType.Document) {\n          this.isRoot = true;\n          this.documentObject = parent;\n          parent.rootObject = this; // set dtd name\n\n          if (parent.children) {\n            ref = parent.children;\n\n            for (j = 0, len = ref.length; j < len; j++) {\n              child = ref[j];\n\n              if (child.type === NodeType.DocType) {\n                child.name = this.name;\n                break;\n              }\n            }\n          }\n        }\n      } // Creates and returns a deep clone of `this`\n\n\n      clone() {\n        var att, attName, clonedSelf, ref;\n        clonedSelf = Object.create(this); // remove document element\n\n        if (clonedSelf.isRoot) {\n          clonedSelf.documentObject = null;\n        } // clone attributes\n\n\n        clonedSelf.attribs = {};\n        ref = this.attribs;\n\n        for (attName in ref) {\n          if (!hasProp.call(ref, attName)) continue;\n          att = ref[attName];\n          clonedSelf.attribs[attName] = att.clone();\n        } // clone child nodes\n\n\n        clonedSelf.children = [];\n        this.children.forEach(function (child) {\n          var clonedChild;\n          clonedChild = child.clone();\n          clonedChild.parent = clonedSelf;\n          return clonedSelf.children.push(clonedChild);\n        });\n        return clonedSelf;\n      } // Adds or modifies an attribute\n      // `name` attribute name\n      // `value` attribute value\n\n\n      attribute(name, value) {\n        var attName, attValue;\n\n        if (name != null) {\n          name = getValue(name);\n        }\n\n        if (isObject(name)) {\n          // expand if object\n          for (attName in name) {\n            if (!hasProp.call(name, attName)) continue;\n            attValue = name[attName];\n            this.attribute(attName, attValue);\n          }\n        } else {\n          if (isFunction(value)) {\n            value = value.apply();\n          }\n\n          if (this.options.keepNullAttributes && value == null) {\n            this.attribs[name] = new XMLAttribute(this, name, \"\");\n          } else if (value != null) {\n            this.attribs[name] = new XMLAttribute(this, name, value);\n          }\n        }\n\n        return this;\n      } // Removes an attribute\n      // `name` attribute name\n\n\n      removeAttribute(name) {\n        var attName, j, len; // Also defined in DOM level 1\n        // removeAttribute(name) removes an attribute by name.\n\n        if (name == null) {\n          throw new Error(\"Missing attribute name. \" + this.debugInfo());\n        }\n\n        name = getValue(name);\n\n        if (Array.isArray(name)) {\n          // expand if array\n          for (j = 0, len = name.length; j < len; j++) {\n            attName = name[j];\n            delete this.attribs[attName];\n          }\n        } else {\n          delete this.attribs[name];\n        }\n\n        return this;\n      } // Converts the XML fragment to string\n      // `options.pretty` pretty prints the result\n      // `options.indent` indentation for pretty print\n      // `options.offset` how many indentations to add to every line for pretty print\n      // `options.newline` newline sequence for pretty print\n      // `options.allowEmpty` do not self close empty element tags\n\n\n      toString(options) {\n        return this.options.writer.element(this, this.options.writer.filterOptions(options));\n      } // Aliases\n\n\n      att(name, value) {\n        return this.attribute(name, value);\n      }\n\n      a(name, value) {\n        return this.attribute(name, value);\n      } // DOM Level 1\n\n\n      getAttribute(name) {\n        if (this.attribs.hasOwnProperty(name)) {\n          return this.attribs[name].value;\n        } else {\n          return null;\n        }\n      }\n\n      setAttribute(name, value) {\n        throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n      }\n\n      getAttributeNode(name) {\n        if (this.attribs.hasOwnProperty(name)) {\n          return this.attribs[name];\n        } else {\n          return null;\n        }\n      }\n\n      setAttributeNode(newAttr) {\n        throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n      }\n\n      removeAttributeNode(oldAttr) {\n        throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n      }\n\n      getElementsByTagName(name) {\n        throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n      } // DOM Level 2\n\n\n      getAttributeNS(namespaceURI, localName) {\n        throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n      }\n\n      setAttributeNS(namespaceURI, qualifiedName, value) {\n        throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n      }\n\n      removeAttributeNS(namespaceURI, localName) {\n        throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n      }\n\n      getAttributeNodeNS(namespaceURI, localName) {\n        throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n      }\n\n      setAttributeNodeNS(newAttr) {\n        throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n      }\n\n      getElementsByTagNameNS(namespaceURI, localName) {\n        throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n      }\n\n      hasAttribute(name) {\n        return this.attribs.hasOwnProperty(name);\n      }\n\n      hasAttributeNS(namespaceURI, localName) {\n        throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n      } // DOM Level 3\n\n\n      setIdAttribute(name, isId) {\n        if (this.attribs.hasOwnProperty(name)) {\n          return this.attribs[name].isId;\n        } else {\n          return isId;\n        }\n      }\n\n      setIdAttributeNS(namespaceURI, localName, isId) {\n        throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n      }\n\n      setIdAttributeNode(idAttr, isId) {\n        throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n      } // DOM Level 4\n\n\n      getElementsByTagName(tagname) {\n        throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n      }\n\n      getElementsByTagNameNS(namespaceURI, localName) {\n        throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n      }\n\n      getElementsByClassName(classNames) {\n        throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n      }\n\n      isEqualNode(node) {\n        var i, j, ref;\n\n        if (!super.isEqualNode(node)) {\n          return false;\n        }\n\n        if (node.namespaceURI !== this.namespaceURI) {\n          return false;\n        }\n\n        if (node.prefix !== this.prefix) {\n          return false;\n        }\n\n        if (node.localName !== this.localName) {\n          return false;\n        }\n\n        if (node.attribs.length !== this.attribs.length) {\n          return false;\n        }\n\n        for (i = j = 0, ref = this.attribs.length - 1; 0 <= ref ? j <= ref : j >= ref; i = 0 <= ref ? ++j : --j) {\n          if (!this.attribs[i].isEqualNode(node.attribs[i])) {\n            return false;\n          }\n        }\n\n        return true;\n      }\n\n    }\n\n    ; // DOM level 1\n\n    Object.defineProperty(XMLElement.prototype, 'tagName', {\n      get: function () {\n        return this.name;\n      }\n    }); // DOM level 4\n\n    Object.defineProperty(XMLElement.prototype, 'namespaceURI', {\n      get: function () {\n        return '';\n      }\n    });\n    Object.defineProperty(XMLElement.prototype, 'prefix', {\n      get: function () {\n        return '';\n      }\n    });\n    Object.defineProperty(XMLElement.prototype, 'localName', {\n      get: function () {\n        return this.name;\n      }\n    });\n    Object.defineProperty(XMLElement.prototype, 'id', {\n      get: function () {\n        throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n      }\n    });\n    Object.defineProperty(XMLElement.prototype, 'className', {\n      get: function () {\n        throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n      }\n    });\n    Object.defineProperty(XMLElement.prototype, 'classList', {\n      get: function () {\n        throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n      }\n    });\n    Object.defineProperty(XMLElement.prototype, 'attributes', {\n      get: function () {\n        if (!this.attributeMap || !this.attributeMap.nodes) {\n          this.attributeMap = new XMLNamedNodeMap(this.attribs);\n        }\n\n        return this.attributeMap;\n      }\n    });\n    return XMLElement;\n  }.call(this);\n}).call(this);","map":{"version":3,"names":["NodeType","XMLAttribute","XMLElement","XMLNamedNodeMap","XMLNode","getValue","isFunction","isObject","hasProp","hasOwnProperty","require","module","exports","constructor","parent","name","attributes","child","j","len","ref","Error","debugInfo","stringify","type","Element","attribs","schemaTypeInfo","attribute","Document","isRoot","documentObject","rootObject","children","length","DocType","clone","att","attName","clonedSelf","Object","create","call","forEach","clonedChild","push","value","attValue","apply","options","keepNullAttributes","removeAttribute","Array","isArray","toString","writer","element","filterOptions","a","getAttribute","setAttribute","getAttributeNode","setAttributeNode","newAttr","removeAttributeNode","oldAttr","getElementsByTagName","getAttributeNS","namespaceURI","localName","setAttributeNS","qualifiedName","removeAttributeNS","getAttributeNodeNS","setAttributeNodeNS","getElementsByTagNameNS","hasAttribute","hasAttributeNS","setIdAttribute","isId","setIdAttributeNS","setIdAttributeNode","idAttr","tagname","getElementsByClassName","classNames","isEqualNode","node","i","prefix","defineProperty","prototype","get","attributeMap","nodes"],"sources":["/Users/hooniesun/rmit/fwp/assessment1/lan/node_modules/xmlbuilder/lib/XMLElement.js"],"sourcesContent":["// Generated by CoffeeScript 2.4.1\n(function() {\n  var NodeType, XMLAttribute, XMLElement, XMLNamedNodeMap, XMLNode, getValue, isFunction, isObject,\n    hasProp = {}.hasOwnProperty;\n\n  ({isObject, isFunction, getValue} = require('./Utility'));\n\n  XMLNode = require('./XMLNode');\n\n  NodeType = require('./NodeType');\n\n  XMLAttribute = require('./XMLAttribute');\n\n  XMLNamedNodeMap = require('./XMLNamedNodeMap');\n\n  // Represents an element of the XML document\n  module.exports = XMLElement = (function() {\n    class XMLElement extends XMLNode {\n      // Initializes a new instance of `XMLElement`\n\n      // `parent` the parent node\n      // `name` element name\n      // `attributes` an object containing name/value pairs of attributes\n      constructor(parent, name, attributes) {\n        var child, j, len, ref;\n        super(parent);\n        if (name == null) {\n          throw new Error(\"Missing element name. \" + this.debugInfo());\n        }\n        this.name = this.stringify.name(name);\n        this.type = NodeType.Element;\n        this.attribs = {};\n        this.schemaTypeInfo = null;\n        if (attributes != null) {\n          this.attribute(attributes);\n        }\n        // set properties if this is the root node\n        if (parent.type === NodeType.Document) {\n          this.isRoot = true;\n          this.documentObject = parent;\n          parent.rootObject = this;\n          // set dtd name\n          if (parent.children) {\n            ref = parent.children;\n            for (j = 0, len = ref.length; j < len; j++) {\n              child = ref[j];\n              if (child.type === NodeType.DocType) {\n                child.name = this.name;\n                break;\n              }\n            }\n          }\n        }\n      }\n\n      // Creates and returns a deep clone of `this`\n\n      clone() {\n        var att, attName, clonedSelf, ref;\n        clonedSelf = Object.create(this);\n        // remove document element\n        if (clonedSelf.isRoot) {\n          clonedSelf.documentObject = null;\n        }\n        // clone attributes\n        clonedSelf.attribs = {};\n        ref = this.attribs;\n        for (attName in ref) {\n          if (!hasProp.call(ref, attName)) continue;\n          att = ref[attName];\n          clonedSelf.attribs[attName] = att.clone();\n        }\n        // clone child nodes\n        clonedSelf.children = [];\n        this.children.forEach(function(child) {\n          var clonedChild;\n          clonedChild = child.clone();\n          clonedChild.parent = clonedSelf;\n          return clonedSelf.children.push(clonedChild);\n        });\n        return clonedSelf;\n      }\n\n      // Adds or modifies an attribute\n\n      // `name` attribute name\n      // `value` attribute value\n      attribute(name, value) {\n        var attName, attValue;\n        if (name != null) {\n          name = getValue(name);\n        }\n        if (isObject(name)) { // expand if object\n          for (attName in name) {\n            if (!hasProp.call(name, attName)) continue;\n            attValue = name[attName];\n            this.attribute(attName, attValue);\n          }\n        } else {\n          if (isFunction(value)) {\n            value = value.apply();\n          }\n          if (this.options.keepNullAttributes && (value == null)) {\n            this.attribs[name] = new XMLAttribute(this, name, \"\");\n          } else if (value != null) {\n            this.attribs[name] = new XMLAttribute(this, name, value);\n          }\n        }\n        return this;\n      }\n\n      // Removes an attribute\n\n      // `name` attribute name\n      removeAttribute(name) {\n        var attName, j, len;\n        // Also defined in DOM level 1\n        // removeAttribute(name) removes an attribute by name.\n        if (name == null) {\n          throw new Error(\"Missing attribute name. \" + this.debugInfo());\n        }\n        name = getValue(name);\n        if (Array.isArray(name)) { // expand if array\n          for (j = 0, len = name.length; j < len; j++) {\n            attName = name[j];\n            delete this.attribs[attName];\n          }\n        } else {\n          delete this.attribs[name];\n        }\n        return this;\n      }\n\n      // Converts the XML fragment to string\n\n      // `options.pretty` pretty prints the result\n      // `options.indent` indentation for pretty print\n      // `options.offset` how many indentations to add to every line for pretty print\n      // `options.newline` newline sequence for pretty print\n      // `options.allowEmpty` do not self close empty element tags\n      toString(options) {\n        return this.options.writer.element(this, this.options.writer.filterOptions(options));\n      }\n\n      // Aliases\n      att(name, value) {\n        return this.attribute(name, value);\n      }\n\n      a(name, value) {\n        return this.attribute(name, value);\n      }\n\n      // DOM Level 1\n      getAttribute(name) {\n        if (this.attribs.hasOwnProperty(name)) {\n          return this.attribs[name].value;\n        } else {\n          return null;\n        }\n      }\n\n      setAttribute(name, value) {\n        throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n      }\n\n      getAttributeNode(name) {\n        if (this.attribs.hasOwnProperty(name)) {\n          return this.attribs[name];\n        } else {\n          return null;\n        }\n      }\n\n      setAttributeNode(newAttr) {\n        throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n      }\n\n      removeAttributeNode(oldAttr) {\n        throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n      }\n\n      getElementsByTagName(name) {\n        throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n      }\n\n      // DOM Level 2\n      getAttributeNS(namespaceURI, localName) {\n        throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n      }\n\n      setAttributeNS(namespaceURI, qualifiedName, value) {\n        throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n      }\n\n      removeAttributeNS(namespaceURI, localName) {\n        throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n      }\n\n      getAttributeNodeNS(namespaceURI, localName) {\n        throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n      }\n\n      setAttributeNodeNS(newAttr) {\n        throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n      }\n\n      getElementsByTagNameNS(namespaceURI, localName) {\n        throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n      }\n\n      hasAttribute(name) {\n        return this.attribs.hasOwnProperty(name);\n      }\n\n      hasAttributeNS(namespaceURI, localName) {\n        throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n      }\n\n      // DOM Level 3\n      setIdAttribute(name, isId) {\n        if (this.attribs.hasOwnProperty(name)) {\n          return this.attribs[name].isId;\n        } else {\n          return isId;\n        }\n      }\n\n      setIdAttributeNS(namespaceURI, localName, isId) {\n        throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n      }\n\n      setIdAttributeNode(idAttr, isId) {\n        throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n      }\n\n      // DOM Level 4\n      getElementsByTagName(tagname) {\n        throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n      }\n\n      getElementsByTagNameNS(namespaceURI, localName) {\n        throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n      }\n\n      getElementsByClassName(classNames) {\n        throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n      }\n\n      isEqualNode(node) {\n        var i, j, ref;\n        if (!super.isEqualNode(node)) {\n          return false;\n        }\n        if (node.namespaceURI !== this.namespaceURI) {\n          return false;\n        }\n        if (node.prefix !== this.prefix) {\n          return false;\n        }\n        if (node.localName !== this.localName) {\n          return false;\n        }\n        if (node.attribs.length !== this.attribs.length) {\n          return false;\n        }\n        for (i = j = 0, ref = this.attribs.length - 1; (0 <= ref ? j <= ref : j >= ref); i = 0 <= ref ? ++j : --j) {\n          if (!this.attribs[i].isEqualNode(node.attribs[i])) {\n            return false;\n          }\n        }\n        return true;\n      }\n\n    };\n\n    // DOM level 1\n    Object.defineProperty(XMLElement.prototype, 'tagName', {\n      get: function() {\n        return this.name;\n      }\n    });\n\n    // DOM level 4\n    Object.defineProperty(XMLElement.prototype, 'namespaceURI', {\n      get: function() {\n        return '';\n      }\n    });\n\n    Object.defineProperty(XMLElement.prototype, 'prefix', {\n      get: function() {\n        return '';\n      }\n    });\n\n    Object.defineProperty(XMLElement.prototype, 'localName', {\n      get: function() {\n        return this.name;\n      }\n    });\n\n    Object.defineProperty(XMLElement.prototype, 'id', {\n      get: function() {\n        throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n      }\n    });\n\n    Object.defineProperty(XMLElement.prototype, 'className', {\n      get: function() {\n        throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n      }\n    });\n\n    Object.defineProperty(XMLElement.prototype, 'classList', {\n      get: function() {\n        throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n      }\n    });\n\n    Object.defineProperty(XMLElement.prototype, 'attributes', {\n      get: function() {\n        if (!this.attributeMap || !this.attributeMap.nodes) {\n          this.attributeMap = new XMLNamedNodeMap(this.attribs);\n        }\n        return this.attributeMap;\n      }\n    });\n\n    return XMLElement;\n\n  }).call(this);\n\n}).call(this);\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}