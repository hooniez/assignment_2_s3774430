{"ast":null,"code":"// Generated by CoffeeScript 2.4.1\n(function () {\n  var NodeType, XMLCharacterData, XMLProcessingInstruction;\n  NodeType = require('./NodeType');\n  XMLCharacterData = require('./XMLCharacterData'); // Represents a processing instruction\n\n  module.exports = XMLProcessingInstruction = class XMLProcessingInstruction extends XMLCharacterData {\n    // Initializes a new instance of `XMLProcessingInstruction`\n    // `parent` the parent node\n    // `target` instruction target\n    // `value` instruction value\n    constructor(parent, target, value) {\n      super(parent);\n\n      if (target == null) {\n        throw new Error(\"Missing instruction target. \" + this.debugInfo());\n      }\n\n      this.type = NodeType.ProcessingInstruction;\n      this.target = this.stringify.insTarget(target);\n      this.name = this.target;\n\n      if (value) {\n        this.value = this.stringify.insValue(value);\n      }\n    } // Creates and returns a deep clone of `this`\n\n\n    clone() {\n      return Object.create(this);\n    } // Converts the XML fragment to string\n    // `options.pretty` pretty prints the result\n    // `options.indent` indentation for pretty print\n    // `options.offset` how many indentations to add to every line for pretty print\n    // `options.newline` newline sequence for pretty print\n\n\n    toString(options) {\n      return this.options.writer.processingInstruction(this, this.options.writer.filterOptions(options));\n    }\n\n    isEqualNode(node) {\n      if (!super.isEqualNode(node)) {\n        return false;\n      }\n\n      if (node.target !== this.target) {\n        return false;\n      }\n\n      return true;\n    }\n\n  };\n}).call(this);","map":{"version":3,"names":["NodeType","XMLCharacterData","XMLProcessingInstruction","require","module","exports","constructor","parent","target","value","Error","debugInfo","type","ProcessingInstruction","stringify","insTarget","name","insValue","clone","Object","create","toString","options","writer","processingInstruction","filterOptions","isEqualNode","node","call"],"sources":["/Users/hooniesun/rmit/fwp/assessment1/lan/node_modules/xmlbuilder/lib/XMLProcessingInstruction.js"],"sourcesContent":["// Generated by CoffeeScript 2.4.1\n(function() {\n  var NodeType, XMLCharacterData, XMLProcessingInstruction;\n\n  NodeType = require('./NodeType');\n\n  XMLCharacterData = require('./XMLCharacterData');\n\n  // Represents a processing instruction\n  module.exports = XMLProcessingInstruction = class XMLProcessingInstruction extends XMLCharacterData {\n    // Initializes a new instance of `XMLProcessingInstruction`\n\n    // `parent` the parent node\n    // `target` instruction target\n    // `value` instruction value\n    constructor(parent, target, value) {\n      super(parent);\n      if (target == null) {\n        throw new Error(\"Missing instruction target. \" + this.debugInfo());\n      }\n      this.type = NodeType.ProcessingInstruction;\n      this.target = this.stringify.insTarget(target);\n      this.name = this.target;\n      if (value) {\n        this.value = this.stringify.insValue(value);\n      }\n    }\n\n    // Creates and returns a deep clone of `this`\n    clone() {\n      return Object.create(this);\n    }\n\n    // Converts the XML fragment to string\n\n    // `options.pretty` pretty prints the result\n    // `options.indent` indentation for pretty print\n    // `options.offset` how many indentations to add to every line for pretty print\n    // `options.newline` newline sequence for pretty print\n    toString(options) {\n      return this.options.writer.processingInstruction(this, this.options.writer.filterOptions(options));\n    }\n\n    isEqualNode(node) {\n      if (!super.isEqualNode(node)) {\n        return false;\n      }\n      if (node.target !== this.target) {\n        return false;\n      }\n      return true;\n    }\n\n  };\n\n}).call(this);\n"],"mappings":"AAAA;AACA,CAAC,YAAW;EACV,IAAIA,QAAJ,EAAcC,gBAAd,EAAgCC,wBAAhC;EAEAF,QAAQ,GAAGG,OAAO,CAAC,YAAD,CAAlB;EAEAF,gBAAgB,GAAGE,OAAO,CAAC,oBAAD,CAA1B,CALU,CAOV;;EACAC,MAAM,CAACC,OAAP,GAAiBH,wBAAwB,GAAG,MAAMA,wBAAN,SAAuCD,gBAAvC,CAAwD;IAClG;IAEA;IACA;IACA;IACAK,WAAW,CAACC,MAAD,EAASC,MAAT,EAAiBC,KAAjB,EAAwB;MACjC,MAAMF,MAAN;;MACA,IAAIC,MAAM,IAAI,IAAd,EAAoB;QAClB,MAAM,IAAIE,KAAJ,CAAU,iCAAiC,KAAKC,SAAL,EAA3C,CAAN;MACD;;MACD,KAAKC,IAAL,GAAYZ,QAAQ,CAACa,qBAArB;MACA,KAAKL,MAAL,GAAc,KAAKM,SAAL,CAAeC,SAAf,CAAyBP,MAAzB,CAAd;MACA,KAAKQ,IAAL,GAAY,KAAKR,MAAjB;;MACA,IAAIC,KAAJ,EAAW;QACT,KAAKA,KAAL,GAAa,KAAKK,SAAL,CAAeG,QAAf,CAAwBR,KAAxB,CAAb;MACD;IACF,CAjBiG,CAmBlG;;;IACAS,KAAK,GAAG;MACN,OAAOC,MAAM,CAACC,MAAP,CAAc,IAAd,CAAP;IACD,CAtBiG,CAwBlG;IAEA;IACA;IACA;IACA;;;IACAC,QAAQ,CAACC,OAAD,EAAU;MAChB,OAAO,KAAKA,OAAL,CAAaC,MAAb,CAAoBC,qBAApB,CAA0C,IAA1C,EAAgD,KAAKF,OAAL,CAAaC,MAAb,CAAoBE,aAApB,CAAkCH,OAAlC,CAAhD,CAAP;IACD;;IAEDI,WAAW,CAACC,IAAD,EAAO;MAChB,IAAI,CAAC,MAAMD,WAAN,CAAkBC,IAAlB,CAAL,EAA8B;QAC5B,OAAO,KAAP;MACD;;MACD,IAAIA,IAAI,CAACnB,MAAL,KAAgB,KAAKA,MAAzB,EAAiC;QAC/B,OAAO,KAAP;MACD;;MACD,OAAO,IAAP;IACD;;EA1CiG,CAApG;AA8CD,CAtDD,EAsDGoB,IAtDH,CAsDQ,IAtDR"},"metadata":{},"sourceType":"script"}