{"ast":null,"code":"'use strict';\n/* jshint ignore:start */\n\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n\n/* jshint ignore:end */\n\nvar Q = require('q');\n/* jshint ignore:line */\n\n\nvar _ = require('lodash');\n/* jshint ignore:line */\n\n\nvar util = require('util');\n/* jshint ignore:line */\n\n\nvar Page = require('../../../../../../../../base/Page');\n/* jshint ignore:line */\n\n\nvar deserialize = require('../../../../../../../../base/deserialize');\n/* jshint ignore:line */\n\n\nvar values = require('../../../../../../../../base/values');\n/* jshint ignore:line */\n\n\nvar AuthCallsIpAccessControlListMappingList;\nvar AuthCallsIpAccessControlListMappingPage;\nvar AuthCallsIpAccessControlListMappingInstance;\nvar AuthCallsIpAccessControlListMappingContext;\n/* jshint ignore:start */\n\n/**\n * Initialize the AuthCallsIpAccessControlListMappingList\n *\n * @constructor Twilio.Api.V2010.AccountContext.SipContext.DomainContext.AuthTypesContext.AuthTypeCallsContext.AuthCallsIpAccessControlListMappingList\n *\n * @param {Twilio.Api.V2010} version - Version of the resource\n * @param {string} accountSid - The SID of the Account that created the resource\n * @param {string} domainSid - The unique string that identifies the resource\n */\n\n/* jshint ignore:end */\n\nAuthCallsIpAccessControlListMappingList = function AuthCallsIpAccessControlListMappingList(version, accountSid, domainSid) {\n  /* jshint ignore:start */\n\n  /**\n   * @function ipAccessControlListMappings\n   * @memberof Twilio.Api.V2010.AccountContext.SipContext.DomainContext.AuthTypesContext.AuthTypeCallsContext#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Api.V2010.AccountContext.SipContext.DomainContext.AuthTypesContext.AuthTypeCallsContext.AuthCallsIpAccessControlListMappingContext}\n   */\n\n  /* jshint ignore:end */\n  function AuthCallsIpAccessControlListMappingListInstance(sid) {\n    return AuthCallsIpAccessControlListMappingListInstance.get(sid);\n  }\n\n  AuthCallsIpAccessControlListMappingListInstance._version = version; // Path Solution\n\n  AuthCallsIpAccessControlListMappingListInstance._solution = {\n    accountSid: accountSid,\n    domainSid: domainSid\n  };\n  AuthCallsIpAccessControlListMappingListInstance._uri = `/Accounts/${accountSid}/SIP/Domains/${domainSid}/Auth/Calls/IpAccessControlListMappings.json`;\n  /* jshint ignore:start */\n\n  /**\n   * create a AuthCallsIpAccessControlListMappingInstance\n   *\n   * @function create\n   * @memberof Twilio.Api.V2010.AccountContext.SipContext.DomainContext.AuthTypesContext.AuthTypeCallsContext.AuthCallsIpAccessControlListMappingList#\n   *\n   * @param {object} opts - Options for request\n   * @param {string} opts.ipAccessControlListSid -\n   *          The SID of the IpAccessControlList resource to map to the SIP domain\n   * @param {function} [callback] - Callback to handle processed record\n   *\n   * @returns {Promise} Resolves to processed AuthCallsIpAccessControlListMappingInstance\n   */\n\n  /* jshint ignore:end */\n\n  AuthCallsIpAccessControlListMappingListInstance.create = function create(opts, callback) {\n    if (_.isUndefined(opts)) {\n      throw new Error('Required parameter \"opts\" missing.');\n    }\n\n    if (_.isUndefined(opts['ipAccessControlListSid'])) {\n      throw new Error('Required parameter \"opts[\\'ipAccessControlListSid\\']\" missing.');\n    }\n\n    var deferred = Q.defer();\n    var data = values.of({\n      'IpAccessControlListSid': _.get(opts, 'ipAccessControlListSid')\n    });\n\n    var promise = this._version.create({\n      uri: this._uri,\n      method: 'POST',\n      data: data\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new AuthCallsIpAccessControlListMappingInstance(this._version, payload, this._solution.accountSid, this._solution.domainSid, this._solution.sid));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Streams AuthCallsIpAccessControlListMappingInstance records from the API.\n   *\n   * This operation lazily loads records as efficiently as possible until the limit\n   * is reached.\n   *\n   * The results are passed into the callback function, so this operation is memory\n   * efficient.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function each\n   * @memberof Twilio.Api.V2010.AccountContext.SipContext.DomainContext.AuthTypesContext.AuthTypeCallsContext.AuthCallsIpAccessControlListMappingList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         each() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no pageSize is defined but a limit is defined,\n   *         each() will attempt to read the limit with the most efficient\n   *         page size, i.e. min(limit, 1000)\n   * @param {Function} [opts.callback] -\n   *         Function to process each record. If this and a positional\n   *         callback are passed, this one will be used\n   * @param {Function} [opts.done] -\n   *          Function to be called upon completion of streaming\n   * @param {Function} [callback] - Function to process each record\n   */\n\n  /* jshint ignore:end */\n\n\n  AuthCallsIpAccessControlListMappingListInstance.each = function each(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n\n    if (opts.callback) {\n      callback = opts.callback;\n    }\n\n    if (_.isUndefined(callback)) {\n      throw new Error('Callback function must be provided');\n    }\n\n    var done = false;\n    var currentPage = 1;\n    var currentResource = 0;\n\n    var limits = this._version.readLimits({\n      limit: opts.limit,\n      pageSize: opts.pageSize\n    });\n\n    function onComplete(error) {\n      done = true;\n\n      if (_.isFunction(opts.done)) {\n        opts.done(error);\n      }\n    }\n\n    function fetchNextPage(fn) {\n      var promise = fn();\n\n      if (_.isUndefined(promise)) {\n        onComplete();\n        return;\n      }\n\n      promise.then(function (page) {\n        _.each(page.instances, function (instance) {\n          if (done || !_.isUndefined(opts.limit) && currentResource >= opts.limit) {\n            done = true;\n            return false;\n          }\n\n          currentResource++;\n          callback(instance, onComplete);\n        });\n\n        if (!done) {\n          currentPage++;\n          fetchNextPage(_.bind(page.nextPage, page));\n        } else {\n          onComplete();\n        }\n      });\n      promise.catch(onComplete);\n    }\n\n    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Lists AuthCallsIpAccessControlListMappingInstance records from the API as a\n   * list.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function list\n   * @memberof Twilio.Api.V2010.AccountContext.SipContext.DomainContext.AuthTypesContext.AuthTypeCallsContext.AuthCallsIpAccessControlListMappingList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         list() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no page_size is defined but a limit is defined,\n   *         list() will attempt to read the limit with the most\n   *         efficient page size, i.e. min(limit, 1000)\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  AuthCallsIpAccessControlListMappingListInstance.list = function list(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n    var deferred = Q.defer();\n    var allResources = [];\n\n    opts.callback = function (resource, done) {\n      allResources.push(resource);\n\n      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {\n        done();\n      }\n    };\n\n    opts.done = function (error) {\n      if (_.isUndefined(error)) {\n        deferred.resolve(allResources);\n      } else {\n        deferred.reject(error);\n      }\n    };\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    this.each(opts);\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Retrieve a single page of AuthCallsIpAccessControlListMappingInstance records\n   * from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function page\n   * @memberof Twilio.Api.V2010.AccountContext.SipContext.DomainContext.AuthTypesContext.AuthTypeCallsContext.AuthCallsIpAccessControlListMappingList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.pageToken] - PageToken provided by the API\n   * @param {number} [opts.pageNumber] -\n   *          Page Number, this value is simply for client state\n   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  AuthCallsIpAccessControlListMappingListInstance.page = function page(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n    var deferred = Q.defer();\n    var data = values.of({\n      'PageToken': opts.pageToken,\n      'Page': opts.pageNumber,\n      'PageSize': opts.pageSize\n    });\n\n    var promise = this._version.page({\n      uri: this._uri,\n      method: 'GET',\n      params: data\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new AuthCallsIpAccessControlListMappingPage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Retrieve a single target page of AuthCallsIpAccessControlListMappingInstance\n   * records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function getPage\n   * @memberof Twilio.Api.V2010.AccountContext.SipContext.DomainContext.AuthTypesContext.AuthTypeCallsContext.AuthCallsIpAccessControlListMappingList#\n   *\n   * @param {string} [targetUrl] - API-generated URL for the requested results page\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  AuthCallsIpAccessControlListMappingListInstance.getPage = function getPage(targetUrl, callback) {\n    var deferred = Q.defer();\n\n    var promise = this._version._domain.twilio.request({\n      method: 'GET',\n      uri: targetUrl\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new AuthCallsIpAccessControlListMappingPage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Constructs a auth_calls_ip_access_control_list_mapping\n   *\n   * @function get\n   * @memberof Twilio.Api.V2010.AccountContext.SipContext.DomainContext.AuthTypesContext.AuthTypeCallsContext.AuthCallsIpAccessControlListMappingList#\n   *\n   * @param {string} sid - The unique string that identifies the resource\n   *\n   * @returns {Twilio.Api.V2010.AccountContext.SipContext.DomainContext.AuthTypesContext.AuthTypeCallsContext.AuthCallsIpAccessControlListMappingContext}\n   */\n\n  /* jshint ignore:end */\n\n\n  AuthCallsIpAccessControlListMappingListInstance.get = function get(sid) {\n    return new AuthCallsIpAccessControlListMappingContext(this._version, this._solution.accountSid, this._solution.domainSid, sid);\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Api.V2010.AccountContext.SipContext.DomainContext.AuthTypesContext.AuthTypeCallsContext.AuthCallsIpAccessControlListMappingList#\n   *\n   * @returns Object\n   */\n\n  /* jshint ignore:end */\n\n\n  AuthCallsIpAccessControlListMappingListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n\n  AuthCallsIpAccessControlListMappingListInstance[util.inspect.custom] = function inspect(depth, options) {\n    return util.inspect(this.toJSON(), options);\n  };\n\n  return AuthCallsIpAccessControlListMappingListInstance;\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the AuthCallsIpAccessControlListMappingPage\n *\n * @constructor Twilio.Api.V2010.AccountContext.SipContext.DomainContext.AuthTypesContext.AuthTypeCallsContext.AuthCallsIpAccessControlListMappingPage\n *\n * @param {V2010} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {AuthCallsIpAccessControlListMappingSolution} solution - Path solution\n *\n * @returns AuthCallsIpAccessControlListMappingPage\n */\n\n/* jshint ignore:end */\n\n\nAuthCallsIpAccessControlListMappingPage = function AuthCallsIpAccessControlListMappingPage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n\n_.extend(AuthCallsIpAccessControlListMappingPage.prototype, Page.prototype);\n\nAuthCallsIpAccessControlListMappingPage.prototype.constructor = AuthCallsIpAccessControlListMappingPage;\n/* jshint ignore:start */\n\n/**\n * Build an instance of AuthCallsIpAccessControlListMappingInstance\n *\n * @function getInstance\n * @memberof Twilio.Api.V2010.AccountContext.SipContext.DomainContext.AuthTypesContext.AuthTypeCallsContext.AuthCallsIpAccessControlListMappingPage#\n *\n * @param {AuthCallsIpAccessControlListMappingPayload} payload -\n *          Payload response from the API\n *\n * @returns AuthCallsIpAccessControlListMappingInstance\n */\n\n/* jshint ignore:end */\n\nAuthCallsIpAccessControlListMappingPage.prototype.getInstance = function getInstance(payload) {\n  return new AuthCallsIpAccessControlListMappingInstance(this._version, payload, this._solution.accountSid, this._solution.domainSid);\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Api.V2010.AccountContext.SipContext.DomainContext.AuthTypesContext.AuthTypeCallsContext.AuthCallsIpAccessControlListMappingPage#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nAuthCallsIpAccessControlListMappingPage.prototype.toJSON = function toJSON() {\n  let clone = {};\n\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n\n  return clone;\n};\n\nAuthCallsIpAccessControlListMappingPage.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the AuthCallsIpAccessControlListMappingContext\n *\n * @constructor Twilio.Api.V2010.AccountContext.SipContext.DomainContext.AuthTypesContext.AuthTypeCallsContext.AuthCallsIpAccessControlListMappingInstance\n *\n * @property {string} accountSid - The SID of the Account that created the resource\n * @property {Date} dateCreated -\n *          The RFC 2822 date and time in GMT that the resource was created\n * @property {Date} dateUpdated -\n *          The RFC 2822 date and time in GMT that the resource was last updated\n * @property {string} friendlyName -\n *          The string that you assigned to describe the resource\n * @property {string} sid - The unique string that identifies the resource\n *\n * @param {V2010} version - Version of the resource\n * @param {AuthCallsIpAccessControlListMappingPayload} payload -\n *          The instance payload\n * @param {sid} accountSid - The SID of the Account that created the resource\n * @param {sid} domainSid - The unique string that identifies the resource\n * @param {sid} sid - The unique string that identifies the resource\n */\n\n/* jshint ignore:end */\n\n\nAuthCallsIpAccessControlListMappingInstance = function AuthCallsIpAccessControlListMappingInstance(version, payload, accountSid, domainSid, sid) {\n  this._version = version; // Marshaled Properties\n\n  this.accountSid = payload.account_sid; // jshint ignore:line\n\n  this.dateCreated = deserialize.rfc2822DateTime(payload.date_created); // jshint ignore:line\n\n  this.dateUpdated = deserialize.rfc2822DateTime(payload.date_updated); // jshint ignore:line\n\n  this.friendlyName = payload.friendly_name; // jshint ignore:line\n\n  this.sid = payload.sid; // jshint ignore:line\n  // Context\n\n  this._context = undefined;\n  this._solution = {\n    accountSid: accountSid,\n    domainSid: domainSid,\n    sid: sid || this.sid\n  };\n};\n\nObject.defineProperty(AuthCallsIpAccessControlListMappingInstance.prototype, '_proxy', {\n  get: function () {\n    if (!this._context) {\n      this._context = new AuthCallsIpAccessControlListMappingContext(this._version, this._solution.accountSid, this._solution.domainSid, this._solution.sid);\n    }\n\n    return this._context;\n  }\n});\n/* jshint ignore:start */\n\n/**\n * fetch a AuthCallsIpAccessControlListMappingInstance\n *\n * @function fetch\n * @memberof Twilio.Api.V2010.AccountContext.SipContext.DomainContext.AuthTypesContext.AuthTypeCallsContext.AuthCallsIpAccessControlListMappingInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed AuthCallsIpAccessControlListMappingInstance\n */\n\n/* jshint ignore:end */\n\nAuthCallsIpAccessControlListMappingInstance.prototype.fetch = function fetch(callback) {\n  return this._proxy.fetch(callback);\n};\n/* jshint ignore:start */\n\n/**\n * remove a AuthCallsIpAccessControlListMappingInstance\n *\n * @function remove\n * @memberof Twilio.Api.V2010.AccountContext.SipContext.DomainContext.AuthTypesContext.AuthTypeCallsContext.AuthCallsIpAccessControlListMappingInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed AuthCallsIpAccessControlListMappingInstance\n */\n\n/* jshint ignore:end */\n\n\nAuthCallsIpAccessControlListMappingInstance.prototype.remove = function remove(callback) {\n  return this._proxy.remove(callback);\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Api.V2010.AccountContext.SipContext.DomainContext.AuthTypesContext.AuthTypeCallsContext.AuthCallsIpAccessControlListMappingInstance#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nAuthCallsIpAccessControlListMappingInstance.prototype.toJSON = function toJSON() {\n  let clone = {};\n\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n\n  return clone;\n};\n\nAuthCallsIpAccessControlListMappingInstance.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the AuthCallsIpAccessControlListMappingContext\n *\n * @constructor Twilio.Api.V2010.AccountContext.SipContext.DomainContext.AuthTypesContext.AuthTypeCallsContext.AuthCallsIpAccessControlListMappingContext\n *\n * @param {V2010} version - Version of the resource\n * @param {sid} accountSid -\n *          The SID of the Account that created the resource to fetch\n * @param {sid} domainSid -\n *          The SID of the SIP domain that contains the resource to fetch\n * @param {sid} sid - The unique string that identifies the resource\n */\n\n/* jshint ignore:end */\n\n\nAuthCallsIpAccessControlListMappingContext = function AuthCallsIpAccessControlListMappingContext(version, accountSid, domainSid, sid) {\n  this._version = version; // Path Solution\n\n  this._solution = {\n    accountSid: accountSid,\n    domainSid: domainSid,\n    sid: sid\n  };\n  this._uri = `/Accounts/${accountSid}/SIP/Domains/${domainSid}/Auth/Calls/IpAccessControlListMappings/${sid}.json`;\n};\n/* jshint ignore:start */\n\n/**\n * fetch a AuthCallsIpAccessControlListMappingInstance\n *\n * @function fetch\n * @memberof Twilio.Api.V2010.AccountContext.SipContext.DomainContext.AuthTypesContext.AuthTypeCallsContext.AuthCallsIpAccessControlListMappingContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed AuthCallsIpAccessControlListMappingInstance\n */\n\n/* jshint ignore:end */\n\n\nAuthCallsIpAccessControlListMappingContext.prototype.fetch = function fetch(callback) {\n  var deferred = Q.defer();\n\n  var promise = this._version.fetch({\n    uri: this._uri,\n    method: 'GET'\n  });\n\n  promise = promise.then(function (payload) {\n    deferred.resolve(new AuthCallsIpAccessControlListMappingInstance(this._version, payload, this._solution.accountSid, this._solution.domainSid, this._solution.sid));\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n/* jshint ignore:start */\n\n/**\n * remove a AuthCallsIpAccessControlListMappingInstance\n *\n * @function remove\n * @memberof Twilio.Api.V2010.AccountContext.SipContext.DomainContext.AuthTypesContext.AuthTypeCallsContext.AuthCallsIpAccessControlListMappingContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed AuthCallsIpAccessControlListMappingInstance\n */\n\n/* jshint ignore:end */\n\n\nAuthCallsIpAccessControlListMappingContext.prototype.remove = function remove(callback) {\n  var deferred = Q.defer();\n\n  var promise = this._version.remove({\n    uri: this._uri,\n    method: 'DELETE'\n  });\n\n  promise = promise.then(function (payload) {\n    deferred.resolve(payload);\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Api.V2010.AccountContext.SipContext.DomainContext.AuthTypesContext.AuthTypeCallsContext.AuthCallsIpAccessControlListMappingContext#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nAuthCallsIpAccessControlListMappingContext.prototype.toJSON = function toJSON() {\n  return this._solution;\n};\n\nAuthCallsIpAccessControlListMappingContext.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\nmodule.exports = {\n  AuthCallsIpAccessControlListMappingList: AuthCallsIpAccessControlListMappingList,\n  AuthCallsIpAccessControlListMappingPage: AuthCallsIpAccessControlListMappingPage,\n  AuthCallsIpAccessControlListMappingInstance: AuthCallsIpAccessControlListMappingInstance,\n  AuthCallsIpAccessControlListMappingContext: AuthCallsIpAccessControlListMappingContext\n};","map":{"version":3,"names":["Q","require","_","util","Page","deserialize","values","AuthCallsIpAccessControlListMappingList","AuthCallsIpAccessControlListMappingPage","AuthCallsIpAccessControlListMappingInstance","AuthCallsIpAccessControlListMappingContext","version","accountSid","domainSid","AuthCallsIpAccessControlListMappingListInstance","sid","get","_version","_solution","_uri","create","opts","callback","isUndefined","Error","deferred","defer","data","of","promise","uri","method","then","payload","resolve","bind","catch","error","reject","isFunction","nodeify","each","done","currentPage","currentResource","limits","readLimits","limit","pageSize","onComplete","fetchNextPage","fn","page","instances","instance","nextPage","merge","list","allResources","resource","push","length","pageToken","pageNumber","params","getPage","targetUrl","_domain","twilio","request","toJSON","inspect","custom","depth","options","response","solution","prototype","constructor","call","extend","getInstance","clone","forOwn","value","key","startsWith","account_sid","dateCreated","rfc2822DateTime","date_created","dateUpdated","date_updated","friendlyName","friendly_name","_context","undefined","Object","defineProperty","fetch","_proxy","remove","module","exports"],"sources":["/Users/hooniesun/rmit/fwp/assessment1/lan/node_modules/twilio/lib/rest/api/v2010/account/sip/domain/authTypes/authCallsMapping/authCallsIpAccessControlListMapping.js"],"sourcesContent":["'use strict';\n\n/* jshint ignore:start */\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n/* jshint ignore:end */\n\nvar Q = require('q');  /* jshint ignore:line */\nvar _ = require('lodash');  /* jshint ignore:line */\nvar util = require('util');  /* jshint ignore:line */\nvar Page = require(\n    '../../../../../../../../base/Page');  /* jshint ignore:line */\nvar deserialize = require(\n    '../../../../../../../../base/deserialize');  /* jshint ignore:line */\nvar values = require(\n    '../../../../../../../../base/values');  /* jshint ignore:line */\n\nvar AuthCallsIpAccessControlListMappingList;\nvar AuthCallsIpAccessControlListMappingPage;\nvar AuthCallsIpAccessControlListMappingInstance;\nvar AuthCallsIpAccessControlListMappingContext;\n\n/* jshint ignore:start */\n/**\n * Initialize the AuthCallsIpAccessControlListMappingList\n *\n * @constructor Twilio.Api.V2010.AccountContext.SipContext.DomainContext.AuthTypesContext.AuthTypeCallsContext.AuthCallsIpAccessControlListMappingList\n *\n * @param {Twilio.Api.V2010} version - Version of the resource\n * @param {string} accountSid - The SID of the Account that created the resource\n * @param {string} domainSid - The unique string that identifies the resource\n */\n/* jshint ignore:end */\nAuthCallsIpAccessControlListMappingList = function\n    AuthCallsIpAccessControlListMappingList(version, accountSid, domainSid) {\n  /* jshint ignore:start */\n  /**\n   * @function ipAccessControlListMappings\n   * @memberof Twilio.Api.V2010.AccountContext.SipContext.DomainContext.AuthTypesContext.AuthTypeCallsContext#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Api.V2010.AccountContext.SipContext.DomainContext.AuthTypesContext.AuthTypeCallsContext.AuthCallsIpAccessControlListMappingContext}\n   */\n  /* jshint ignore:end */\n  function AuthCallsIpAccessControlListMappingListInstance(sid) {\n    return AuthCallsIpAccessControlListMappingListInstance.get(sid);\n  }\n\n  AuthCallsIpAccessControlListMappingListInstance._version = version;\n  // Path Solution\n  AuthCallsIpAccessControlListMappingListInstance._solution = {\n    accountSid: accountSid,\n    domainSid: domainSid\n  };\n  AuthCallsIpAccessControlListMappingListInstance._uri = `/Accounts/${accountSid}/SIP/Domains/${domainSid}/Auth/Calls/IpAccessControlListMappings.json`;\n  /* jshint ignore:start */\n  /**\n   * create a AuthCallsIpAccessControlListMappingInstance\n   *\n   * @function create\n   * @memberof Twilio.Api.V2010.AccountContext.SipContext.DomainContext.AuthTypesContext.AuthTypeCallsContext.AuthCallsIpAccessControlListMappingList#\n   *\n   * @param {object} opts - Options for request\n   * @param {string} opts.ipAccessControlListSid -\n   *          The SID of the IpAccessControlList resource to map to the SIP domain\n   * @param {function} [callback] - Callback to handle processed record\n   *\n   * @returns {Promise} Resolves to processed AuthCallsIpAccessControlListMappingInstance\n   */\n  /* jshint ignore:end */\n  AuthCallsIpAccessControlListMappingListInstance.create = function create(opts,\n      callback) {\n    if (_.isUndefined(opts)) {\n      throw new Error('Required parameter \"opts\" missing.');\n    }\n    if (_.isUndefined(opts['ipAccessControlListSid'])) {\n      throw new Error('Required parameter \"opts[\\'ipAccessControlListSid\\']\" missing.');\n    }\n\n    var deferred = Q.defer();\n    var data = values.of({'IpAccessControlListSid': _.get(opts, 'ipAccessControlListSid')});\n\n    var promise = this._version.create({uri: this._uri, method: 'POST', data: data});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new AuthCallsIpAccessControlListMappingInstance(\n        this._version,\n        payload,\n        this._solution.accountSid,\n        this._solution.domainSid,\n        this._solution.sid\n      ));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Streams AuthCallsIpAccessControlListMappingInstance records from the API.\n   *\n   * This operation lazily loads records as efficiently as possible until the limit\n   * is reached.\n   *\n   * The results are passed into the callback function, so this operation is memory\n   * efficient.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function each\n   * @memberof Twilio.Api.V2010.AccountContext.SipContext.DomainContext.AuthTypesContext.AuthTypeCallsContext.AuthCallsIpAccessControlListMappingList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         each() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no pageSize is defined but a limit is defined,\n   *         each() will attempt to read the limit with the most efficient\n   *         page size, i.e. min(limit, 1000)\n   * @param {Function} [opts.callback] -\n   *         Function to process each record. If this and a positional\n   *         callback are passed, this one will be used\n   * @param {Function} [opts.done] -\n   *          Function to be called upon completion of streaming\n   * @param {Function} [callback] - Function to process each record\n   */\n  /* jshint ignore:end */\n  AuthCallsIpAccessControlListMappingListInstance.each = function each(opts,\n      callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    if (opts.callback) {\n      callback = opts.callback;\n    }\n    if (_.isUndefined(callback)) {\n      throw new Error('Callback function must be provided');\n    }\n\n    var done = false;\n    var currentPage = 1;\n    var currentResource = 0;\n    var limits = this._version.readLimits({\n      limit: opts.limit,\n      pageSize: opts.pageSize\n    });\n\n    function onComplete(error) {\n      done = true;\n      if (_.isFunction(opts.done)) {\n        opts.done(error);\n      }\n    }\n\n    function fetchNextPage(fn) {\n      var promise = fn();\n      if (_.isUndefined(promise)) {\n        onComplete();\n        return;\n      }\n\n      promise.then(function(page) {\n        _.each(page.instances, function(instance) {\n          if (done || (!_.isUndefined(opts.limit) && currentResource >= opts.limit)) {\n            done = true;\n            return false;\n          }\n\n          currentResource++;\n          callback(instance, onComplete);\n        });\n\n        if (!done) {\n          currentPage++;\n          fetchNextPage(_.bind(page.nextPage, page));\n        } else {\n          onComplete();\n        }\n      });\n\n      promise.catch(onComplete);\n    }\n\n    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Lists AuthCallsIpAccessControlListMappingInstance records from the API as a\n   * list.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function list\n   * @memberof Twilio.Api.V2010.AccountContext.SipContext.DomainContext.AuthTypesContext.AuthTypeCallsContext.AuthCallsIpAccessControlListMappingList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         list() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no page_size is defined but a limit is defined,\n   *         list() will attempt to read the limit with the most\n   *         efficient page size, i.e. min(limit, 1000)\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  AuthCallsIpAccessControlListMappingListInstance.list = function list(opts,\n      callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    var deferred = Q.defer();\n    var allResources = [];\n    opts.callback = function(resource, done) {\n      allResources.push(resource);\n\n      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {\n        done();\n      }\n    };\n\n    opts.done = function(error) {\n      if (_.isUndefined(error)) {\n        deferred.resolve(allResources);\n      } else {\n        deferred.reject(error);\n      }\n    };\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    this.each(opts);\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single page of AuthCallsIpAccessControlListMappingInstance records\n   * from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function page\n   * @memberof Twilio.Api.V2010.AccountContext.SipContext.DomainContext.AuthTypesContext.AuthTypeCallsContext.AuthCallsIpAccessControlListMappingList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.pageToken] - PageToken provided by the API\n   * @param {number} [opts.pageNumber] -\n   *          Page Number, this value is simply for client state\n   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  AuthCallsIpAccessControlListMappingListInstance.page = function page(opts,\n      callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n\n    var deferred = Q.defer();\n    var data = values.of({\n      'PageToken': opts.pageToken,\n      'Page': opts.pageNumber,\n      'PageSize': opts.pageSize\n    });\n\n    var promise = this._version.page({uri: this._uri, method: 'GET', params: data});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new AuthCallsIpAccessControlListMappingPage(\n        this._version,\n        payload,\n        this._solution\n      ));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single target page of AuthCallsIpAccessControlListMappingInstance\n   * records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function getPage\n   * @memberof Twilio.Api.V2010.AccountContext.SipContext.DomainContext.AuthTypesContext.AuthTypeCallsContext.AuthCallsIpAccessControlListMappingList#\n   *\n   * @param {string} [targetUrl] - API-generated URL for the requested results page\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  AuthCallsIpAccessControlListMappingListInstance.getPage = function\n      getPage(targetUrl, callback) {\n    var deferred = Q.defer();\n\n    var promise = this._version._domain.twilio.request({method: 'GET', uri: targetUrl});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new AuthCallsIpAccessControlListMappingPage(\n        this._version,\n        payload,\n        this._solution\n      ));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Constructs a auth_calls_ip_access_control_list_mapping\n   *\n   * @function get\n   * @memberof Twilio.Api.V2010.AccountContext.SipContext.DomainContext.AuthTypesContext.AuthTypeCallsContext.AuthCallsIpAccessControlListMappingList#\n   *\n   * @param {string} sid - The unique string that identifies the resource\n   *\n   * @returns {Twilio.Api.V2010.AccountContext.SipContext.DomainContext.AuthTypesContext.AuthTypeCallsContext.AuthCallsIpAccessControlListMappingContext}\n   */\n  /* jshint ignore:end */\n  AuthCallsIpAccessControlListMappingListInstance.get = function get(sid) {\n    return new AuthCallsIpAccessControlListMappingContext(\n      this._version,\n      this._solution.accountSid,\n      this._solution.domainSid,\n      sid\n    );\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Api.V2010.AccountContext.SipContext.DomainContext.AuthTypesContext.AuthTypeCallsContext.AuthCallsIpAccessControlListMappingList#\n   *\n   * @returns Object\n   */\n  /* jshint ignore:end */\n  AuthCallsIpAccessControlListMappingListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n\n  AuthCallsIpAccessControlListMappingListInstance[util.inspect.custom] = function\n      inspect(depth, options) {\n    return util.inspect(this.toJSON(), options);\n  };\n\n  return AuthCallsIpAccessControlListMappingListInstance;\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the AuthCallsIpAccessControlListMappingPage\n *\n * @constructor Twilio.Api.V2010.AccountContext.SipContext.DomainContext.AuthTypesContext.AuthTypeCallsContext.AuthCallsIpAccessControlListMappingPage\n *\n * @param {V2010} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {AuthCallsIpAccessControlListMappingSolution} solution - Path solution\n *\n * @returns AuthCallsIpAccessControlListMappingPage\n */\n/* jshint ignore:end */\nAuthCallsIpAccessControlListMappingPage = function\n    AuthCallsIpAccessControlListMappingPage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n\n_.extend(AuthCallsIpAccessControlListMappingPage.prototype, Page.prototype);\nAuthCallsIpAccessControlListMappingPage.prototype.constructor = AuthCallsIpAccessControlListMappingPage;\n\n/* jshint ignore:start */\n/**\n * Build an instance of AuthCallsIpAccessControlListMappingInstance\n *\n * @function getInstance\n * @memberof Twilio.Api.V2010.AccountContext.SipContext.DomainContext.AuthTypesContext.AuthTypeCallsContext.AuthCallsIpAccessControlListMappingPage#\n *\n * @param {AuthCallsIpAccessControlListMappingPayload} payload -\n *          Payload response from the API\n *\n * @returns AuthCallsIpAccessControlListMappingInstance\n */\n/* jshint ignore:end */\nAuthCallsIpAccessControlListMappingPage.prototype.getInstance = function\n    getInstance(payload) {\n  return new AuthCallsIpAccessControlListMappingInstance(\n    this._version,\n    payload,\n    this._solution.accountSid,\n    this._solution.domainSid\n  );\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Api.V2010.AccountContext.SipContext.DomainContext.AuthTypesContext.AuthTypeCallsContext.AuthCallsIpAccessControlListMappingPage#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nAuthCallsIpAccessControlListMappingPage.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function(value, key) {\n    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\n\nAuthCallsIpAccessControlListMappingPage.prototype[util.inspect.custom] =\n    function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the AuthCallsIpAccessControlListMappingContext\n *\n * @constructor Twilio.Api.V2010.AccountContext.SipContext.DomainContext.AuthTypesContext.AuthTypeCallsContext.AuthCallsIpAccessControlListMappingInstance\n *\n * @property {string} accountSid - The SID of the Account that created the resource\n * @property {Date} dateCreated -\n *          The RFC 2822 date and time in GMT that the resource was created\n * @property {Date} dateUpdated -\n *          The RFC 2822 date and time in GMT that the resource was last updated\n * @property {string} friendlyName -\n *          The string that you assigned to describe the resource\n * @property {string} sid - The unique string that identifies the resource\n *\n * @param {V2010} version - Version of the resource\n * @param {AuthCallsIpAccessControlListMappingPayload} payload -\n *          The instance payload\n * @param {sid} accountSid - The SID of the Account that created the resource\n * @param {sid} domainSid - The unique string that identifies the resource\n * @param {sid} sid - The unique string that identifies the resource\n */\n/* jshint ignore:end */\nAuthCallsIpAccessControlListMappingInstance = function\n    AuthCallsIpAccessControlListMappingInstance(version, payload, accountSid,\n    domainSid, sid) {\n  this._version = version;\n\n  // Marshaled Properties\n  this.accountSid = payload.account_sid; // jshint ignore:line\n  this.dateCreated = deserialize.rfc2822DateTime(payload.date_created); // jshint ignore:line\n  this.dateUpdated = deserialize.rfc2822DateTime(payload.date_updated); // jshint ignore:line\n  this.friendlyName = payload.friendly_name; // jshint ignore:line\n  this.sid = payload.sid; // jshint ignore:line\n\n  // Context\n  this._context = undefined;\n  this._solution = {accountSid: accountSid, domainSid: domainSid, sid: sid || this.sid, };\n};\n\nObject.defineProperty(AuthCallsIpAccessControlListMappingInstance.prototype,\n  '_proxy', {\n    get: function() {\n      if (!this._context) {\n        this._context = new AuthCallsIpAccessControlListMappingContext(\n          this._version,\n          this._solution.accountSid,\n          this._solution.domainSid,\n          this._solution.sid\n        );\n      }\n\n      return this._context;\n    }\n});\n\n/* jshint ignore:start */\n/**\n * fetch a AuthCallsIpAccessControlListMappingInstance\n *\n * @function fetch\n * @memberof Twilio.Api.V2010.AccountContext.SipContext.DomainContext.AuthTypesContext.AuthTypeCallsContext.AuthCallsIpAccessControlListMappingInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed AuthCallsIpAccessControlListMappingInstance\n */\n/* jshint ignore:end */\nAuthCallsIpAccessControlListMappingInstance.prototype.fetch = function\n    fetch(callback) {\n  return this._proxy.fetch(callback);\n};\n\n/* jshint ignore:start */\n/**\n * remove a AuthCallsIpAccessControlListMappingInstance\n *\n * @function remove\n * @memberof Twilio.Api.V2010.AccountContext.SipContext.DomainContext.AuthTypesContext.AuthTypeCallsContext.AuthCallsIpAccessControlListMappingInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed AuthCallsIpAccessControlListMappingInstance\n */\n/* jshint ignore:end */\nAuthCallsIpAccessControlListMappingInstance.prototype.remove = function\n    remove(callback) {\n  return this._proxy.remove(callback);\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Api.V2010.AccountContext.SipContext.DomainContext.AuthTypesContext.AuthTypeCallsContext.AuthCallsIpAccessControlListMappingInstance#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nAuthCallsIpAccessControlListMappingInstance.prototype.toJSON = function toJSON()\n    {\n  let clone = {};\n  _.forOwn(this, function(value, key) {\n    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\n\nAuthCallsIpAccessControlListMappingInstance.prototype[util.inspect.custom] =\n    function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the AuthCallsIpAccessControlListMappingContext\n *\n * @constructor Twilio.Api.V2010.AccountContext.SipContext.DomainContext.AuthTypesContext.AuthTypeCallsContext.AuthCallsIpAccessControlListMappingContext\n *\n * @param {V2010} version - Version of the resource\n * @param {sid} accountSid -\n *          The SID of the Account that created the resource to fetch\n * @param {sid} domainSid -\n *          The SID of the SIP domain that contains the resource to fetch\n * @param {sid} sid - The unique string that identifies the resource\n */\n/* jshint ignore:end */\nAuthCallsIpAccessControlListMappingContext = function\n    AuthCallsIpAccessControlListMappingContext(version, accountSid, domainSid,\n    sid) {\n  this._version = version;\n\n  // Path Solution\n  this._solution = {accountSid: accountSid, domainSid: domainSid, sid: sid, };\n  this._uri = `/Accounts/${accountSid}/SIP/Domains/${domainSid}/Auth/Calls/IpAccessControlListMappings/${sid}.json`;\n};\n\n/* jshint ignore:start */\n/**\n * fetch a AuthCallsIpAccessControlListMappingInstance\n *\n * @function fetch\n * @memberof Twilio.Api.V2010.AccountContext.SipContext.DomainContext.AuthTypesContext.AuthTypeCallsContext.AuthCallsIpAccessControlListMappingContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed AuthCallsIpAccessControlListMappingInstance\n */\n/* jshint ignore:end */\nAuthCallsIpAccessControlListMappingContext.prototype.fetch = function\n    fetch(callback) {\n  var deferred = Q.defer();\n  var promise = this._version.fetch({uri: this._uri, method: 'GET'});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(new AuthCallsIpAccessControlListMappingInstance(\n      this._version,\n      payload,\n      this._solution.accountSid,\n      this._solution.domainSid,\n      this._solution.sid\n    ));\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * remove a AuthCallsIpAccessControlListMappingInstance\n *\n * @function remove\n * @memberof Twilio.Api.V2010.AccountContext.SipContext.DomainContext.AuthTypesContext.AuthTypeCallsContext.AuthCallsIpAccessControlListMappingContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed AuthCallsIpAccessControlListMappingInstance\n */\n/* jshint ignore:end */\nAuthCallsIpAccessControlListMappingContext.prototype.remove = function\n    remove(callback) {\n  var deferred = Q.defer();\n  var promise = this._version.remove({uri: this._uri, method: 'DELETE'});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(payload);\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Api.V2010.AccountContext.SipContext.DomainContext.AuthTypesContext.AuthTypeCallsContext.AuthCallsIpAccessControlListMappingContext#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nAuthCallsIpAccessControlListMappingContext.prototype.toJSON = function toJSON()\n    {\n  return this._solution;\n};\n\nAuthCallsIpAccessControlListMappingContext.prototype[util.inspect.custom] =\n    function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\nmodule.exports = {\n  AuthCallsIpAccessControlListMappingList: AuthCallsIpAccessControlListMappingList,\n  AuthCallsIpAccessControlListMappingPage: AuthCallsIpAccessControlListMappingPage,\n  AuthCallsIpAccessControlListMappingInstance: AuthCallsIpAccessControlListMappingInstance,\n  AuthCallsIpAccessControlListMappingContext: AuthCallsIpAccessControlListMappingContext\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}