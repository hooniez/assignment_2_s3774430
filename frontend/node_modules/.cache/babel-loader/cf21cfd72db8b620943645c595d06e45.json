{"ast":null,"code":"// import * as React from \"react\";\n// import { Form } from \"react-bootstrap\";\n// export default function PasswordInput({ timeDelayed, canSubmit }) {\n//   const [isPasswordValid, setIsPasswordValid] = React.useState(true);\n//   const [isPasswordIdentical, setIsPasswordIdentical] = React.useState(true);\n//   const [isPasswordVisible, setIsPasswordVisble] = React.useState(false);\n//   let validatePasswordTimeoutId;\n//   let confirmPasswordTimeoutId;\n//   function validatePassword(password) {\n//     /* A regex pattern that matches invalid passwords\n//         - Anything with less than eight characters OR\n//         - Anything with no numbers OR\n//         - Anything with no uppercase letter OR\n//         - Anything with no lowercase letter OR\n//         - Anything with no special characters\n//     */\n//     const regex = \"^(.{0,7}|[^0-9]*|[^A-Z]*|[^a-z]*|[a-zA-Z0-9]*)$\";\n//     // If there are any matches, the password is invalid\n//     return password.match(regex) ? false : true;\n//   }\n//   function confirmPassword(password) {\n//     return password === document.querySelector(\"#formSignupPassword\").value;\n//   }\n//   const validatePasswordHandler = (event) => {\n//     clearTimeout(validatePasswordTimeoutId);\n//     validatePasswordTimeoutId = setTimeout(() => {\n//       setIsPasswordValid(validatePassword(event.target.value));\n//     }, timeDelayed);\n//   };\n//   const confirmPasswordHandler = (event) => {\n//     clearTimeout(confirmPasswordTimeoutId);\n//     confirmPasswordTimeoutId = setTimeout(() => {\n//       setIsPasswordIdentical(confirmPassword(event.target.value));\n//     }, timeDelayed);\n//   };\n//   const togglePasswordVisability = (event) => {\n//     setIsPasswordVisble(!isPasswordVisible);\n//   };\n//   return (\n//     <>\n//       <Form.Group className=\"mb-5\" controlId=\"formSignupPassword\">\n//         <Form.Label visuallyHidden>Current Password</Form.Label>\n//         <Form.Control\n//           type={isPasswordVisible ? \"text\" : \"password\"}\n//           required\n//           placeholder=\"Current Password\"\n//           isInvalid={!isPasswordValid}\n//         />\n//         <Form.Control.Feedback type=\"invalid\">\n//           Use 8 or more character with a mix of lowercase and uppercase letters,\n//           numbers & symbols\n//         </Form.Control.Feedback>\n//       </Form.Group>\n//       <Form.Group className=\"mb-4\" controlId=\"formSignupPassword\">\n//         <Form.Label visuallyHidden>Password</Form.Label>\n//         <Form.Control\n//           type={isPasswordVisible ? \"text\" : \"password\"}\n//           required\n//           placeholder=\"New Password\"\n//           onChange={validatePasswordHandler}\n//           isInvalid={!isPasswordValid}\n//         />\n//         <Form.Control.Feedback type=\"invalid\">\n//           Use 8 or more character with a mix of lowercase and uppercase letters,\n//           numbers & symbols\n//         </Form.Control.Feedback>\n//       </Form.Group>\n//       <Form.Group className=\"mb-2\" controlId=\"formSignupPasswordConfirm\">\n//         <Form.Label visuallyHidden=\"true\">Confirm Password</Form.Label>\n//         <Form.Control\n//           type={isPasswordVisible ? \"text\" : \"password\"}\n//           required\n//           placeholder=\"Confirm\"\n//           isInvalid={!isPasswordIdentical}\n//           onChange={confirmPasswordHandler}\n//         />\n//         <Form.Control.Feedback type=\"invalid\">\n//           Passwords are not identical\n//         </Form.Control.Feedback>\n//         <Form.Text className=\"text-muted\">\n//           Use 8 or more character with a mix of lowercase and uppercase letters,\n//           numbers & symbols\n//         </Form.Text>\n//       </Form.Group>\n//       <Form.Group className=\"mb-3\" controlId=\"formSignupShowPassword\">\n//         <Form.Check\n//           type=\"checkbox\"\n//           label=\"Show password\"\n//           onClick={togglePasswordVisability}\n//         />\n//       </Form.Group>\n//     </>\n//   );\n// }","map":{"version":3,"names":[],"sources":["/Users/hooniesun/rmit/fwp/assessment1/lan/src/UI/PasswordInput.js"],"sourcesContent":["// import * as React from \"react\";\n// import { Form } from \"react-bootstrap\";\n\n// export default function PasswordInput({ timeDelayed, canSubmit }) {\n//   const [isPasswordValid, setIsPasswordValid] = React.useState(true);\n//   const [isPasswordIdentical, setIsPasswordIdentical] = React.useState(true);\n//   const [isPasswordVisible, setIsPasswordVisble] = React.useState(false);\n\n//   let validatePasswordTimeoutId;\n//   let confirmPasswordTimeoutId;\n\n//   function validatePassword(password) {\n//     /* A regex pattern that matches invalid passwords\n//         - Anything with less than eight characters OR\n//         - Anything with no numbers OR\n//         - Anything with no uppercase letter OR\n//         - Anything with no lowercase letter OR\n//         - Anything with no special characters\n//     */\n//     const regex = \"^(.{0,7}|[^0-9]*|[^A-Z]*|[^a-z]*|[a-zA-Z0-9]*)$\";\n//     // If there are any matches, the password is invalid\n//     return password.match(regex) ? false : true;\n//   }\n\n//   function confirmPassword(password) {\n//     return password === document.querySelector(\"#formSignupPassword\").value;\n//   }\n\n//   const validatePasswordHandler = (event) => {\n//     clearTimeout(validatePasswordTimeoutId);\n//     validatePasswordTimeoutId = setTimeout(() => {\n//       setIsPasswordValid(validatePassword(event.target.value));\n//     }, timeDelayed);\n//   };\n\n//   const confirmPasswordHandler = (event) => {\n//     clearTimeout(confirmPasswordTimeoutId);\n//     confirmPasswordTimeoutId = setTimeout(() => {\n//       setIsPasswordIdentical(confirmPassword(event.target.value));\n//     }, timeDelayed);\n//   };\n\n//   const togglePasswordVisability = (event) => {\n//     setIsPasswordVisble(!isPasswordVisible);\n//   };\n\n//   return (\n//     <>\n//       <Form.Group className=\"mb-5\" controlId=\"formSignupPassword\">\n//         <Form.Label visuallyHidden>Current Password</Form.Label>\n//         <Form.Control\n//           type={isPasswordVisible ? \"text\" : \"password\"}\n//           required\n//           placeholder=\"Current Password\"\n//           isInvalid={!isPasswordValid}\n//         />\n//         <Form.Control.Feedback type=\"invalid\">\n//           Use 8 or more character with a mix of lowercase and uppercase letters,\n//           numbers & symbols\n//         </Form.Control.Feedback>\n//       </Form.Group>\n\n//       <Form.Group className=\"mb-4\" controlId=\"formSignupPassword\">\n//         <Form.Label visuallyHidden>Password</Form.Label>\n//         <Form.Control\n//           type={isPasswordVisible ? \"text\" : \"password\"}\n//           required\n//           placeholder=\"New Password\"\n//           onChange={validatePasswordHandler}\n//           isInvalid={!isPasswordValid}\n//         />\n//         <Form.Control.Feedback type=\"invalid\">\n//           Use 8 or more character with a mix of lowercase and uppercase letters,\n//           numbers & symbols\n//         </Form.Control.Feedback>\n//       </Form.Group>\n\n//       <Form.Group className=\"mb-2\" controlId=\"formSignupPasswordConfirm\">\n//         <Form.Label visuallyHidden=\"true\">Confirm Password</Form.Label>\n//         <Form.Control\n//           type={isPasswordVisible ? \"text\" : \"password\"}\n//           required\n//           placeholder=\"Confirm\"\n//           isInvalid={!isPasswordIdentical}\n//           onChange={confirmPasswordHandler}\n//         />\n//         <Form.Control.Feedback type=\"invalid\">\n//           Passwords are not identical\n//         </Form.Control.Feedback>\n//         <Form.Text className=\"text-muted\">\n//           Use 8 or more character with a mix of lowercase and uppercase letters,\n//           numbers & symbols\n//         </Form.Text>\n//       </Form.Group>\n//       <Form.Group className=\"mb-3\" controlId=\"formSignupShowPassword\">\n//         <Form.Check\n//           type=\"checkbox\"\n//           label=\"Show password\"\n//           onClick={togglePasswordVisability}\n//         />\n//       </Form.Group>\n//     </>\n//   );\n// }\n"],"mappings":"AAAA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA"},"metadata":{},"sourceType":"module"}