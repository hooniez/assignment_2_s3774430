{"ast":null,"code":"'use strict';\n/* jshint ignore:start */\n\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n\n/* jshint ignore:end */\n\nvar Q = require('q');\n/* jshint ignore:line */\n\n\nvar _ = require('lodash');\n/* jshint ignore:line */\n\n\nvar util = require('util');\n/* jshint ignore:line */\n\n\nvar Page = require('../../../base/Page');\n/* jshint ignore:line */\n\n\nvar serialize = require('../../../base/serialize');\n/* jshint ignore:line */\n\n\nvar values = require('../../../base/values');\n/* jshint ignore:line */\n\n\nvar CompositionSettingsList;\nvar CompositionSettingsPage;\nvar CompositionSettingsInstance;\nvar CompositionSettingsContext;\n/* jshint ignore:start */\n\n/**\n * Initialize the CompositionSettingsList\n *\n * @constructor Twilio.Video.V1.CompositionSettingsList\n *\n * @param {Twilio.Video.V1} version - Version of the resource\n */\n\n/* jshint ignore:end */\n\nCompositionSettingsList = function CompositionSettingsList(version) {\n  /* jshint ignore:start */\n\n  /**\n   * @function compositionSettings\n   * @memberof Twilio.Video.V1#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Video.V1.CompositionSettingsContext}\n   */\n\n  /* jshint ignore:end */\n  function CompositionSettingsListInstance(sid) {\n    return CompositionSettingsListInstance.get(sid);\n  }\n\n  CompositionSettingsListInstance._version = version; // Path Solution\n\n  CompositionSettingsListInstance._solution = {};\n  /* jshint ignore:start */\n\n  /**\n   * Constructs a composition_settings\n   *\n   * @function get\n   * @memberof Twilio.Video.V1.CompositionSettingsList#\n   *\n   * @returns {Twilio.Video.V1.CompositionSettingsContext}\n   */\n\n  /* jshint ignore:end */\n\n  CompositionSettingsListInstance.get = function get() {\n    return new CompositionSettingsContext(this._version);\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Video.V1.CompositionSettingsList#\n   *\n   * @returns Object\n   */\n\n  /* jshint ignore:end */\n\n\n  CompositionSettingsListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n\n  CompositionSettingsListInstance[util.inspect.custom] = function inspect(depth, options) {\n    return util.inspect(this.toJSON(), options);\n  };\n\n  return CompositionSettingsListInstance;\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the CompositionSettingsPage\n *\n * @constructor Twilio.Video.V1.CompositionSettingsPage\n *\n * @param {V1} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {CompositionSettingsSolution} solution - Path solution\n *\n * @returns CompositionSettingsPage\n */\n\n/* jshint ignore:end */\n\n\nCompositionSettingsPage = function CompositionSettingsPage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n\n_.extend(CompositionSettingsPage.prototype, Page.prototype);\n\nCompositionSettingsPage.prototype.constructor = CompositionSettingsPage;\n/* jshint ignore:start */\n\n/**\n * Build an instance of CompositionSettingsInstance\n *\n * @function getInstance\n * @memberof Twilio.Video.V1.CompositionSettingsPage#\n *\n * @param {CompositionSettingsPayload} payload - Payload response from the API\n *\n * @returns CompositionSettingsInstance\n */\n\n/* jshint ignore:end */\n\nCompositionSettingsPage.prototype.getInstance = function getInstance(payload) {\n  return new CompositionSettingsInstance(this._version, payload);\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Video.V1.CompositionSettingsPage#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nCompositionSettingsPage.prototype.toJSON = function toJSON() {\n  let clone = {};\n\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n\n  return clone;\n};\n\nCompositionSettingsPage.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the CompositionSettingsContext\n *\n * @constructor Twilio.Video.V1.CompositionSettingsInstance\n *\n * @property {string} accountSid - The SID of the Account that created the resource\n * @property {string} friendlyName -\n *          The string that you assigned to describe the resource\n * @property {string} awsCredentialsSid - The SID of the stored Credential resource\n * @property {string} awsS3Url -\n *          The URL of the AWS S3 bucket where the compositions are stored\n * @property {boolean} awsStorageEnabled -\n *          Whether all compositions are written to the aws_s3_url\n * @property {string} encryptionKeySid -\n *          The SID of the Public Key resource used for encryption\n * @property {boolean} encryptionEnabled -\n *          Whether all compositions are stored in an encrypted form\n * @property {string} url - The absolute URL of the resource\n *\n * @param {V1} version - Version of the resource\n * @param {CompositionSettingsPayload} payload - The instance payload\n */\n\n/* jshint ignore:end */\n\n\nCompositionSettingsInstance = function CompositionSettingsInstance(version, payload) {\n  this._version = version; // Marshaled Properties\n\n  this.accountSid = payload.account_sid; // jshint ignore:line\n\n  this.friendlyName = payload.friendly_name; // jshint ignore:line\n\n  this.awsCredentialsSid = payload.aws_credentials_sid; // jshint ignore:line\n\n  this.awsS3Url = payload.aws_s3_url; // jshint ignore:line\n\n  this.awsStorageEnabled = payload.aws_storage_enabled; // jshint ignore:line\n\n  this.encryptionKeySid = payload.encryption_key_sid; // jshint ignore:line\n\n  this.encryptionEnabled = payload.encryption_enabled; // jshint ignore:line\n\n  this.url = payload.url; // jshint ignore:line\n  // Context\n\n  this._context = undefined;\n  this._solution = {};\n};\n\nObject.defineProperty(CompositionSettingsInstance.prototype, '_proxy', {\n  get: function () {\n    if (!this._context) {\n      this._context = new CompositionSettingsContext(this._version);\n    }\n\n    return this._context;\n  }\n});\n/* jshint ignore:start */\n\n/**\n * fetch a CompositionSettingsInstance\n *\n * @function fetch\n * @memberof Twilio.Video.V1.CompositionSettingsInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed CompositionSettingsInstance\n */\n\n/* jshint ignore:end */\n\nCompositionSettingsInstance.prototype.fetch = function fetch(callback) {\n  return this._proxy.fetch(callback);\n};\n/* jshint ignore:start */\n\n/**\n * create a CompositionSettingsInstance\n *\n * @function create\n * @memberof Twilio.Video.V1.CompositionSettingsInstance#\n *\n * @param {object} opts - Options for request\n * @param {string} opts.friendlyName -\n *          A descriptive string that you create to describe the resource\n * @param {string} [opts.awsCredentialsSid] -\n *          The SID of the stored Credential resource\n * @param {string} [opts.encryptionKeySid] -\n *          The SID of the Public Key resource to use for encryption\n * @param {string} [opts.awsS3Url] -\n *          The URL of the AWS S3 bucket where the compositions should be stored\n * @param {boolean} [opts.awsStorageEnabled] -\n *          Whether all compositions should be written to the aws_s3_url\n * @param {boolean} [opts.encryptionEnabled] -\n *          Whether all compositions should be stored in an encrypted form\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed CompositionSettingsInstance\n */\n\n/* jshint ignore:end */\n\n\nCompositionSettingsInstance.prototype.create = function create(opts, callback) {\n  return this._proxy.create(opts, callback);\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Video.V1.CompositionSettingsInstance#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nCompositionSettingsInstance.prototype.toJSON = function toJSON() {\n  let clone = {};\n\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n\n  return clone;\n};\n\nCompositionSettingsInstance.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the CompositionSettingsContext\n *\n * @constructor Twilio.Video.V1.CompositionSettingsContext\n *\n * @param {V1} version - Version of the resource\n */\n\n/* jshint ignore:end */\n\n\nCompositionSettingsContext = function CompositionSettingsContext(version) {\n  this._version = version; // Path Solution\n\n  this._solution = {};\n  this._uri = `/CompositionSettings/Default`;\n};\n/* jshint ignore:start */\n\n/**\n * fetch a CompositionSettingsInstance\n *\n * @function fetch\n * @memberof Twilio.Video.V1.CompositionSettingsContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed CompositionSettingsInstance\n */\n\n/* jshint ignore:end */\n\n\nCompositionSettingsContext.prototype.fetch = function fetch(callback) {\n  var deferred = Q.defer();\n\n  var promise = this._version.fetch({\n    uri: this._uri,\n    method: 'GET'\n  });\n\n  promise = promise.then(function (payload) {\n    deferred.resolve(new CompositionSettingsInstance(this._version, payload));\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n/* jshint ignore:start */\n\n/**\n * create a CompositionSettingsInstance\n *\n * @function create\n * @memberof Twilio.Video.V1.CompositionSettingsContext#\n *\n * @param {object} opts - Options for request\n * @param {string} opts.friendlyName -\n *          A descriptive string that you create to describe the resource\n * @param {string} [opts.awsCredentialsSid] -\n *          The SID of the stored Credential resource\n * @param {string} [opts.encryptionKeySid] -\n *          The SID of the Public Key resource to use for encryption\n * @param {string} [opts.awsS3Url] -\n *          The URL of the AWS S3 bucket where the compositions should be stored\n * @param {boolean} [opts.awsStorageEnabled] -\n *          Whether all compositions should be written to the aws_s3_url\n * @param {boolean} [opts.encryptionEnabled] -\n *          Whether all compositions should be stored in an encrypted form\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed CompositionSettingsInstance\n */\n\n/* jshint ignore:end */\n\n\nCompositionSettingsContext.prototype.create = function create(opts, callback) {\n  if (_.isUndefined(opts)) {\n    throw new Error('Required parameter \"opts\" missing.');\n  }\n\n  if (_.isUndefined(opts['friendlyName'])) {\n    throw new Error('Required parameter \"opts[\\'friendlyName\\']\" missing.');\n  }\n\n  var deferred = Q.defer();\n  var data = values.of({\n    'FriendlyName': _.get(opts, 'friendlyName'),\n    'AwsCredentialsSid': _.get(opts, 'awsCredentialsSid'),\n    'EncryptionKeySid': _.get(opts, 'encryptionKeySid'),\n    'AwsS3Url': _.get(opts, 'awsS3Url'),\n    'AwsStorageEnabled': serialize.bool(_.get(opts, 'awsStorageEnabled')),\n    'EncryptionEnabled': serialize.bool(_.get(opts, 'encryptionEnabled'))\n  });\n\n  var promise = this._version.create({\n    uri: this._uri,\n    method: 'POST',\n    data: data\n  });\n\n  promise = promise.then(function (payload) {\n    deferred.resolve(new CompositionSettingsInstance(this._version, payload));\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Video.V1.CompositionSettingsContext#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nCompositionSettingsContext.prototype.toJSON = function toJSON() {\n  return this._solution;\n};\n\nCompositionSettingsContext.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\nmodule.exports = {\n  CompositionSettingsList: CompositionSettingsList,\n  CompositionSettingsPage: CompositionSettingsPage,\n  CompositionSettingsInstance: CompositionSettingsInstance,\n  CompositionSettingsContext: CompositionSettingsContext\n};","map":{"version":3,"names":["Q","require","_","util","Page","serialize","values","CompositionSettingsList","CompositionSettingsPage","CompositionSettingsInstance","CompositionSettingsContext","version","CompositionSettingsListInstance","sid","get","_version","_solution","toJSON","inspect","custom","depth","options","response","solution","prototype","constructor","call","extend","getInstance","payload","clone","forOwn","value","key","startsWith","isFunction","accountSid","account_sid","friendlyName","friendly_name","awsCredentialsSid","aws_credentials_sid","awsS3Url","aws_s3_url","awsStorageEnabled","aws_storage_enabled","encryptionKeySid","encryption_key_sid","encryptionEnabled","encryption_enabled","url","_context","undefined","Object","defineProperty","fetch","callback","_proxy","create","opts","_uri","deferred","defer","promise","uri","method","then","resolve","bind","catch","error","reject","nodeify","isUndefined","Error","data","of","bool","module","exports"],"sources":["/Users/hooniesun/rmit/fwp/assessment1/lan/node_modules/twilio/lib/rest/video/v1/compositionSettings.js"],"sourcesContent":["'use strict';\n\n/* jshint ignore:start */\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n/* jshint ignore:end */\n\nvar Q = require('q');  /* jshint ignore:line */\nvar _ = require('lodash');  /* jshint ignore:line */\nvar util = require('util');  /* jshint ignore:line */\nvar Page = require('../../../base/Page');  /* jshint ignore:line */\nvar serialize = require('../../../base/serialize');  /* jshint ignore:line */\nvar values = require('../../../base/values');  /* jshint ignore:line */\n\nvar CompositionSettingsList;\nvar CompositionSettingsPage;\nvar CompositionSettingsInstance;\nvar CompositionSettingsContext;\n\n/* jshint ignore:start */\n/**\n * Initialize the CompositionSettingsList\n *\n * @constructor Twilio.Video.V1.CompositionSettingsList\n *\n * @param {Twilio.Video.V1} version - Version of the resource\n */\n/* jshint ignore:end */\nCompositionSettingsList = function CompositionSettingsList(version) {\n  /* jshint ignore:start */\n  /**\n   * @function compositionSettings\n   * @memberof Twilio.Video.V1#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Video.V1.CompositionSettingsContext}\n   */\n  /* jshint ignore:end */\n  function CompositionSettingsListInstance(sid) {\n    return CompositionSettingsListInstance.get(sid);\n  }\n\n  CompositionSettingsListInstance._version = version;\n  // Path Solution\n  CompositionSettingsListInstance._solution = {};\n  /* jshint ignore:start */\n  /**\n   * Constructs a composition_settings\n   *\n   * @function get\n   * @memberof Twilio.Video.V1.CompositionSettingsList#\n   *\n   * @returns {Twilio.Video.V1.CompositionSettingsContext}\n   */\n  /* jshint ignore:end */\n  CompositionSettingsListInstance.get = function get() {\n    return new CompositionSettingsContext(this._version);\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Video.V1.CompositionSettingsList#\n   *\n   * @returns Object\n   */\n  /* jshint ignore:end */\n  CompositionSettingsListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n\n  CompositionSettingsListInstance[util.inspect.custom] = function inspect(depth,\n      options) {\n    return util.inspect(this.toJSON(), options);\n  };\n\n  return CompositionSettingsListInstance;\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the CompositionSettingsPage\n *\n * @constructor Twilio.Video.V1.CompositionSettingsPage\n *\n * @param {V1} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {CompositionSettingsSolution} solution - Path solution\n *\n * @returns CompositionSettingsPage\n */\n/* jshint ignore:end */\nCompositionSettingsPage = function CompositionSettingsPage(version, response,\n                                                            solution) {\n  // Path Solution\n  this._solution = solution;\n\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n\n_.extend(CompositionSettingsPage.prototype, Page.prototype);\nCompositionSettingsPage.prototype.constructor = CompositionSettingsPage;\n\n/* jshint ignore:start */\n/**\n * Build an instance of CompositionSettingsInstance\n *\n * @function getInstance\n * @memberof Twilio.Video.V1.CompositionSettingsPage#\n *\n * @param {CompositionSettingsPayload} payload - Payload response from the API\n *\n * @returns CompositionSettingsInstance\n */\n/* jshint ignore:end */\nCompositionSettingsPage.prototype.getInstance = function getInstance(payload) {\n  return new CompositionSettingsInstance(this._version, payload);\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Video.V1.CompositionSettingsPage#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nCompositionSettingsPage.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function(value, key) {\n    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\n\nCompositionSettingsPage.prototype[util.inspect.custom] = function inspect(depth,\n    options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the CompositionSettingsContext\n *\n * @constructor Twilio.Video.V1.CompositionSettingsInstance\n *\n * @property {string} accountSid - The SID of the Account that created the resource\n * @property {string} friendlyName -\n *          The string that you assigned to describe the resource\n * @property {string} awsCredentialsSid - The SID of the stored Credential resource\n * @property {string} awsS3Url -\n *          The URL of the AWS S3 bucket where the compositions are stored\n * @property {boolean} awsStorageEnabled -\n *          Whether all compositions are written to the aws_s3_url\n * @property {string} encryptionKeySid -\n *          The SID of the Public Key resource used for encryption\n * @property {boolean} encryptionEnabled -\n *          Whether all compositions are stored in an encrypted form\n * @property {string} url - The absolute URL of the resource\n *\n * @param {V1} version - Version of the resource\n * @param {CompositionSettingsPayload} payload - The instance payload\n */\n/* jshint ignore:end */\nCompositionSettingsInstance = function CompositionSettingsInstance(version,\n    payload) {\n  this._version = version;\n\n  // Marshaled Properties\n  this.accountSid = payload.account_sid; // jshint ignore:line\n  this.friendlyName = payload.friendly_name; // jshint ignore:line\n  this.awsCredentialsSid = payload.aws_credentials_sid; // jshint ignore:line\n  this.awsS3Url = payload.aws_s3_url; // jshint ignore:line\n  this.awsStorageEnabled = payload.aws_storage_enabled; // jshint ignore:line\n  this.encryptionKeySid = payload.encryption_key_sid; // jshint ignore:line\n  this.encryptionEnabled = payload.encryption_enabled; // jshint ignore:line\n  this.url = payload.url; // jshint ignore:line\n\n  // Context\n  this._context = undefined;\n  this._solution = {};\n};\n\nObject.defineProperty(CompositionSettingsInstance.prototype,\n  '_proxy', {\n    get: function() {\n      if (!this._context) {\n        this._context = new CompositionSettingsContext(this._version);\n      }\n\n      return this._context;\n    }\n});\n\n/* jshint ignore:start */\n/**\n * fetch a CompositionSettingsInstance\n *\n * @function fetch\n * @memberof Twilio.Video.V1.CompositionSettingsInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed CompositionSettingsInstance\n */\n/* jshint ignore:end */\nCompositionSettingsInstance.prototype.fetch = function fetch(callback) {\n  return this._proxy.fetch(callback);\n};\n\n/* jshint ignore:start */\n/**\n * create a CompositionSettingsInstance\n *\n * @function create\n * @memberof Twilio.Video.V1.CompositionSettingsInstance#\n *\n * @param {object} opts - Options for request\n * @param {string} opts.friendlyName -\n *          A descriptive string that you create to describe the resource\n * @param {string} [opts.awsCredentialsSid] -\n *          The SID of the stored Credential resource\n * @param {string} [opts.encryptionKeySid] -\n *          The SID of the Public Key resource to use for encryption\n * @param {string} [opts.awsS3Url] -\n *          The URL of the AWS S3 bucket where the compositions should be stored\n * @param {boolean} [opts.awsStorageEnabled] -\n *          Whether all compositions should be written to the aws_s3_url\n * @param {boolean} [opts.encryptionEnabled] -\n *          Whether all compositions should be stored in an encrypted form\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed CompositionSettingsInstance\n */\n/* jshint ignore:end */\nCompositionSettingsInstance.prototype.create = function create(opts, callback) {\n  return this._proxy.create(opts, callback);\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Video.V1.CompositionSettingsInstance#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nCompositionSettingsInstance.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function(value, key) {\n    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\n\nCompositionSettingsInstance.prototype[util.inspect.custom] = function\n    inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the CompositionSettingsContext\n *\n * @constructor Twilio.Video.V1.CompositionSettingsContext\n *\n * @param {V1} version - Version of the resource\n */\n/* jshint ignore:end */\nCompositionSettingsContext = function CompositionSettingsContext(version) {\n  this._version = version;\n\n  // Path Solution\n  this._solution = {};\n  this._uri = `/CompositionSettings/Default`;\n};\n\n/* jshint ignore:start */\n/**\n * fetch a CompositionSettingsInstance\n *\n * @function fetch\n * @memberof Twilio.Video.V1.CompositionSettingsContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed CompositionSettingsInstance\n */\n/* jshint ignore:end */\nCompositionSettingsContext.prototype.fetch = function fetch(callback) {\n  var deferred = Q.defer();\n  var promise = this._version.fetch({uri: this._uri, method: 'GET'});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(new CompositionSettingsInstance(this._version, payload));\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * create a CompositionSettingsInstance\n *\n * @function create\n * @memberof Twilio.Video.V1.CompositionSettingsContext#\n *\n * @param {object} opts - Options for request\n * @param {string} opts.friendlyName -\n *          A descriptive string that you create to describe the resource\n * @param {string} [opts.awsCredentialsSid] -\n *          The SID of the stored Credential resource\n * @param {string} [opts.encryptionKeySid] -\n *          The SID of the Public Key resource to use for encryption\n * @param {string} [opts.awsS3Url] -\n *          The URL of the AWS S3 bucket where the compositions should be stored\n * @param {boolean} [opts.awsStorageEnabled] -\n *          Whether all compositions should be written to the aws_s3_url\n * @param {boolean} [opts.encryptionEnabled] -\n *          Whether all compositions should be stored in an encrypted form\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed CompositionSettingsInstance\n */\n/* jshint ignore:end */\nCompositionSettingsContext.prototype.create = function create(opts, callback) {\n  if (_.isUndefined(opts)) {\n    throw new Error('Required parameter \"opts\" missing.');\n  }\n  if (_.isUndefined(opts['friendlyName'])) {\n    throw new Error('Required parameter \"opts[\\'friendlyName\\']\" missing.');\n  }\n\n  var deferred = Q.defer();\n  var data = values.of({\n    'FriendlyName': _.get(opts, 'friendlyName'),\n    'AwsCredentialsSid': _.get(opts, 'awsCredentialsSid'),\n    'EncryptionKeySid': _.get(opts, 'encryptionKeySid'),\n    'AwsS3Url': _.get(opts, 'awsS3Url'),\n    'AwsStorageEnabled': serialize.bool(_.get(opts, 'awsStorageEnabled')),\n    'EncryptionEnabled': serialize.bool(_.get(opts, 'encryptionEnabled'))\n  });\n\n  var promise = this._version.create({uri: this._uri, method: 'POST', data: data});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(new CompositionSettingsInstance(this._version, payload));\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Video.V1.CompositionSettingsContext#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nCompositionSettingsContext.prototype.toJSON = function toJSON() {\n  return this._solution;\n};\n\nCompositionSettingsContext.prototype[util.inspect.custom] = function\n    inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\nmodule.exports = {\n  CompositionSettingsList: CompositionSettingsList,\n  CompositionSettingsPage: CompositionSettingsPage,\n  CompositionSettingsInstance: CompositionSettingsInstance,\n  CompositionSettingsContext: CompositionSettingsContext\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}