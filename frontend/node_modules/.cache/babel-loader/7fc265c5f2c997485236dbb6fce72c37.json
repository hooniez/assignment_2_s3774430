{"ast":null,"code":"'use strict';\n/* jshint ignore:start */\n\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n\n/* jshint ignore:end */\n\nvar Q = require('q');\n/* jshint ignore:line */\n\n\nvar _ = require('lodash');\n/* jshint ignore:line */\n\n\nvar util = require('util');\n/* jshint ignore:line */\n\n\nvar Page = require('../../../../../base/Page');\n/* jshint ignore:line */\n\n\nvar deserialize = require('../../../../../base/deserialize');\n/* jshint ignore:line */\n\n\nvar serialize = require('../../../../../base/serialize');\n/* jshint ignore:line */\n\n\nvar values = require('../../../../../base/values');\n/* jshint ignore:line */\n\n\nvar ParticipantList;\nvar ParticipantPage;\nvar ParticipantInstance;\nvar ParticipantContext;\n/* jshint ignore:start */\n\n/**\n * Initialize the ParticipantList\n *\n * @constructor Twilio.Conversations.V1.ServiceContext.ConversationContext.ParticipantList\n *\n * @param {Twilio.Conversations.V1} version - Version of the resource\n * @param {string} chatServiceSid -\n *          The SID of the Conversation Service that the resource is associated with.\n * @param {string} conversationSid -\n *          The unique ID of the Conversation for this participant.\n */\n\n/* jshint ignore:end */\n\nParticipantList = function ParticipantList(version, chatServiceSid, conversationSid) {\n  /* jshint ignore:start */\n\n  /**\n   * @function participants\n   * @memberof Twilio.Conversations.V1.ServiceContext.ConversationContext#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Conversations.V1.ServiceContext.ConversationContext.ParticipantContext}\n   */\n\n  /* jshint ignore:end */\n  function ParticipantListInstance(sid) {\n    return ParticipantListInstance.get(sid);\n  }\n\n  ParticipantListInstance._version = version; // Path Solution\n\n  ParticipantListInstance._solution = {\n    chatServiceSid: chatServiceSid,\n    conversationSid: conversationSid\n  };\n  ParticipantListInstance._uri = `/Services/${chatServiceSid}/Conversations/${conversationSid}/Participants`;\n  /* jshint ignore:start */\n\n  /**\n   * create a ParticipantInstance\n   *\n   * @function create\n   * @memberof Twilio.Conversations.V1.ServiceContext.ConversationContext.ParticipantList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.identity] -\n   *          A unique string identifier for the conversation participant as Conversation User.\n   * @param {string} [opts.messagingBinding.address] -\n   *          The address of the participant's device.\n   * @param {string} [opts.messagingBinding.proxyAddress] -\n   *          The address of the Twilio phone number that the participant is in contact with.\n   * @param {Date} [opts.dateCreated] - The date that this resource was created.\n   * @param {Date} [opts.dateUpdated] - The date that this resource was last updated.\n   * @param {string} [opts.attributes] -\n   *          An optional string metadata field you can use to store any data you wish.\n   * @param {string} [opts.messagingBinding.projectedAddress] -\n   *          The address of the Twilio phone number that is used in Group MMS.\n   * @param {string} [opts.roleSid] -\n   *          The SID of a conversation-level Role to assign to the participant\n   * @param {participant.webhook_enabled_type} [opts.xTwilioWebhookEnabled] -\n   *          The X-Twilio-Webhook-Enabled HTTP request header\n   * @param {function} [callback] - Callback to handle processed record\n   *\n   * @returns {Promise} Resolves to processed ParticipantInstance\n   */\n\n  /* jshint ignore:end */\n\n  ParticipantListInstance.create = function create(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n    var deferred = Q.defer();\n    var data = values.of({\n      'Identity': _.get(opts, 'identity'),\n      'MessagingBinding.Address': _.get(opts, 'messagingBinding.address'),\n      'MessagingBinding.ProxyAddress': _.get(opts, 'messagingBinding.proxyAddress'),\n      'DateCreated': serialize.iso8601DateTime(_.get(opts, 'dateCreated')),\n      'DateUpdated': serialize.iso8601DateTime(_.get(opts, 'dateUpdated')),\n      'Attributes': _.get(opts, 'attributes'),\n      'MessagingBinding.ProjectedAddress': _.get(opts, 'messagingBinding.projectedAddress'),\n      'RoleSid': _.get(opts, 'roleSid')\n    });\n    var headers = values.of({\n      'X-Twilio-Webhook-Enabled': _.get(opts, 'xTwilioWebhookEnabled')\n    });\n\n    var promise = this._version.create({\n      uri: this._uri,\n      method: 'POST',\n      data: data,\n      headers: headers\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new ParticipantInstance(this._version, payload, this._solution.chatServiceSid, this._solution.conversationSid, this._solution.sid));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Streams ParticipantInstance records from the API.\n   *\n   * This operation lazily loads records as efficiently as possible until the limit\n   * is reached.\n   *\n   * The results are passed into the callback function, so this operation is memory\n   * efficient.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function each\n   * @memberof Twilio.Conversations.V1.ServiceContext.ConversationContext.ParticipantList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         each() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no pageSize is defined but a limit is defined,\n   *         each() will attempt to read the limit with the most efficient\n   *         page size, i.e. min(limit, 1000)\n   * @param {Function} [opts.callback] -\n   *         Function to process each record. If this and a positional\n   *         callback are passed, this one will be used\n   * @param {Function} [opts.done] -\n   *          Function to be called upon completion of streaming\n   * @param {Function} [callback] - Function to process each record\n   */\n\n  /* jshint ignore:end */\n\n\n  ParticipantListInstance.each = function each(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n\n    if (opts.callback) {\n      callback = opts.callback;\n    }\n\n    if (_.isUndefined(callback)) {\n      throw new Error('Callback function must be provided');\n    }\n\n    var done = false;\n    var currentPage = 1;\n    var currentResource = 0;\n\n    var limits = this._version.readLimits({\n      limit: opts.limit,\n      pageSize: opts.pageSize\n    });\n\n    function onComplete(error) {\n      done = true;\n\n      if (_.isFunction(opts.done)) {\n        opts.done(error);\n      }\n    }\n\n    function fetchNextPage(fn) {\n      var promise = fn();\n\n      if (_.isUndefined(promise)) {\n        onComplete();\n        return;\n      }\n\n      promise.then(function (page) {\n        _.each(page.instances, function (instance) {\n          if (done || !_.isUndefined(opts.limit) && currentResource >= opts.limit) {\n            done = true;\n            return false;\n          }\n\n          currentResource++;\n          callback(instance, onComplete);\n        });\n\n        if (!done) {\n          currentPage++;\n          fetchNextPage(_.bind(page.nextPage, page));\n        } else {\n          onComplete();\n        }\n      });\n      promise.catch(onComplete);\n    }\n\n    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Lists ParticipantInstance records from the API as a list.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function list\n   * @memberof Twilio.Conversations.V1.ServiceContext.ConversationContext.ParticipantList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         list() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no page_size is defined but a limit is defined,\n   *         list() will attempt to read the limit with the most\n   *         efficient page size, i.e. min(limit, 1000)\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  ParticipantListInstance.list = function list(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n    var deferred = Q.defer();\n    var allResources = [];\n\n    opts.callback = function (resource, done) {\n      allResources.push(resource);\n\n      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {\n        done();\n      }\n    };\n\n    opts.done = function (error) {\n      if (_.isUndefined(error)) {\n        deferred.resolve(allResources);\n      } else {\n        deferred.reject(error);\n      }\n    };\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    this.each(opts);\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Retrieve a single page of ParticipantInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function page\n   * @memberof Twilio.Conversations.V1.ServiceContext.ConversationContext.ParticipantList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.pageToken] - PageToken provided by the API\n   * @param {number} [opts.pageNumber] -\n   *          Page Number, this value is simply for client state\n   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  ParticipantListInstance.page = function page(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n    var deferred = Q.defer();\n    var data = values.of({\n      'PageToken': opts.pageToken,\n      'Page': opts.pageNumber,\n      'PageSize': opts.pageSize\n    });\n\n    var promise = this._version.page({\n      uri: this._uri,\n      method: 'GET',\n      params: data\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new ParticipantPage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Retrieve a single target page of ParticipantInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function getPage\n   * @memberof Twilio.Conversations.V1.ServiceContext.ConversationContext.ParticipantList#\n   *\n   * @param {string} [targetUrl] - API-generated URL for the requested results page\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  ParticipantListInstance.getPage = function getPage(targetUrl, callback) {\n    var deferred = Q.defer();\n\n    var promise = this._version._domain.twilio.request({\n      method: 'GET',\n      uri: targetUrl\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new ParticipantPage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Constructs a participant\n   *\n   * @function get\n   * @memberof Twilio.Conversations.V1.ServiceContext.ConversationContext.ParticipantList#\n   *\n   * @param {string} sid -\n   *          A 34 character string that uniquely identifies this resource.\n   *\n   * @returns {Twilio.Conversations.V1.ServiceContext.ConversationContext.ParticipantContext}\n   */\n\n  /* jshint ignore:end */\n\n\n  ParticipantListInstance.get = function get(sid) {\n    return new ParticipantContext(this._version, this._solution.chatServiceSid, this._solution.conversationSid, sid);\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Conversations.V1.ServiceContext.ConversationContext.ParticipantList#\n   *\n   * @returns Object\n   */\n\n  /* jshint ignore:end */\n\n\n  ParticipantListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n\n  ParticipantListInstance[util.inspect.custom] = function inspect(depth, options) {\n    return util.inspect(this.toJSON(), options);\n  };\n\n  return ParticipantListInstance;\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the ParticipantPage\n *\n * @constructor Twilio.Conversations.V1.ServiceContext.ConversationContext.ParticipantPage\n *\n * @param {V1} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {ParticipantSolution} solution - Path solution\n *\n * @returns ParticipantPage\n */\n\n/* jshint ignore:end */\n\n\nParticipantPage = function ParticipantPage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n\n_.extend(ParticipantPage.prototype, Page.prototype);\n\nParticipantPage.prototype.constructor = ParticipantPage;\n/* jshint ignore:start */\n\n/**\n * Build an instance of ParticipantInstance\n *\n * @function getInstance\n * @memberof Twilio.Conversations.V1.ServiceContext.ConversationContext.ParticipantPage#\n *\n * @param {ParticipantPayload} payload - Payload response from the API\n *\n * @returns ParticipantInstance\n */\n\n/* jshint ignore:end */\n\nParticipantPage.prototype.getInstance = function getInstance(payload) {\n  return new ParticipantInstance(this._version, payload, this._solution.chatServiceSid, this._solution.conversationSid);\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Conversations.V1.ServiceContext.ConversationContext.ParticipantPage#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nParticipantPage.prototype.toJSON = function toJSON() {\n  let clone = {};\n\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n\n  return clone;\n};\n\nParticipantPage.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the ParticipantContext\n *\n * @constructor Twilio.Conversations.V1.ServiceContext.ConversationContext.ParticipantInstance\n *\n * @property {string} accountSid -\n *          The unique ID of the Account responsible for this participant.\n * @property {string} chatServiceSid -\n *          The SID of the Conversation Service that the resource is associated with.\n * @property {string} conversationSid -\n *          The unique ID of the Conversation for this participant.\n * @property {string} sid -\n *          A 34 character string that uniquely identifies this resource.\n * @property {string} identity -\n *          A unique string identifier for the conversation participant as Conversation User.\n * @property {string} attributes -\n *          An optional string metadata field you can use to store any data you wish.\n * @property {object} messagingBinding -\n *          Information about how this participant exchanges messages with the conversation.\n * @property {string} roleSid -\n *          The SID of a conversation-level Role to assign to the participant\n * @property {Date} dateCreated - The date that this resource was created.\n * @property {Date} dateUpdated - The date that this resource was last updated.\n * @property {string} url - An absolute URL for this participant.\n * @property {number} lastReadMessageIndex -\n *          Index of last “read” message in the Conversation for the Participant.\n * @property {string} lastReadTimestamp -\n *          Timestamp of last “read” message in the Conversation for the Participant.\n *\n * @param {V1} version - Version of the resource\n * @param {ParticipantPayload} payload - The instance payload\n * @param {sid} chatServiceSid -\n *          The SID of the Conversation Service that the resource is associated with.\n * @param {sid} conversationSid -\n *          The unique ID of the Conversation for this participant.\n * @param {sid_like} sid -\n *          A 34 character string that uniquely identifies this resource.\n */\n\n/* jshint ignore:end */\n\n\nParticipantInstance = function ParticipantInstance(version, payload, chatServiceSid, conversationSid, sid) {\n  this._version = version; // Marshaled Properties\n\n  this.accountSid = payload.account_sid; // jshint ignore:line\n\n  this.chatServiceSid = payload.chat_service_sid; // jshint ignore:line\n\n  this.conversationSid = payload.conversation_sid; // jshint ignore:line\n\n  this.sid = payload.sid; // jshint ignore:line\n\n  this.identity = payload.identity; // jshint ignore:line\n\n  this.attributes = payload.attributes; // jshint ignore:line\n\n  this.messagingBinding = payload.messaging_binding; // jshint ignore:line\n\n  this.roleSid = payload.role_sid; // jshint ignore:line\n\n  this.dateCreated = deserialize.iso8601DateTime(payload.date_created); // jshint ignore:line\n\n  this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated); // jshint ignore:line\n\n  this.url = payload.url; // jshint ignore:line\n\n  this.lastReadMessageIndex = deserialize.integer(payload.last_read_message_index); // jshint ignore:line\n\n  this.lastReadTimestamp = payload.last_read_timestamp; // jshint ignore:line\n  // Context\n\n  this._context = undefined;\n  this._solution = {\n    chatServiceSid: chatServiceSid,\n    conversationSid: conversationSid,\n    sid: sid || this.sid\n  };\n};\n\nObject.defineProperty(ParticipantInstance.prototype, '_proxy', {\n  get: function () {\n    if (!this._context) {\n      this._context = new ParticipantContext(this._version, this._solution.chatServiceSid, this._solution.conversationSid, this._solution.sid);\n    }\n\n    return this._context;\n  }\n});\n/* jshint ignore:start */\n\n/**\n * update a ParticipantInstance\n *\n * @function update\n * @memberof Twilio.Conversations.V1.ServiceContext.ConversationContext.ParticipantInstance#\n *\n * @param {object} [opts] - Options for request\n * @param {Date} [opts.dateCreated] - The date that this resource was created.\n * @param {Date} [opts.dateUpdated] - The date that this resource was last updated.\n * @param {string} [opts.identity] -\n *          A unique string identifier for the conversation participant as Conversation User.\n * @param {string} [opts.attributes] -\n *          An optional string metadata field you can use to store any data you wish.\n * @param {string} [opts.roleSid] -\n *          The SID of a conversation-level Role to assign to the participant\n * @param {string} [opts.messagingBinding.proxyAddress] -\n *          The address of the Twilio phone number that the participant is in contact with.\n * @param {string} [opts.messagingBinding.projectedAddress] -\n *          The address of the Twilio phone number that is used in Group MMS.\n * @param {number} [opts.lastReadMessageIndex] -\n *          Index of last “read” message in the Conversation for the Participant.\n * @param {string} [opts.lastReadTimestamp] -\n *          Timestamp of last “read” message in the Conversation for the Participant.\n * @param {participant.webhook_enabled_type} [opts.xTwilioWebhookEnabled] -\n *          The X-Twilio-Webhook-Enabled HTTP request header\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed ParticipantInstance\n */\n\n/* jshint ignore:end */\n\nParticipantInstance.prototype.update = function update(opts, callback) {\n  return this._proxy.update(opts, callback);\n};\n/* jshint ignore:start */\n\n/**\n * remove a ParticipantInstance\n *\n * @function remove\n * @memberof Twilio.Conversations.V1.ServiceContext.ConversationContext.ParticipantInstance#\n *\n * @param {object} [opts] - Options for request\n * @param {participant.webhook_enabled_type} [opts.xTwilioWebhookEnabled] -\n *          The X-Twilio-Webhook-Enabled HTTP request header\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed ParticipantInstance\n */\n\n/* jshint ignore:end */\n\n\nParticipantInstance.prototype.remove = function remove(opts, callback) {\n  return this._proxy.remove(opts, callback);\n};\n/* jshint ignore:start */\n\n/**\n * fetch a ParticipantInstance\n *\n * @function fetch\n * @memberof Twilio.Conversations.V1.ServiceContext.ConversationContext.ParticipantInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed ParticipantInstance\n */\n\n/* jshint ignore:end */\n\n\nParticipantInstance.prototype.fetch = function fetch(callback) {\n  return this._proxy.fetch(callback);\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Conversations.V1.ServiceContext.ConversationContext.ParticipantInstance#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nParticipantInstance.prototype.toJSON = function toJSON() {\n  let clone = {};\n\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n\n  return clone;\n};\n\nParticipantInstance.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the ParticipantContext\n *\n * @constructor Twilio.Conversations.V1.ServiceContext.ConversationContext.ParticipantContext\n *\n * @param {V1} version - Version of the resource\n * @param {sid} chatServiceSid -\n *          The SID of the Conversation Service that the resource is associated with.\n * @param {sid_like} conversationSid -\n *          The unique ID of the Conversation for this participant.\n * @param {sid_like} sid -\n *          A 34 character string that uniquely identifies this resource.\n */\n\n/* jshint ignore:end */\n\n\nParticipantContext = function ParticipantContext(version, chatServiceSid, conversationSid, sid) {\n  this._version = version; // Path Solution\n\n  this._solution = {\n    chatServiceSid: chatServiceSid,\n    conversationSid: conversationSid,\n    sid: sid\n  };\n  this._uri = `/Services/${chatServiceSid}/Conversations/${conversationSid}/Participants/${sid}`;\n};\n/* jshint ignore:start */\n\n/**\n * update a ParticipantInstance\n *\n * @function update\n * @memberof Twilio.Conversations.V1.ServiceContext.ConversationContext.ParticipantContext#\n *\n * @param {object} [opts] - Options for request\n * @param {Date} [opts.dateCreated] - The date that this resource was created.\n * @param {Date} [opts.dateUpdated] - The date that this resource was last updated.\n * @param {string} [opts.identity] -\n *          A unique string identifier for the conversation participant as Conversation User.\n * @param {string} [opts.attributes] -\n *          An optional string metadata field you can use to store any data you wish.\n * @param {string} [opts.roleSid] -\n *          The SID of a conversation-level Role to assign to the participant\n * @param {string} [opts.messagingBinding.proxyAddress] -\n *          The address of the Twilio phone number that the participant is in contact with.\n * @param {string} [opts.messagingBinding.projectedAddress] -\n *          The address of the Twilio phone number that is used in Group MMS.\n * @param {number} [opts.lastReadMessageIndex] -\n *          Index of last “read” message in the Conversation for the Participant.\n * @param {string} [opts.lastReadTimestamp] -\n *          Timestamp of last “read” message in the Conversation for the Participant.\n * @param {participant.webhook_enabled_type} [opts.xTwilioWebhookEnabled] -\n *          The X-Twilio-Webhook-Enabled HTTP request header\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed ParticipantInstance\n */\n\n/* jshint ignore:end */\n\n\nParticipantContext.prototype.update = function update(opts, callback) {\n  if (_.isFunction(opts)) {\n    callback = opts;\n    opts = {};\n  }\n\n  opts = opts || {};\n  var deferred = Q.defer();\n  var data = values.of({\n    'DateCreated': serialize.iso8601DateTime(_.get(opts, 'dateCreated')),\n    'DateUpdated': serialize.iso8601DateTime(_.get(opts, 'dateUpdated')),\n    'Identity': _.get(opts, 'identity'),\n    'Attributes': _.get(opts, 'attributes'),\n    'RoleSid': _.get(opts, 'roleSid'),\n    'MessagingBinding.ProxyAddress': _.get(opts, 'messagingBinding.proxyAddress'),\n    'MessagingBinding.ProjectedAddress': _.get(opts, 'messagingBinding.projectedAddress'),\n    'LastReadMessageIndex': _.get(opts, 'lastReadMessageIndex'),\n    'LastReadTimestamp': _.get(opts, 'lastReadTimestamp')\n  });\n  var headers = values.of({\n    'X-Twilio-Webhook-Enabled': _.get(opts, 'xTwilioWebhookEnabled')\n  });\n\n  var promise = this._version.update({\n    uri: this._uri,\n    method: 'POST',\n    data: data,\n    headers: headers\n  });\n\n  promise = promise.then(function (payload) {\n    deferred.resolve(new ParticipantInstance(this._version, payload, this._solution.chatServiceSid, this._solution.conversationSid, this._solution.sid));\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n/* jshint ignore:start */\n\n/**\n * remove a ParticipantInstance\n *\n * @function remove\n * @memberof Twilio.Conversations.V1.ServiceContext.ConversationContext.ParticipantContext#\n *\n * @param {object} [opts] - Options for request\n * @param {participant.webhook_enabled_type} [opts.xTwilioWebhookEnabled] -\n *          The X-Twilio-Webhook-Enabled HTTP request header\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed ParticipantInstance\n */\n\n/* jshint ignore:end */\n\n\nParticipantContext.prototype.remove = function remove(opts, callback) {\n  if (_.isFunction(opts)) {\n    callback = opts;\n    opts = {};\n  }\n\n  opts = opts || {};\n  var deferred = Q.defer();\n  var headers = values.of({\n    'X-Twilio-Webhook-Enabled': _.get(opts, 'xTwilioWebhookEnabled')\n  });\n\n  var promise = this._version.remove({\n    uri: this._uri,\n    method: 'DELETE',\n    headers: headers\n  });\n\n  promise = promise.then(function (payload) {\n    deferred.resolve(payload);\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n/* jshint ignore:start */\n\n/**\n * fetch a ParticipantInstance\n *\n * @function fetch\n * @memberof Twilio.Conversations.V1.ServiceContext.ConversationContext.ParticipantContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed ParticipantInstance\n */\n\n/* jshint ignore:end */\n\n\nParticipantContext.prototype.fetch = function fetch(callback) {\n  var deferred = Q.defer();\n\n  var promise = this._version.fetch({\n    uri: this._uri,\n    method: 'GET'\n  });\n\n  promise = promise.then(function (payload) {\n    deferred.resolve(new ParticipantInstance(this._version, payload, this._solution.chatServiceSid, this._solution.conversationSid, this._solution.sid));\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Conversations.V1.ServiceContext.ConversationContext.ParticipantContext#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nParticipantContext.prototype.toJSON = function toJSON() {\n  return this._solution;\n};\n\nParticipantContext.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\nmodule.exports = {\n  ParticipantList: ParticipantList,\n  ParticipantPage: ParticipantPage,\n  ParticipantInstance: ParticipantInstance,\n  ParticipantContext: ParticipantContext\n};","map":{"version":3,"names":["Q","require","_","util","Page","deserialize","serialize","values","ParticipantList","ParticipantPage","ParticipantInstance","ParticipantContext","version","chatServiceSid","conversationSid","ParticipantListInstance","sid","get","_version","_solution","_uri","create","opts","callback","isFunction","deferred","defer","data","of","iso8601DateTime","headers","promise","uri","method","then","payload","resolve","bind","catch","error","reject","nodeify","each","isUndefined","Error","done","currentPage","currentResource","limits","readLimits","limit","pageSize","onComplete","fetchNextPage","fn","page","instances","instance","nextPage","merge","list","allResources","resource","push","length","pageToken","pageNumber","params","getPage","targetUrl","_domain","twilio","request","toJSON","inspect","custom","depth","options","response","solution","prototype","constructor","call","extend","getInstance","clone","forOwn","value","key","startsWith","accountSid","account_sid","chat_service_sid","conversation_sid","identity","attributes","messagingBinding","messaging_binding","roleSid","role_sid","dateCreated","date_created","dateUpdated","date_updated","url","lastReadMessageIndex","integer","last_read_message_index","lastReadTimestamp","last_read_timestamp","_context","undefined","Object","defineProperty","update","_proxy","remove","fetch","module","exports"],"sources":["/Users/hooniesun/rmit/fwp/assessment1/lan/node_modules/twilio/lib/rest/conversations/v1/service/conversation/participant.js"],"sourcesContent":["'use strict';\n\n/* jshint ignore:start */\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n/* jshint ignore:end */\n\nvar Q = require('q');  /* jshint ignore:line */\nvar _ = require('lodash');  /* jshint ignore:line */\nvar util = require('util');  /* jshint ignore:line */\nvar Page = require('../../../../../base/Page');  /* jshint ignore:line */\nvar deserialize = require(\n    '../../../../../base/deserialize');  /* jshint ignore:line */\nvar serialize = require(\n    '../../../../../base/serialize');  /* jshint ignore:line */\nvar values = require('../../../../../base/values');  /* jshint ignore:line */\n\nvar ParticipantList;\nvar ParticipantPage;\nvar ParticipantInstance;\nvar ParticipantContext;\n\n/* jshint ignore:start */\n/**\n * Initialize the ParticipantList\n *\n * @constructor Twilio.Conversations.V1.ServiceContext.ConversationContext.ParticipantList\n *\n * @param {Twilio.Conversations.V1} version - Version of the resource\n * @param {string} chatServiceSid -\n *          The SID of the Conversation Service that the resource is associated with.\n * @param {string} conversationSid -\n *          The unique ID of the Conversation for this participant.\n */\n/* jshint ignore:end */\nParticipantList = function ParticipantList(version, chatServiceSid,\n                                            conversationSid) {\n  /* jshint ignore:start */\n  /**\n   * @function participants\n   * @memberof Twilio.Conversations.V1.ServiceContext.ConversationContext#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Conversations.V1.ServiceContext.ConversationContext.ParticipantContext}\n   */\n  /* jshint ignore:end */\n  function ParticipantListInstance(sid) {\n    return ParticipantListInstance.get(sid);\n  }\n\n  ParticipantListInstance._version = version;\n  // Path Solution\n  ParticipantListInstance._solution = {\n    chatServiceSid: chatServiceSid,\n    conversationSid: conversationSid\n  };\n  ParticipantListInstance._uri = `/Services/${chatServiceSid}/Conversations/${conversationSid}/Participants`;\n  /* jshint ignore:start */\n  /**\n   * create a ParticipantInstance\n   *\n   * @function create\n   * @memberof Twilio.Conversations.V1.ServiceContext.ConversationContext.ParticipantList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.identity] -\n   *          A unique string identifier for the conversation participant as Conversation User.\n   * @param {string} [opts.messagingBinding.address] -\n   *          The address of the participant's device.\n   * @param {string} [opts.messagingBinding.proxyAddress] -\n   *          The address of the Twilio phone number that the participant is in contact with.\n   * @param {Date} [opts.dateCreated] - The date that this resource was created.\n   * @param {Date} [opts.dateUpdated] - The date that this resource was last updated.\n   * @param {string} [opts.attributes] -\n   *          An optional string metadata field you can use to store any data you wish.\n   * @param {string} [opts.messagingBinding.projectedAddress] -\n   *          The address of the Twilio phone number that is used in Group MMS.\n   * @param {string} [opts.roleSid] -\n   *          The SID of a conversation-level Role to assign to the participant\n   * @param {participant.webhook_enabled_type} [opts.xTwilioWebhookEnabled] -\n   *          The X-Twilio-Webhook-Enabled HTTP request header\n   * @param {function} [callback] - Callback to handle processed record\n   *\n   * @returns {Promise} Resolves to processed ParticipantInstance\n   */\n  /* jshint ignore:end */\n  ParticipantListInstance.create = function create(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n\n    var deferred = Q.defer();\n    var data = values.of({\n      'Identity': _.get(opts, 'identity'),\n      'MessagingBinding.Address': _.get(opts, 'messagingBinding.address'),\n      'MessagingBinding.ProxyAddress': _.get(opts, 'messagingBinding.proxyAddress'),\n      'DateCreated': serialize.iso8601DateTime(_.get(opts, 'dateCreated')),\n      'DateUpdated': serialize.iso8601DateTime(_.get(opts, 'dateUpdated')),\n      'Attributes': _.get(opts, 'attributes'),\n      'MessagingBinding.ProjectedAddress': _.get(opts, 'messagingBinding.projectedAddress'),\n      'RoleSid': _.get(opts, 'roleSid')\n    });\n    var headers = values.of({'X-Twilio-Webhook-Enabled': _.get(opts, 'xTwilioWebhookEnabled')});\n\n    var promise = this._version.create({uri: this._uri, method: 'POST', data: data, headers: headers});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new ParticipantInstance(\n        this._version,\n        payload,\n        this._solution.chatServiceSid,\n        this._solution.conversationSid,\n        this._solution.sid\n      ));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Streams ParticipantInstance records from the API.\n   *\n   * This operation lazily loads records as efficiently as possible until the limit\n   * is reached.\n   *\n   * The results are passed into the callback function, so this operation is memory\n   * efficient.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function each\n   * @memberof Twilio.Conversations.V1.ServiceContext.ConversationContext.ParticipantList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         each() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no pageSize is defined but a limit is defined,\n   *         each() will attempt to read the limit with the most efficient\n   *         page size, i.e. min(limit, 1000)\n   * @param {Function} [opts.callback] -\n   *         Function to process each record. If this and a positional\n   *         callback are passed, this one will be used\n   * @param {Function} [opts.done] -\n   *          Function to be called upon completion of streaming\n   * @param {Function} [callback] - Function to process each record\n   */\n  /* jshint ignore:end */\n  ParticipantListInstance.each = function each(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    if (opts.callback) {\n      callback = opts.callback;\n    }\n    if (_.isUndefined(callback)) {\n      throw new Error('Callback function must be provided');\n    }\n\n    var done = false;\n    var currentPage = 1;\n    var currentResource = 0;\n    var limits = this._version.readLimits({\n      limit: opts.limit,\n      pageSize: opts.pageSize\n    });\n\n    function onComplete(error) {\n      done = true;\n      if (_.isFunction(opts.done)) {\n        opts.done(error);\n      }\n    }\n\n    function fetchNextPage(fn) {\n      var promise = fn();\n      if (_.isUndefined(promise)) {\n        onComplete();\n        return;\n      }\n\n      promise.then(function(page) {\n        _.each(page.instances, function(instance) {\n          if (done || (!_.isUndefined(opts.limit) && currentResource >= opts.limit)) {\n            done = true;\n            return false;\n          }\n\n          currentResource++;\n          callback(instance, onComplete);\n        });\n\n        if (!done) {\n          currentPage++;\n          fetchNextPage(_.bind(page.nextPage, page));\n        } else {\n          onComplete();\n        }\n      });\n\n      promise.catch(onComplete);\n    }\n\n    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Lists ParticipantInstance records from the API as a list.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function list\n   * @memberof Twilio.Conversations.V1.ServiceContext.ConversationContext.ParticipantList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         list() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no page_size is defined but a limit is defined,\n   *         list() will attempt to read the limit with the most\n   *         efficient page size, i.e. min(limit, 1000)\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  ParticipantListInstance.list = function list(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    var deferred = Q.defer();\n    var allResources = [];\n    opts.callback = function(resource, done) {\n      allResources.push(resource);\n\n      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {\n        done();\n      }\n    };\n\n    opts.done = function(error) {\n      if (_.isUndefined(error)) {\n        deferred.resolve(allResources);\n      } else {\n        deferred.reject(error);\n      }\n    };\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    this.each(opts);\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single page of ParticipantInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function page\n   * @memberof Twilio.Conversations.V1.ServiceContext.ConversationContext.ParticipantList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.pageToken] - PageToken provided by the API\n   * @param {number} [opts.pageNumber] -\n   *          Page Number, this value is simply for client state\n   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  ParticipantListInstance.page = function page(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n\n    var deferred = Q.defer();\n    var data = values.of({\n      'PageToken': opts.pageToken,\n      'Page': opts.pageNumber,\n      'PageSize': opts.pageSize\n    });\n\n    var promise = this._version.page({uri: this._uri, method: 'GET', params: data});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new ParticipantPage(this._version, payload, this._solution));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single target page of ParticipantInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function getPage\n   * @memberof Twilio.Conversations.V1.ServiceContext.ConversationContext.ParticipantList#\n   *\n   * @param {string} [targetUrl] - API-generated URL for the requested results page\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  ParticipantListInstance.getPage = function getPage(targetUrl, callback) {\n    var deferred = Q.defer();\n\n    var promise = this._version._domain.twilio.request({method: 'GET', uri: targetUrl});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new ParticipantPage(this._version, payload, this._solution));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Constructs a participant\n   *\n   * @function get\n   * @memberof Twilio.Conversations.V1.ServiceContext.ConversationContext.ParticipantList#\n   *\n   * @param {string} sid -\n   *          A 34 character string that uniquely identifies this resource.\n   *\n   * @returns {Twilio.Conversations.V1.ServiceContext.ConversationContext.ParticipantContext}\n   */\n  /* jshint ignore:end */\n  ParticipantListInstance.get = function get(sid) {\n    return new ParticipantContext(\n      this._version,\n      this._solution.chatServiceSid,\n      this._solution.conversationSid,\n      sid\n    );\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Conversations.V1.ServiceContext.ConversationContext.ParticipantList#\n   *\n   * @returns Object\n   */\n  /* jshint ignore:end */\n  ParticipantListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n\n  ParticipantListInstance[util.inspect.custom] = function inspect(depth, options)\n      {\n    return util.inspect(this.toJSON(), options);\n  };\n\n  return ParticipantListInstance;\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the ParticipantPage\n *\n * @constructor Twilio.Conversations.V1.ServiceContext.ConversationContext.ParticipantPage\n *\n * @param {V1} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {ParticipantSolution} solution - Path solution\n *\n * @returns ParticipantPage\n */\n/* jshint ignore:end */\nParticipantPage = function ParticipantPage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n\n_.extend(ParticipantPage.prototype, Page.prototype);\nParticipantPage.prototype.constructor = ParticipantPage;\n\n/* jshint ignore:start */\n/**\n * Build an instance of ParticipantInstance\n *\n * @function getInstance\n * @memberof Twilio.Conversations.V1.ServiceContext.ConversationContext.ParticipantPage#\n *\n * @param {ParticipantPayload} payload - Payload response from the API\n *\n * @returns ParticipantInstance\n */\n/* jshint ignore:end */\nParticipantPage.prototype.getInstance = function getInstance(payload) {\n  return new ParticipantInstance(\n    this._version,\n    payload,\n    this._solution.chatServiceSid,\n    this._solution.conversationSid\n  );\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Conversations.V1.ServiceContext.ConversationContext.ParticipantPage#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nParticipantPage.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function(value, key) {\n    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\n\nParticipantPage.prototype[util.inspect.custom] = function inspect(depth,\n    options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the ParticipantContext\n *\n * @constructor Twilio.Conversations.V1.ServiceContext.ConversationContext.ParticipantInstance\n *\n * @property {string} accountSid -\n *          The unique ID of the Account responsible for this participant.\n * @property {string} chatServiceSid -\n *          The SID of the Conversation Service that the resource is associated with.\n * @property {string} conversationSid -\n *          The unique ID of the Conversation for this participant.\n * @property {string} sid -\n *          A 34 character string that uniquely identifies this resource.\n * @property {string} identity -\n *          A unique string identifier for the conversation participant as Conversation User.\n * @property {string} attributes -\n *          An optional string metadata field you can use to store any data you wish.\n * @property {object} messagingBinding -\n *          Information about how this participant exchanges messages with the conversation.\n * @property {string} roleSid -\n *          The SID of a conversation-level Role to assign to the participant\n * @property {Date} dateCreated - The date that this resource was created.\n * @property {Date} dateUpdated - The date that this resource was last updated.\n * @property {string} url - An absolute URL for this participant.\n * @property {number} lastReadMessageIndex -\n *          Index of last “read” message in the Conversation for the Participant.\n * @property {string} lastReadTimestamp -\n *          Timestamp of last “read” message in the Conversation for the Participant.\n *\n * @param {V1} version - Version of the resource\n * @param {ParticipantPayload} payload - The instance payload\n * @param {sid} chatServiceSid -\n *          The SID of the Conversation Service that the resource is associated with.\n * @param {sid} conversationSid -\n *          The unique ID of the Conversation for this participant.\n * @param {sid_like} sid -\n *          A 34 character string that uniquely identifies this resource.\n */\n/* jshint ignore:end */\nParticipantInstance = function ParticipantInstance(version, payload,\n                                                    chatServiceSid,\n                                                    conversationSid, sid) {\n  this._version = version;\n\n  // Marshaled Properties\n  this.accountSid = payload.account_sid; // jshint ignore:line\n  this.chatServiceSid = payload.chat_service_sid; // jshint ignore:line\n  this.conversationSid = payload.conversation_sid; // jshint ignore:line\n  this.sid = payload.sid; // jshint ignore:line\n  this.identity = payload.identity; // jshint ignore:line\n  this.attributes = payload.attributes; // jshint ignore:line\n  this.messagingBinding = payload.messaging_binding; // jshint ignore:line\n  this.roleSid = payload.role_sid; // jshint ignore:line\n  this.dateCreated = deserialize.iso8601DateTime(payload.date_created); // jshint ignore:line\n  this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated); // jshint ignore:line\n  this.url = payload.url; // jshint ignore:line\n  this.lastReadMessageIndex = deserialize.integer(payload.last_read_message_index); // jshint ignore:line\n  this.lastReadTimestamp = payload.last_read_timestamp; // jshint ignore:line\n\n  // Context\n  this._context = undefined;\n  this._solution = {\n    chatServiceSid: chatServiceSid,\n    conversationSid: conversationSid,\n    sid: sid || this.sid,\n  };\n};\n\nObject.defineProperty(ParticipantInstance.prototype,\n  '_proxy', {\n    get: function() {\n      if (!this._context) {\n        this._context = new ParticipantContext(\n          this._version,\n          this._solution.chatServiceSid,\n          this._solution.conversationSid,\n          this._solution.sid\n        );\n      }\n\n      return this._context;\n    }\n});\n\n/* jshint ignore:start */\n/**\n * update a ParticipantInstance\n *\n * @function update\n * @memberof Twilio.Conversations.V1.ServiceContext.ConversationContext.ParticipantInstance#\n *\n * @param {object} [opts] - Options for request\n * @param {Date} [opts.dateCreated] - The date that this resource was created.\n * @param {Date} [opts.dateUpdated] - The date that this resource was last updated.\n * @param {string} [opts.identity] -\n *          A unique string identifier for the conversation participant as Conversation User.\n * @param {string} [opts.attributes] -\n *          An optional string metadata field you can use to store any data you wish.\n * @param {string} [opts.roleSid] -\n *          The SID of a conversation-level Role to assign to the participant\n * @param {string} [opts.messagingBinding.proxyAddress] -\n *          The address of the Twilio phone number that the participant is in contact with.\n * @param {string} [opts.messagingBinding.projectedAddress] -\n *          The address of the Twilio phone number that is used in Group MMS.\n * @param {number} [opts.lastReadMessageIndex] -\n *          Index of last “read” message in the Conversation for the Participant.\n * @param {string} [opts.lastReadTimestamp] -\n *          Timestamp of last “read” message in the Conversation for the Participant.\n * @param {participant.webhook_enabled_type} [opts.xTwilioWebhookEnabled] -\n *          The X-Twilio-Webhook-Enabled HTTP request header\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed ParticipantInstance\n */\n/* jshint ignore:end */\nParticipantInstance.prototype.update = function update(opts, callback) {\n  return this._proxy.update(opts, callback);\n};\n\n/* jshint ignore:start */\n/**\n * remove a ParticipantInstance\n *\n * @function remove\n * @memberof Twilio.Conversations.V1.ServiceContext.ConversationContext.ParticipantInstance#\n *\n * @param {object} [opts] - Options for request\n * @param {participant.webhook_enabled_type} [opts.xTwilioWebhookEnabled] -\n *          The X-Twilio-Webhook-Enabled HTTP request header\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed ParticipantInstance\n */\n/* jshint ignore:end */\nParticipantInstance.prototype.remove = function remove(opts, callback) {\n  return this._proxy.remove(opts, callback);\n};\n\n/* jshint ignore:start */\n/**\n * fetch a ParticipantInstance\n *\n * @function fetch\n * @memberof Twilio.Conversations.V1.ServiceContext.ConversationContext.ParticipantInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed ParticipantInstance\n */\n/* jshint ignore:end */\nParticipantInstance.prototype.fetch = function fetch(callback) {\n  return this._proxy.fetch(callback);\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Conversations.V1.ServiceContext.ConversationContext.ParticipantInstance#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nParticipantInstance.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function(value, key) {\n    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\n\nParticipantInstance.prototype[util.inspect.custom] = function inspect(depth,\n    options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the ParticipantContext\n *\n * @constructor Twilio.Conversations.V1.ServiceContext.ConversationContext.ParticipantContext\n *\n * @param {V1} version - Version of the resource\n * @param {sid} chatServiceSid -\n *          The SID of the Conversation Service that the resource is associated with.\n * @param {sid_like} conversationSid -\n *          The unique ID of the Conversation for this participant.\n * @param {sid_like} sid -\n *          A 34 character string that uniquely identifies this resource.\n */\n/* jshint ignore:end */\nParticipantContext = function ParticipantContext(version, chatServiceSid,\n                                                  conversationSid, sid) {\n  this._version = version;\n\n  // Path Solution\n  this._solution = {chatServiceSid: chatServiceSid, conversationSid: conversationSid, sid: sid, };\n  this._uri = `/Services/${chatServiceSid}/Conversations/${conversationSid}/Participants/${sid}`;\n};\n\n/* jshint ignore:start */\n/**\n * update a ParticipantInstance\n *\n * @function update\n * @memberof Twilio.Conversations.V1.ServiceContext.ConversationContext.ParticipantContext#\n *\n * @param {object} [opts] - Options for request\n * @param {Date} [opts.dateCreated] - The date that this resource was created.\n * @param {Date} [opts.dateUpdated] - The date that this resource was last updated.\n * @param {string} [opts.identity] -\n *          A unique string identifier for the conversation participant as Conversation User.\n * @param {string} [opts.attributes] -\n *          An optional string metadata field you can use to store any data you wish.\n * @param {string} [opts.roleSid] -\n *          The SID of a conversation-level Role to assign to the participant\n * @param {string} [opts.messagingBinding.proxyAddress] -\n *          The address of the Twilio phone number that the participant is in contact with.\n * @param {string} [opts.messagingBinding.projectedAddress] -\n *          The address of the Twilio phone number that is used in Group MMS.\n * @param {number} [opts.lastReadMessageIndex] -\n *          Index of last “read” message in the Conversation for the Participant.\n * @param {string} [opts.lastReadTimestamp] -\n *          Timestamp of last “read” message in the Conversation for the Participant.\n * @param {participant.webhook_enabled_type} [opts.xTwilioWebhookEnabled] -\n *          The X-Twilio-Webhook-Enabled HTTP request header\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed ParticipantInstance\n */\n/* jshint ignore:end */\nParticipantContext.prototype.update = function update(opts, callback) {\n  if (_.isFunction(opts)) {\n    callback = opts;\n    opts = {};\n  }\n  opts = opts || {};\n\n  var deferred = Q.defer();\n  var data = values.of({\n    'DateCreated': serialize.iso8601DateTime(_.get(opts, 'dateCreated')),\n    'DateUpdated': serialize.iso8601DateTime(_.get(opts, 'dateUpdated')),\n    'Identity': _.get(opts, 'identity'),\n    'Attributes': _.get(opts, 'attributes'),\n    'RoleSid': _.get(opts, 'roleSid'),\n    'MessagingBinding.ProxyAddress': _.get(opts, 'messagingBinding.proxyAddress'),\n    'MessagingBinding.ProjectedAddress': _.get(opts, 'messagingBinding.projectedAddress'),\n    'LastReadMessageIndex': _.get(opts, 'lastReadMessageIndex'),\n    'LastReadTimestamp': _.get(opts, 'lastReadTimestamp')\n  });\n  var headers = values.of({'X-Twilio-Webhook-Enabled': _.get(opts, 'xTwilioWebhookEnabled')});\n\n  var promise = this._version.update({uri: this._uri, method: 'POST', data: data, headers: headers});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(new ParticipantInstance(\n      this._version,\n      payload,\n      this._solution.chatServiceSid,\n      this._solution.conversationSid,\n      this._solution.sid\n    ));\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * remove a ParticipantInstance\n *\n * @function remove\n * @memberof Twilio.Conversations.V1.ServiceContext.ConversationContext.ParticipantContext#\n *\n * @param {object} [opts] - Options for request\n * @param {participant.webhook_enabled_type} [opts.xTwilioWebhookEnabled] -\n *          The X-Twilio-Webhook-Enabled HTTP request header\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed ParticipantInstance\n */\n/* jshint ignore:end */\nParticipantContext.prototype.remove = function remove(opts, callback) {\n  if (_.isFunction(opts)) {\n    callback = opts;\n    opts = {};\n  }\n  opts = opts || {};\n\n  var deferred = Q.defer();\n  var headers = values.of({'X-Twilio-Webhook-Enabled': _.get(opts, 'xTwilioWebhookEnabled')});\n\n  var promise = this._version.remove({uri: this._uri, method: 'DELETE', headers: headers});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(payload);\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * fetch a ParticipantInstance\n *\n * @function fetch\n * @memberof Twilio.Conversations.V1.ServiceContext.ConversationContext.ParticipantContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed ParticipantInstance\n */\n/* jshint ignore:end */\nParticipantContext.prototype.fetch = function fetch(callback) {\n  var deferred = Q.defer();\n  var promise = this._version.fetch({uri: this._uri, method: 'GET'});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(new ParticipantInstance(\n      this._version,\n      payload,\n      this._solution.chatServiceSid,\n      this._solution.conversationSid,\n      this._solution.sid\n    ));\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Conversations.V1.ServiceContext.ConversationContext.ParticipantContext#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nParticipantContext.prototype.toJSON = function toJSON() {\n  return this._solution;\n};\n\nParticipantContext.prototype[util.inspect.custom] = function inspect(depth,\n    options) {\n  return util.inspect(this.toJSON(), options);\n};\n\nmodule.exports = {\n  ParticipantList: ParticipantList,\n  ParticipantPage: ParticipantPage,\n  ParticipantInstance: ParticipantInstance,\n  ParticipantContext: ParticipantContext\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}