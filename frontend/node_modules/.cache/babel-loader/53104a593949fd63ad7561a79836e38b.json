{"ast":null,"code":"var _jsxFileName = \"/Users/hooniesun/rmit/fwp/assessment1/lan/src/UI/PostForm.js\",\n    _s = $RefreshSig$();\n\nimport * as React from \"react\";\nimport { Row, Col, Card, Form, Button, Container, ProgressBar, OverlayTrigger, Tooltip } from \"react-bootstrap\";\nimport { Image } from \"react-bootstrap-icons\"; // import Post from \"./Post\";\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst postUrl = \"https://api.cloudinary.com/v1_1/duc4zmhl7/image/upload\";\nconst resUrl = \"https://res.cloudinary.com/duc4zmhl7/image/upload\";\nexport default function PostForm(_ref) {\n  _s();\n\n  let {\n    user,\n    dispatchUser,\n    addPost,\n    postId,\n    isComment,\n    parentPostId,\n    replyTo\n  } = _ref;\n  const [isPostable, setIsPostable] = React.useState(false);\n  const [numCharsTyped, setNumCharsTyped] = React.useState(0);\n  const [progressBarVariant, setProgressBarVariant] = React.useState(\"success\");\n  const wordLimit = 250;\n  React.useEffect(() => {\n    // Disable/enable the post button\n    clearTimeout(validateTextareaTimeoutId);\n    validateTextareaTimeoutId = setTimeout(() => {\n      setIsPostable(validateTextarea(numCharsTyped));\n    }, 500);\n\n    if (Math.floor(numCharsTyped / wordLimit * 100) <= 70) {\n      setProgressBarVariant(\"success\");\n    } else if (numCharsTyped <= wordLimit) {\n      setProgressBarVariant(\"warning\");\n    } else {\n      setProgressBarVariant(\"danger\");\n    }\n  }, [numCharsTyped]);\n  let validateTextareaTimeoutId;\n\n  const validateTextarea = num => num > 0 && num <= wordLimit;\n\n  const textareaChangeHandler = event => {\n    setNumCharsTyped(event.target.value.length);\n  };\n\n  const imageUploadHandler = event => {\n    let img = document.querySelector(\"#myImg\");\n    img.src = URL.createObjectURL(event.target.files[0]); // TODO: CLEAN UP AFTER\n  };\n\n  const postHandler = async e => {\n    e.preventDefault();\n    let imagesToUpload = document.querySelector(\"#imageUpload\").files; // Create a general post JSON\n\n    let post = {\n      postId: postId,\n      parentId: null,\n      children: [],\n      text: e.target[0].value,\n      datePosted: new Date(),\n      postBy: user.data.email,\n      likes: [],\n      isDeleted: false,\n      img: null\n    };\n\n    if (imagesToUpload.length != 0) {\n      const data = new FormData();\n      data.append(\"file\", imagesToUpload[0]);\n      data.append(\"upload_preset\", \"zqlcfaas\");\n      fetch(postUrl, {\n        method: \"POST\",\n        body: data\n      }).then(response => response.json()).then(data => {\n        post.img = `${resUrl}/v${data.version}/${data.public_id}.${data.format}`;\n        e.target.querySelector(\"img\").src = \"#\";\n      }).catch(error => console.log(error));\n    }\n\n    addPost(post, isComment, parentPostId);\n    e.target.reset();\n    setIsPostable(false);\n  };\n\n  return /*#__PURE__*/_jsxDEV(Card, {\n    children: /*#__PURE__*/_jsxDEV(Container, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 105,\n    columnNumber: 5\n  }, this);\n}\n\n_s(PostForm, \"d1h2uLj+C+m6pzlIZmXwdS5W4IE=\");\n\n_c = PostForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"PostForm\");","map":{"version":3,"names":["React","Row","Col","Card","Form","Button","Container","ProgressBar","OverlayTrigger","Tooltip","Image","postUrl","resUrl","PostForm","user","dispatchUser","addPost","postId","isComment","parentPostId","replyTo","isPostable","setIsPostable","useState","numCharsTyped","setNumCharsTyped","progressBarVariant","setProgressBarVariant","wordLimit","useEffect","clearTimeout","validateTextareaTimeoutId","setTimeout","validateTextarea","Math","floor","num","textareaChangeHandler","event","target","value","length","imageUploadHandler","img","document","querySelector","src","URL","createObjectURL","files","postHandler","e","preventDefault","imagesToUpload","post","parentId","children","text","datePosted","Date","postBy","data","email","likes","isDeleted","FormData","append","fetch","method","body","then","response","json","version","public_id","format","catch","error","console","log","reset"],"sources":["/Users/hooniesun/rmit/fwp/assessment1/lan/src/UI/PostForm.js"],"sourcesContent":["import * as React from \"react\";\nimport {\n  Row,\n  Col,\n  Card,\n  Form,\n  Button,\n  Container,\n  ProgressBar,\n  OverlayTrigger,\n  Tooltip,\n} from \"react-bootstrap\";\nimport { Image } from \"react-bootstrap-icons\";\n// import Post from \"./Post\";\n\nconst postUrl = \"https://api.cloudinary.com/v1_1/duc4zmhl7/image/upload\";\nconst resUrl = \"https://res.cloudinary.com/duc4zmhl7/image/upload\";\n\nexport default function PostForm({\n  user,\n  dispatchUser,\n  addPost,\n  postId,\n  isComment,\n  parentPostId,\n  replyTo,\n}) {\n  const [isPostable, setIsPostable] = React.useState(false);\n  const [numCharsTyped, setNumCharsTyped] = React.useState(0);\n  const [progressBarVariant, setProgressBarVariant] = React.useState(\"success\");\n  const wordLimit = 250;\n\n  React.useEffect(() => {\n    // Disable/enable the post button\n    clearTimeout(validateTextareaTimeoutId);\n    validateTextareaTimeoutId = setTimeout(() => {\n      setIsPostable(validateTextarea(numCharsTyped));\n    }, 500);\n\n    if (Math.floor((numCharsTyped / wordLimit) * 100) <= 70) {\n      setProgressBarVariant(\"success\");\n    } else if (numCharsTyped <= wordLimit) {\n      setProgressBarVariant(\"warning\");\n    } else {\n      setProgressBarVariant(\"danger\");\n    }\n  }, [numCharsTyped]);\n\n  let validateTextareaTimeoutId;\n\n  const validateTextarea = (num) => num > 0 && num <= wordLimit;\n\n  const textareaChangeHandler = (event) => {\n    setNumCharsTyped(event.target.value.length);\n  };\n\n  const imageUploadHandler = (event) => {\n    let img = document.querySelector(\"#myImg\");\n    img.src = URL.createObjectURL(event.target.files[0]);\n\n    // TODO: CLEAN UP AFTER\n  };\n\n  const postHandler = async (e) => {\n    e.preventDefault();\n\n    let imagesToUpload = document.querySelector(\"#imageUpload\").files;\n    // Create a general post JSON\n    let post = {\n      postId: postId,\n      parentId: null,\n      children: [],\n      text: e.target[0].value,\n      datePosted: new Date(),\n      postBy: user.data.email,\n      likes: [],\n      isDeleted: false,\n      img: null,\n    };\n\n    if (imagesToUpload.length != 0) {\n      const data = new FormData();\n      data.append(\"file\", imagesToUpload[0]);\n      data.append(\"upload_preset\", \"zqlcfaas\");\n\n      fetch(postUrl, {\n        method: \"POST\",\n        body: data,\n      })\n        .then((response) => response.json())\n        .then((data) => {\n          post.img = `${resUrl}/v${data.version}/${data.public_id}.${data.format}`;\n\n          e.target.querySelector(\"img\").src = \"#\";\n        })\n        .catch((error) => console.log(error));\n    }\n\n    addPost(post, isComment, parentPostId);\n    e.target.reset();\n    setIsPostable(false);\n  };\n\n  return (\n    <Card>\n      <Container>\n\n      </Container>\n      \n    </Card>\n  );\n}\n"],"mappings":";;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SACEC,GADF,EAEEC,GAFF,EAGEC,IAHF,EAIEC,IAJF,EAKEC,MALF,EAMEC,SANF,EAOEC,WAPF,EAQEC,cARF,EASEC,OATF,QAUO,iBAVP;AAWA,SAASC,KAAT,QAAsB,uBAAtB,C,CACA;;;AAEA,MAAMC,OAAO,GAAG,wDAAhB;AACA,MAAMC,MAAM,GAAG,mDAAf;AAEA,eAAe,SAASC,QAAT,OAQZ;EAAA;;EAAA,IAR8B;IAC/BC,IAD+B;IAE/BC,YAF+B;IAG/BC,OAH+B;IAI/BC,MAJ+B;IAK/BC,SAL+B;IAM/BC,YAN+B;IAO/BC;EAP+B,CAQ9B;EACD,MAAM,CAACC,UAAD,EAAaC,aAAb,IAA8BtB,KAAK,CAACuB,QAAN,CAAe,KAAf,CAApC;EACA,MAAM,CAACC,aAAD,EAAgBC,gBAAhB,IAAoCzB,KAAK,CAACuB,QAAN,CAAe,CAAf,CAA1C;EACA,MAAM,CAACG,kBAAD,EAAqBC,qBAArB,IAA8C3B,KAAK,CAACuB,QAAN,CAAe,SAAf,CAApD;EACA,MAAMK,SAAS,GAAG,GAAlB;EAEA5B,KAAK,CAAC6B,SAAN,CAAgB,MAAM;IACpB;IACAC,YAAY,CAACC,yBAAD,CAAZ;IACAA,yBAAyB,GAAGC,UAAU,CAAC,MAAM;MAC3CV,aAAa,CAACW,gBAAgB,CAACT,aAAD,CAAjB,CAAb;IACD,CAFqC,EAEnC,GAFmC,CAAtC;;IAIA,IAAIU,IAAI,CAACC,KAAL,CAAYX,aAAa,GAAGI,SAAjB,GAA8B,GAAzC,KAAiD,EAArD,EAAyD;MACvDD,qBAAqB,CAAC,SAAD,CAArB;IACD,CAFD,MAEO,IAAIH,aAAa,IAAII,SAArB,EAAgC;MACrCD,qBAAqB,CAAC,SAAD,CAArB;IACD,CAFM,MAEA;MACLA,qBAAqB,CAAC,QAAD,CAArB;IACD;EACF,CAdD,EAcG,CAACH,aAAD,CAdH;EAgBA,IAAIO,yBAAJ;;EAEA,MAAME,gBAAgB,GAAIG,GAAD,IAASA,GAAG,GAAG,CAAN,IAAWA,GAAG,IAAIR,SAApD;;EAEA,MAAMS,qBAAqB,GAAIC,KAAD,IAAW;IACvCb,gBAAgB,CAACa,KAAK,CAACC,MAAN,CAAaC,KAAb,CAAmBC,MAApB,CAAhB;EACD,CAFD;;EAIA,MAAMC,kBAAkB,GAAIJ,KAAD,IAAW;IACpC,IAAIK,GAAG,GAAGC,QAAQ,CAACC,aAAT,CAAuB,QAAvB,CAAV;IACAF,GAAG,CAACG,GAAJ,GAAUC,GAAG,CAACC,eAAJ,CAAoBV,KAAK,CAACC,MAAN,CAAaU,KAAb,CAAmB,CAAnB,CAApB,CAAV,CAFoC,CAIpC;EACD,CALD;;EAOA,MAAMC,WAAW,GAAG,MAAOC,CAAP,IAAa;IAC/BA,CAAC,CAACC,cAAF;IAEA,IAAIC,cAAc,GAAGT,QAAQ,CAACC,aAAT,CAAuB,cAAvB,EAAuCI,KAA5D,CAH+B,CAI/B;;IACA,IAAIK,IAAI,GAAG;MACTrC,MAAM,EAAEA,MADC;MAETsC,QAAQ,EAAE,IAFD;MAGTC,QAAQ,EAAE,EAHD;MAITC,IAAI,EAAEN,CAAC,CAACZ,MAAF,CAAS,CAAT,EAAYC,KAJT;MAKTkB,UAAU,EAAE,IAAIC,IAAJ,EALH;MAMTC,MAAM,EAAE9C,IAAI,CAAC+C,IAAL,CAAUC,KANT;MAOTC,KAAK,EAAE,EAPE;MAQTC,SAAS,EAAE,KARF;MASTrB,GAAG,EAAE;IATI,CAAX;;IAYA,IAAIU,cAAc,CAACZ,MAAf,IAAyB,CAA7B,EAAgC;MAC9B,MAAMoB,IAAI,GAAG,IAAII,QAAJ,EAAb;MACAJ,IAAI,CAACK,MAAL,CAAY,MAAZ,EAAoBb,cAAc,CAAC,CAAD,CAAlC;MACAQ,IAAI,CAACK,MAAL,CAAY,eAAZ,EAA6B,UAA7B;MAEAC,KAAK,CAACxD,OAAD,EAAU;QACbyD,MAAM,EAAE,MADK;QAEbC,IAAI,EAAER;MAFO,CAAV,CAAL,CAIGS,IAJH,CAISC,QAAD,IAAcA,QAAQ,CAACC,IAAT,EAJtB,EAKGF,IALH,CAKST,IAAD,IAAU;QACdP,IAAI,CAACX,GAAL,GAAY,GAAE/B,MAAO,KAAIiD,IAAI,CAACY,OAAQ,IAAGZ,IAAI,CAACa,SAAU,IAAGb,IAAI,CAACc,MAAO,EAAvE;QAEAxB,CAAC,CAACZ,MAAF,CAASM,aAAT,CAAuB,KAAvB,EAA8BC,GAA9B,GAAoC,GAApC;MACD,CATH,EAUG8B,KAVH,CAUUC,KAAD,IAAWC,OAAO,CAACC,GAAR,CAAYF,KAAZ,CAVpB;IAWD;;IAED7D,OAAO,CAACsC,IAAD,EAAOpC,SAAP,EAAkBC,YAAlB,CAAP;IACAgC,CAAC,CAACZ,MAAF,CAASyC,KAAT;IACA1D,aAAa,CAAC,KAAD,CAAb;EACD,CAtCD;;EAwCA,oBACE,QAAC,IAAD;IAAA,uBACE,QAAC,SAAD;MAAA;MAAA;MAAA;IAAA;EADF;IAAA;IAAA;IAAA;EAAA,QADF;AAQD;;GA7FuBT,Q;;KAAAA,Q"},"metadata":{},"sourceType":"module"}