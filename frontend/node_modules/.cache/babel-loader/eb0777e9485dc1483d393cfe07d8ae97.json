{"ast":null,"code":"'use strict';\n/* jshint ignore:start */\n\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n\n/* jshint ignore:end */\n\nvar Q = require('q');\n/* jshint ignore:line */\n\n\nvar _ = require('lodash');\n/* jshint ignore:line */\n\n\nvar util = require('util');\n/* jshint ignore:line */\n\n\nvar Page = require('../../../../base/Page');\n/* jshint ignore:line */\n\n\nvar deserialize = require('../../../../base/deserialize');\n/* jshint ignore:line */\n\n\nvar serialize = require('../../../../base/serialize');\n/* jshint ignore:line */\n\n\nvar values = require('../../../../base/values');\n/* jshint ignore:line */\n\n\nvar EventList;\nvar EventPage;\nvar EventInstance;\nvar EventContext;\n/* jshint ignore:start */\n\n/**\n * Initialize the EventList\n *\n * @constructor Twilio.Taskrouter.V1.WorkspaceContext.EventList\n *\n * @param {Twilio.Taskrouter.V1} version - Version of the resource\n * @param {string} workspaceSid - The SID of the Workspace that contains the Event\n */\n\n/* jshint ignore:end */\n\nEventList = function EventList(version, workspaceSid) {\n  /* jshint ignore:start */\n\n  /**\n   * @function events\n   * @memberof Twilio.Taskrouter.V1.WorkspaceContext#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Taskrouter.V1.WorkspaceContext.EventContext}\n   */\n\n  /* jshint ignore:end */\n  function EventListInstance(sid) {\n    return EventListInstance.get(sid);\n  }\n\n  EventListInstance._version = version; // Path Solution\n\n  EventListInstance._solution = {\n    workspaceSid: workspaceSid\n  };\n  EventListInstance._uri = `/Workspaces/${workspaceSid}/Events`;\n  /* jshint ignore:start */\n\n  /**\n   * Streams EventInstance records from the API.\n   *\n   * This operation lazily loads records as efficiently as possible until the limit\n   * is reached.\n   *\n   * The results are passed into the callback function, so this operation is memory\n   * efficient.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function each\n   * @memberof Twilio.Taskrouter.V1.WorkspaceContext.EventList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {Date} [opts.endDate] -\n   *          Only include usage that occurred on or before this date\n   * @param {string} [opts.eventType] - The type of Events to read\n   * @param {number} [opts.minutes] - The period of events to read in minutes\n   * @param {string} [opts.reservationSid] -\n   *          The SID of the Reservation with the Events to read\n   * @param {Date} [opts.startDate] - Only include Events from on or after this date\n   * @param {string} [opts.taskQueueSid] -\n   *          The SID of the TaskQueue with the Events to read\n   * @param {string} [opts.taskSid] - The SID of the Task with the Events to read\n   * @param {string} [opts.workerSid] - The SID of the Worker with the Events to read\n   * @param {string} [opts.workflowSid] -\n   *          The SID of the Worker with the Events to read\n   * @param {string} [opts.taskChannel] - The TaskChannel with the Events to read\n   * @param {string} [opts.sid] - The unique string that identifies the resource\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         each() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no pageSize is defined but a limit is defined,\n   *         each() will attempt to read the limit with the most efficient\n   *         page size, i.e. min(limit, 1000)\n   * @param {Function} [opts.callback] -\n   *         Function to process each record. If this and a positional\n   *         callback are passed, this one will be used\n   * @param {Function} [opts.done] -\n   *          Function to be called upon completion of streaming\n   * @param {Function} [callback] - Function to process each record\n   */\n\n  /* jshint ignore:end */\n\n  EventListInstance.each = function each(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n\n    if (opts.callback) {\n      callback = opts.callback;\n    }\n\n    if (_.isUndefined(callback)) {\n      throw new Error('Callback function must be provided');\n    }\n\n    var done = false;\n    var currentPage = 1;\n    var currentResource = 0;\n\n    var limits = this._version.readLimits({\n      limit: opts.limit,\n      pageSize: opts.pageSize\n    });\n\n    function onComplete(error) {\n      done = true;\n\n      if (_.isFunction(opts.done)) {\n        opts.done(error);\n      }\n    }\n\n    function fetchNextPage(fn) {\n      var promise = fn();\n\n      if (_.isUndefined(promise)) {\n        onComplete();\n        return;\n      }\n\n      promise.then(function (page) {\n        _.each(page.instances, function (instance) {\n          if (done || !_.isUndefined(opts.limit) && currentResource >= opts.limit) {\n            done = true;\n            return false;\n          }\n\n          currentResource++;\n          callback(instance, onComplete);\n        });\n\n        if (!done) {\n          currentPage++;\n          fetchNextPage(_.bind(page.nextPage, page));\n        } else {\n          onComplete();\n        }\n      });\n      promise.catch(onComplete);\n    }\n\n    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Lists EventInstance records from the API as a list.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function list\n   * @memberof Twilio.Taskrouter.V1.WorkspaceContext.EventList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {Date} [opts.endDate] -\n   *          Only include usage that occurred on or before this date\n   * @param {string} [opts.eventType] - The type of Events to read\n   * @param {number} [opts.minutes] - The period of events to read in minutes\n   * @param {string} [opts.reservationSid] -\n   *          The SID of the Reservation with the Events to read\n   * @param {Date} [opts.startDate] - Only include Events from on or after this date\n   * @param {string} [opts.taskQueueSid] -\n   *          The SID of the TaskQueue with the Events to read\n   * @param {string} [opts.taskSid] - The SID of the Task with the Events to read\n   * @param {string} [opts.workerSid] - The SID of the Worker with the Events to read\n   * @param {string} [opts.workflowSid] -\n   *          The SID of the Worker with the Events to read\n   * @param {string} [opts.taskChannel] - The TaskChannel with the Events to read\n   * @param {string} [opts.sid] - The unique string that identifies the resource\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         list() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no page_size is defined but a limit is defined,\n   *         list() will attempt to read the limit with the most\n   *         efficient page size, i.e. min(limit, 1000)\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  EventListInstance.list = function list(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n    var deferred = Q.defer();\n    var allResources = [];\n\n    opts.callback = function (resource, done) {\n      allResources.push(resource);\n\n      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {\n        done();\n      }\n    };\n\n    opts.done = function (error) {\n      if (_.isUndefined(error)) {\n        deferred.resolve(allResources);\n      } else {\n        deferred.reject(error);\n      }\n    };\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    this.each(opts);\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Retrieve a single page of EventInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function page\n   * @memberof Twilio.Taskrouter.V1.WorkspaceContext.EventList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {Date} [opts.endDate] -\n   *          Only include usage that occurred on or before this date\n   * @param {string} [opts.eventType] - The type of Events to read\n   * @param {number} [opts.minutes] - The period of events to read in minutes\n   * @param {string} [opts.reservationSid] -\n   *          The SID of the Reservation with the Events to read\n   * @param {Date} [opts.startDate] - Only include Events from on or after this date\n   * @param {string} [opts.taskQueueSid] -\n   *          The SID of the TaskQueue with the Events to read\n   * @param {string} [opts.taskSid] - The SID of the Task with the Events to read\n   * @param {string} [opts.workerSid] - The SID of the Worker with the Events to read\n   * @param {string} [opts.workflowSid] -\n   *          The SID of the Worker with the Events to read\n   * @param {string} [opts.taskChannel] - The TaskChannel with the Events to read\n   * @param {string} [opts.sid] - The unique string that identifies the resource\n   * @param {string} [opts.pageToken] - PageToken provided by the API\n   * @param {number} [opts.pageNumber] -\n   *          Page Number, this value is simply for client state\n   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  EventListInstance.page = function page(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n    var deferred = Q.defer();\n    var data = values.of({\n      'EndDate': serialize.iso8601DateTime(_.get(opts, 'endDate')),\n      'EventType': _.get(opts, 'eventType'),\n      'Minutes': _.get(opts, 'minutes'),\n      'ReservationSid': _.get(opts, 'reservationSid'),\n      'StartDate': serialize.iso8601DateTime(_.get(opts, 'startDate')),\n      'TaskQueueSid': _.get(opts, 'taskQueueSid'),\n      'TaskSid': _.get(opts, 'taskSid'),\n      'WorkerSid': _.get(opts, 'workerSid'),\n      'WorkflowSid': _.get(opts, 'workflowSid'),\n      'TaskChannel': _.get(opts, 'taskChannel'),\n      'Sid': _.get(opts, 'sid'),\n      'PageToken': opts.pageToken,\n      'Page': opts.pageNumber,\n      'PageSize': opts.pageSize\n    });\n\n    var promise = this._version.page({\n      uri: this._uri,\n      method: 'GET',\n      params: data\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new EventPage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Retrieve a single target page of EventInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function getPage\n   * @memberof Twilio.Taskrouter.V1.WorkspaceContext.EventList#\n   *\n   * @param {string} [targetUrl] - API-generated URL for the requested results page\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  EventListInstance.getPage = function getPage(targetUrl, callback) {\n    var deferred = Q.defer();\n\n    var promise = this._version._domain.twilio.request({\n      method: 'GET',\n      uri: targetUrl\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new EventPage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Constructs a event\n   *\n   * @function get\n   * @memberof Twilio.Taskrouter.V1.WorkspaceContext.EventList#\n   *\n   * @param {string} sid - The SID of the resource to fetch\n   *\n   * @returns {Twilio.Taskrouter.V1.WorkspaceContext.EventContext}\n   */\n\n  /* jshint ignore:end */\n\n\n  EventListInstance.get = function get(sid) {\n    return new EventContext(this._version, this._solution.workspaceSid, sid);\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Taskrouter.V1.WorkspaceContext.EventList#\n   *\n   * @returns Object\n   */\n\n  /* jshint ignore:end */\n\n\n  EventListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n\n  EventListInstance[util.inspect.custom] = function inspect(depth, options) {\n    return util.inspect(this.toJSON(), options);\n  };\n\n  return EventListInstance;\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the EventPage\n *\n * @constructor Twilio.Taskrouter.V1.WorkspaceContext.EventPage\n *\n * @param {V1} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {EventSolution} solution - Path solution\n *\n * @returns EventPage\n */\n\n/* jshint ignore:end */\n\n\nEventPage = function EventPage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n\n_.extend(EventPage.prototype, Page.prototype);\n\nEventPage.prototype.constructor = EventPage;\n/* jshint ignore:start */\n\n/**\n * Build an instance of EventInstance\n *\n * @function getInstance\n * @memberof Twilio.Taskrouter.V1.WorkspaceContext.EventPage#\n *\n * @param {EventPayload} payload - Payload response from the API\n *\n * @returns EventInstance\n */\n\n/* jshint ignore:end */\n\nEventPage.prototype.getInstance = function getInstance(payload) {\n  return new EventInstance(this._version, payload, this._solution.workspaceSid);\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Taskrouter.V1.WorkspaceContext.EventPage#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nEventPage.prototype.toJSON = function toJSON() {\n  let clone = {};\n\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n\n  return clone;\n};\n\nEventPage.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the EventContext\n *\n * @constructor Twilio.Taskrouter.V1.WorkspaceContext.EventInstance\n *\n * @property {string} accountSid - The SID of the Account that created the resource\n * @property {string} actorSid - The SID of the resource that triggered the event\n * @property {string} actorType - The type of resource that triggered the event\n * @property {string} actorUrl -\n *          The absolute URL of the resource that triggered the event\n * @property {string} description - A description of the event\n * @property {object} eventData - Data about the event\n * @property {Date} eventDate - The time the event was sent\n * @property {number} eventDateMs - The time the event was sent in milliseconds\n * @property {string} eventType - The identifier for the event\n * @property {string} resourceSid -\n *          The SID of the object the event is most relevant to\n * @property {string} resourceType -\n *          The type of object the event is most relevant to\n * @property {string} resourceUrl -\n *          The URL of the resource the event is most relevant to\n * @property {string} sid - The unique string that identifies the resource\n * @property {string} source - Where the Event originated\n * @property {string} sourceIpAddress - The IP from which the Event originated\n * @property {string} url - The absolute URL of the Event resource\n * @property {string} workspaceSid -\n *          The SID of the Workspace that contains the Event\n *\n * @param {V1} version - Version of the resource\n * @param {EventPayload} payload - The instance payload\n * @param {sid} workspaceSid - The SID of the Workspace that contains the Event\n * @param {sid} sid - The SID of the resource to fetch\n */\n\n/* jshint ignore:end */\n\n\nEventInstance = function EventInstance(version, payload, workspaceSid, sid) {\n  this._version = version; // Marshaled Properties\n\n  this.accountSid = payload.account_sid; // jshint ignore:line\n\n  this.actorSid = payload.actor_sid; // jshint ignore:line\n\n  this.actorType = payload.actor_type; // jshint ignore:line\n\n  this.actorUrl = payload.actor_url; // jshint ignore:line\n\n  this.description = payload.description; // jshint ignore:line\n\n  this.eventData = payload.event_data; // jshint ignore:line\n\n  this.eventDate = deserialize.iso8601DateTime(payload.event_date); // jshint ignore:line\n\n  this.eventDateMs = deserialize.integer(payload.event_date_ms); // jshint ignore:line\n\n  this.eventType = payload.event_type; // jshint ignore:line\n\n  this.resourceSid = payload.resource_sid; // jshint ignore:line\n\n  this.resourceType = payload.resource_type; // jshint ignore:line\n\n  this.resourceUrl = payload.resource_url; // jshint ignore:line\n\n  this.sid = payload.sid; // jshint ignore:line\n\n  this.source = payload.source; // jshint ignore:line\n\n  this.sourceIpAddress = payload.source_ip_address; // jshint ignore:line\n\n  this.url = payload.url; // jshint ignore:line\n\n  this.workspaceSid = payload.workspace_sid; // jshint ignore:line\n  // Context\n\n  this._context = undefined;\n  this._solution = {\n    workspaceSid: workspaceSid,\n    sid: sid || this.sid\n  };\n};\n\nObject.defineProperty(EventInstance.prototype, '_proxy', {\n  get: function () {\n    if (!this._context) {\n      this._context = new EventContext(this._version, this._solution.workspaceSid, this._solution.sid);\n    }\n\n    return this._context;\n  }\n});\n/* jshint ignore:start */\n\n/**\n * fetch a EventInstance\n *\n * @function fetch\n * @memberof Twilio.Taskrouter.V1.WorkspaceContext.EventInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed EventInstance\n */\n\n/* jshint ignore:end */\n\nEventInstance.prototype.fetch = function fetch(callback) {\n  return this._proxy.fetch(callback);\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Taskrouter.V1.WorkspaceContext.EventInstance#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nEventInstance.prototype.toJSON = function toJSON() {\n  let clone = {};\n\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n\n  return clone;\n};\n\nEventInstance.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the EventContext\n *\n * @constructor Twilio.Taskrouter.V1.WorkspaceContext.EventContext\n *\n * @param {V1} version - Version of the resource\n * @param {sid} workspaceSid - The SID of the Workspace with the Event to fetch\n * @param {sid} sid - The SID of the resource to fetch\n */\n\n/* jshint ignore:end */\n\n\nEventContext = function EventContext(version, workspaceSid, sid) {\n  this._version = version; // Path Solution\n\n  this._solution = {\n    workspaceSid: workspaceSid,\n    sid: sid\n  };\n  this._uri = `/Workspaces/${workspaceSid}/Events/${sid}`;\n};\n/* jshint ignore:start */\n\n/**\n * fetch a EventInstance\n *\n * @function fetch\n * @memberof Twilio.Taskrouter.V1.WorkspaceContext.EventContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed EventInstance\n */\n\n/* jshint ignore:end */\n\n\nEventContext.prototype.fetch = function fetch(callback) {\n  var deferred = Q.defer();\n\n  var promise = this._version.fetch({\n    uri: this._uri,\n    method: 'GET'\n  });\n\n  promise = promise.then(function (payload) {\n    deferred.resolve(new EventInstance(this._version, payload, this._solution.workspaceSid, this._solution.sid));\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Taskrouter.V1.WorkspaceContext.EventContext#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nEventContext.prototype.toJSON = function toJSON() {\n  return this._solution;\n};\n\nEventContext.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\nmodule.exports = {\n  EventList: EventList,\n  EventPage: EventPage,\n  EventInstance: EventInstance,\n  EventContext: EventContext\n};","map":{"version":3,"names":["Q","require","_","util","Page","deserialize","serialize","values","EventList","EventPage","EventInstance","EventContext","version","workspaceSid","EventListInstance","sid","get","_version","_solution","_uri","each","opts","callback","isFunction","isUndefined","Error","done","currentPage","currentResource","limits","readLimits","limit","pageSize","onComplete","error","fetchNextPage","fn","promise","then","page","instances","instance","bind","nextPage","catch","merge","list","deferred","defer","allResources","resource","push","length","resolve","reject","nodeify","data","of","iso8601DateTime","pageToken","pageNumber","uri","method","params","payload","getPage","targetUrl","_domain","twilio","request","toJSON","inspect","custom","depth","options","response","solution","prototype","constructor","call","extend","getInstance","clone","forOwn","value","key","startsWith","accountSid","account_sid","actorSid","actor_sid","actorType","actor_type","actorUrl","actor_url","description","eventData","event_data","eventDate","event_date","eventDateMs","integer","event_date_ms","eventType","event_type","resourceSid","resource_sid","resourceType","resource_type","resourceUrl","resource_url","source","sourceIpAddress","source_ip_address","url","workspace_sid","_context","undefined","Object","defineProperty","fetch","_proxy","module","exports"],"sources":["/Users/hooniesun/rmit/fwp/assessment1/lan/node_modules/twilio/lib/rest/taskrouter/v1/workspace/event.js"],"sourcesContent":["'use strict';\n\n/* jshint ignore:start */\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n/* jshint ignore:end */\n\nvar Q = require('q');  /* jshint ignore:line */\nvar _ = require('lodash');  /* jshint ignore:line */\nvar util = require('util');  /* jshint ignore:line */\nvar Page = require('../../../../base/Page');  /* jshint ignore:line */\nvar deserialize = require(\n    '../../../../base/deserialize');  /* jshint ignore:line */\nvar serialize = require('../../../../base/serialize');  /* jshint ignore:line */\nvar values = require('../../../../base/values');  /* jshint ignore:line */\n\nvar EventList;\nvar EventPage;\nvar EventInstance;\nvar EventContext;\n\n/* jshint ignore:start */\n/**\n * Initialize the EventList\n *\n * @constructor Twilio.Taskrouter.V1.WorkspaceContext.EventList\n *\n * @param {Twilio.Taskrouter.V1} version - Version of the resource\n * @param {string} workspaceSid - The SID of the Workspace that contains the Event\n */\n/* jshint ignore:end */\nEventList = function EventList(version, workspaceSid) {\n  /* jshint ignore:start */\n  /**\n   * @function events\n   * @memberof Twilio.Taskrouter.V1.WorkspaceContext#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Taskrouter.V1.WorkspaceContext.EventContext}\n   */\n  /* jshint ignore:end */\n  function EventListInstance(sid) {\n    return EventListInstance.get(sid);\n  }\n\n  EventListInstance._version = version;\n  // Path Solution\n  EventListInstance._solution = {workspaceSid: workspaceSid};\n  EventListInstance._uri = `/Workspaces/${workspaceSid}/Events`;\n  /* jshint ignore:start */\n  /**\n   * Streams EventInstance records from the API.\n   *\n   * This operation lazily loads records as efficiently as possible until the limit\n   * is reached.\n   *\n   * The results are passed into the callback function, so this operation is memory\n   * efficient.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function each\n   * @memberof Twilio.Taskrouter.V1.WorkspaceContext.EventList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {Date} [opts.endDate] -\n   *          Only include usage that occurred on or before this date\n   * @param {string} [opts.eventType] - The type of Events to read\n   * @param {number} [opts.minutes] - The period of events to read in minutes\n   * @param {string} [opts.reservationSid] -\n   *          The SID of the Reservation with the Events to read\n   * @param {Date} [opts.startDate] - Only include Events from on or after this date\n   * @param {string} [opts.taskQueueSid] -\n   *          The SID of the TaskQueue with the Events to read\n   * @param {string} [opts.taskSid] - The SID of the Task with the Events to read\n   * @param {string} [opts.workerSid] - The SID of the Worker with the Events to read\n   * @param {string} [opts.workflowSid] -\n   *          The SID of the Worker with the Events to read\n   * @param {string} [opts.taskChannel] - The TaskChannel with the Events to read\n   * @param {string} [opts.sid] - The unique string that identifies the resource\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         each() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no pageSize is defined but a limit is defined,\n   *         each() will attempt to read the limit with the most efficient\n   *         page size, i.e. min(limit, 1000)\n   * @param {Function} [opts.callback] -\n   *         Function to process each record. If this and a positional\n   *         callback are passed, this one will be used\n   * @param {Function} [opts.done] -\n   *          Function to be called upon completion of streaming\n   * @param {Function} [callback] - Function to process each record\n   */\n  /* jshint ignore:end */\n  EventListInstance.each = function each(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    if (opts.callback) {\n      callback = opts.callback;\n    }\n    if (_.isUndefined(callback)) {\n      throw new Error('Callback function must be provided');\n    }\n\n    var done = false;\n    var currentPage = 1;\n    var currentResource = 0;\n    var limits = this._version.readLimits({\n      limit: opts.limit,\n      pageSize: opts.pageSize\n    });\n\n    function onComplete(error) {\n      done = true;\n      if (_.isFunction(opts.done)) {\n        opts.done(error);\n      }\n    }\n\n    function fetchNextPage(fn) {\n      var promise = fn();\n      if (_.isUndefined(promise)) {\n        onComplete();\n        return;\n      }\n\n      promise.then(function(page) {\n        _.each(page.instances, function(instance) {\n          if (done || (!_.isUndefined(opts.limit) && currentResource >= opts.limit)) {\n            done = true;\n            return false;\n          }\n\n          currentResource++;\n          callback(instance, onComplete);\n        });\n\n        if (!done) {\n          currentPage++;\n          fetchNextPage(_.bind(page.nextPage, page));\n        } else {\n          onComplete();\n        }\n      });\n\n      promise.catch(onComplete);\n    }\n\n    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Lists EventInstance records from the API as a list.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function list\n   * @memberof Twilio.Taskrouter.V1.WorkspaceContext.EventList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {Date} [opts.endDate] -\n   *          Only include usage that occurred on or before this date\n   * @param {string} [opts.eventType] - The type of Events to read\n   * @param {number} [opts.minutes] - The period of events to read in minutes\n   * @param {string} [opts.reservationSid] -\n   *          The SID of the Reservation with the Events to read\n   * @param {Date} [opts.startDate] - Only include Events from on or after this date\n   * @param {string} [opts.taskQueueSid] -\n   *          The SID of the TaskQueue with the Events to read\n   * @param {string} [opts.taskSid] - The SID of the Task with the Events to read\n   * @param {string} [opts.workerSid] - The SID of the Worker with the Events to read\n   * @param {string} [opts.workflowSid] -\n   *          The SID of the Worker with the Events to read\n   * @param {string} [opts.taskChannel] - The TaskChannel with the Events to read\n   * @param {string} [opts.sid] - The unique string that identifies the resource\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         list() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no page_size is defined but a limit is defined,\n   *         list() will attempt to read the limit with the most\n   *         efficient page size, i.e. min(limit, 1000)\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  EventListInstance.list = function list(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    var deferred = Q.defer();\n    var allResources = [];\n    opts.callback = function(resource, done) {\n      allResources.push(resource);\n\n      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {\n        done();\n      }\n    };\n\n    opts.done = function(error) {\n      if (_.isUndefined(error)) {\n        deferred.resolve(allResources);\n      } else {\n        deferred.reject(error);\n      }\n    };\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    this.each(opts);\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single page of EventInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function page\n   * @memberof Twilio.Taskrouter.V1.WorkspaceContext.EventList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {Date} [opts.endDate] -\n   *          Only include usage that occurred on or before this date\n   * @param {string} [opts.eventType] - The type of Events to read\n   * @param {number} [opts.minutes] - The period of events to read in minutes\n   * @param {string} [opts.reservationSid] -\n   *          The SID of the Reservation with the Events to read\n   * @param {Date} [opts.startDate] - Only include Events from on or after this date\n   * @param {string} [opts.taskQueueSid] -\n   *          The SID of the TaskQueue with the Events to read\n   * @param {string} [opts.taskSid] - The SID of the Task with the Events to read\n   * @param {string} [opts.workerSid] - The SID of the Worker with the Events to read\n   * @param {string} [opts.workflowSid] -\n   *          The SID of the Worker with the Events to read\n   * @param {string} [opts.taskChannel] - The TaskChannel with the Events to read\n   * @param {string} [opts.sid] - The unique string that identifies the resource\n   * @param {string} [opts.pageToken] - PageToken provided by the API\n   * @param {number} [opts.pageNumber] -\n   *          Page Number, this value is simply for client state\n   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  EventListInstance.page = function page(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n\n    var deferred = Q.defer();\n    var data = values.of({\n      'EndDate': serialize.iso8601DateTime(_.get(opts, 'endDate')),\n      'EventType': _.get(opts, 'eventType'),\n      'Minutes': _.get(opts, 'minutes'),\n      'ReservationSid': _.get(opts, 'reservationSid'),\n      'StartDate': serialize.iso8601DateTime(_.get(opts, 'startDate')),\n      'TaskQueueSid': _.get(opts, 'taskQueueSid'),\n      'TaskSid': _.get(opts, 'taskSid'),\n      'WorkerSid': _.get(opts, 'workerSid'),\n      'WorkflowSid': _.get(opts, 'workflowSid'),\n      'TaskChannel': _.get(opts, 'taskChannel'),\n      'Sid': _.get(opts, 'sid'),\n      'PageToken': opts.pageToken,\n      'Page': opts.pageNumber,\n      'PageSize': opts.pageSize\n    });\n\n    var promise = this._version.page({uri: this._uri, method: 'GET', params: data});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new EventPage(this._version, payload, this._solution));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single target page of EventInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function getPage\n   * @memberof Twilio.Taskrouter.V1.WorkspaceContext.EventList#\n   *\n   * @param {string} [targetUrl] - API-generated URL for the requested results page\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  EventListInstance.getPage = function getPage(targetUrl, callback) {\n    var deferred = Q.defer();\n\n    var promise = this._version._domain.twilio.request({method: 'GET', uri: targetUrl});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new EventPage(this._version, payload, this._solution));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Constructs a event\n   *\n   * @function get\n   * @memberof Twilio.Taskrouter.V1.WorkspaceContext.EventList#\n   *\n   * @param {string} sid - The SID of the resource to fetch\n   *\n   * @returns {Twilio.Taskrouter.V1.WorkspaceContext.EventContext}\n   */\n  /* jshint ignore:end */\n  EventListInstance.get = function get(sid) {\n    return new EventContext(this._version, this._solution.workspaceSid, sid);\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Taskrouter.V1.WorkspaceContext.EventList#\n   *\n   * @returns Object\n   */\n  /* jshint ignore:end */\n  EventListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n\n  EventListInstance[util.inspect.custom] = function inspect(depth, options) {\n    return util.inspect(this.toJSON(), options);\n  };\n\n  return EventListInstance;\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the EventPage\n *\n * @constructor Twilio.Taskrouter.V1.WorkspaceContext.EventPage\n *\n * @param {V1} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {EventSolution} solution - Path solution\n *\n * @returns EventPage\n */\n/* jshint ignore:end */\nEventPage = function EventPage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n\n_.extend(EventPage.prototype, Page.prototype);\nEventPage.prototype.constructor = EventPage;\n\n/* jshint ignore:start */\n/**\n * Build an instance of EventInstance\n *\n * @function getInstance\n * @memberof Twilio.Taskrouter.V1.WorkspaceContext.EventPage#\n *\n * @param {EventPayload} payload - Payload response from the API\n *\n * @returns EventInstance\n */\n/* jshint ignore:end */\nEventPage.prototype.getInstance = function getInstance(payload) {\n  return new EventInstance(this._version, payload, this._solution.workspaceSid);\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Taskrouter.V1.WorkspaceContext.EventPage#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nEventPage.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function(value, key) {\n    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\n\nEventPage.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the EventContext\n *\n * @constructor Twilio.Taskrouter.V1.WorkspaceContext.EventInstance\n *\n * @property {string} accountSid - The SID of the Account that created the resource\n * @property {string} actorSid - The SID of the resource that triggered the event\n * @property {string} actorType - The type of resource that triggered the event\n * @property {string} actorUrl -\n *          The absolute URL of the resource that triggered the event\n * @property {string} description - A description of the event\n * @property {object} eventData - Data about the event\n * @property {Date} eventDate - The time the event was sent\n * @property {number} eventDateMs - The time the event was sent in milliseconds\n * @property {string} eventType - The identifier for the event\n * @property {string} resourceSid -\n *          The SID of the object the event is most relevant to\n * @property {string} resourceType -\n *          The type of object the event is most relevant to\n * @property {string} resourceUrl -\n *          The URL of the resource the event is most relevant to\n * @property {string} sid - The unique string that identifies the resource\n * @property {string} source - Where the Event originated\n * @property {string} sourceIpAddress - The IP from which the Event originated\n * @property {string} url - The absolute URL of the Event resource\n * @property {string} workspaceSid -\n *          The SID of the Workspace that contains the Event\n *\n * @param {V1} version - Version of the resource\n * @param {EventPayload} payload - The instance payload\n * @param {sid} workspaceSid - The SID of the Workspace that contains the Event\n * @param {sid} sid - The SID of the resource to fetch\n */\n/* jshint ignore:end */\nEventInstance = function EventInstance(version, payload, workspaceSid, sid) {\n  this._version = version;\n\n  // Marshaled Properties\n  this.accountSid = payload.account_sid; // jshint ignore:line\n  this.actorSid = payload.actor_sid; // jshint ignore:line\n  this.actorType = payload.actor_type; // jshint ignore:line\n  this.actorUrl = payload.actor_url; // jshint ignore:line\n  this.description = payload.description; // jshint ignore:line\n  this.eventData = payload.event_data; // jshint ignore:line\n  this.eventDate = deserialize.iso8601DateTime(payload.event_date); // jshint ignore:line\n  this.eventDateMs = deserialize.integer(payload.event_date_ms); // jshint ignore:line\n  this.eventType = payload.event_type; // jshint ignore:line\n  this.resourceSid = payload.resource_sid; // jshint ignore:line\n  this.resourceType = payload.resource_type; // jshint ignore:line\n  this.resourceUrl = payload.resource_url; // jshint ignore:line\n  this.sid = payload.sid; // jshint ignore:line\n  this.source = payload.source; // jshint ignore:line\n  this.sourceIpAddress = payload.source_ip_address; // jshint ignore:line\n  this.url = payload.url; // jshint ignore:line\n  this.workspaceSid = payload.workspace_sid; // jshint ignore:line\n\n  // Context\n  this._context = undefined;\n  this._solution = {workspaceSid: workspaceSid, sid: sid || this.sid, };\n};\n\nObject.defineProperty(EventInstance.prototype,\n  '_proxy', {\n    get: function() {\n      if (!this._context) {\n        this._context = new EventContext(this._version, this._solution.workspaceSid, this._solution.sid);\n      }\n\n      return this._context;\n    }\n});\n\n/* jshint ignore:start */\n/**\n * fetch a EventInstance\n *\n * @function fetch\n * @memberof Twilio.Taskrouter.V1.WorkspaceContext.EventInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed EventInstance\n */\n/* jshint ignore:end */\nEventInstance.prototype.fetch = function fetch(callback) {\n  return this._proxy.fetch(callback);\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Taskrouter.V1.WorkspaceContext.EventInstance#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nEventInstance.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function(value, key) {\n    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\n\nEventInstance.prototype[util.inspect.custom] = function inspect(depth, options)\n    {\n  return util.inspect(this.toJSON(), options);\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the EventContext\n *\n * @constructor Twilio.Taskrouter.V1.WorkspaceContext.EventContext\n *\n * @param {V1} version - Version of the resource\n * @param {sid} workspaceSid - The SID of the Workspace with the Event to fetch\n * @param {sid} sid - The SID of the resource to fetch\n */\n/* jshint ignore:end */\nEventContext = function EventContext(version, workspaceSid, sid) {\n  this._version = version;\n\n  // Path Solution\n  this._solution = {workspaceSid: workspaceSid, sid: sid, };\n  this._uri = `/Workspaces/${workspaceSid}/Events/${sid}`;\n};\n\n/* jshint ignore:start */\n/**\n * fetch a EventInstance\n *\n * @function fetch\n * @memberof Twilio.Taskrouter.V1.WorkspaceContext.EventContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed EventInstance\n */\n/* jshint ignore:end */\nEventContext.prototype.fetch = function fetch(callback) {\n  var deferred = Q.defer();\n  var promise = this._version.fetch({uri: this._uri, method: 'GET'});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(new EventInstance(\n      this._version,\n      payload,\n      this._solution.workspaceSid,\n      this._solution.sid\n    ));\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Taskrouter.V1.WorkspaceContext.EventContext#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nEventContext.prototype.toJSON = function toJSON() {\n  return this._solution;\n};\n\nEventContext.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\nmodule.exports = {\n  EventList: EventList,\n  EventPage: EventPage,\n  EventInstance: EventInstance,\n  EventContext: EventContext\n};\n"],"mappings":"AAAA;AAEA;;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;;AAEA,IAAIA,CAAC,GAAGC,OAAO,CAAC,GAAD,CAAf;AAAuB;;;AACvB,IAAIC,CAAC,GAAGD,OAAO,CAAC,QAAD,CAAf;AAA4B;;;AAC5B,IAAIE,IAAI,GAAGF,OAAO,CAAC,MAAD,CAAlB;AAA6B;;;AAC7B,IAAIG,IAAI,GAAGH,OAAO,CAAC,uBAAD,CAAlB;AAA8C;;;AAC9C,IAAII,WAAW,GAAGJ,OAAO,CACrB,8BADqB,CAAzB;AACsC;;;AACtC,IAAIK,SAAS,GAAGL,OAAO,CAAC,4BAAD,CAAvB;AAAwD;;;AACxD,IAAIM,MAAM,GAAGN,OAAO,CAAC,yBAAD,CAApB;AAAkD;;;AAElD,IAAIO,SAAJ;AACA,IAAIC,SAAJ;AACA,IAAIC,aAAJ;AACA,IAAIC,YAAJ;AAEA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;;AACAH,SAAS,GAAG,SAASA,SAAT,CAAmBI,OAAnB,EAA4BC,YAA5B,EAA0C;EACpD;;EACA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;;EACE;EACA,SAASC,iBAAT,CAA2BC,GAA3B,EAAgC;IAC9B,OAAOD,iBAAiB,CAACE,GAAlB,CAAsBD,GAAtB,CAAP;EACD;;EAEDD,iBAAiB,CAACG,QAAlB,GAA6BL,OAA7B,CAfoD,CAgBpD;;EACAE,iBAAiB,CAACI,SAAlB,GAA8B;IAACL,YAAY,EAAEA;EAAf,CAA9B;EACAC,iBAAiB,CAACK,IAAlB,GAA0B,eAAcN,YAAa,SAArD;EACA;;EACA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EACE;;EACAC,iBAAiB,CAACM,IAAlB,GAAyB,SAASA,IAAT,CAAcC,IAAd,EAAoBC,QAApB,EAA8B;IACrD,IAAIpB,CAAC,CAACqB,UAAF,CAAaF,IAAb,CAAJ,EAAwB;MACtBC,QAAQ,GAAGD,IAAX;MACAA,IAAI,GAAG,EAAP;IACD;;IACDA,IAAI,GAAGA,IAAI,IAAI,EAAf;;IACA,IAAIA,IAAI,CAACC,QAAT,EAAmB;MACjBA,QAAQ,GAAGD,IAAI,CAACC,QAAhB;IACD;;IACD,IAAIpB,CAAC,CAACsB,WAAF,CAAcF,QAAd,CAAJ,EAA6B;MAC3B,MAAM,IAAIG,KAAJ,CAAU,oCAAV,CAAN;IACD;;IAED,IAAIC,IAAI,GAAG,KAAX;IACA,IAAIC,WAAW,GAAG,CAAlB;IACA,IAAIC,eAAe,GAAG,CAAtB;;IACA,IAAIC,MAAM,GAAG,KAAKZ,QAAL,CAAca,UAAd,CAAyB;MACpCC,KAAK,EAAEV,IAAI,CAACU,KADwB;MAEpCC,QAAQ,EAAEX,IAAI,CAACW;IAFqB,CAAzB,CAAb;;IAKA,SAASC,UAAT,CAAoBC,KAApB,EAA2B;MACzBR,IAAI,GAAG,IAAP;;MACA,IAAIxB,CAAC,CAACqB,UAAF,CAAaF,IAAI,CAACK,IAAlB,CAAJ,EAA6B;QAC3BL,IAAI,CAACK,IAAL,CAAUQ,KAAV;MACD;IACF;;IAED,SAASC,aAAT,CAAuBC,EAAvB,EAA2B;MACzB,IAAIC,OAAO,GAAGD,EAAE,EAAhB;;MACA,IAAIlC,CAAC,CAACsB,WAAF,CAAca,OAAd,CAAJ,EAA4B;QAC1BJ,UAAU;QACV;MACD;;MAEDI,OAAO,CAACC,IAAR,CAAa,UAASC,IAAT,EAAe;QAC1BrC,CAAC,CAACkB,IAAF,CAAOmB,IAAI,CAACC,SAAZ,EAAuB,UAASC,QAAT,EAAmB;UACxC,IAAIf,IAAI,IAAK,CAACxB,CAAC,CAACsB,WAAF,CAAcH,IAAI,CAACU,KAAnB,CAAD,IAA8BH,eAAe,IAAIP,IAAI,CAACU,KAAnE,EAA2E;YACzEL,IAAI,GAAG,IAAP;YACA,OAAO,KAAP;UACD;;UAEDE,eAAe;UACfN,QAAQ,CAACmB,QAAD,EAAWR,UAAX,CAAR;QACD,CARD;;QAUA,IAAI,CAACP,IAAL,EAAW;UACTC,WAAW;UACXQ,aAAa,CAACjC,CAAC,CAACwC,IAAF,CAAOH,IAAI,CAACI,QAAZ,EAAsBJ,IAAtB,CAAD,CAAb;QACD,CAHD,MAGO;UACLN,UAAU;QACX;MACF,CAjBD;MAmBAI,OAAO,CAACO,KAAR,CAAcX,UAAd;IACD;;IAEDE,aAAa,CAACjC,CAAC,CAACwC,IAAF,CAAO,KAAKH,IAAZ,EAAkB,IAAlB,EAAwBrC,CAAC,CAAC2C,KAAF,CAAQxB,IAAR,EAAcQ,MAAd,CAAxB,CAAD,CAAb;EACD,CA1DD;EA4DA;;EACA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EACE;;;EACAf,iBAAiB,CAACgC,IAAlB,GAAyB,SAASA,IAAT,CAAczB,IAAd,EAAoBC,QAApB,EAA8B;IACrD,IAAIpB,CAAC,CAACqB,UAAF,CAAaF,IAAb,CAAJ,EAAwB;MACtBC,QAAQ,GAAGD,IAAX;MACAA,IAAI,GAAG,EAAP;IACD;;IACDA,IAAI,GAAGA,IAAI,IAAI,EAAf;IACA,IAAI0B,QAAQ,GAAG/C,CAAC,CAACgD,KAAF,EAAf;IACA,IAAIC,YAAY,GAAG,EAAnB;;IACA5B,IAAI,CAACC,QAAL,GAAgB,UAAS4B,QAAT,EAAmBxB,IAAnB,EAAyB;MACvCuB,YAAY,CAACE,IAAb,CAAkBD,QAAlB;;MAEA,IAAI,CAAChD,CAAC,CAACsB,WAAF,CAAcH,IAAI,CAACU,KAAnB,CAAD,IAA8BkB,YAAY,CAACG,MAAb,KAAwB/B,IAAI,CAACU,KAA/D,EAAsE;QACpEL,IAAI;MACL;IACF,CAND;;IAQAL,IAAI,CAACK,IAAL,GAAY,UAASQ,KAAT,EAAgB;MAC1B,IAAIhC,CAAC,CAACsB,WAAF,CAAcU,KAAd,CAAJ,EAA0B;QACxBa,QAAQ,CAACM,OAAT,CAAiBJ,YAAjB;MACD,CAFD,MAEO;QACLF,QAAQ,CAACO,MAAT,CAAgBpB,KAAhB;MACD;IACF,CAND;;IAQA,IAAIhC,CAAC,CAACqB,UAAF,CAAaD,QAAb,CAAJ,EAA4B;MAC1ByB,QAAQ,CAACV,OAAT,CAAiBkB,OAAjB,CAAyBjC,QAAzB;IACD;;IAED,KAAKF,IAAL,CAAUC,IAAV;IACA,OAAO0B,QAAQ,CAACV,OAAhB;EACD,CA9BD;EAgCA;;EACA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EACE;;;EACAvB,iBAAiB,CAACyB,IAAlB,GAAyB,SAASA,IAAT,CAAclB,IAAd,EAAoBC,QAApB,EAA8B;IACrD,IAAIpB,CAAC,CAACqB,UAAF,CAAaF,IAAb,CAAJ,EAAwB;MACtBC,QAAQ,GAAGD,IAAX;MACAA,IAAI,GAAG,EAAP;IACD;;IACDA,IAAI,GAAGA,IAAI,IAAI,EAAf;IAEA,IAAI0B,QAAQ,GAAG/C,CAAC,CAACgD,KAAF,EAAf;IACA,IAAIQ,IAAI,GAAGjD,MAAM,CAACkD,EAAP,CAAU;MACnB,WAAWnD,SAAS,CAACoD,eAAV,CAA0BxD,CAAC,CAACc,GAAF,CAAMK,IAAN,EAAY,SAAZ,CAA1B,CADQ;MAEnB,aAAanB,CAAC,CAACc,GAAF,CAAMK,IAAN,EAAY,WAAZ,CAFM;MAGnB,WAAWnB,CAAC,CAACc,GAAF,CAAMK,IAAN,EAAY,SAAZ,CAHQ;MAInB,kBAAkBnB,CAAC,CAACc,GAAF,CAAMK,IAAN,EAAY,gBAAZ,CAJC;MAKnB,aAAaf,SAAS,CAACoD,eAAV,CAA0BxD,CAAC,CAACc,GAAF,CAAMK,IAAN,EAAY,WAAZ,CAA1B,CALM;MAMnB,gBAAgBnB,CAAC,CAACc,GAAF,CAAMK,IAAN,EAAY,cAAZ,CANG;MAOnB,WAAWnB,CAAC,CAACc,GAAF,CAAMK,IAAN,EAAY,SAAZ,CAPQ;MAQnB,aAAanB,CAAC,CAACc,GAAF,CAAMK,IAAN,EAAY,WAAZ,CARM;MASnB,eAAenB,CAAC,CAACc,GAAF,CAAMK,IAAN,EAAY,aAAZ,CATI;MAUnB,eAAenB,CAAC,CAACc,GAAF,CAAMK,IAAN,EAAY,aAAZ,CAVI;MAWnB,OAAOnB,CAAC,CAACc,GAAF,CAAMK,IAAN,EAAY,KAAZ,CAXY;MAYnB,aAAaA,IAAI,CAACsC,SAZC;MAanB,QAAQtC,IAAI,CAACuC,UAbM;MAcnB,YAAYvC,IAAI,CAACW;IAdE,CAAV,CAAX;;IAiBA,IAAIK,OAAO,GAAG,KAAKpB,QAAL,CAAcsB,IAAd,CAAmB;MAACsB,GAAG,EAAE,KAAK1C,IAAX;MAAiB2C,MAAM,EAAE,KAAzB;MAAgCC,MAAM,EAAEP;IAAxC,CAAnB,CAAd;;IAEAnB,OAAO,GAAGA,OAAO,CAACC,IAAR,CAAa,UAAS0B,OAAT,EAAkB;MACvCjB,QAAQ,CAACM,OAAT,CAAiB,IAAI5C,SAAJ,CAAc,KAAKQ,QAAnB,EAA6B+C,OAA7B,EAAsC,KAAK9C,SAA3C,CAAjB;IACD,CAFsB,CAErBwB,IAFqB,CAEhB,IAFgB,CAAb,CAAV;IAIAL,OAAO,CAACO,KAAR,CAAc,UAASV,KAAT,EAAgB;MAC5Ba,QAAQ,CAACO,MAAT,CAAgBpB,KAAhB;IACD,CAFD;;IAIA,IAAIhC,CAAC,CAACqB,UAAF,CAAaD,QAAb,CAAJ,EAA4B;MAC1ByB,QAAQ,CAACV,OAAT,CAAiBkB,OAAjB,CAAyBjC,QAAzB;IACD;;IAED,OAAOyB,QAAQ,CAACV,OAAhB;EACD,CAxCD;EA0CA;;EACA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EACE;;;EACAvB,iBAAiB,CAACmD,OAAlB,GAA4B,SAASA,OAAT,CAAiBC,SAAjB,EAA4B5C,QAA5B,EAAsC;IAChE,IAAIyB,QAAQ,GAAG/C,CAAC,CAACgD,KAAF,EAAf;;IAEA,IAAIX,OAAO,GAAG,KAAKpB,QAAL,CAAckD,OAAd,CAAsBC,MAAtB,CAA6BC,OAA7B,CAAqC;MAACP,MAAM,EAAE,KAAT;MAAgBD,GAAG,EAAEK;IAArB,CAArC,CAAd;;IAEA7B,OAAO,GAAGA,OAAO,CAACC,IAAR,CAAa,UAAS0B,OAAT,EAAkB;MACvCjB,QAAQ,CAACM,OAAT,CAAiB,IAAI5C,SAAJ,CAAc,KAAKQ,QAAnB,EAA6B+C,OAA7B,EAAsC,KAAK9C,SAA3C,CAAjB;IACD,CAFsB,CAErBwB,IAFqB,CAEhB,IAFgB,CAAb,CAAV;IAIAL,OAAO,CAACO,KAAR,CAAc,UAASV,KAAT,EAAgB;MAC5Ba,QAAQ,CAACO,MAAT,CAAgBpB,KAAhB;IACD,CAFD;;IAIA,IAAIhC,CAAC,CAACqB,UAAF,CAAaD,QAAb,CAAJ,EAA4B;MAC1ByB,QAAQ,CAACV,OAAT,CAAiBkB,OAAjB,CAAyBjC,QAAzB;IACD;;IAED,OAAOyB,QAAQ,CAACV,OAAhB;EACD,CAlBD;EAoBA;;EACA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EACE;;;EACAvB,iBAAiB,CAACE,GAAlB,GAAwB,SAASA,GAAT,CAAaD,GAAb,EAAkB;IACxC,OAAO,IAAIJ,YAAJ,CAAiB,KAAKM,QAAtB,EAAgC,KAAKC,SAAL,CAAeL,YAA/C,EAA6DE,GAA7D,CAAP;EACD,CAFD;EAIA;;EACA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;;EACE;;;EACAD,iBAAiB,CAACwD,MAAlB,GAA2B,SAASA,MAAT,GAAkB;IAC3C,OAAO,KAAKpD,SAAZ;EACD,CAFD;;EAIAJ,iBAAiB,CAACX,IAAI,CAACoE,OAAL,CAAaC,MAAd,CAAjB,GAAyC,SAASD,OAAT,CAAiBE,KAAjB,EAAwBC,OAAxB,EAAiC;IACxE,OAAOvE,IAAI,CAACoE,OAAL,CAAa,KAAKD,MAAL,EAAb,EAA4BI,OAA5B,CAAP;EACD,CAFD;;EAIA,OAAO5D,iBAAP;AACD,CAlWD;AAqWA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;;;AACAL,SAAS,GAAG,SAASA,SAAT,CAAmBG,OAAnB,EAA4B+D,QAA5B,EAAsCC,QAAtC,EAAgD;EAC1D;EACA,KAAK1D,SAAL,GAAiB0D,QAAjB;EAEAxE,IAAI,CAACyE,SAAL,CAAeC,WAAf,CAA2BC,IAA3B,CAAgC,IAAhC,EAAsCnE,OAAtC,EAA+C+D,QAA/C,EAAyD,KAAKzD,SAA9D;AACD,CALD;;AAOAhB,CAAC,CAAC8E,MAAF,CAASvE,SAAS,CAACoE,SAAnB,EAA8BzE,IAAI,CAACyE,SAAnC;;AACApE,SAAS,CAACoE,SAAV,CAAoBC,WAApB,GAAkCrE,SAAlC;AAEA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;;AACAA,SAAS,CAACoE,SAAV,CAAoBI,WAApB,GAAkC,SAASA,WAAT,CAAqBjB,OAArB,EAA8B;EAC9D,OAAO,IAAItD,aAAJ,CAAkB,KAAKO,QAAvB,EAAiC+C,OAAjC,EAA0C,KAAK9C,SAAL,CAAeL,YAAzD,CAAP;AACD,CAFD;AAIA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;;;AACAJ,SAAS,CAACoE,SAAV,CAAoBP,MAApB,GAA6B,SAASA,MAAT,GAAkB;EAC7C,IAAIY,KAAK,GAAG,EAAZ;;EACAhF,CAAC,CAACiF,MAAF,CAAS,IAAT,EAAe,UAASC,KAAT,EAAgBC,GAAhB,EAAqB;IAClC,IAAI,CAACnF,CAAC,CAACoF,UAAF,CAAaD,GAAb,EAAkB,GAAlB,CAAD,IAA2B,CAAEnF,CAAC,CAACqB,UAAF,CAAa6D,KAAb,CAAjC,EAAsD;MACpDF,KAAK,CAACG,GAAD,CAAL,GAAaD,KAAb;IACD;EACF,CAJD;;EAKA,OAAOF,KAAP;AACD,CARD;;AAUAzE,SAAS,CAACoE,SAAV,CAAoB1E,IAAI,CAACoE,OAAL,CAAaC,MAAjC,IAA2C,SAASD,OAAT,CAAiBE,KAAjB,EAAwBC,OAAxB,EAAiC;EAC1E,OAAOvE,IAAI,CAACoE,OAAL,CAAa,KAAKD,MAAL,EAAb,EAA4BI,OAA5B,CAAP;AACD,CAFD;AAKA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;;;AACAhE,aAAa,GAAG,SAASA,aAAT,CAAuBE,OAAvB,EAAgCoD,OAAhC,EAAyCnD,YAAzC,EAAuDE,GAAvD,EAA4D;EAC1E,KAAKE,QAAL,GAAgBL,OAAhB,CAD0E,CAG1E;;EACA,KAAK2E,UAAL,GAAkBvB,OAAO,CAACwB,WAA1B,CAJ0E,CAInC;;EACvC,KAAKC,QAAL,GAAgBzB,OAAO,CAAC0B,SAAxB,CAL0E,CAKvC;;EACnC,KAAKC,SAAL,GAAiB3B,OAAO,CAAC4B,UAAzB,CAN0E,CAMrC;;EACrC,KAAKC,QAAL,GAAgB7B,OAAO,CAAC8B,SAAxB,CAP0E,CAOvC;;EACnC,KAAKC,WAAL,GAAmB/B,OAAO,CAAC+B,WAA3B,CAR0E,CAQlC;;EACxC,KAAKC,SAAL,GAAiBhC,OAAO,CAACiC,UAAzB,CAT0E,CASrC;;EACrC,KAAKC,SAAL,GAAiB7F,WAAW,CAACqD,eAAZ,CAA4BM,OAAO,CAACmC,UAApC,CAAjB,CAV0E,CAUR;;EAClE,KAAKC,WAAL,GAAmB/F,WAAW,CAACgG,OAAZ,CAAoBrC,OAAO,CAACsC,aAA5B,CAAnB,CAX0E,CAWX;;EAC/D,KAAKC,SAAL,GAAiBvC,OAAO,CAACwC,UAAzB,CAZ0E,CAYrC;;EACrC,KAAKC,WAAL,GAAmBzC,OAAO,CAAC0C,YAA3B,CAb0E,CAajC;;EACzC,KAAKC,YAAL,GAAoB3C,OAAO,CAAC4C,aAA5B,CAd0E,CAc/B;;EAC3C,KAAKC,WAAL,GAAmB7C,OAAO,CAAC8C,YAA3B,CAf0E,CAejC;;EACzC,KAAK/F,GAAL,GAAWiD,OAAO,CAACjD,GAAnB,CAhB0E,CAgBlD;;EACxB,KAAKgG,MAAL,GAAc/C,OAAO,CAAC+C,MAAtB,CAjB0E,CAiB5C;;EAC9B,KAAKC,eAAL,GAAuBhD,OAAO,CAACiD,iBAA/B,CAlB0E,CAkBxB;;EAClD,KAAKC,GAAL,GAAWlD,OAAO,CAACkD,GAAnB,CAnB0E,CAmBlD;;EACxB,KAAKrG,YAAL,GAAoBmD,OAAO,CAACmD,aAA5B,CApB0E,CAoB/B;EAE3C;;EACA,KAAKC,QAAL,GAAgBC,SAAhB;EACA,KAAKnG,SAAL,GAAiB;IAACL,YAAY,EAAEA,YAAf;IAA6BE,GAAG,EAAEA,GAAG,IAAI,KAAKA;EAA9C,CAAjB;AACD,CAzBD;;AA2BAuG,MAAM,CAACC,cAAP,CAAsB7G,aAAa,CAACmE,SAApC,EACE,QADF,EACY;EACR7D,GAAG,EAAE,YAAW;IACd,IAAI,CAAC,KAAKoG,QAAV,EAAoB;MAClB,KAAKA,QAAL,GAAgB,IAAIzG,YAAJ,CAAiB,KAAKM,QAAtB,EAAgC,KAAKC,SAAL,CAAeL,YAA/C,EAA6D,KAAKK,SAAL,CAAeH,GAA5E,CAAhB;IACD;;IAED,OAAO,KAAKqG,QAAZ;EACD;AAPO,CADZ;AAWA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;;AACA1G,aAAa,CAACmE,SAAd,CAAwB2C,KAAxB,GAAgC,SAASA,KAAT,CAAelG,QAAf,EAAyB;EACvD,OAAO,KAAKmG,MAAL,CAAYD,KAAZ,CAAkBlG,QAAlB,CAAP;AACD,CAFD;AAIA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;;;AACAZ,aAAa,CAACmE,SAAd,CAAwBP,MAAxB,GAAiC,SAASA,MAAT,GAAkB;EACjD,IAAIY,KAAK,GAAG,EAAZ;;EACAhF,CAAC,CAACiF,MAAF,CAAS,IAAT,EAAe,UAASC,KAAT,EAAgBC,GAAhB,EAAqB;IAClC,IAAI,CAACnF,CAAC,CAACoF,UAAF,CAAaD,GAAb,EAAkB,GAAlB,CAAD,IAA2B,CAAEnF,CAAC,CAACqB,UAAF,CAAa6D,KAAb,CAAjC,EAAsD;MACpDF,KAAK,CAACG,GAAD,CAAL,GAAaD,KAAb;IACD;EACF,CAJD;;EAKA,OAAOF,KAAP;AACD,CARD;;AAUAxE,aAAa,CAACmE,SAAd,CAAwB1E,IAAI,CAACoE,OAAL,CAAaC,MAArC,IAA+C,SAASD,OAAT,CAAiBE,KAAjB,EAAwBC,OAAxB,EAC3C;EACF,OAAOvE,IAAI,CAACoE,OAAL,CAAa,KAAKD,MAAL,EAAb,EAA4BI,OAA5B,CAAP;AACD,CAHD;AAMA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;;;AACA/D,YAAY,GAAG,SAASA,YAAT,CAAsBC,OAAtB,EAA+BC,YAA/B,EAA6CE,GAA7C,EAAkD;EAC/D,KAAKE,QAAL,GAAgBL,OAAhB,CAD+D,CAG/D;;EACA,KAAKM,SAAL,GAAiB;IAACL,YAAY,EAAEA,YAAf;IAA6BE,GAAG,EAAEA;EAAlC,CAAjB;EACA,KAAKI,IAAL,GAAa,eAAcN,YAAa,WAAUE,GAAI,EAAtD;AACD,CAND;AAQA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;;;AACAJ,YAAY,CAACkE,SAAb,CAAuB2C,KAAvB,GAA+B,SAASA,KAAT,CAAelG,QAAf,EAAyB;EACtD,IAAIyB,QAAQ,GAAG/C,CAAC,CAACgD,KAAF,EAAf;;EACA,IAAIX,OAAO,GAAG,KAAKpB,QAAL,CAAcuG,KAAd,CAAoB;IAAC3D,GAAG,EAAE,KAAK1C,IAAX;IAAiB2C,MAAM,EAAE;EAAzB,CAApB,CAAd;;EAEAzB,OAAO,GAAGA,OAAO,CAACC,IAAR,CAAa,UAAS0B,OAAT,EAAkB;IACvCjB,QAAQ,CAACM,OAAT,CAAiB,IAAI3C,aAAJ,CACf,KAAKO,QADU,EAEf+C,OAFe,EAGf,KAAK9C,SAAL,CAAeL,YAHA,EAIf,KAAKK,SAAL,CAAeH,GAJA,CAAjB;EAMD,CAPsB,CAOrB2B,IAPqB,CAOhB,IAPgB,CAAb,CAAV;EASAL,OAAO,CAACO,KAAR,CAAc,UAASV,KAAT,EAAgB;IAC5Ba,QAAQ,CAACO,MAAT,CAAgBpB,KAAhB;EACD,CAFD;;EAIA,IAAIhC,CAAC,CAACqB,UAAF,CAAaD,QAAb,CAAJ,EAA4B;IAC1ByB,QAAQ,CAACV,OAAT,CAAiBkB,OAAjB,CAAyBjC,QAAzB;EACD;;EAED,OAAOyB,QAAQ,CAACV,OAAhB;AACD,CAtBD;AAwBA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;;;AACA1B,YAAY,CAACkE,SAAb,CAAuBP,MAAvB,GAAgC,SAASA,MAAT,GAAkB;EAChD,OAAO,KAAKpD,SAAZ;AACD,CAFD;;AAIAP,YAAY,CAACkE,SAAb,CAAuB1E,IAAI,CAACoE,OAAL,CAAaC,MAApC,IAA8C,SAASD,OAAT,CAAiBE,KAAjB,EAAwBC,OAAxB,EAAiC;EAC7E,OAAOvE,IAAI,CAACoE,OAAL,CAAa,KAAKD,MAAL,EAAb,EAA4BI,OAA5B,CAAP;AACD,CAFD;;AAIAgD,MAAM,CAACC,OAAP,GAAiB;EACfnH,SAAS,EAAEA,SADI;EAEfC,SAAS,EAAEA,SAFI;EAGfC,aAAa,EAAEA,aAHA;EAIfC,YAAY,EAAEA;AAJC,CAAjB"},"metadata":{},"sourceType":"script"}