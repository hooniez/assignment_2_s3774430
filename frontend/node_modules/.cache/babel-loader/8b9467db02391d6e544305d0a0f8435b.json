{"ast":null,"code":"'use strict';\n/* jshint ignore:start */\n\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n\n/* jshint ignore:end */\n\nvar Q = require('q');\n/* jshint ignore:line */\n\n\nvar _ = require('lodash');\n/* jshint ignore:line */\n\n\nvar util = require('util');\n/* jshint ignore:line */\n\n\nvar MemberList = require('./queue/member').MemberList;\n\nvar Page = require('../../../../base/Page');\n/* jshint ignore:line */\n\n\nvar deserialize = require('../../../../base/deserialize');\n/* jshint ignore:line */\n\n\nvar values = require('../../../../base/values');\n/* jshint ignore:line */\n\n\nvar QueueList;\nvar QueuePage;\nvar QueueInstance;\nvar QueueContext;\n/* jshint ignore:start */\n\n/**\n * Initialize the QueueList\n *\n * @constructor Twilio.Api.V2010.AccountContext.QueueList\n *\n * @param {Twilio.Api.V2010} version - Version of the resource\n * @param {string} accountSid - The SID of the Account that created this resource\n */\n\n/* jshint ignore:end */\n\nQueueList = function QueueList(version, accountSid) {\n  /* jshint ignore:start */\n\n  /**\n   * @function queues\n   * @memberof Twilio.Api.V2010.AccountContext#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Api.V2010.AccountContext.QueueContext}\n   */\n\n  /* jshint ignore:end */\n  function QueueListInstance(sid) {\n    return QueueListInstance.get(sid);\n  }\n\n  QueueListInstance._version = version; // Path Solution\n\n  QueueListInstance._solution = {\n    accountSid: accountSid\n  };\n  QueueListInstance._uri = `/Accounts/${accountSid}/Queues.json`;\n  /* jshint ignore:start */\n\n  /**\n   * Streams QueueInstance records from the API.\n   *\n   * This operation lazily loads records as efficiently as possible until the limit\n   * is reached.\n   *\n   * The results are passed into the callback function, so this operation is memory\n   * efficient.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function each\n   * @memberof Twilio.Api.V2010.AccountContext.QueueList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         each() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no pageSize is defined but a limit is defined,\n   *         each() will attempt to read the limit with the most efficient\n   *         page size, i.e. min(limit, 1000)\n   * @param {Function} [opts.callback] -\n   *         Function to process each record. If this and a positional\n   *         callback are passed, this one will be used\n   * @param {Function} [opts.done] -\n   *          Function to be called upon completion of streaming\n   * @param {Function} [callback] - Function to process each record\n   */\n\n  /* jshint ignore:end */\n\n  QueueListInstance.each = function each(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n\n    if (opts.callback) {\n      callback = opts.callback;\n    }\n\n    if (_.isUndefined(callback)) {\n      throw new Error('Callback function must be provided');\n    }\n\n    var done = false;\n    var currentPage = 1;\n    var currentResource = 0;\n\n    var limits = this._version.readLimits({\n      limit: opts.limit,\n      pageSize: opts.pageSize\n    });\n\n    function onComplete(error) {\n      done = true;\n\n      if (_.isFunction(opts.done)) {\n        opts.done(error);\n      }\n    }\n\n    function fetchNextPage(fn) {\n      var promise = fn();\n\n      if (_.isUndefined(promise)) {\n        onComplete();\n        return;\n      }\n\n      promise.then(function (page) {\n        _.each(page.instances, function (instance) {\n          if (done || !_.isUndefined(opts.limit) && currentResource >= opts.limit) {\n            done = true;\n            return false;\n          }\n\n          currentResource++;\n          callback(instance, onComplete);\n        });\n\n        if (!done) {\n          currentPage++;\n          fetchNextPage(_.bind(page.nextPage, page));\n        } else {\n          onComplete();\n        }\n      });\n      promise.catch(onComplete);\n    }\n\n    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Lists QueueInstance records from the API as a list.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function list\n   * @memberof Twilio.Api.V2010.AccountContext.QueueList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         list() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no page_size is defined but a limit is defined,\n   *         list() will attempt to read the limit with the most\n   *         efficient page size, i.e. min(limit, 1000)\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  QueueListInstance.list = function list(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n    var deferred = Q.defer();\n    var allResources = [];\n\n    opts.callback = function (resource, done) {\n      allResources.push(resource);\n\n      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {\n        done();\n      }\n    };\n\n    opts.done = function (error) {\n      if (_.isUndefined(error)) {\n        deferred.resolve(allResources);\n      } else {\n        deferred.reject(error);\n      }\n    };\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    this.each(opts);\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Retrieve a single page of QueueInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function page\n   * @memberof Twilio.Api.V2010.AccountContext.QueueList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.pageToken] - PageToken provided by the API\n   * @param {number} [opts.pageNumber] -\n   *          Page Number, this value is simply for client state\n   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  QueueListInstance.page = function page(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n    var deferred = Q.defer();\n    var data = values.of({\n      'PageToken': opts.pageToken,\n      'Page': opts.pageNumber,\n      'PageSize': opts.pageSize\n    });\n\n    var promise = this._version.page({\n      uri: this._uri,\n      method: 'GET',\n      params: data\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new QueuePage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Retrieve a single target page of QueueInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function getPage\n   * @memberof Twilio.Api.V2010.AccountContext.QueueList#\n   *\n   * @param {string} [targetUrl] - API-generated URL for the requested results page\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  QueueListInstance.getPage = function getPage(targetUrl, callback) {\n    var deferred = Q.defer();\n\n    var promise = this._version._domain.twilio.request({\n      method: 'GET',\n      uri: targetUrl\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new QueuePage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * create a QueueInstance\n   *\n   * @function create\n   * @memberof Twilio.Api.V2010.AccountContext.QueueList#\n   *\n   * @param {object} opts - Options for request\n   * @param {string} opts.friendlyName - A string to describe this resource\n   * @param {number} [opts.maxSize] - The max number of calls allowed in the queue\n   * @param {function} [callback] - Callback to handle processed record\n   *\n   * @returns {Promise} Resolves to processed QueueInstance\n   */\n\n  /* jshint ignore:end */\n\n\n  QueueListInstance.create = function create(opts, callback) {\n    if (_.isUndefined(opts)) {\n      throw new Error('Required parameter \"opts\" missing.');\n    }\n\n    if (_.isUndefined(opts['friendlyName'])) {\n      throw new Error('Required parameter \"opts[\\'friendlyName\\']\" missing.');\n    }\n\n    var deferred = Q.defer();\n    var data = values.of({\n      'FriendlyName': _.get(opts, 'friendlyName'),\n      'MaxSize': _.get(opts, 'maxSize')\n    });\n\n    var promise = this._version.create({\n      uri: this._uri,\n      method: 'POST',\n      data: data\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new QueueInstance(this._version, payload, this._solution.accountSid, this._solution.sid));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Constructs a queue\n   *\n   * @function get\n   * @memberof Twilio.Api.V2010.AccountContext.QueueList#\n   *\n   * @param {string} sid - The unique string that identifies this resource\n   *\n   * @returns {Twilio.Api.V2010.AccountContext.QueueContext}\n   */\n\n  /* jshint ignore:end */\n\n\n  QueueListInstance.get = function get(sid) {\n    return new QueueContext(this._version, this._solution.accountSid, sid);\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Api.V2010.AccountContext.QueueList#\n   *\n   * @returns Object\n   */\n\n  /* jshint ignore:end */\n\n\n  QueueListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n\n  QueueListInstance[util.inspect.custom] = function inspect(depth, options) {\n    return util.inspect(this.toJSON(), options);\n  };\n\n  return QueueListInstance;\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the QueuePage\n *\n * @constructor Twilio.Api.V2010.AccountContext.QueuePage\n *\n * @param {V2010} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {QueueSolution} solution - Path solution\n *\n * @returns QueuePage\n */\n\n/* jshint ignore:end */\n\n\nQueuePage = function QueuePage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n\n_.extend(QueuePage.prototype, Page.prototype);\n\nQueuePage.prototype.constructor = QueuePage;\n/* jshint ignore:start */\n\n/**\n * Build an instance of QueueInstance\n *\n * @function getInstance\n * @memberof Twilio.Api.V2010.AccountContext.QueuePage#\n *\n * @param {QueuePayload} payload - Payload response from the API\n *\n * @returns QueueInstance\n */\n\n/* jshint ignore:end */\n\nQueuePage.prototype.getInstance = function getInstance(payload) {\n  return new QueueInstance(this._version, payload, this._solution.accountSid);\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Api.V2010.AccountContext.QueuePage#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nQueuePage.prototype.toJSON = function toJSON() {\n  let clone = {};\n\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n\n  return clone;\n};\n\nQueuePage.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the QueueContext\n *\n * @constructor Twilio.Api.V2010.AccountContext.QueueInstance\n *\n * @property {Date} dateUpdated -\n *          The RFC 2822 date and time in GMT that this resource was last updated\n * @property {number} currentSize - The number of calls currently in the queue.\n * @property {string} friendlyName -\n *          A string that you assigned to describe this resource\n * @property {string} uri -\n *          The URI of this resource, relative to `https://api.twilio.com`\n * @property {string} accountSid -\n *          The SID of the Account that created this resource\n * @property {number} averageWaitTime - Average wait time of members in the queue\n * @property {string} sid - The unique string that identifies this resource\n * @property {Date} dateCreated -\n *          The RFC 2822 date and time in GMT that this resource was created\n * @property {number} maxSize - The max number of calls allowed in the queue\n *\n * @param {V2010} version - Version of the resource\n * @param {QueuePayload} payload - The instance payload\n * @param {sid} accountSid - The SID of the Account that created this resource\n * @param {sid} sid - The unique string that identifies this resource\n */\n\n/* jshint ignore:end */\n\n\nQueueInstance = function QueueInstance(version, payload, accountSid, sid) {\n  this._version = version; // Marshaled Properties\n\n  this.dateUpdated = deserialize.rfc2822DateTime(payload.date_updated); // jshint ignore:line\n\n  this.currentSize = deserialize.integer(payload.current_size); // jshint ignore:line\n\n  this.friendlyName = payload.friendly_name; // jshint ignore:line\n\n  this.uri = payload.uri; // jshint ignore:line\n\n  this.accountSid = payload.account_sid; // jshint ignore:line\n\n  this.averageWaitTime = deserialize.integer(payload.average_wait_time); // jshint ignore:line\n\n  this.sid = payload.sid; // jshint ignore:line\n\n  this.dateCreated = deserialize.rfc2822DateTime(payload.date_created); // jshint ignore:line\n\n  this.maxSize = deserialize.integer(payload.max_size); // jshint ignore:line\n  // Context\n\n  this._context = undefined;\n  this._solution = {\n    accountSid: accountSid,\n    sid: sid || this.sid\n  };\n};\n\nObject.defineProperty(QueueInstance.prototype, '_proxy', {\n  get: function () {\n    if (!this._context) {\n      this._context = new QueueContext(this._version, this._solution.accountSid, this._solution.sid);\n    }\n\n    return this._context;\n  }\n});\n/* jshint ignore:start */\n\n/**\n * fetch a QueueInstance\n *\n * @function fetch\n * @memberof Twilio.Api.V2010.AccountContext.QueueInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed QueueInstance\n */\n\n/* jshint ignore:end */\n\nQueueInstance.prototype.fetch = function fetch(callback) {\n  return this._proxy.fetch(callback);\n};\n/* jshint ignore:start */\n\n/**\n * update a QueueInstance\n *\n * @function update\n * @memberof Twilio.Api.V2010.AccountContext.QueueInstance#\n *\n * @param {object} [opts] - Options for request\n * @param {string} [opts.friendlyName] - A string to describe this resource\n * @param {number} [opts.maxSize] - The max number of calls allowed in the queue\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed QueueInstance\n */\n\n/* jshint ignore:end */\n\n\nQueueInstance.prototype.update = function update(opts, callback) {\n  return this._proxy.update(opts, callback);\n};\n/* jshint ignore:start */\n\n/**\n * remove a QueueInstance\n *\n * @function remove\n * @memberof Twilio.Api.V2010.AccountContext.QueueInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed QueueInstance\n */\n\n/* jshint ignore:end */\n\n\nQueueInstance.prototype.remove = function remove(callback) {\n  return this._proxy.remove(callback);\n};\n/* jshint ignore:start */\n\n/**\n * Access the members\n *\n * @function members\n * @memberof Twilio.Api.V2010.AccountContext.QueueInstance#\n *\n * @returns {Twilio.Api.V2010.AccountContext.QueueContext.MemberList}\n */\n\n/* jshint ignore:end */\n\n\nQueueInstance.prototype.members = function members() {\n  return this._proxy.members;\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Api.V2010.AccountContext.QueueInstance#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nQueueInstance.prototype.toJSON = function toJSON() {\n  let clone = {};\n\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n\n  return clone;\n};\n\nQueueInstance.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the QueueContext\n *\n * @constructor Twilio.Api.V2010.AccountContext.QueueContext\n *\n * @property {Twilio.Api.V2010.AccountContext.QueueContext.MemberList} members -\n *          members resource\n *\n * @param {V2010} version - Version of the resource\n * @param {sid} accountSid -\n *          The SID of the Account that created the resource(s) to fetch\n * @param {sid} sid - The unique string that identifies this resource\n */\n\n/* jshint ignore:end */\n\n\nQueueContext = function QueueContext(version, accountSid, sid) {\n  this._version = version; // Path Solution\n\n  this._solution = {\n    accountSid: accountSid,\n    sid: sid\n  };\n  this._uri = `/Accounts/${accountSid}/Queues/${sid}.json`; // Dependents\n\n  this._members = undefined;\n};\n/* jshint ignore:start */\n\n/**\n * fetch a QueueInstance\n *\n * @function fetch\n * @memberof Twilio.Api.V2010.AccountContext.QueueContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed QueueInstance\n */\n\n/* jshint ignore:end */\n\n\nQueueContext.prototype.fetch = function fetch(callback) {\n  var deferred = Q.defer();\n\n  var promise = this._version.fetch({\n    uri: this._uri,\n    method: 'GET'\n  });\n\n  promise = promise.then(function (payload) {\n    deferred.resolve(new QueueInstance(this._version, payload, this._solution.accountSid, this._solution.sid));\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n/* jshint ignore:start */\n\n/**\n * update a QueueInstance\n *\n * @function update\n * @memberof Twilio.Api.V2010.AccountContext.QueueContext#\n *\n * @param {object} [opts] - Options for request\n * @param {string} [opts.friendlyName] - A string to describe this resource\n * @param {number} [opts.maxSize] - The max number of calls allowed in the queue\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed QueueInstance\n */\n\n/* jshint ignore:end */\n\n\nQueueContext.prototype.update = function update(opts, callback) {\n  if (_.isFunction(opts)) {\n    callback = opts;\n    opts = {};\n  }\n\n  opts = opts || {};\n  var deferred = Q.defer();\n  var data = values.of({\n    'FriendlyName': _.get(opts, 'friendlyName'),\n    'MaxSize': _.get(opts, 'maxSize')\n  });\n\n  var promise = this._version.update({\n    uri: this._uri,\n    method: 'POST',\n    data: data\n  });\n\n  promise = promise.then(function (payload) {\n    deferred.resolve(new QueueInstance(this._version, payload, this._solution.accountSid, this._solution.sid));\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n/* jshint ignore:start */\n\n/**\n * remove a QueueInstance\n *\n * @function remove\n * @memberof Twilio.Api.V2010.AccountContext.QueueContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed QueueInstance\n */\n\n/* jshint ignore:end */\n\n\nQueueContext.prototype.remove = function remove(callback) {\n  var deferred = Q.defer();\n\n  var promise = this._version.remove({\n    uri: this._uri,\n    method: 'DELETE'\n  });\n\n  promise = promise.then(function (payload) {\n    deferred.resolve(payload);\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\nObject.defineProperty(QueueContext.prototype, 'members', {\n  get: function () {\n    if (!this._members) {\n      this._members = new MemberList(this._version, this._solution.accountSid, this._solution.sid);\n    }\n\n    return this._members;\n  }\n});\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Api.V2010.AccountContext.QueueContext#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\nQueueContext.prototype.toJSON = function toJSON() {\n  return this._solution;\n};\n\nQueueContext.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\nmodule.exports = {\n  QueueList: QueueList,\n  QueuePage: QueuePage,\n  QueueInstance: QueueInstance,\n  QueueContext: QueueContext\n};","map":{"version":3,"names":["Q","require","_","util","MemberList","Page","deserialize","values","QueueList","QueuePage","QueueInstance","QueueContext","version","accountSid","QueueListInstance","sid","get","_version","_solution","_uri","each","opts","callback","isFunction","isUndefined","Error","done","currentPage","currentResource","limits","readLimits","limit","pageSize","onComplete","error","fetchNextPage","fn","promise","then","page","instances","instance","bind","nextPage","catch","merge","list","deferred","defer","allResources","resource","push","length","resolve","reject","nodeify","data","of","pageToken","pageNumber","uri","method","params","payload","getPage","targetUrl","_domain","twilio","request","create","toJSON","inspect","custom","depth","options","response","solution","prototype","constructor","call","extend","getInstance","clone","forOwn","value","key","startsWith","dateUpdated","rfc2822DateTime","date_updated","currentSize","integer","current_size","friendlyName","friendly_name","account_sid","averageWaitTime","average_wait_time","dateCreated","date_created","maxSize","max_size","_context","undefined","Object","defineProperty","fetch","_proxy","update","remove","members","_members","module","exports"],"sources":["/Users/hooniesun/rmit/fwp/assessment1/lan/node_modules/twilio/lib/rest/api/v2010/account/queue.js"],"sourcesContent":["'use strict';\n\n/* jshint ignore:start */\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n/* jshint ignore:end */\n\nvar Q = require('q');  /* jshint ignore:line */\nvar _ = require('lodash');  /* jshint ignore:line */\nvar util = require('util');  /* jshint ignore:line */\nvar MemberList = require('./queue/member').MemberList;\nvar Page = require('../../../../base/Page');  /* jshint ignore:line */\nvar deserialize = require(\n    '../../../../base/deserialize');  /* jshint ignore:line */\nvar values = require('../../../../base/values');  /* jshint ignore:line */\n\nvar QueueList;\nvar QueuePage;\nvar QueueInstance;\nvar QueueContext;\n\n/* jshint ignore:start */\n/**\n * Initialize the QueueList\n *\n * @constructor Twilio.Api.V2010.AccountContext.QueueList\n *\n * @param {Twilio.Api.V2010} version - Version of the resource\n * @param {string} accountSid - The SID of the Account that created this resource\n */\n/* jshint ignore:end */\nQueueList = function QueueList(version, accountSid) {\n  /* jshint ignore:start */\n  /**\n   * @function queues\n   * @memberof Twilio.Api.V2010.AccountContext#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Api.V2010.AccountContext.QueueContext}\n   */\n  /* jshint ignore:end */\n  function QueueListInstance(sid) {\n    return QueueListInstance.get(sid);\n  }\n\n  QueueListInstance._version = version;\n  // Path Solution\n  QueueListInstance._solution = {accountSid: accountSid};\n  QueueListInstance._uri = `/Accounts/${accountSid}/Queues.json`;\n  /* jshint ignore:start */\n  /**\n   * Streams QueueInstance records from the API.\n   *\n   * This operation lazily loads records as efficiently as possible until the limit\n   * is reached.\n   *\n   * The results are passed into the callback function, so this operation is memory\n   * efficient.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function each\n   * @memberof Twilio.Api.V2010.AccountContext.QueueList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         each() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no pageSize is defined but a limit is defined,\n   *         each() will attempt to read the limit with the most efficient\n   *         page size, i.e. min(limit, 1000)\n   * @param {Function} [opts.callback] -\n   *         Function to process each record. If this and a positional\n   *         callback are passed, this one will be used\n   * @param {Function} [opts.done] -\n   *          Function to be called upon completion of streaming\n   * @param {Function} [callback] - Function to process each record\n   */\n  /* jshint ignore:end */\n  QueueListInstance.each = function each(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    if (opts.callback) {\n      callback = opts.callback;\n    }\n    if (_.isUndefined(callback)) {\n      throw new Error('Callback function must be provided');\n    }\n\n    var done = false;\n    var currentPage = 1;\n    var currentResource = 0;\n    var limits = this._version.readLimits({\n      limit: opts.limit,\n      pageSize: opts.pageSize\n    });\n\n    function onComplete(error) {\n      done = true;\n      if (_.isFunction(opts.done)) {\n        opts.done(error);\n      }\n    }\n\n    function fetchNextPage(fn) {\n      var promise = fn();\n      if (_.isUndefined(promise)) {\n        onComplete();\n        return;\n      }\n\n      promise.then(function(page) {\n        _.each(page.instances, function(instance) {\n          if (done || (!_.isUndefined(opts.limit) && currentResource >= opts.limit)) {\n            done = true;\n            return false;\n          }\n\n          currentResource++;\n          callback(instance, onComplete);\n        });\n\n        if (!done) {\n          currentPage++;\n          fetchNextPage(_.bind(page.nextPage, page));\n        } else {\n          onComplete();\n        }\n      });\n\n      promise.catch(onComplete);\n    }\n\n    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Lists QueueInstance records from the API as a list.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function list\n   * @memberof Twilio.Api.V2010.AccountContext.QueueList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         list() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no page_size is defined but a limit is defined,\n   *         list() will attempt to read the limit with the most\n   *         efficient page size, i.e. min(limit, 1000)\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  QueueListInstance.list = function list(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    var deferred = Q.defer();\n    var allResources = [];\n    opts.callback = function(resource, done) {\n      allResources.push(resource);\n\n      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {\n        done();\n      }\n    };\n\n    opts.done = function(error) {\n      if (_.isUndefined(error)) {\n        deferred.resolve(allResources);\n      } else {\n        deferred.reject(error);\n      }\n    };\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    this.each(opts);\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single page of QueueInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function page\n   * @memberof Twilio.Api.V2010.AccountContext.QueueList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.pageToken] - PageToken provided by the API\n   * @param {number} [opts.pageNumber] -\n   *          Page Number, this value is simply for client state\n   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  QueueListInstance.page = function page(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n\n    var deferred = Q.defer();\n    var data = values.of({\n      'PageToken': opts.pageToken,\n      'Page': opts.pageNumber,\n      'PageSize': opts.pageSize\n    });\n\n    var promise = this._version.page({uri: this._uri, method: 'GET', params: data});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new QueuePage(this._version, payload, this._solution));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single target page of QueueInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function getPage\n   * @memberof Twilio.Api.V2010.AccountContext.QueueList#\n   *\n   * @param {string} [targetUrl] - API-generated URL for the requested results page\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  QueueListInstance.getPage = function getPage(targetUrl, callback) {\n    var deferred = Q.defer();\n\n    var promise = this._version._domain.twilio.request({method: 'GET', uri: targetUrl});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new QueuePage(this._version, payload, this._solution));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * create a QueueInstance\n   *\n   * @function create\n   * @memberof Twilio.Api.V2010.AccountContext.QueueList#\n   *\n   * @param {object} opts - Options for request\n   * @param {string} opts.friendlyName - A string to describe this resource\n   * @param {number} [opts.maxSize] - The max number of calls allowed in the queue\n   * @param {function} [callback] - Callback to handle processed record\n   *\n   * @returns {Promise} Resolves to processed QueueInstance\n   */\n  /* jshint ignore:end */\n  QueueListInstance.create = function create(opts, callback) {\n    if (_.isUndefined(opts)) {\n      throw new Error('Required parameter \"opts\" missing.');\n    }\n    if (_.isUndefined(opts['friendlyName'])) {\n      throw new Error('Required parameter \"opts[\\'friendlyName\\']\" missing.');\n    }\n\n    var deferred = Q.defer();\n    var data = values.of({\n      'FriendlyName': _.get(opts, 'friendlyName'),\n      'MaxSize': _.get(opts, 'maxSize')\n    });\n\n    var promise = this._version.create({uri: this._uri, method: 'POST', data: data});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new QueueInstance(\n        this._version,\n        payload,\n        this._solution.accountSid,\n        this._solution.sid\n      ));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Constructs a queue\n   *\n   * @function get\n   * @memberof Twilio.Api.V2010.AccountContext.QueueList#\n   *\n   * @param {string} sid - The unique string that identifies this resource\n   *\n   * @returns {Twilio.Api.V2010.AccountContext.QueueContext}\n   */\n  /* jshint ignore:end */\n  QueueListInstance.get = function get(sid) {\n    return new QueueContext(this._version, this._solution.accountSid, sid);\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Api.V2010.AccountContext.QueueList#\n   *\n   * @returns Object\n   */\n  /* jshint ignore:end */\n  QueueListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n\n  QueueListInstance[util.inspect.custom] = function inspect(depth, options) {\n    return util.inspect(this.toJSON(), options);\n  };\n\n  return QueueListInstance;\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the QueuePage\n *\n * @constructor Twilio.Api.V2010.AccountContext.QueuePage\n *\n * @param {V2010} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {QueueSolution} solution - Path solution\n *\n * @returns QueuePage\n */\n/* jshint ignore:end */\nQueuePage = function QueuePage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n\n_.extend(QueuePage.prototype, Page.prototype);\nQueuePage.prototype.constructor = QueuePage;\n\n/* jshint ignore:start */\n/**\n * Build an instance of QueueInstance\n *\n * @function getInstance\n * @memberof Twilio.Api.V2010.AccountContext.QueuePage#\n *\n * @param {QueuePayload} payload - Payload response from the API\n *\n * @returns QueueInstance\n */\n/* jshint ignore:end */\nQueuePage.prototype.getInstance = function getInstance(payload) {\n  return new QueueInstance(this._version, payload, this._solution.accountSid);\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Api.V2010.AccountContext.QueuePage#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nQueuePage.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function(value, key) {\n    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\n\nQueuePage.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the QueueContext\n *\n * @constructor Twilio.Api.V2010.AccountContext.QueueInstance\n *\n * @property {Date} dateUpdated -\n *          The RFC 2822 date and time in GMT that this resource was last updated\n * @property {number} currentSize - The number of calls currently in the queue.\n * @property {string} friendlyName -\n *          A string that you assigned to describe this resource\n * @property {string} uri -\n *          The URI of this resource, relative to `https://api.twilio.com`\n * @property {string} accountSid -\n *          The SID of the Account that created this resource\n * @property {number} averageWaitTime - Average wait time of members in the queue\n * @property {string} sid - The unique string that identifies this resource\n * @property {Date} dateCreated -\n *          The RFC 2822 date and time in GMT that this resource was created\n * @property {number} maxSize - The max number of calls allowed in the queue\n *\n * @param {V2010} version - Version of the resource\n * @param {QueuePayload} payload - The instance payload\n * @param {sid} accountSid - The SID of the Account that created this resource\n * @param {sid} sid - The unique string that identifies this resource\n */\n/* jshint ignore:end */\nQueueInstance = function QueueInstance(version, payload, accountSid, sid) {\n  this._version = version;\n\n  // Marshaled Properties\n  this.dateUpdated = deserialize.rfc2822DateTime(payload.date_updated); // jshint ignore:line\n  this.currentSize = deserialize.integer(payload.current_size); // jshint ignore:line\n  this.friendlyName = payload.friendly_name; // jshint ignore:line\n  this.uri = payload.uri; // jshint ignore:line\n  this.accountSid = payload.account_sid; // jshint ignore:line\n  this.averageWaitTime = deserialize.integer(payload.average_wait_time); // jshint ignore:line\n  this.sid = payload.sid; // jshint ignore:line\n  this.dateCreated = deserialize.rfc2822DateTime(payload.date_created); // jshint ignore:line\n  this.maxSize = deserialize.integer(payload.max_size); // jshint ignore:line\n\n  // Context\n  this._context = undefined;\n  this._solution = {accountSid: accountSid, sid: sid || this.sid, };\n};\n\nObject.defineProperty(QueueInstance.prototype,\n  '_proxy', {\n    get: function() {\n      if (!this._context) {\n        this._context = new QueueContext(this._version, this._solution.accountSid, this._solution.sid);\n      }\n\n      return this._context;\n    }\n});\n\n/* jshint ignore:start */\n/**\n * fetch a QueueInstance\n *\n * @function fetch\n * @memberof Twilio.Api.V2010.AccountContext.QueueInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed QueueInstance\n */\n/* jshint ignore:end */\nQueueInstance.prototype.fetch = function fetch(callback) {\n  return this._proxy.fetch(callback);\n};\n\n/* jshint ignore:start */\n/**\n * update a QueueInstance\n *\n * @function update\n * @memberof Twilio.Api.V2010.AccountContext.QueueInstance#\n *\n * @param {object} [opts] - Options for request\n * @param {string} [opts.friendlyName] - A string to describe this resource\n * @param {number} [opts.maxSize] - The max number of calls allowed in the queue\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed QueueInstance\n */\n/* jshint ignore:end */\nQueueInstance.prototype.update = function update(opts, callback) {\n  return this._proxy.update(opts, callback);\n};\n\n/* jshint ignore:start */\n/**\n * remove a QueueInstance\n *\n * @function remove\n * @memberof Twilio.Api.V2010.AccountContext.QueueInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed QueueInstance\n */\n/* jshint ignore:end */\nQueueInstance.prototype.remove = function remove(callback) {\n  return this._proxy.remove(callback);\n};\n\n/* jshint ignore:start */\n/**\n * Access the members\n *\n * @function members\n * @memberof Twilio.Api.V2010.AccountContext.QueueInstance#\n *\n * @returns {Twilio.Api.V2010.AccountContext.QueueContext.MemberList}\n */\n/* jshint ignore:end */\nQueueInstance.prototype.members = function members() {\n  return this._proxy.members;\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Api.V2010.AccountContext.QueueInstance#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nQueueInstance.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function(value, key) {\n    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\n\nQueueInstance.prototype[util.inspect.custom] = function inspect(depth, options)\n    {\n  return util.inspect(this.toJSON(), options);\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the QueueContext\n *\n * @constructor Twilio.Api.V2010.AccountContext.QueueContext\n *\n * @property {Twilio.Api.V2010.AccountContext.QueueContext.MemberList} members -\n *          members resource\n *\n * @param {V2010} version - Version of the resource\n * @param {sid} accountSid -\n *          The SID of the Account that created the resource(s) to fetch\n * @param {sid} sid - The unique string that identifies this resource\n */\n/* jshint ignore:end */\nQueueContext = function QueueContext(version, accountSid, sid) {\n  this._version = version;\n\n  // Path Solution\n  this._solution = {accountSid: accountSid, sid: sid, };\n  this._uri = `/Accounts/${accountSid}/Queues/${sid}.json`;\n\n  // Dependents\n  this._members = undefined;\n};\n\n/* jshint ignore:start */\n/**\n * fetch a QueueInstance\n *\n * @function fetch\n * @memberof Twilio.Api.V2010.AccountContext.QueueContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed QueueInstance\n */\n/* jshint ignore:end */\nQueueContext.prototype.fetch = function fetch(callback) {\n  var deferred = Q.defer();\n  var promise = this._version.fetch({uri: this._uri, method: 'GET'});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(new QueueInstance(\n      this._version,\n      payload,\n      this._solution.accountSid,\n      this._solution.sid\n    ));\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * update a QueueInstance\n *\n * @function update\n * @memberof Twilio.Api.V2010.AccountContext.QueueContext#\n *\n * @param {object} [opts] - Options for request\n * @param {string} [opts.friendlyName] - A string to describe this resource\n * @param {number} [opts.maxSize] - The max number of calls allowed in the queue\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed QueueInstance\n */\n/* jshint ignore:end */\nQueueContext.prototype.update = function update(opts, callback) {\n  if (_.isFunction(opts)) {\n    callback = opts;\n    opts = {};\n  }\n  opts = opts || {};\n\n  var deferred = Q.defer();\n  var data = values.of({\n    'FriendlyName': _.get(opts, 'friendlyName'),\n    'MaxSize': _.get(opts, 'maxSize')\n  });\n\n  var promise = this._version.update({uri: this._uri, method: 'POST', data: data});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(new QueueInstance(\n      this._version,\n      payload,\n      this._solution.accountSid,\n      this._solution.sid\n    ));\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * remove a QueueInstance\n *\n * @function remove\n * @memberof Twilio.Api.V2010.AccountContext.QueueContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed QueueInstance\n */\n/* jshint ignore:end */\nQueueContext.prototype.remove = function remove(callback) {\n  var deferred = Q.defer();\n  var promise = this._version.remove({uri: this._uri, method: 'DELETE'});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(payload);\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\nObject.defineProperty(QueueContext.prototype,\n  'members', {\n    get: function() {\n      if (!this._members) {\n        this._members = new MemberList(this._version, this._solution.accountSid, this._solution.sid);\n      }\n      return this._members;\n    }\n});\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Api.V2010.AccountContext.QueueContext#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nQueueContext.prototype.toJSON = function toJSON() {\n  return this._solution;\n};\n\nQueueContext.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\nmodule.exports = {\n  QueueList: QueueList,\n  QueuePage: QueuePage,\n  QueueInstance: QueueInstance,\n  QueueContext: QueueContext\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}