{"ast":null,"code":"'use strict';\n/* jshint ignore:start */\n\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n\n/* jshint ignore:end */\n\nvar Q = require('q');\n/* jshint ignore:line */\n\n\nvar _ = require('lodash');\n/* jshint ignore:line */\n\n\nvar util = require('util');\n/* jshint ignore:line */\n\n\nvar AuthTypesList = require('./domain/authTypes').AuthTypesList;\n\nvar CredentialListMappingList = require('./domain/credentialListMapping').CredentialListMappingList;\n\nvar IpAccessControlListMappingList = require('./domain/ipAccessControlListMapping').IpAccessControlListMappingList;\n\nvar Page = require('../../../../../base/Page');\n/* jshint ignore:line */\n\n\nvar deserialize = require('../../../../../base/deserialize');\n/* jshint ignore:line */\n\n\nvar serialize = require('../../../../../base/serialize');\n/* jshint ignore:line */\n\n\nvar values = require('../../../../../base/values');\n/* jshint ignore:line */\n\n\nvar DomainList;\nvar DomainPage;\nvar DomainInstance;\nvar DomainContext;\n/* jshint ignore:start */\n\n/**\n * Initialize the DomainList\n *\n * @constructor Twilio.Api.V2010.AccountContext.SipContext.DomainList\n *\n * @param {Twilio.Api.V2010} version - Version of the resource\n * @param {string} accountSid -\n *          A 34 character string that uniquely identifies this resource.\n */\n\n/* jshint ignore:end */\n\nDomainList = function DomainList(version, accountSid) {\n  /* jshint ignore:start */\n\n  /**\n   * @function domains\n   * @memberof Twilio.Api.V2010.AccountContext.SipContext#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Api.V2010.AccountContext.SipContext.DomainContext}\n   */\n\n  /* jshint ignore:end */\n  function DomainListInstance(sid) {\n    return DomainListInstance.get(sid);\n  }\n\n  DomainListInstance._version = version; // Path Solution\n\n  DomainListInstance._solution = {\n    accountSid: accountSid\n  };\n  DomainListInstance._uri = `/Accounts/${accountSid}/SIP/Domains.json`;\n  /* jshint ignore:start */\n\n  /**\n   * Streams DomainInstance records from the API.\n   *\n   * This operation lazily loads records as efficiently as possible until the limit\n   * is reached.\n   *\n   * The results are passed into the callback function, so this operation is memory\n   * efficient.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function each\n   * @memberof Twilio.Api.V2010.AccountContext.SipContext.DomainList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         each() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no pageSize is defined but a limit is defined,\n   *         each() will attempt to read the limit with the most efficient\n   *         page size, i.e. min(limit, 1000)\n   * @param {Function} [opts.callback] -\n   *         Function to process each record. If this and a positional\n   *         callback are passed, this one will be used\n   * @param {Function} [opts.done] -\n   *          Function to be called upon completion of streaming\n   * @param {Function} [callback] - Function to process each record\n   */\n\n  /* jshint ignore:end */\n\n  DomainListInstance.each = function each(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n\n    if (opts.callback) {\n      callback = opts.callback;\n    }\n\n    if (_.isUndefined(callback)) {\n      throw new Error('Callback function must be provided');\n    }\n\n    var done = false;\n    var currentPage = 1;\n    var currentResource = 0;\n\n    var limits = this._version.readLimits({\n      limit: opts.limit,\n      pageSize: opts.pageSize\n    });\n\n    function onComplete(error) {\n      done = true;\n\n      if (_.isFunction(opts.done)) {\n        opts.done(error);\n      }\n    }\n\n    function fetchNextPage(fn) {\n      var promise = fn();\n\n      if (_.isUndefined(promise)) {\n        onComplete();\n        return;\n      }\n\n      promise.then(function (page) {\n        _.each(page.instances, function (instance) {\n          if (done || !_.isUndefined(opts.limit) && currentResource >= opts.limit) {\n            done = true;\n            return false;\n          }\n\n          currentResource++;\n          callback(instance, onComplete);\n        });\n\n        if (!done) {\n          currentPage++;\n          fetchNextPage(_.bind(page.nextPage, page));\n        } else {\n          onComplete();\n        }\n      });\n      promise.catch(onComplete);\n    }\n\n    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Lists DomainInstance records from the API as a list.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function list\n   * @memberof Twilio.Api.V2010.AccountContext.SipContext.DomainList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         list() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no page_size is defined but a limit is defined,\n   *         list() will attempt to read the limit with the most\n   *         efficient page size, i.e. min(limit, 1000)\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  DomainListInstance.list = function list(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n    var deferred = Q.defer();\n    var allResources = [];\n\n    opts.callback = function (resource, done) {\n      allResources.push(resource);\n\n      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {\n        done();\n      }\n    };\n\n    opts.done = function (error) {\n      if (_.isUndefined(error)) {\n        deferred.resolve(allResources);\n      } else {\n        deferred.reject(error);\n      }\n    };\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    this.each(opts);\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Retrieve a single page of DomainInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function page\n   * @memberof Twilio.Api.V2010.AccountContext.SipContext.DomainList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.pageToken] - PageToken provided by the API\n   * @param {number} [opts.pageNumber] -\n   *          Page Number, this value is simply for client state\n   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  DomainListInstance.page = function page(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n    var deferred = Q.defer();\n    var data = values.of({\n      'PageToken': opts.pageToken,\n      'Page': opts.pageNumber,\n      'PageSize': opts.pageSize\n    });\n\n    var promise = this._version.page({\n      uri: this._uri,\n      method: 'GET',\n      params: data\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new DomainPage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Retrieve a single target page of DomainInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function getPage\n   * @memberof Twilio.Api.V2010.AccountContext.SipContext.DomainList#\n   *\n   * @param {string} [targetUrl] - API-generated URL for the requested results page\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  DomainListInstance.getPage = function getPage(targetUrl, callback) {\n    var deferred = Q.defer();\n\n    var promise = this._version._domain.twilio.request({\n      method: 'GET',\n      uri: targetUrl\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new DomainPage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * create a DomainInstance\n   *\n   * @function create\n   * @memberof Twilio.Api.V2010.AccountContext.SipContext.DomainList#\n   *\n   * @param {object} opts - Options for request\n   * @param {string} opts.domainName -\n   *          The unique address on Twilio to route SIP traffic\n   * @param {string} [opts.friendlyName] - A string to describe the resource\n   * @param {string} [opts.voiceUrl] - The URL we should call when receiving a call\n   * @param {string} [opts.voiceMethod] - The HTTP method to use with voice_url\n   * @param {string} [opts.voiceFallbackUrl] -\n   *          The URL we should call when an error occurs in executing TwiML\n   * @param {string} [opts.voiceFallbackMethod] -\n   *          The HTTP method to use with voice_fallback_url\n   * @param {string} [opts.voiceStatusCallbackUrl] -\n   *          The URL that we should call to pass status updates\n   * @param {string} [opts.voiceStatusCallbackMethod] -\n   *          The HTTP method we should use to call `voice_status_callback_url`\n   * @param {boolean} [opts.sipRegistration] - Whether SIP registration is allowed\n   * @param {boolean} [opts.emergencyCallingEnabled] -\n   *          Whether emergency calling is enabled for the domain.\n   * @param {boolean} [opts.secure] - Whether secure SIP is enabled for the domain\n   * @param {string} [opts.byocTrunkSid] - The SID of the BYOC Trunk resource.\n   * @param {string} [opts.emergencyCallerSid] -\n   *          Whether an emergency caller sid is configured for the domain.\n   * @param {function} [callback] - Callback to handle processed record\n   *\n   * @returns {Promise} Resolves to processed DomainInstance\n   */\n\n  /* jshint ignore:end */\n\n\n  DomainListInstance.create = function create(opts, callback) {\n    if (_.isUndefined(opts)) {\n      throw new Error('Required parameter \"opts\" missing.');\n    }\n\n    if (_.isUndefined(opts['domainName'])) {\n      throw new Error('Required parameter \"opts[\\'domainName\\']\" missing.');\n    }\n\n    var deferred = Q.defer();\n    var data = values.of({\n      'DomainName': _.get(opts, 'domainName'),\n      'FriendlyName': _.get(opts, 'friendlyName'),\n      'VoiceUrl': _.get(opts, 'voiceUrl'),\n      'VoiceMethod': _.get(opts, 'voiceMethod'),\n      'VoiceFallbackUrl': _.get(opts, 'voiceFallbackUrl'),\n      'VoiceFallbackMethod': _.get(opts, 'voiceFallbackMethod'),\n      'VoiceStatusCallbackUrl': _.get(opts, 'voiceStatusCallbackUrl'),\n      'VoiceStatusCallbackMethod': _.get(opts, 'voiceStatusCallbackMethod'),\n      'SipRegistration': serialize.bool(_.get(opts, 'sipRegistration')),\n      'EmergencyCallingEnabled': serialize.bool(_.get(opts, 'emergencyCallingEnabled')),\n      'Secure': serialize.bool(_.get(opts, 'secure')),\n      'ByocTrunkSid': _.get(opts, 'byocTrunkSid'),\n      'EmergencyCallerSid': _.get(opts, 'emergencyCallerSid')\n    });\n\n    var promise = this._version.create({\n      uri: this._uri,\n      method: 'POST',\n      data: data\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new DomainInstance(this._version, payload, this._solution.accountSid, this._solution.sid));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Constructs a domain\n   *\n   * @function get\n   * @memberof Twilio.Api.V2010.AccountContext.SipContext.DomainList#\n   *\n   * @param {string} sid - The unique string that identifies the resource\n   *\n   * @returns {Twilio.Api.V2010.AccountContext.SipContext.DomainContext}\n   */\n\n  /* jshint ignore:end */\n\n\n  DomainListInstance.get = function get(sid) {\n    return new DomainContext(this._version, this._solution.accountSid, sid);\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Api.V2010.AccountContext.SipContext.DomainList#\n   *\n   * @returns Object\n   */\n\n  /* jshint ignore:end */\n\n\n  DomainListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n\n  DomainListInstance[util.inspect.custom] = function inspect(depth, options) {\n    return util.inspect(this.toJSON(), options);\n  };\n\n  return DomainListInstance;\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the DomainPage\n *\n * @constructor Twilio.Api.V2010.AccountContext.SipContext.DomainPage\n *\n * @param {V2010} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {DomainSolution} solution - Path solution\n *\n * @returns DomainPage\n */\n\n/* jshint ignore:end */\n\n\nDomainPage = function DomainPage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n\n_.extend(DomainPage.prototype, Page.prototype);\n\nDomainPage.prototype.constructor = DomainPage;\n/* jshint ignore:start */\n\n/**\n * Build an instance of DomainInstance\n *\n * @function getInstance\n * @memberof Twilio.Api.V2010.AccountContext.SipContext.DomainPage#\n *\n * @param {DomainPayload} payload - Payload response from the API\n *\n * @returns DomainInstance\n */\n\n/* jshint ignore:end */\n\nDomainPage.prototype.getInstance = function getInstance(payload) {\n  return new DomainInstance(this._version, payload, this._solution.accountSid);\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Api.V2010.AccountContext.SipContext.DomainPage#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nDomainPage.prototype.toJSON = function toJSON() {\n  let clone = {};\n\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n\n  return clone;\n};\n\nDomainPage.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the DomainContext\n *\n * @constructor Twilio.Api.V2010.AccountContext.SipContext.DomainInstance\n *\n * @property {string} accountSid - The SID of the Account that created the resource\n * @property {string} apiVersion - The API version used to process the call\n * @property {string} authType - The types of authentication mapped to the domain\n * @property {Date} dateCreated -\n *          The RFC 2822 date and time in GMT that the resource was created\n * @property {Date} dateUpdated -\n *          The RFC 2822 date and time in GMT that the resource was last updated\n * @property {string} domainName -\n *          The unique address on Twilio to route SIP traffic\n * @property {string} friendlyName -\n *          The string that you assigned to describe the resource\n * @property {string} sid - The unique string that identifies the resource\n * @property {string} uri -\n *          The URI of the resource, relative to `https://api.twilio.com`\n * @property {string} voiceFallbackMethod -\n *          The HTTP method used with voice_fallback_url\n * @property {string} voiceFallbackUrl -\n *          The URL we call when an error occurs while executing TwiML\n * @property {string} voiceMethod - The HTTP method to use with voice_url\n * @property {string} voiceStatusCallbackMethod -\n *          The HTTP method we use to call voice_status_callback_url\n * @property {string} voiceStatusCallbackUrl -\n *          The URL that we call with status updates\n * @property {string} voiceUrl - The URL we call when receiving a call\n * @property {string} subresourceUris -\n *          A list mapping resources associated with the SIP Domain resource\n * @property {boolean} sipRegistration - Whether SIP registration is allowed\n * @property {boolean} emergencyCallingEnabled -\n *          Whether emergency calling is enabled for the domain.\n * @property {boolean} secure - Whether secure SIP is enabled for the domain\n * @property {string} byocTrunkSid - The SID of the BYOC Trunk resource.\n * @property {string} emergencyCallerSid -\n *          Whether an emergency caller sid is configured for the domain.\n *\n * @param {V2010} version - Version of the resource\n * @param {DomainPayload} payload - The instance payload\n * @param {sid} accountSid -\n *          A 34 character string that uniquely identifies this resource.\n * @param {sid} sid - The unique string that identifies the resource\n */\n\n/* jshint ignore:end */\n\n\nDomainInstance = function DomainInstance(version, payload, accountSid, sid) {\n  this._version = version; // Marshaled Properties\n\n  this.accountSid = payload.account_sid; // jshint ignore:line\n\n  this.apiVersion = payload.api_version; // jshint ignore:line\n\n  this.authType = payload.auth_type; // jshint ignore:line\n\n  this.dateCreated = deserialize.rfc2822DateTime(payload.date_created); // jshint ignore:line\n\n  this.dateUpdated = deserialize.rfc2822DateTime(payload.date_updated); // jshint ignore:line\n\n  this.domainName = payload.domain_name; // jshint ignore:line\n\n  this.friendlyName = payload.friendly_name; // jshint ignore:line\n\n  this.sid = payload.sid; // jshint ignore:line\n\n  this.uri = payload.uri; // jshint ignore:line\n\n  this.voiceFallbackMethod = payload.voice_fallback_method; // jshint ignore:line\n\n  this.voiceFallbackUrl = payload.voice_fallback_url; // jshint ignore:line\n\n  this.voiceMethod = payload.voice_method; // jshint ignore:line\n\n  this.voiceStatusCallbackMethod = payload.voice_status_callback_method; // jshint ignore:line\n\n  this.voiceStatusCallbackUrl = payload.voice_status_callback_url; // jshint ignore:line\n\n  this.voiceUrl = payload.voice_url; // jshint ignore:line\n\n  this.subresourceUris = payload.subresource_uris; // jshint ignore:line\n\n  this.sipRegistration = payload.sip_registration; // jshint ignore:line\n\n  this.emergencyCallingEnabled = payload.emergency_calling_enabled; // jshint ignore:line\n\n  this.secure = payload.secure; // jshint ignore:line\n\n  this.byocTrunkSid = payload.byoc_trunk_sid; // jshint ignore:line\n\n  this.emergencyCallerSid = payload.emergency_caller_sid; // jshint ignore:line\n  // Context\n\n  this._context = undefined;\n  this._solution = {\n    accountSid: accountSid,\n    sid: sid || this.sid\n  };\n};\n\nObject.defineProperty(DomainInstance.prototype, '_proxy', {\n  get: function () {\n    if (!this._context) {\n      this._context = new DomainContext(this._version, this._solution.accountSid, this._solution.sid);\n    }\n\n    return this._context;\n  }\n});\n/* jshint ignore:start */\n\n/**\n * fetch a DomainInstance\n *\n * @function fetch\n * @memberof Twilio.Api.V2010.AccountContext.SipContext.DomainInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed DomainInstance\n */\n\n/* jshint ignore:end */\n\nDomainInstance.prototype.fetch = function fetch(callback) {\n  return this._proxy.fetch(callback);\n};\n/* jshint ignore:start */\n\n/**\n * update a DomainInstance\n *\n * @function update\n * @memberof Twilio.Api.V2010.AccountContext.SipContext.DomainInstance#\n *\n * @param {object} [opts] - Options for request\n * @param {string} [opts.friendlyName] - A string to describe the resource\n * @param {string} [opts.voiceFallbackMethod] -\n *          The HTTP method used with voice_fallback_url\n * @param {string} [opts.voiceFallbackUrl] -\n *          The URL we should call when an error occurs in executing TwiML\n * @param {string} [opts.voiceMethod] -\n *          The HTTP method we should use with voice_url\n * @param {string} [opts.voiceStatusCallbackMethod] -\n *          The HTTP method we should use to call voice_status_callback_url\n * @param {string} [opts.voiceStatusCallbackUrl] -\n *          The URL that we should call to pass status updates\n * @param {string} [opts.voiceUrl] - The URL we should call when receiving a call\n * @param {boolean} [opts.sipRegistration] - Whether SIP registration is allowed\n * @param {string} [opts.domainName] -\n *          The unique address on Twilio to route SIP traffic\n * @param {boolean} [opts.emergencyCallingEnabled] -\n *          Whether emergency calling is enabled for the domain.\n * @param {boolean} [opts.secure] - Whether secure SIP is enabled for the domain\n * @param {string} [opts.byocTrunkSid] - The SID of the BYOC Trunk resource.\n * @param {string} [opts.emergencyCallerSid] -\n *          Whether an emergency caller sid is configured for the domain.\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed DomainInstance\n */\n\n/* jshint ignore:end */\n\n\nDomainInstance.prototype.update = function update(opts, callback) {\n  return this._proxy.update(opts, callback);\n};\n/* jshint ignore:start */\n\n/**\n * remove a DomainInstance\n *\n * @function remove\n * @memberof Twilio.Api.V2010.AccountContext.SipContext.DomainInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed DomainInstance\n */\n\n/* jshint ignore:end */\n\n\nDomainInstance.prototype.remove = function remove(callback) {\n  return this._proxy.remove(callback);\n};\n/* jshint ignore:start */\n\n/**\n * Access the ipAccessControlListMappings\n *\n * @function ipAccessControlListMappings\n * @memberof Twilio.Api.V2010.AccountContext.SipContext.DomainInstance#\n *\n * @returns {Twilio.Api.V2010.AccountContext.SipContext.DomainContext.IpAccessControlListMappingList}\n */\n\n/* jshint ignore:end */\n\n\nDomainInstance.prototype.ipAccessControlListMappings = function ipAccessControlListMappings() {\n  return this._proxy.ipAccessControlListMappings;\n};\n/* jshint ignore:start */\n\n/**\n * Access the credentialListMappings\n *\n * @function credentialListMappings\n * @memberof Twilio.Api.V2010.AccountContext.SipContext.DomainInstance#\n *\n * @returns {Twilio.Api.V2010.AccountContext.SipContext.DomainContext.CredentialListMappingList}\n */\n\n/* jshint ignore:end */\n\n\nDomainInstance.prototype.credentialListMappings = function credentialListMappings() {\n  return this._proxy.credentialListMappings;\n};\n/* jshint ignore:start */\n\n/**\n * Access the auth\n *\n * @function auth\n * @memberof Twilio.Api.V2010.AccountContext.SipContext.DomainInstance#\n *\n * @returns {Twilio.Api.V2010.AccountContext.SipContext.DomainContext.AuthTypesList}\n */\n\n/* jshint ignore:end */\n\n\nDomainInstance.prototype.auth = function auth() {\n  return this._proxy.auth;\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Api.V2010.AccountContext.SipContext.DomainInstance#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nDomainInstance.prototype.toJSON = function toJSON() {\n  let clone = {};\n\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n\n  return clone;\n};\n\nDomainInstance.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the DomainContext\n *\n * @constructor Twilio.Api.V2010.AccountContext.SipContext.DomainContext\n *\n * @property {Twilio.Api.V2010.AccountContext.SipContext.DomainContext.IpAccessControlListMappingList} ipAccessControlListMappings -\n *          ipAccessControlListMappings resource\n * @property {Twilio.Api.V2010.AccountContext.SipContext.DomainContext.CredentialListMappingList} credentialListMappings -\n *          credentialListMappings resource\n * @property {Twilio.Api.V2010.AccountContext.SipContext.DomainContext.AuthTypesList} auth -\n *          auth resource\n *\n * @param {V2010} version - Version of the resource\n * @param {sid} accountSid -\n *          The SID of the Account that created the resource to fetch\n * @param {sid} sid - The unique string that identifies the resource\n */\n\n/* jshint ignore:end */\n\n\nDomainContext = function DomainContext(version, accountSid, sid) {\n  this._version = version; // Path Solution\n\n  this._solution = {\n    accountSid: accountSid,\n    sid: sid\n  };\n  this._uri = `/Accounts/${accountSid}/SIP/Domains/${sid}.json`; // Dependents\n\n  this._ipAccessControlListMappings = undefined;\n  this._credentialListMappings = undefined;\n  this._auth = undefined;\n};\n/* jshint ignore:start */\n\n/**\n * fetch a DomainInstance\n *\n * @function fetch\n * @memberof Twilio.Api.V2010.AccountContext.SipContext.DomainContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed DomainInstance\n */\n\n/* jshint ignore:end */\n\n\nDomainContext.prototype.fetch = function fetch(callback) {\n  var deferred = Q.defer();\n\n  var promise = this._version.fetch({\n    uri: this._uri,\n    method: 'GET'\n  });\n\n  promise = promise.then(function (payload) {\n    deferred.resolve(new DomainInstance(this._version, payload, this._solution.accountSid, this._solution.sid));\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n/* jshint ignore:start */\n\n/**\n * update a DomainInstance\n *\n * @function update\n * @memberof Twilio.Api.V2010.AccountContext.SipContext.DomainContext#\n *\n * @param {object} [opts] - Options for request\n * @param {string} [opts.friendlyName] - A string to describe the resource\n * @param {string} [opts.voiceFallbackMethod] -\n *          The HTTP method used with voice_fallback_url\n * @param {string} [opts.voiceFallbackUrl] -\n *          The URL we should call when an error occurs in executing TwiML\n * @param {string} [opts.voiceMethod] -\n *          The HTTP method we should use with voice_url\n * @param {string} [opts.voiceStatusCallbackMethod] -\n *          The HTTP method we should use to call voice_status_callback_url\n * @param {string} [opts.voiceStatusCallbackUrl] -\n *          The URL that we should call to pass status updates\n * @param {string} [opts.voiceUrl] - The URL we should call when receiving a call\n * @param {boolean} [opts.sipRegistration] - Whether SIP registration is allowed\n * @param {string} [opts.domainName] -\n *          The unique address on Twilio to route SIP traffic\n * @param {boolean} [opts.emergencyCallingEnabled] -\n *          Whether emergency calling is enabled for the domain.\n * @param {boolean} [opts.secure] - Whether secure SIP is enabled for the domain\n * @param {string} [opts.byocTrunkSid] - The SID of the BYOC Trunk resource.\n * @param {string} [opts.emergencyCallerSid] -\n *          Whether an emergency caller sid is configured for the domain.\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed DomainInstance\n */\n\n/* jshint ignore:end */\n\n\nDomainContext.prototype.update = function update(opts, callback) {\n  if (_.isFunction(opts)) {\n    callback = opts;\n    opts = {};\n  }\n\n  opts = opts || {};\n  var deferred = Q.defer();\n  var data = values.of({\n    'FriendlyName': _.get(opts, 'friendlyName'),\n    'VoiceFallbackMethod': _.get(opts, 'voiceFallbackMethod'),\n    'VoiceFallbackUrl': _.get(opts, 'voiceFallbackUrl'),\n    'VoiceMethod': _.get(opts, 'voiceMethod'),\n    'VoiceStatusCallbackMethod': _.get(opts, 'voiceStatusCallbackMethod'),\n    'VoiceStatusCallbackUrl': _.get(opts, 'voiceStatusCallbackUrl'),\n    'VoiceUrl': _.get(opts, 'voiceUrl'),\n    'SipRegistration': serialize.bool(_.get(opts, 'sipRegistration')),\n    'DomainName': _.get(opts, 'domainName'),\n    'EmergencyCallingEnabled': serialize.bool(_.get(opts, 'emergencyCallingEnabled')),\n    'Secure': serialize.bool(_.get(opts, 'secure')),\n    'ByocTrunkSid': _.get(opts, 'byocTrunkSid'),\n    'EmergencyCallerSid': _.get(opts, 'emergencyCallerSid')\n  });\n\n  var promise = this._version.update({\n    uri: this._uri,\n    method: 'POST',\n    data: data\n  });\n\n  promise = promise.then(function (payload) {\n    deferred.resolve(new DomainInstance(this._version, payload, this._solution.accountSid, this._solution.sid));\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n/* jshint ignore:start */\n\n/**\n * remove a DomainInstance\n *\n * @function remove\n * @memberof Twilio.Api.V2010.AccountContext.SipContext.DomainContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed DomainInstance\n */\n\n/* jshint ignore:end */\n\n\nDomainContext.prototype.remove = function remove(callback) {\n  var deferred = Q.defer();\n\n  var promise = this._version.remove({\n    uri: this._uri,\n    method: 'DELETE'\n  });\n\n  promise = promise.then(function (payload) {\n    deferred.resolve(payload);\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\nObject.defineProperty(DomainContext.prototype, 'ipAccessControlListMappings', {\n  get: function () {\n    if (!this._ipAccessControlListMappings) {\n      this._ipAccessControlListMappings = new IpAccessControlListMappingList(this._version, this._solution.accountSid, this._solution.sid);\n    }\n\n    return this._ipAccessControlListMappings;\n  }\n});\nObject.defineProperty(DomainContext.prototype, 'credentialListMappings', {\n  get: function () {\n    if (!this._credentialListMappings) {\n      this._credentialListMappings = new CredentialListMappingList(this._version, this._solution.accountSid, this._solution.sid);\n    }\n\n    return this._credentialListMappings;\n  }\n});\nObject.defineProperty(DomainContext.prototype, 'auth', {\n  get: function () {\n    if (!this._auth) {\n      this._auth = new AuthTypesList(this._version, this._solution.accountSid, this._solution.sid);\n    }\n\n    return this._auth;\n  }\n});\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Api.V2010.AccountContext.SipContext.DomainContext#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\nDomainContext.prototype.toJSON = function toJSON() {\n  return this._solution;\n};\n\nDomainContext.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\nmodule.exports = {\n  DomainList: DomainList,\n  DomainPage: DomainPage,\n  DomainInstance: DomainInstance,\n  DomainContext: DomainContext\n};","map":{"version":3,"names":["Q","require","_","util","AuthTypesList","CredentialListMappingList","IpAccessControlListMappingList","Page","deserialize","serialize","values","DomainList","DomainPage","DomainInstance","DomainContext","version","accountSid","DomainListInstance","sid","get","_version","_solution","_uri","each","opts","callback","isFunction","isUndefined","Error","done","currentPage","currentResource","limits","readLimits","limit","pageSize","onComplete","error","fetchNextPage","fn","promise","then","page","instances","instance","bind","nextPage","catch","merge","list","deferred","defer","allResources","resource","push","length","resolve","reject","nodeify","data","of","pageToken","pageNumber","uri","method","params","payload","getPage","targetUrl","_domain","twilio","request","create","bool","toJSON","inspect","custom","depth","options","response","solution","prototype","constructor","call","extend","getInstance","clone","forOwn","value","key","startsWith","account_sid","apiVersion","api_version","authType","auth_type","dateCreated","rfc2822DateTime","date_created","dateUpdated","date_updated","domainName","domain_name","friendlyName","friendly_name","voiceFallbackMethod","voice_fallback_method","voiceFallbackUrl","voice_fallback_url","voiceMethod","voice_method","voiceStatusCallbackMethod","voice_status_callback_method","voiceStatusCallbackUrl","voice_status_callback_url","voiceUrl","voice_url","subresourceUris","subresource_uris","sipRegistration","sip_registration","emergencyCallingEnabled","emergency_calling_enabled","secure","byocTrunkSid","byoc_trunk_sid","emergencyCallerSid","emergency_caller_sid","_context","undefined","Object","defineProperty","fetch","_proxy","update","remove","ipAccessControlListMappings","credentialListMappings","auth","_ipAccessControlListMappings","_credentialListMappings","_auth","module","exports"],"sources":["/Users/hooniesun/rmit/fwp/assessment1/lan/node_modules/twilio/lib/rest/api/v2010/account/sip/domain.js"],"sourcesContent":["'use strict';\n\n/* jshint ignore:start */\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n/* jshint ignore:end */\n\nvar Q = require('q');  /* jshint ignore:line */\nvar _ = require('lodash');  /* jshint ignore:line */\nvar util = require('util');  /* jshint ignore:line */\nvar AuthTypesList = require('./domain/authTypes').AuthTypesList;\nvar CredentialListMappingList = require(\n    './domain/credentialListMapping').CredentialListMappingList;\nvar IpAccessControlListMappingList = require(\n    './domain/ipAccessControlListMapping').IpAccessControlListMappingList;\nvar Page = require('../../../../../base/Page');  /* jshint ignore:line */\nvar deserialize = require(\n    '../../../../../base/deserialize');  /* jshint ignore:line */\nvar serialize = require(\n    '../../../../../base/serialize');  /* jshint ignore:line */\nvar values = require('../../../../../base/values');  /* jshint ignore:line */\n\nvar DomainList;\nvar DomainPage;\nvar DomainInstance;\nvar DomainContext;\n\n/* jshint ignore:start */\n/**\n * Initialize the DomainList\n *\n * @constructor Twilio.Api.V2010.AccountContext.SipContext.DomainList\n *\n * @param {Twilio.Api.V2010} version - Version of the resource\n * @param {string} accountSid -\n *          A 34 character string that uniquely identifies this resource.\n */\n/* jshint ignore:end */\nDomainList = function DomainList(version, accountSid) {\n  /* jshint ignore:start */\n  /**\n   * @function domains\n   * @memberof Twilio.Api.V2010.AccountContext.SipContext#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Api.V2010.AccountContext.SipContext.DomainContext}\n   */\n  /* jshint ignore:end */\n  function DomainListInstance(sid) {\n    return DomainListInstance.get(sid);\n  }\n\n  DomainListInstance._version = version;\n  // Path Solution\n  DomainListInstance._solution = {accountSid: accountSid};\n  DomainListInstance._uri = `/Accounts/${accountSid}/SIP/Domains.json`;\n  /* jshint ignore:start */\n  /**\n   * Streams DomainInstance records from the API.\n   *\n   * This operation lazily loads records as efficiently as possible until the limit\n   * is reached.\n   *\n   * The results are passed into the callback function, so this operation is memory\n   * efficient.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function each\n   * @memberof Twilio.Api.V2010.AccountContext.SipContext.DomainList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         each() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no pageSize is defined but a limit is defined,\n   *         each() will attempt to read the limit with the most efficient\n   *         page size, i.e. min(limit, 1000)\n   * @param {Function} [opts.callback] -\n   *         Function to process each record. If this and a positional\n   *         callback are passed, this one will be used\n   * @param {Function} [opts.done] -\n   *          Function to be called upon completion of streaming\n   * @param {Function} [callback] - Function to process each record\n   */\n  /* jshint ignore:end */\n  DomainListInstance.each = function each(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    if (opts.callback) {\n      callback = opts.callback;\n    }\n    if (_.isUndefined(callback)) {\n      throw new Error('Callback function must be provided');\n    }\n\n    var done = false;\n    var currentPage = 1;\n    var currentResource = 0;\n    var limits = this._version.readLimits({\n      limit: opts.limit,\n      pageSize: opts.pageSize\n    });\n\n    function onComplete(error) {\n      done = true;\n      if (_.isFunction(opts.done)) {\n        opts.done(error);\n      }\n    }\n\n    function fetchNextPage(fn) {\n      var promise = fn();\n      if (_.isUndefined(promise)) {\n        onComplete();\n        return;\n      }\n\n      promise.then(function(page) {\n        _.each(page.instances, function(instance) {\n          if (done || (!_.isUndefined(opts.limit) && currentResource >= opts.limit)) {\n            done = true;\n            return false;\n          }\n\n          currentResource++;\n          callback(instance, onComplete);\n        });\n\n        if (!done) {\n          currentPage++;\n          fetchNextPage(_.bind(page.nextPage, page));\n        } else {\n          onComplete();\n        }\n      });\n\n      promise.catch(onComplete);\n    }\n\n    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Lists DomainInstance records from the API as a list.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function list\n   * @memberof Twilio.Api.V2010.AccountContext.SipContext.DomainList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         list() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no page_size is defined but a limit is defined,\n   *         list() will attempt to read the limit with the most\n   *         efficient page size, i.e. min(limit, 1000)\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  DomainListInstance.list = function list(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    var deferred = Q.defer();\n    var allResources = [];\n    opts.callback = function(resource, done) {\n      allResources.push(resource);\n\n      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {\n        done();\n      }\n    };\n\n    opts.done = function(error) {\n      if (_.isUndefined(error)) {\n        deferred.resolve(allResources);\n      } else {\n        deferred.reject(error);\n      }\n    };\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    this.each(opts);\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single page of DomainInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function page\n   * @memberof Twilio.Api.V2010.AccountContext.SipContext.DomainList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.pageToken] - PageToken provided by the API\n   * @param {number} [opts.pageNumber] -\n   *          Page Number, this value is simply for client state\n   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  DomainListInstance.page = function page(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n\n    var deferred = Q.defer();\n    var data = values.of({\n      'PageToken': opts.pageToken,\n      'Page': opts.pageNumber,\n      'PageSize': opts.pageSize\n    });\n\n    var promise = this._version.page({uri: this._uri, method: 'GET', params: data});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new DomainPage(this._version, payload, this._solution));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single target page of DomainInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function getPage\n   * @memberof Twilio.Api.V2010.AccountContext.SipContext.DomainList#\n   *\n   * @param {string} [targetUrl] - API-generated URL for the requested results page\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  DomainListInstance.getPage = function getPage(targetUrl, callback) {\n    var deferred = Q.defer();\n\n    var promise = this._version._domain.twilio.request({method: 'GET', uri: targetUrl});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new DomainPage(this._version, payload, this._solution));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * create a DomainInstance\n   *\n   * @function create\n   * @memberof Twilio.Api.V2010.AccountContext.SipContext.DomainList#\n   *\n   * @param {object} opts - Options for request\n   * @param {string} opts.domainName -\n   *          The unique address on Twilio to route SIP traffic\n   * @param {string} [opts.friendlyName] - A string to describe the resource\n   * @param {string} [opts.voiceUrl] - The URL we should call when receiving a call\n   * @param {string} [opts.voiceMethod] - The HTTP method to use with voice_url\n   * @param {string} [opts.voiceFallbackUrl] -\n   *          The URL we should call when an error occurs in executing TwiML\n   * @param {string} [opts.voiceFallbackMethod] -\n   *          The HTTP method to use with voice_fallback_url\n   * @param {string} [opts.voiceStatusCallbackUrl] -\n   *          The URL that we should call to pass status updates\n   * @param {string} [opts.voiceStatusCallbackMethod] -\n   *          The HTTP method we should use to call `voice_status_callback_url`\n   * @param {boolean} [opts.sipRegistration] - Whether SIP registration is allowed\n   * @param {boolean} [opts.emergencyCallingEnabled] -\n   *          Whether emergency calling is enabled for the domain.\n   * @param {boolean} [opts.secure] - Whether secure SIP is enabled for the domain\n   * @param {string} [opts.byocTrunkSid] - The SID of the BYOC Trunk resource.\n   * @param {string} [opts.emergencyCallerSid] -\n   *          Whether an emergency caller sid is configured for the domain.\n   * @param {function} [callback] - Callback to handle processed record\n   *\n   * @returns {Promise} Resolves to processed DomainInstance\n   */\n  /* jshint ignore:end */\n  DomainListInstance.create = function create(opts, callback) {\n    if (_.isUndefined(opts)) {\n      throw new Error('Required parameter \"opts\" missing.');\n    }\n    if (_.isUndefined(opts['domainName'])) {\n      throw new Error('Required parameter \"opts[\\'domainName\\']\" missing.');\n    }\n\n    var deferred = Q.defer();\n    var data = values.of({\n      'DomainName': _.get(opts, 'domainName'),\n      'FriendlyName': _.get(opts, 'friendlyName'),\n      'VoiceUrl': _.get(opts, 'voiceUrl'),\n      'VoiceMethod': _.get(opts, 'voiceMethod'),\n      'VoiceFallbackUrl': _.get(opts, 'voiceFallbackUrl'),\n      'VoiceFallbackMethod': _.get(opts, 'voiceFallbackMethod'),\n      'VoiceStatusCallbackUrl': _.get(opts, 'voiceStatusCallbackUrl'),\n      'VoiceStatusCallbackMethod': _.get(opts, 'voiceStatusCallbackMethod'),\n      'SipRegistration': serialize.bool(_.get(opts, 'sipRegistration')),\n      'EmergencyCallingEnabled': serialize.bool(_.get(opts, 'emergencyCallingEnabled')),\n      'Secure': serialize.bool(_.get(opts, 'secure')),\n      'ByocTrunkSid': _.get(opts, 'byocTrunkSid'),\n      'EmergencyCallerSid': _.get(opts, 'emergencyCallerSid')\n    });\n\n    var promise = this._version.create({uri: this._uri, method: 'POST', data: data});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new DomainInstance(\n        this._version,\n        payload,\n        this._solution.accountSid,\n        this._solution.sid\n      ));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Constructs a domain\n   *\n   * @function get\n   * @memberof Twilio.Api.V2010.AccountContext.SipContext.DomainList#\n   *\n   * @param {string} sid - The unique string that identifies the resource\n   *\n   * @returns {Twilio.Api.V2010.AccountContext.SipContext.DomainContext}\n   */\n  /* jshint ignore:end */\n  DomainListInstance.get = function get(sid) {\n    return new DomainContext(this._version, this._solution.accountSid, sid);\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Api.V2010.AccountContext.SipContext.DomainList#\n   *\n   * @returns Object\n   */\n  /* jshint ignore:end */\n  DomainListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n\n  DomainListInstance[util.inspect.custom] = function inspect(depth, options) {\n    return util.inspect(this.toJSON(), options);\n  };\n\n  return DomainListInstance;\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the DomainPage\n *\n * @constructor Twilio.Api.V2010.AccountContext.SipContext.DomainPage\n *\n * @param {V2010} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {DomainSolution} solution - Path solution\n *\n * @returns DomainPage\n */\n/* jshint ignore:end */\nDomainPage = function DomainPage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n\n_.extend(DomainPage.prototype, Page.prototype);\nDomainPage.prototype.constructor = DomainPage;\n\n/* jshint ignore:start */\n/**\n * Build an instance of DomainInstance\n *\n * @function getInstance\n * @memberof Twilio.Api.V2010.AccountContext.SipContext.DomainPage#\n *\n * @param {DomainPayload} payload - Payload response from the API\n *\n * @returns DomainInstance\n */\n/* jshint ignore:end */\nDomainPage.prototype.getInstance = function getInstance(payload) {\n  return new DomainInstance(this._version, payload, this._solution.accountSid);\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Api.V2010.AccountContext.SipContext.DomainPage#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nDomainPage.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function(value, key) {\n    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\n\nDomainPage.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the DomainContext\n *\n * @constructor Twilio.Api.V2010.AccountContext.SipContext.DomainInstance\n *\n * @property {string} accountSid - The SID of the Account that created the resource\n * @property {string} apiVersion - The API version used to process the call\n * @property {string} authType - The types of authentication mapped to the domain\n * @property {Date} dateCreated -\n *          The RFC 2822 date and time in GMT that the resource was created\n * @property {Date} dateUpdated -\n *          The RFC 2822 date and time in GMT that the resource was last updated\n * @property {string} domainName -\n *          The unique address on Twilio to route SIP traffic\n * @property {string} friendlyName -\n *          The string that you assigned to describe the resource\n * @property {string} sid - The unique string that identifies the resource\n * @property {string} uri -\n *          The URI of the resource, relative to `https://api.twilio.com`\n * @property {string} voiceFallbackMethod -\n *          The HTTP method used with voice_fallback_url\n * @property {string} voiceFallbackUrl -\n *          The URL we call when an error occurs while executing TwiML\n * @property {string} voiceMethod - The HTTP method to use with voice_url\n * @property {string} voiceStatusCallbackMethod -\n *          The HTTP method we use to call voice_status_callback_url\n * @property {string} voiceStatusCallbackUrl -\n *          The URL that we call with status updates\n * @property {string} voiceUrl - The URL we call when receiving a call\n * @property {string} subresourceUris -\n *          A list mapping resources associated with the SIP Domain resource\n * @property {boolean} sipRegistration - Whether SIP registration is allowed\n * @property {boolean} emergencyCallingEnabled -\n *          Whether emergency calling is enabled for the domain.\n * @property {boolean} secure - Whether secure SIP is enabled for the domain\n * @property {string} byocTrunkSid - The SID of the BYOC Trunk resource.\n * @property {string} emergencyCallerSid -\n *          Whether an emergency caller sid is configured for the domain.\n *\n * @param {V2010} version - Version of the resource\n * @param {DomainPayload} payload - The instance payload\n * @param {sid} accountSid -\n *          A 34 character string that uniquely identifies this resource.\n * @param {sid} sid - The unique string that identifies the resource\n */\n/* jshint ignore:end */\nDomainInstance = function DomainInstance(version, payload, accountSid, sid) {\n  this._version = version;\n\n  // Marshaled Properties\n  this.accountSid = payload.account_sid; // jshint ignore:line\n  this.apiVersion = payload.api_version; // jshint ignore:line\n  this.authType = payload.auth_type; // jshint ignore:line\n  this.dateCreated = deserialize.rfc2822DateTime(payload.date_created); // jshint ignore:line\n  this.dateUpdated = deserialize.rfc2822DateTime(payload.date_updated); // jshint ignore:line\n  this.domainName = payload.domain_name; // jshint ignore:line\n  this.friendlyName = payload.friendly_name; // jshint ignore:line\n  this.sid = payload.sid; // jshint ignore:line\n  this.uri = payload.uri; // jshint ignore:line\n  this.voiceFallbackMethod = payload.voice_fallback_method; // jshint ignore:line\n  this.voiceFallbackUrl = payload.voice_fallback_url; // jshint ignore:line\n  this.voiceMethod = payload.voice_method; // jshint ignore:line\n  this.voiceStatusCallbackMethod = payload.voice_status_callback_method; // jshint ignore:line\n  this.voiceStatusCallbackUrl = payload.voice_status_callback_url; // jshint ignore:line\n  this.voiceUrl = payload.voice_url; // jshint ignore:line\n  this.subresourceUris = payload.subresource_uris; // jshint ignore:line\n  this.sipRegistration = payload.sip_registration; // jshint ignore:line\n  this.emergencyCallingEnabled = payload.emergency_calling_enabled; // jshint ignore:line\n  this.secure = payload.secure; // jshint ignore:line\n  this.byocTrunkSid = payload.byoc_trunk_sid; // jshint ignore:line\n  this.emergencyCallerSid = payload.emergency_caller_sid; // jshint ignore:line\n\n  // Context\n  this._context = undefined;\n  this._solution = {accountSid: accountSid, sid: sid || this.sid, };\n};\n\nObject.defineProperty(DomainInstance.prototype,\n  '_proxy', {\n    get: function() {\n      if (!this._context) {\n        this._context = new DomainContext(this._version, this._solution.accountSid, this._solution.sid);\n      }\n\n      return this._context;\n    }\n});\n\n/* jshint ignore:start */\n/**\n * fetch a DomainInstance\n *\n * @function fetch\n * @memberof Twilio.Api.V2010.AccountContext.SipContext.DomainInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed DomainInstance\n */\n/* jshint ignore:end */\nDomainInstance.prototype.fetch = function fetch(callback) {\n  return this._proxy.fetch(callback);\n};\n\n/* jshint ignore:start */\n/**\n * update a DomainInstance\n *\n * @function update\n * @memberof Twilio.Api.V2010.AccountContext.SipContext.DomainInstance#\n *\n * @param {object} [opts] - Options for request\n * @param {string} [opts.friendlyName] - A string to describe the resource\n * @param {string} [opts.voiceFallbackMethod] -\n *          The HTTP method used with voice_fallback_url\n * @param {string} [opts.voiceFallbackUrl] -\n *          The URL we should call when an error occurs in executing TwiML\n * @param {string} [opts.voiceMethod] -\n *          The HTTP method we should use with voice_url\n * @param {string} [opts.voiceStatusCallbackMethod] -\n *          The HTTP method we should use to call voice_status_callback_url\n * @param {string} [opts.voiceStatusCallbackUrl] -\n *          The URL that we should call to pass status updates\n * @param {string} [opts.voiceUrl] - The URL we should call when receiving a call\n * @param {boolean} [opts.sipRegistration] - Whether SIP registration is allowed\n * @param {string} [opts.domainName] -\n *          The unique address on Twilio to route SIP traffic\n * @param {boolean} [opts.emergencyCallingEnabled] -\n *          Whether emergency calling is enabled for the domain.\n * @param {boolean} [opts.secure] - Whether secure SIP is enabled for the domain\n * @param {string} [opts.byocTrunkSid] - The SID of the BYOC Trunk resource.\n * @param {string} [opts.emergencyCallerSid] -\n *          Whether an emergency caller sid is configured for the domain.\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed DomainInstance\n */\n/* jshint ignore:end */\nDomainInstance.prototype.update = function update(opts, callback) {\n  return this._proxy.update(opts, callback);\n};\n\n/* jshint ignore:start */\n/**\n * remove a DomainInstance\n *\n * @function remove\n * @memberof Twilio.Api.V2010.AccountContext.SipContext.DomainInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed DomainInstance\n */\n/* jshint ignore:end */\nDomainInstance.prototype.remove = function remove(callback) {\n  return this._proxy.remove(callback);\n};\n\n/* jshint ignore:start */\n/**\n * Access the ipAccessControlListMappings\n *\n * @function ipAccessControlListMappings\n * @memberof Twilio.Api.V2010.AccountContext.SipContext.DomainInstance#\n *\n * @returns {Twilio.Api.V2010.AccountContext.SipContext.DomainContext.IpAccessControlListMappingList}\n */\n/* jshint ignore:end */\nDomainInstance.prototype.ipAccessControlListMappings = function\n    ipAccessControlListMappings() {\n  return this._proxy.ipAccessControlListMappings;\n};\n\n/* jshint ignore:start */\n/**\n * Access the credentialListMappings\n *\n * @function credentialListMappings\n * @memberof Twilio.Api.V2010.AccountContext.SipContext.DomainInstance#\n *\n * @returns {Twilio.Api.V2010.AccountContext.SipContext.DomainContext.CredentialListMappingList}\n */\n/* jshint ignore:end */\nDomainInstance.prototype.credentialListMappings = function\n    credentialListMappings() {\n  return this._proxy.credentialListMappings;\n};\n\n/* jshint ignore:start */\n/**\n * Access the auth\n *\n * @function auth\n * @memberof Twilio.Api.V2010.AccountContext.SipContext.DomainInstance#\n *\n * @returns {Twilio.Api.V2010.AccountContext.SipContext.DomainContext.AuthTypesList}\n */\n/* jshint ignore:end */\nDomainInstance.prototype.auth = function auth() {\n  return this._proxy.auth;\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Api.V2010.AccountContext.SipContext.DomainInstance#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nDomainInstance.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function(value, key) {\n    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\n\nDomainInstance.prototype[util.inspect.custom] = function inspect(depth, options)\n    {\n  return util.inspect(this.toJSON(), options);\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the DomainContext\n *\n * @constructor Twilio.Api.V2010.AccountContext.SipContext.DomainContext\n *\n * @property {Twilio.Api.V2010.AccountContext.SipContext.DomainContext.IpAccessControlListMappingList} ipAccessControlListMappings -\n *          ipAccessControlListMappings resource\n * @property {Twilio.Api.V2010.AccountContext.SipContext.DomainContext.CredentialListMappingList} credentialListMappings -\n *          credentialListMappings resource\n * @property {Twilio.Api.V2010.AccountContext.SipContext.DomainContext.AuthTypesList} auth -\n *          auth resource\n *\n * @param {V2010} version - Version of the resource\n * @param {sid} accountSid -\n *          The SID of the Account that created the resource to fetch\n * @param {sid} sid - The unique string that identifies the resource\n */\n/* jshint ignore:end */\nDomainContext = function DomainContext(version, accountSid, sid) {\n  this._version = version;\n\n  // Path Solution\n  this._solution = {accountSid: accountSid, sid: sid, };\n  this._uri = `/Accounts/${accountSid}/SIP/Domains/${sid}.json`;\n\n  // Dependents\n  this._ipAccessControlListMappings = undefined;\n  this._credentialListMappings = undefined;\n  this._auth = undefined;\n};\n\n/* jshint ignore:start */\n/**\n * fetch a DomainInstance\n *\n * @function fetch\n * @memberof Twilio.Api.V2010.AccountContext.SipContext.DomainContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed DomainInstance\n */\n/* jshint ignore:end */\nDomainContext.prototype.fetch = function fetch(callback) {\n  var deferred = Q.defer();\n  var promise = this._version.fetch({uri: this._uri, method: 'GET'});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(new DomainInstance(\n      this._version,\n      payload,\n      this._solution.accountSid,\n      this._solution.sid\n    ));\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * update a DomainInstance\n *\n * @function update\n * @memberof Twilio.Api.V2010.AccountContext.SipContext.DomainContext#\n *\n * @param {object} [opts] - Options for request\n * @param {string} [opts.friendlyName] - A string to describe the resource\n * @param {string} [opts.voiceFallbackMethod] -\n *          The HTTP method used with voice_fallback_url\n * @param {string} [opts.voiceFallbackUrl] -\n *          The URL we should call when an error occurs in executing TwiML\n * @param {string} [opts.voiceMethod] -\n *          The HTTP method we should use with voice_url\n * @param {string} [opts.voiceStatusCallbackMethod] -\n *          The HTTP method we should use to call voice_status_callback_url\n * @param {string} [opts.voiceStatusCallbackUrl] -\n *          The URL that we should call to pass status updates\n * @param {string} [opts.voiceUrl] - The URL we should call when receiving a call\n * @param {boolean} [opts.sipRegistration] - Whether SIP registration is allowed\n * @param {string} [opts.domainName] -\n *          The unique address on Twilio to route SIP traffic\n * @param {boolean} [opts.emergencyCallingEnabled] -\n *          Whether emergency calling is enabled for the domain.\n * @param {boolean} [opts.secure] - Whether secure SIP is enabled for the domain\n * @param {string} [opts.byocTrunkSid] - The SID of the BYOC Trunk resource.\n * @param {string} [opts.emergencyCallerSid] -\n *          Whether an emergency caller sid is configured for the domain.\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed DomainInstance\n */\n/* jshint ignore:end */\nDomainContext.prototype.update = function update(opts, callback) {\n  if (_.isFunction(opts)) {\n    callback = opts;\n    opts = {};\n  }\n  opts = opts || {};\n\n  var deferred = Q.defer();\n  var data = values.of({\n    'FriendlyName': _.get(opts, 'friendlyName'),\n    'VoiceFallbackMethod': _.get(opts, 'voiceFallbackMethod'),\n    'VoiceFallbackUrl': _.get(opts, 'voiceFallbackUrl'),\n    'VoiceMethod': _.get(opts, 'voiceMethod'),\n    'VoiceStatusCallbackMethod': _.get(opts, 'voiceStatusCallbackMethod'),\n    'VoiceStatusCallbackUrl': _.get(opts, 'voiceStatusCallbackUrl'),\n    'VoiceUrl': _.get(opts, 'voiceUrl'),\n    'SipRegistration': serialize.bool(_.get(opts, 'sipRegistration')),\n    'DomainName': _.get(opts, 'domainName'),\n    'EmergencyCallingEnabled': serialize.bool(_.get(opts, 'emergencyCallingEnabled')),\n    'Secure': serialize.bool(_.get(opts, 'secure')),\n    'ByocTrunkSid': _.get(opts, 'byocTrunkSid'),\n    'EmergencyCallerSid': _.get(opts, 'emergencyCallerSid')\n  });\n\n  var promise = this._version.update({uri: this._uri, method: 'POST', data: data});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(new DomainInstance(\n      this._version,\n      payload,\n      this._solution.accountSid,\n      this._solution.sid\n    ));\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * remove a DomainInstance\n *\n * @function remove\n * @memberof Twilio.Api.V2010.AccountContext.SipContext.DomainContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed DomainInstance\n */\n/* jshint ignore:end */\nDomainContext.prototype.remove = function remove(callback) {\n  var deferred = Q.defer();\n  var promise = this._version.remove({uri: this._uri, method: 'DELETE'});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(payload);\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\nObject.defineProperty(DomainContext.prototype,\n  'ipAccessControlListMappings', {\n    get: function() {\n      if (!this._ipAccessControlListMappings) {\n        this._ipAccessControlListMappings = new IpAccessControlListMappingList(\n          this._version,\n          this._solution.accountSid,\n          this._solution.sid\n        );\n      }\n      return this._ipAccessControlListMappings;\n    }\n});\n\nObject.defineProperty(DomainContext.prototype,\n  'credentialListMappings', {\n    get: function() {\n      if (!this._credentialListMappings) {\n        this._credentialListMappings = new CredentialListMappingList(\n          this._version,\n          this._solution.accountSid,\n          this._solution.sid\n        );\n      }\n      return this._credentialListMappings;\n    }\n});\n\nObject.defineProperty(DomainContext.prototype,\n  'auth', {\n    get: function() {\n      if (!this._auth) {\n        this._auth = new AuthTypesList(this._version, this._solution.accountSid, this._solution.sid);\n      }\n      return this._auth;\n    }\n});\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Api.V2010.AccountContext.SipContext.DomainContext#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nDomainContext.prototype.toJSON = function toJSON() {\n  return this._solution;\n};\n\nDomainContext.prototype[util.inspect.custom] = function inspect(depth, options)\n    {\n  return util.inspect(this.toJSON(), options);\n};\n\nmodule.exports = {\n  DomainList: DomainList,\n  DomainPage: DomainPage,\n  DomainInstance: DomainInstance,\n  DomainContext: DomainContext\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}