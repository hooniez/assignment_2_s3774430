{"ast":null,"code":"'use strict';\n/* jshint ignore:start */\n\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n\n/* jshint ignore:end */\n\nvar Q = require('q');\n/* jshint ignore:line */\n\n\nvar _ = require('lodash');\n/* jshint ignore:line */\n\n\nvar util = require('util');\n/* jshint ignore:line */\n\n\nvar ConferenceParticipantList = require('./conference/conferenceParticipant').ConferenceParticipantList;\n\nvar Page = require('../../../base/Page');\n/* jshint ignore:line */\n\n\nvar deserialize = require('../../../base/deserialize');\n/* jshint ignore:line */\n\n\nvar values = require('../../../base/values');\n/* jshint ignore:line */\n\n\nvar ConferenceList;\nvar ConferencePage;\nvar ConferenceInstance;\nvar ConferenceContext;\n/* jshint ignore:start */\n\n/**\n * Initialize the ConferenceList\n *\n * @constructor Twilio.Insights.V1.ConferenceList\n *\n * @param {Twilio.Insights.V1} version - Version of the resource\n */\n\n/* jshint ignore:end */\n\nConferenceList = function ConferenceList(version) {\n  /* jshint ignore:start */\n\n  /**\n   * @function conferences\n   * @memberof Twilio.Insights.V1#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Insights.V1.ConferenceContext}\n   */\n\n  /* jshint ignore:end */\n  function ConferenceListInstance(sid) {\n    return ConferenceListInstance.get(sid);\n  }\n\n  ConferenceListInstance._version = version; // Path Solution\n\n  ConferenceListInstance._solution = {};\n  ConferenceListInstance._uri = `/Conferences`;\n  /* jshint ignore:start */\n\n  /**\n   * Streams ConferenceInstance records from the API.\n   *\n   * This operation lazily loads records as efficiently as possible until the limit\n   * is reached.\n   *\n   * The results are passed into the callback function, so this operation is memory\n   * efficient.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function each\n   * @memberof Twilio.Insights.V1.ConferenceList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.conferenceSid] - The SID of the conference.\n   * @param {string} [opts.friendlyName] - Custom label for the conference.\n   * @param {string} [opts.status] - Conference status.\n   * @param {string} [opts.createdAfter] - Conferences created after timestamp.\n   * @param {string} [opts.createdBefore] - Conferences created before timestamp.\n   * @param {string} [opts.mixerRegion] - Region where the conference was mixed.\n   * @param {string} [opts.tags] - Tags applied by Twilio for common issues.\n   * @param {string} [opts.subaccount] - Account SID for the subaccount.\n   * @param {string} [opts.detectedIssues] -\n   *          Potential issues detected during the conference.\n   * @param {string} [opts.endReason] - Conference end reason.\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         each() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no pageSize is defined but a limit is defined,\n   *         each() will attempt to read the limit with the most efficient\n   *         page size, i.e. min(limit, 1000)\n   * @param {Function} [opts.callback] -\n   *         Function to process each record. If this and a positional\n   *         callback are passed, this one will be used\n   * @param {Function} [opts.done] -\n   *          Function to be called upon completion of streaming\n   * @param {Function} [callback] - Function to process each record\n   */\n\n  /* jshint ignore:end */\n\n  ConferenceListInstance.each = function each(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n\n    if (opts.callback) {\n      callback = opts.callback;\n    }\n\n    if (_.isUndefined(callback)) {\n      throw new Error('Callback function must be provided');\n    }\n\n    var done = false;\n    var currentPage = 1;\n    var currentResource = 0;\n\n    var limits = this._version.readLimits({\n      limit: opts.limit,\n      pageSize: opts.pageSize\n    });\n\n    function onComplete(error) {\n      done = true;\n\n      if (_.isFunction(opts.done)) {\n        opts.done(error);\n      }\n    }\n\n    function fetchNextPage(fn) {\n      var promise = fn();\n\n      if (_.isUndefined(promise)) {\n        onComplete();\n        return;\n      }\n\n      promise.then(function (page) {\n        _.each(page.instances, function (instance) {\n          if (done || !_.isUndefined(opts.limit) && currentResource >= opts.limit) {\n            done = true;\n            return false;\n          }\n\n          currentResource++;\n          callback(instance, onComplete);\n        });\n\n        if (!done) {\n          currentPage++;\n          fetchNextPage(_.bind(page.nextPage, page));\n        } else {\n          onComplete();\n        }\n      });\n      promise.catch(onComplete);\n    }\n\n    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Lists ConferenceInstance records from the API as a list.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function list\n   * @memberof Twilio.Insights.V1.ConferenceList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.conferenceSid] - The SID of the conference.\n   * @param {string} [opts.friendlyName] - Custom label for the conference.\n   * @param {string} [opts.status] - Conference status.\n   * @param {string} [opts.createdAfter] - Conferences created after timestamp.\n   * @param {string} [opts.createdBefore] - Conferences created before timestamp.\n   * @param {string} [opts.mixerRegion] - Region where the conference was mixed.\n   * @param {string} [opts.tags] - Tags applied by Twilio for common issues.\n   * @param {string} [opts.subaccount] - Account SID for the subaccount.\n   * @param {string} [opts.detectedIssues] -\n   *          Potential issues detected during the conference.\n   * @param {string} [opts.endReason] - Conference end reason.\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         list() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no page_size is defined but a limit is defined,\n   *         list() will attempt to read the limit with the most\n   *         efficient page size, i.e. min(limit, 1000)\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  ConferenceListInstance.list = function list(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n    var deferred = Q.defer();\n    var allResources = [];\n\n    opts.callback = function (resource, done) {\n      allResources.push(resource);\n\n      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {\n        done();\n      }\n    };\n\n    opts.done = function (error) {\n      if (_.isUndefined(error)) {\n        deferred.resolve(allResources);\n      } else {\n        deferred.reject(error);\n      }\n    };\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    this.each(opts);\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Retrieve a single page of ConferenceInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function page\n   * @memberof Twilio.Insights.V1.ConferenceList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.conferenceSid] - The SID of the conference.\n   * @param {string} [opts.friendlyName] - Custom label for the conference.\n   * @param {string} [opts.status] - Conference status.\n   * @param {string} [opts.createdAfter] - Conferences created after timestamp.\n   * @param {string} [opts.createdBefore] - Conferences created before timestamp.\n   * @param {string} [opts.mixerRegion] - Region where the conference was mixed.\n   * @param {string} [opts.tags] - Tags applied by Twilio for common issues.\n   * @param {string} [opts.subaccount] - Account SID for the subaccount.\n   * @param {string} [opts.detectedIssues] -\n   *          Potential issues detected during the conference.\n   * @param {string} [opts.endReason] - Conference end reason.\n   * @param {string} [opts.pageToken] - PageToken provided by the API\n   * @param {number} [opts.pageNumber] -\n   *          Page Number, this value is simply for client state\n   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  ConferenceListInstance.page = function page(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n    var deferred = Q.defer();\n    var data = values.of({\n      'ConferenceSid': _.get(opts, 'conferenceSid'),\n      'FriendlyName': _.get(opts, 'friendlyName'),\n      'Status': _.get(opts, 'status'),\n      'CreatedAfter': _.get(opts, 'createdAfter'),\n      'CreatedBefore': _.get(opts, 'createdBefore'),\n      'MixerRegion': _.get(opts, 'mixerRegion'),\n      'Tags': _.get(opts, 'tags'),\n      'Subaccount': _.get(opts, 'subaccount'),\n      'DetectedIssues': _.get(opts, 'detectedIssues'),\n      'EndReason': _.get(opts, 'endReason'),\n      'PageToken': opts.pageToken,\n      'Page': opts.pageNumber,\n      'PageSize': opts.pageSize\n    });\n\n    var promise = this._version.page({\n      uri: this._uri,\n      method: 'GET',\n      params: data\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new ConferencePage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Retrieve a single target page of ConferenceInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function getPage\n   * @memberof Twilio.Insights.V1.ConferenceList#\n   *\n   * @param {string} [targetUrl] - API-generated URL for the requested results page\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  ConferenceListInstance.getPage = function getPage(targetUrl, callback) {\n    var deferred = Q.defer();\n\n    var promise = this._version._domain.twilio.request({\n      method: 'GET',\n      uri: targetUrl\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new ConferencePage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Constructs a conference\n   *\n   * @function get\n   * @memberof Twilio.Insights.V1.ConferenceList#\n   *\n   * @param {string} conferenceSid - Conference SID.\n   *\n   * @returns {Twilio.Insights.V1.ConferenceContext}\n   */\n\n  /* jshint ignore:end */\n\n\n  ConferenceListInstance.get = function get(conferenceSid) {\n    return new ConferenceContext(this._version, conferenceSid);\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Insights.V1.ConferenceList#\n   *\n   * @returns Object\n   */\n\n  /* jshint ignore:end */\n\n\n  ConferenceListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n\n  ConferenceListInstance[util.inspect.custom] = function inspect(depth, options) {\n    return util.inspect(this.toJSON(), options);\n  };\n\n  return ConferenceListInstance;\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the ConferencePage\n *\n * @constructor Twilio.Insights.V1.ConferencePage\n *\n * @param {V1} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {ConferenceSolution} solution - Path solution\n *\n * @returns ConferencePage\n */\n\n/* jshint ignore:end */\n\n\nConferencePage = function ConferencePage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n\n_.extend(ConferencePage.prototype, Page.prototype);\n\nConferencePage.prototype.constructor = ConferencePage;\n/* jshint ignore:start */\n\n/**\n * Build an instance of ConferenceInstance\n *\n * @function getInstance\n * @memberof Twilio.Insights.V1.ConferencePage#\n *\n * @param {ConferencePayload} payload - Payload response from the API\n *\n * @returns ConferenceInstance\n */\n\n/* jshint ignore:end */\n\nConferencePage.prototype.getInstance = function getInstance(payload) {\n  return new ConferenceInstance(this._version, payload);\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Insights.V1.ConferencePage#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nConferencePage.prototype.toJSON = function toJSON() {\n  let clone = {};\n\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n\n  return clone;\n};\n\nConferencePage.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the ConferenceContext\n *\n * @constructor Twilio.Insights.V1.ConferenceInstance\n *\n * @property {string} conferenceSid - Conference SID.\n * @property {string} accountSid - Account SID.\n * @property {string} friendlyName - Custom label for the conference.\n * @property {Date} createTime - Conference creation date/time.\n * @property {Date} startTime -\n *          Timestamp in ISO 8601 format when the conference started.\n * @property {Date} endTime - Conference end date/time.\n * @property {number} durationSeconds - Conference duration in seconds.\n * @property {number} connectDurationSeconds -\n *          Duration of the conference in seconds.\n * @property {conference.conference_status} status - Status of conference\n * @property {number} maxParticipants - Max participants specified in config.\n * @property {number} maxConcurrentParticipants -\n *          Actual maximum concurrent participants.\n * @property {number} uniqueParticipants - Unique conference participants.\n * @property {conference.conference_end_reason} endReason - Conference end reason.\n * @property {string} endedBy - Call SID that ended the conference.\n * @property {conference.region} mixerRegion -\n *          Region where the conference was mixed.\n * @property {conference.region} mixerRegionRequested -\n *          Configuration-requested conference mixer region.\n * @property {boolean} recordingEnabled -\n *          Boolean. Indicates whether recording was enabled.\n * @property {object} detectedIssues -\n *          Potential issues detected during the conference.\n * @property {conference.tag} tags -\n *          Tags for detected conference conditions and participant behaviors.\n * @property {object} tagInfo - Object. Contains details about conference tags.\n * @property {conference.processing_state} processingState -\n *          Processing state for the Conference Summary resource.\n * @property {string} url - The URL of this resource.\n * @property {string} links - Nested resource URLs.\n *\n * @param {V1} version - Version of the resource\n * @param {ConferencePayload} payload - The instance payload\n * @param {sid} conferenceSid - Conference SID.\n */\n\n/* jshint ignore:end */\n\n\nConferenceInstance = function ConferenceInstance(version, payload, conferenceSid) {\n  this._version = version; // Marshaled Properties\n\n  this.conferenceSid = payload.conference_sid; // jshint ignore:line\n\n  this.accountSid = payload.account_sid; // jshint ignore:line\n\n  this.friendlyName = payload.friendly_name; // jshint ignore:line\n\n  this.createTime = deserialize.iso8601DateTime(payload.create_time); // jshint ignore:line\n\n  this.startTime = deserialize.iso8601DateTime(payload.start_time); // jshint ignore:line\n\n  this.endTime = deserialize.iso8601DateTime(payload.end_time); // jshint ignore:line\n\n  this.durationSeconds = deserialize.integer(payload.duration_seconds); // jshint ignore:line\n\n  this.connectDurationSeconds = deserialize.integer(payload.connect_duration_seconds); // jshint ignore:line\n\n  this.status = payload.status; // jshint ignore:line\n\n  this.maxParticipants = deserialize.integer(payload.max_participants); // jshint ignore:line\n\n  this.maxConcurrentParticipants = deserialize.integer(payload.max_concurrent_participants); // jshint ignore:line\n\n  this.uniqueParticipants = deserialize.integer(payload.unique_participants); // jshint ignore:line\n\n  this.endReason = payload.end_reason; // jshint ignore:line\n\n  this.endedBy = payload.ended_by; // jshint ignore:line\n\n  this.mixerRegion = payload.mixer_region; // jshint ignore:line\n\n  this.mixerRegionRequested = payload.mixer_region_requested; // jshint ignore:line\n\n  this.recordingEnabled = payload.recording_enabled; // jshint ignore:line\n\n  this.detectedIssues = payload.detected_issues; // jshint ignore:line\n\n  this.tags = payload.tags; // jshint ignore:line\n\n  this.tagInfo = payload.tag_info; // jshint ignore:line\n\n  this.processingState = payload.processing_state; // jshint ignore:line\n\n  this.url = payload.url; // jshint ignore:line\n\n  this.links = payload.links; // jshint ignore:line\n  // Context\n\n  this._context = undefined;\n  this._solution = {\n    conferenceSid: conferenceSid || this.conferenceSid\n  };\n};\n\nObject.defineProperty(ConferenceInstance.prototype, '_proxy', {\n  get: function () {\n    if (!this._context) {\n      this._context = new ConferenceContext(this._version, this._solution.conferenceSid);\n    }\n\n    return this._context;\n  }\n});\n/* jshint ignore:start */\n\n/**\n * fetch a ConferenceInstance\n *\n * @function fetch\n * @memberof Twilio.Insights.V1.ConferenceInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed ConferenceInstance\n */\n\n/* jshint ignore:end */\n\nConferenceInstance.prototype.fetch = function fetch(callback) {\n  return this._proxy.fetch(callback);\n};\n/* jshint ignore:start */\n\n/**\n * Access the conferenceParticipants\n *\n * @function conferenceParticipants\n * @memberof Twilio.Insights.V1.ConferenceInstance#\n *\n * @returns {Twilio.Insights.V1.ConferenceContext.ConferenceParticipantList}\n */\n\n/* jshint ignore:end */\n\n\nConferenceInstance.prototype.conferenceParticipants = function conferenceParticipants() {\n  return this._proxy.conferenceParticipants;\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Insights.V1.ConferenceInstance#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nConferenceInstance.prototype.toJSON = function toJSON() {\n  let clone = {};\n\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n\n  return clone;\n};\n\nConferenceInstance.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the ConferenceContext\n *\n * @constructor Twilio.Insights.V1.ConferenceContext\n *\n * @property {Twilio.Insights.V1.ConferenceContext.ConferenceParticipantList} conferenceParticipants -\n *          conferenceParticipants resource\n *\n * @param {V1} version - Version of the resource\n * @param {sid} conferenceSid - Conference SID.\n */\n\n/* jshint ignore:end */\n\n\nConferenceContext = function ConferenceContext(version, conferenceSid) {\n  this._version = version; // Path Solution\n\n  this._solution = {\n    conferenceSid: conferenceSid\n  };\n  this._uri = `/Conferences/${conferenceSid}`; // Dependents\n\n  this._conferenceParticipants = undefined;\n};\n/* jshint ignore:start */\n\n/**\n * fetch a ConferenceInstance\n *\n * @function fetch\n * @memberof Twilio.Insights.V1.ConferenceContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed ConferenceInstance\n */\n\n/* jshint ignore:end */\n\n\nConferenceContext.prototype.fetch = function fetch(callback) {\n  var deferred = Q.defer();\n\n  var promise = this._version.fetch({\n    uri: this._uri,\n    method: 'GET'\n  });\n\n  promise = promise.then(function (payload) {\n    deferred.resolve(new ConferenceInstance(this._version, payload, this._solution.conferenceSid));\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\nObject.defineProperty(ConferenceContext.prototype, 'conferenceParticipants', {\n  get: function () {\n    if (!this._conferenceParticipants) {\n      this._conferenceParticipants = new ConferenceParticipantList(this._version, this._solution.conferenceSid);\n    }\n\n    return this._conferenceParticipants;\n  }\n});\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Insights.V1.ConferenceContext#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\nConferenceContext.prototype.toJSON = function toJSON() {\n  return this._solution;\n};\n\nConferenceContext.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\nmodule.exports = {\n  ConferenceList: ConferenceList,\n  ConferencePage: ConferencePage,\n  ConferenceInstance: ConferenceInstance,\n  ConferenceContext: ConferenceContext\n};","map":{"version":3,"names":["Q","require","_","util","ConferenceParticipantList","Page","deserialize","values","ConferenceList","ConferencePage","ConferenceInstance","ConferenceContext","version","ConferenceListInstance","sid","get","_version","_solution","_uri","each","opts","callback","isFunction","isUndefined","Error","done","currentPage","currentResource","limits","readLimits","limit","pageSize","onComplete","error","fetchNextPage","fn","promise","then","page","instances","instance","bind","nextPage","catch","merge","list","deferred","defer","allResources","resource","push","length","resolve","reject","nodeify","data","of","pageToken","pageNumber","uri","method","params","payload","getPage","targetUrl","_domain","twilio","request","conferenceSid","toJSON","inspect","custom","depth","options","response","solution","prototype","constructor","call","extend","getInstance","clone","forOwn","value","key","startsWith","conference_sid","accountSid","account_sid","friendlyName","friendly_name","createTime","iso8601DateTime","create_time","startTime","start_time","endTime","end_time","durationSeconds","integer","duration_seconds","connectDurationSeconds","connect_duration_seconds","status","maxParticipants","max_participants","maxConcurrentParticipants","max_concurrent_participants","uniqueParticipants","unique_participants","endReason","end_reason","endedBy","ended_by","mixerRegion","mixer_region","mixerRegionRequested","mixer_region_requested","recordingEnabled","recording_enabled","detectedIssues","detected_issues","tags","tagInfo","tag_info","processingState","processing_state","url","links","_context","undefined","Object","defineProperty","fetch","_proxy","conferenceParticipants","_conferenceParticipants","module","exports"],"sources":["/Users/hooniesun/rmit/fwp/assessment1/lan/node_modules/twilio/lib/rest/insights/v1/conference.js"],"sourcesContent":["'use strict';\n\n/* jshint ignore:start */\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n/* jshint ignore:end */\n\nvar Q = require('q');  /* jshint ignore:line */\nvar _ = require('lodash');  /* jshint ignore:line */\nvar util = require('util');  /* jshint ignore:line */\nvar ConferenceParticipantList = require(\n    './conference/conferenceParticipant').ConferenceParticipantList;\nvar Page = require('../../../base/Page');  /* jshint ignore:line */\nvar deserialize = require(\n    '../../../base/deserialize');  /* jshint ignore:line */\nvar values = require('../../../base/values');  /* jshint ignore:line */\n\nvar ConferenceList;\nvar ConferencePage;\nvar ConferenceInstance;\nvar ConferenceContext;\n\n/* jshint ignore:start */\n/**\n * Initialize the ConferenceList\n *\n * @constructor Twilio.Insights.V1.ConferenceList\n *\n * @param {Twilio.Insights.V1} version - Version of the resource\n */\n/* jshint ignore:end */\nConferenceList = function ConferenceList(version) {\n  /* jshint ignore:start */\n  /**\n   * @function conferences\n   * @memberof Twilio.Insights.V1#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Insights.V1.ConferenceContext}\n   */\n  /* jshint ignore:end */\n  function ConferenceListInstance(sid) {\n    return ConferenceListInstance.get(sid);\n  }\n\n  ConferenceListInstance._version = version;\n  // Path Solution\n  ConferenceListInstance._solution = {};\n  ConferenceListInstance._uri = `/Conferences`;\n  /* jshint ignore:start */\n  /**\n   * Streams ConferenceInstance records from the API.\n   *\n   * This operation lazily loads records as efficiently as possible until the limit\n   * is reached.\n   *\n   * The results are passed into the callback function, so this operation is memory\n   * efficient.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function each\n   * @memberof Twilio.Insights.V1.ConferenceList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.conferenceSid] - The SID of the conference.\n   * @param {string} [opts.friendlyName] - Custom label for the conference.\n   * @param {string} [opts.status] - Conference status.\n   * @param {string} [opts.createdAfter] - Conferences created after timestamp.\n   * @param {string} [opts.createdBefore] - Conferences created before timestamp.\n   * @param {string} [opts.mixerRegion] - Region where the conference was mixed.\n   * @param {string} [opts.tags] - Tags applied by Twilio for common issues.\n   * @param {string} [opts.subaccount] - Account SID for the subaccount.\n   * @param {string} [opts.detectedIssues] -\n   *          Potential issues detected during the conference.\n   * @param {string} [opts.endReason] - Conference end reason.\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         each() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no pageSize is defined but a limit is defined,\n   *         each() will attempt to read the limit with the most efficient\n   *         page size, i.e. min(limit, 1000)\n   * @param {Function} [opts.callback] -\n   *         Function to process each record. If this and a positional\n   *         callback are passed, this one will be used\n   * @param {Function} [opts.done] -\n   *          Function to be called upon completion of streaming\n   * @param {Function} [callback] - Function to process each record\n   */\n  /* jshint ignore:end */\n  ConferenceListInstance.each = function each(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    if (opts.callback) {\n      callback = opts.callback;\n    }\n    if (_.isUndefined(callback)) {\n      throw new Error('Callback function must be provided');\n    }\n\n    var done = false;\n    var currentPage = 1;\n    var currentResource = 0;\n    var limits = this._version.readLimits({\n      limit: opts.limit,\n      pageSize: opts.pageSize\n    });\n\n    function onComplete(error) {\n      done = true;\n      if (_.isFunction(opts.done)) {\n        opts.done(error);\n      }\n    }\n\n    function fetchNextPage(fn) {\n      var promise = fn();\n      if (_.isUndefined(promise)) {\n        onComplete();\n        return;\n      }\n\n      promise.then(function(page) {\n        _.each(page.instances, function(instance) {\n          if (done || (!_.isUndefined(opts.limit) && currentResource >= opts.limit)) {\n            done = true;\n            return false;\n          }\n\n          currentResource++;\n          callback(instance, onComplete);\n        });\n\n        if (!done) {\n          currentPage++;\n          fetchNextPage(_.bind(page.nextPage, page));\n        } else {\n          onComplete();\n        }\n      });\n\n      promise.catch(onComplete);\n    }\n\n    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Lists ConferenceInstance records from the API as a list.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function list\n   * @memberof Twilio.Insights.V1.ConferenceList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.conferenceSid] - The SID of the conference.\n   * @param {string} [opts.friendlyName] - Custom label for the conference.\n   * @param {string} [opts.status] - Conference status.\n   * @param {string} [opts.createdAfter] - Conferences created after timestamp.\n   * @param {string} [opts.createdBefore] - Conferences created before timestamp.\n   * @param {string} [opts.mixerRegion] - Region where the conference was mixed.\n   * @param {string} [opts.tags] - Tags applied by Twilio for common issues.\n   * @param {string} [opts.subaccount] - Account SID for the subaccount.\n   * @param {string} [opts.detectedIssues] -\n   *          Potential issues detected during the conference.\n   * @param {string} [opts.endReason] - Conference end reason.\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         list() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no page_size is defined but a limit is defined,\n   *         list() will attempt to read the limit with the most\n   *         efficient page size, i.e. min(limit, 1000)\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  ConferenceListInstance.list = function list(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    var deferred = Q.defer();\n    var allResources = [];\n    opts.callback = function(resource, done) {\n      allResources.push(resource);\n\n      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {\n        done();\n      }\n    };\n\n    opts.done = function(error) {\n      if (_.isUndefined(error)) {\n        deferred.resolve(allResources);\n      } else {\n        deferred.reject(error);\n      }\n    };\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    this.each(opts);\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single page of ConferenceInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function page\n   * @memberof Twilio.Insights.V1.ConferenceList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.conferenceSid] - The SID of the conference.\n   * @param {string} [opts.friendlyName] - Custom label for the conference.\n   * @param {string} [opts.status] - Conference status.\n   * @param {string} [opts.createdAfter] - Conferences created after timestamp.\n   * @param {string} [opts.createdBefore] - Conferences created before timestamp.\n   * @param {string} [opts.mixerRegion] - Region where the conference was mixed.\n   * @param {string} [opts.tags] - Tags applied by Twilio for common issues.\n   * @param {string} [opts.subaccount] - Account SID for the subaccount.\n   * @param {string} [opts.detectedIssues] -\n   *          Potential issues detected during the conference.\n   * @param {string} [opts.endReason] - Conference end reason.\n   * @param {string} [opts.pageToken] - PageToken provided by the API\n   * @param {number} [opts.pageNumber] -\n   *          Page Number, this value is simply for client state\n   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  ConferenceListInstance.page = function page(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n\n    var deferred = Q.defer();\n    var data = values.of({\n      'ConferenceSid': _.get(opts, 'conferenceSid'),\n      'FriendlyName': _.get(opts, 'friendlyName'),\n      'Status': _.get(opts, 'status'),\n      'CreatedAfter': _.get(opts, 'createdAfter'),\n      'CreatedBefore': _.get(opts, 'createdBefore'),\n      'MixerRegion': _.get(opts, 'mixerRegion'),\n      'Tags': _.get(opts, 'tags'),\n      'Subaccount': _.get(opts, 'subaccount'),\n      'DetectedIssues': _.get(opts, 'detectedIssues'),\n      'EndReason': _.get(opts, 'endReason'),\n      'PageToken': opts.pageToken,\n      'Page': opts.pageNumber,\n      'PageSize': opts.pageSize\n    });\n\n    var promise = this._version.page({uri: this._uri, method: 'GET', params: data});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new ConferencePage(this._version, payload, this._solution));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single target page of ConferenceInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function getPage\n   * @memberof Twilio.Insights.V1.ConferenceList#\n   *\n   * @param {string} [targetUrl] - API-generated URL for the requested results page\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  ConferenceListInstance.getPage = function getPage(targetUrl, callback) {\n    var deferred = Q.defer();\n\n    var promise = this._version._domain.twilio.request({method: 'GET', uri: targetUrl});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new ConferencePage(this._version, payload, this._solution));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Constructs a conference\n   *\n   * @function get\n   * @memberof Twilio.Insights.V1.ConferenceList#\n   *\n   * @param {string} conferenceSid - Conference SID.\n   *\n   * @returns {Twilio.Insights.V1.ConferenceContext}\n   */\n  /* jshint ignore:end */\n  ConferenceListInstance.get = function get(conferenceSid) {\n    return new ConferenceContext(this._version, conferenceSid);\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Insights.V1.ConferenceList#\n   *\n   * @returns Object\n   */\n  /* jshint ignore:end */\n  ConferenceListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n\n  ConferenceListInstance[util.inspect.custom] = function inspect(depth, options) {\n    return util.inspect(this.toJSON(), options);\n  };\n\n  return ConferenceListInstance;\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the ConferencePage\n *\n * @constructor Twilio.Insights.V1.ConferencePage\n *\n * @param {V1} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {ConferenceSolution} solution - Path solution\n *\n * @returns ConferencePage\n */\n/* jshint ignore:end */\nConferencePage = function ConferencePage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n\n_.extend(ConferencePage.prototype, Page.prototype);\nConferencePage.prototype.constructor = ConferencePage;\n\n/* jshint ignore:start */\n/**\n * Build an instance of ConferenceInstance\n *\n * @function getInstance\n * @memberof Twilio.Insights.V1.ConferencePage#\n *\n * @param {ConferencePayload} payload - Payload response from the API\n *\n * @returns ConferenceInstance\n */\n/* jshint ignore:end */\nConferencePage.prototype.getInstance = function getInstance(payload) {\n  return new ConferenceInstance(this._version, payload);\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Insights.V1.ConferencePage#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nConferencePage.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function(value, key) {\n    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\n\nConferencePage.prototype[util.inspect.custom] = function inspect(depth, options)\n    {\n  return util.inspect(this.toJSON(), options);\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the ConferenceContext\n *\n * @constructor Twilio.Insights.V1.ConferenceInstance\n *\n * @property {string} conferenceSid - Conference SID.\n * @property {string} accountSid - Account SID.\n * @property {string} friendlyName - Custom label for the conference.\n * @property {Date} createTime - Conference creation date/time.\n * @property {Date} startTime -\n *          Timestamp in ISO 8601 format when the conference started.\n * @property {Date} endTime - Conference end date/time.\n * @property {number} durationSeconds - Conference duration in seconds.\n * @property {number} connectDurationSeconds -\n *          Duration of the conference in seconds.\n * @property {conference.conference_status} status - Status of conference\n * @property {number} maxParticipants - Max participants specified in config.\n * @property {number} maxConcurrentParticipants -\n *          Actual maximum concurrent participants.\n * @property {number} uniqueParticipants - Unique conference participants.\n * @property {conference.conference_end_reason} endReason - Conference end reason.\n * @property {string} endedBy - Call SID that ended the conference.\n * @property {conference.region} mixerRegion -\n *          Region where the conference was mixed.\n * @property {conference.region} mixerRegionRequested -\n *          Configuration-requested conference mixer region.\n * @property {boolean} recordingEnabled -\n *          Boolean. Indicates whether recording was enabled.\n * @property {object} detectedIssues -\n *          Potential issues detected during the conference.\n * @property {conference.tag} tags -\n *          Tags for detected conference conditions and participant behaviors.\n * @property {object} tagInfo - Object. Contains details about conference tags.\n * @property {conference.processing_state} processingState -\n *          Processing state for the Conference Summary resource.\n * @property {string} url - The URL of this resource.\n * @property {string} links - Nested resource URLs.\n *\n * @param {V1} version - Version of the resource\n * @param {ConferencePayload} payload - The instance payload\n * @param {sid} conferenceSid - Conference SID.\n */\n/* jshint ignore:end */\nConferenceInstance = function ConferenceInstance(version, payload,\n                                                  conferenceSid) {\n  this._version = version;\n\n  // Marshaled Properties\n  this.conferenceSid = payload.conference_sid; // jshint ignore:line\n  this.accountSid = payload.account_sid; // jshint ignore:line\n  this.friendlyName = payload.friendly_name; // jshint ignore:line\n  this.createTime = deserialize.iso8601DateTime(payload.create_time); // jshint ignore:line\n  this.startTime = deserialize.iso8601DateTime(payload.start_time); // jshint ignore:line\n  this.endTime = deserialize.iso8601DateTime(payload.end_time); // jshint ignore:line\n  this.durationSeconds = deserialize.integer(payload.duration_seconds); // jshint ignore:line\n  this.connectDurationSeconds = deserialize.integer(payload.connect_duration_seconds); // jshint ignore:line\n  this.status = payload.status; // jshint ignore:line\n  this.maxParticipants = deserialize.integer(payload.max_participants); // jshint ignore:line\n  this.maxConcurrentParticipants = deserialize.integer(payload.max_concurrent_participants); // jshint ignore:line\n  this.uniqueParticipants = deserialize.integer(payload.unique_participants); // jshint ignore:line\n  this.endReason = payload.end_reason; // jshint ignore:line\n  this.endedBy = payload.ended_by; // jshint ignore:line\n  this.mixerRegion = payload.mixer_region; // jshint ignore:line\n  this.mixerRegionRequested = payload.mixer_region_requested; // jshint ignore:line\n  this.recordingEnabled = payload.recording_enabled; // jshint ignore:line\n  this.detectedIssues = payload.detected_issues; // jshint ignore:line\n  this.tags = payload.tags; // jshint ignore:line\n  this.tagInfo = payload.tag_info; // jshint ignore:line\n  this.processingState = payload.processing_state; // jshint ignore:line\n  this.url = payload.url; // jshint ignore:line\n  this.links = payload.links; // jshint ignore:line\n\n  // Context\n  this._context = undefined;\n  this._solution = {conferenceSid: conferenceSid || this.conferenceSid, };\n};\n\nObject.defineProperty(ConferenceInstance.prototype,\n  '_proxy', {\n    get: function() {\n      if (!this._context) {\n        this._context = new ConferenceContext(this._version, this._solution.conferenceSid);\n      }\n\n      return this._context;\n    }\n});\n\n/* jshint ignore:start */\n/**\n * fetch a ConferenceInstance\n *\n * @function fetch\n * @memberof Twilio.Insights.V1.ConferenceInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed ConferenceInstance\n */\n/* jshint ignore:end */\nConferenceInstance.prototype.fetch = function fetch(callback) {\n  return this._proxy.fetch(callback);\n};\n\n/* jshint ignore:start */\n/**\n * Access the conferenceParticipants\n *\n * @function conferenceParticipants\n * @memberof Twilio.Insights.V1.ConferenceInstance#\n *\n * @returns {Twilio.Insights.V1.ConferenceContext.ConferenceParticipantList}\n */\n/* jshint ignore:end */\nConferenceInstance.prototype.conferenceParticipants = function\n    conferenceParticipants() {\n  return this._proxy.conferenceParticipants;\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Insights.V1.ConferenceInstance#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nConferenceInstance.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function(value, key) {\n    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\n\nConferenceInstance.prototype[util.inspect.custom] = function inspect(depth,\n    options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the ConferenceContext\n *\n * @constructor Twilio.Insights.V1.ConferenceContext\n *\n * @property {Twilio.Insights.V1.ConferenceContext.ConferenceParticipantList} conferenceParticipants -\n *          conferenceParticipants resource\n *\n * @param {V1} version - Version of the resource\n * @param {sid} conferenceSid - Conference SID.\n */\n/* jshint ignore:end */\nConferenceContext = function ConferenceContext(version, conferenceSid) {\n  this._version = version;\n\n  // Path Solution\n  this._solution = {conferenceSid: conferenceSid, };\n  this._uri = `/Conferences/${conferenceSid}`;\n\n  // Dependents\n  this._conferenceParticipants = undefined;\n};\n\n/* jshint ignore:start */\n/**\n * fetch a ConferenceInstance\n *\n * @function fetch\n * @memberof Twilio.Insights.V1.ConferenceContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed ConferenceInstance\n */\n/* jshint ignore:end */\nConferenceContext.prototype.fetch = function fetch(callback) {\n  var deferred = Q.defer();\n  var promise = this._version.fetch({uri: this._uri, method: 'GET'});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(new ConferenceInstance(this._version, payload, this._solution.conferenceSid));\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\nObject.defineProperty(ConferenceContext.prototype,\n  'conferenceParticipants', {\n    get: function() {\n      if (!this._conferenceParticipants) {\n        this._conferenceParticipants = new ConferenceParticipantList(\n          this._version,\n          this._solution.conferenceSid\n        );\n      }\n      return this._conferenceParticipants;\n    }\n});\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Insights.V1.ConferenceContext#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nConferenceContext.prototype.toJSON = function toJSON() {\n  return this._solution;\n};\n\nConferenceContext.prototype[util.inspect.custom] = function inspect(depth,\n    options) {\n  return util.inspect(this.toJSON(), options);\n};\n\nmodule.exports = {\n  ConferenceList: ConferenceList,\n  ConferencePage: ConferencePage,\n  ConferenceInstance: ConferenceInstance,\n  ConferenceContext: ConferenceContext\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}