{"ast":null,"code":"'use strict';\n/* jshint ignore:start */\n\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n\n/* jshint ignore:end */\n\nvar Q = require('q');\n/* jshint ignore:line */\n\n\nvar _ = require('lodash');\n/* jshint ignore:line */\n\n\nvar util = require('util');\n/* jshint ignore:line */\n\n\nvar Page = require('../../../../base/Page');\n/* jshint ignore:line */\n\n\nvar PublishedTrackList = require('./roomParticipant/roomParticipantPublishedTrack').PublishedTrackList;\n\nvar SubscribeRulesList = require('./roomParticipant/roomParticipantSubscribeRule').SubscribeRulesList;\n\nvar SubscribedTrackList = require('./roomParticipant/roomParticipantSubscribedTrack').SubscribedTrackList;\n\nvar deserialize = require('../../../../base/deserialize');\n/* jshint ignore:line */\n\n\nvar serialize = require('../../../../base/serialize');\n/* jshint ignore:line */\n\n\nvar values = require('../../../../base/values');\n/* jshint ignore:line */\n\n\nvar ParticipantList;\nvar ParticipantPage;\nvar ParticipantInstance;\nvar ParticipantContext;\n/* jshint ignore:start */\n\n/**\n * Initialize the ParticipantList\n *\n * @constructor Twilio.Video.V1.RoomContext.ParticipantList\n *\n * @param {Twilio.Video.V1} version - Version of the resource\n * @param {string} roomSid - The SID of the participant's room\n */\n\n/* jshint ignore:end */\n\nParticipantList = function ParticipantList(version, roomSid) {\n  /* jshint ignore:start */\n\n  /**\n   * @function participants\n   * @memberof Twilio.Video.V1.RoomContext#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Video.V1.RoomContext.ParticipantContext}\n   */\n\n  /* jshint ignore:end */\n  function ParticipantListInstance(sid) {\n    return ParticipantListInstance.get(sid);\n  }\n\n  ParticipantListInstance._version = version; // Path Solution\n\n  ParticipantListInstance._solution = {\n    roomSid: roomSid\n  };\n  ParticipantListInstance._uri = `/Rooms/${roomSid}/Participants`;\n  /* jshint ignore:start */\n\n  /**\n   * Streams ParticipantInstance records from the API.\n   *\n   * This operation lazily loads records as efficiently as possible until the limit\n   * is reached.\n   *\n   * The results are passed into the callback function, so this operation is memory\n   * efficient.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function each\n   * @memberof Twilio.Video.V1.RoomContext.ParticipantList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {participant.status} [opts.status] -\n   *          Read only the participants with this status\n   * @param {string} [opts.identity] -\n   *          Read only the Participants with this user identity value\n   * @param {Date} [opts.dateCreatedAfter] -\n   *          Read only Participants that started after this date in UTC ISO 8601 format\n   * @param {Date} [opts.dateCreatedBefore] -\n   *          Read only Participants that started before this date in ISO 8601 format\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         each() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no pageSize is defined but a limit is defined,\n   *         each() will attempt to read the limit with the most efficient\n   *         page size, i.e. min(limit, 1000)\n   * @param {Function} [opts.callback] -\n   *         Function to process each record. If this and a positional\n   *         callback are passed, this one will be used\n   * @param {Function} [opts.done] -\n   *          Function to be called upon completion of streaming\n   * @param {Function} [callback] - Function to process each record\n   */\n\n  /* jshint ignore:end */\n\n  ParticipantListInstance.each = function each(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n\n    if (opts.callback) {\n      callback = opts.callback;\n    }\n\n    if (_.isUndefined(callback)) {\n      throw new Error('Callback function must be provided');\n    }\n\n    var done = false;\n    var currentPage = 1;\n    var currentResource = 0;\n\n    var limits = this._version.readLimits({\n      limit: opts.limit,\n      pageSize: opts.pageSize\n    });\n\n    function onComplete(error) {\n      done = true;\n\n      if (_.isFunction(opts.done)) {\n        opts.done(error);\n      }\n    }\n\n    function fetchNextPage(fn) {\n      var promise = fn();\n\n      if (_.isUndefined(promise)) {\n        onComplete();\n        return;\n      }\n\n      promise.then(function (page) {\n        _.each(page.instances, function (instance) {\n          if (done || !_.isUndefined(opts.limit) && currentResource >= opts.limit) {\n            done = true;\n            return false;\n          }\n\n          currentResource++;\n          callback(instance, onComplete);\n        });\n\n        if (!done) {\n          currentPage++;\n          fetchNextPage(_.bind(page.nextPage, page));\n        } else {\n          onComplete();\n        }\n      });\n      promise.catch(onComplete);\n    }\n\n    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Lists ParticipantInstance records from the API as a list.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function list\n   * @memberof Twilio.Video.V1.RoomContext.ParticipantList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {participant.status} [opts.status] -\n   *          Read only the participants with this status\n   * @param {string} [opts.identity] -\n   *          Read only the Participants with this user identity value\n   * @param {Date} [opts.dateCreatedAfter] -\n   *          Read only Participants that started after this date in UTC ISO 8601 format\n   * @param {Date} [opts.dateCreatedBefore] -\n   *          Read only Participants that started before this date in ISO 8601 format\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         list() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no page_size is defined but a limit is defined,\n   *         list() will attempt to read the limit with the most\n   *         efficient page size, i.e. min(limit, 1000)\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  ParticipantListInstance.list = function list(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n    var deferred = Q.defer();\n    var allResources = [];\n\n    opts.callback = function (resource, done) {\n      allResources.push(resource);\n\n      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {\n        done();\n      }\n    };\n\n    opts.done = function (error) {\n      if (_.isUndefined(error)) {\n        deferred.resolve(allResources);\n      } else {\n        deferred.reject(error);\n      }\n    };\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    this.each(opts);\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Retrieve a single page of ParticipantInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function page\n   * @memberof Twilio.Video.V1.RoomContext.ParticipantList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {participant.status} [opts.status] -\n   *          Read only the participants with this status\n   * @param {string} [opts.identity] -\n   *          Read only the Participants with this user identity value\n   * @param {Date} [opts.dateCreatedAfter] -\n   *          Read only Participants that started after this date in UTC ISO 8601 format\n   * @param {Date} [opts.dateCreatedBefore] -\n   *          Read only Participants that started before this date in ISO 8601 format\n   * @param {string} [opts.pageToken] - PageToken provided by the API\n   * @param {number} [opts.pageNumber] -\n   *          Page Number, this value is simply for client state\n   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  ParticipantListInstance.page = function page(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n    var deferred = Q.defer();\n    var data = values.of({\n      'Status': _.get(opts, 'status'),\n      'Identity': _.get(opts, 'identity'),\n      'DateCreatedAfter': serialize.iso8601DateTime(_.get(opts, 'dateCreatedAfter')),\n      'DateCreatedBefore': serialize.iso8601DateTime(_.get(opts, 'dateCreatedBefore')),\n      'PageToken': opts.pageToken,\n      'Page': opts.pageNumber,\n      'PageSize': opts.pageSize\n    });\n\n    var promise = this._version.page({\n      uri: this._uri,\n      method: 'GET',\n      params: data\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new ParticipantPage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Retrieve a single target page of ParticipantInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function getPage\n   * @memberof Twilio.Video.V1.RoomContext.ParticipantList#\n   *\n   * @param {string} [targetUrl] - API-generated URL for the requested results page\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  ParticipantListInstance.getPage = function getPage(targetUrl, callback) {\n    var deferred = Q.defer();\n\n    var promise = this._version._domain.twilio.request({\n      method: 'GET',\n      uri: targetUrl\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new ParticipantPage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Constructs a participant\n   *\n   * @function get\n   * @memberof Twilio.Video.V1.RoomContext.ParticipantList#\n   *\n   * @param {string} sid - The SID that identifies the resource to fetch\n   *\n   * @returns {Twilio.Video.V1.RoomContext.ParticipantContext}\n   */\n\n  /* jshint ignore:end */\n\n\n  ParticipantListInstance.get = function get(sid) {\n    return new ParticipantContext(this._version, this._solution.roomSid, sid);\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Video.V1.RoomContext.ParticipantList#\n   *\n   * @returns Object\n   */\n\n  /* jshint ignore:end */\n\n\n  ParticipantListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n\n  ParticipantListInstance[util.inspect.custom] = function inspect(depth, options) {\n    return util.inspect(this.toJSON(), options);\n  };\n\n  return ParticipantListInstance;\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the ParticipantPage\n *\n * @constructor Twilio.Video.V1.RoomContext.ParticipantPage\n *\n * @param {V1} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {ParticipantSolution} solution - Path solution\n *\n * @returns ParticipantPage\n */\n\n/* jshint ignore:end */\n\n\nParticipantPage = function ParticipantPage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n\n_.extend(ParticipantPage.prototype, Page.prototype);\n\nParticipantPage.prototype.constructor = ParticipantPage;\n/* jshint ignore:start */\n\n/**\n * Build an instance of ParticipantInstance\n *\n * @function getInstance\n * @memberof Twilio.Video.V1.RoomContext.ParticipantPage#\n *\n * @param {ParticipantPayload} payload - Payload response from the API\n *\n * @returns ParticipantInstance\n */\n\n/* jshint ignore:end */\n\nParticipantPage.prototype.getInstance = function getInstance(payload) {\n  return new ParticipantInstance(this._version, payload, this._solution.roomSid);\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Video.V1.RoomContext.ParticipantPage#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nParticipantPage.prototype.toJSON = function toJSON() {\n  let clone = {};\n\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n\n  return clone;\n};\n\nParticipantPage.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the ParticipantContext\n *\n * @constructor Twilio.Video.V1.RoomContext.ParticipantInstance\n *\n * @property {string} sid - The unique string that identifies the resource\n * @property {string} roomSid - The SID of the participant's room\n * @property {string} accountSid - The SID of the Account that created the resource\n * @property {participant.status} status - The status of the Participant\n * @property {string} identity - The string that identifies the resource's User\n * @property {Date} dateCreated -\n *          The ISO 8601 date and time in GMT when the resource was created\n * @property {Date} dateUpdated -\n *          The ISO 8601 date and time in GMT when the resource was last updated\n * @property {Date} startTime -\n *          The time of participant connected to the room in ISO 8601 format\n * @property {Date} endTime -\n *          The time when the participant disconnected from the room in ISO 8601 format\n * @property {number} duration -\n *          Duration of time in seconds the participant was connected\n * @property {string} url - The absolute URL of the resource\n * @property {string} links - The URLs of related resources\n *\n * @param {V1} version - Version of the resource\n * @param {ParticipantPayload} payload - The instance payload\n * @param {sid} roomSid - The SID of the participant's room\n * @param {sid_like} sid - The SID that identifies the resource to fetch\n */\n\n/* jshint ignore:end */\n\n\nParticipantInstance = function ParticipantInstance(version, payload, roomSid, sid) {\n  this._version = version; // Marshaled Properties\n\n  this.sid = payload.sid; // jshint ignore:line\n\n  this.roomSid = payload.room_sid; // jshint ignore:line\n\n  this.accountSid = payload.account_sid; // jshint ignore:line\n\n  this.status = payload.status; // jshint ignore:line\n\n  this.identity = payload.identity; // jshint ignore:line\n\n  this.dateCreated = deserialize.iso8601DateTime(payload.date_created); // jshint ignore:line\n\n  this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated); // jshint ignore:line\n\n  this.startTime = deserialize.iso8601DateTime(payload.start_time); // jshint ignore:line\n\n  this.endTime = deserialize.iso8601DateTime(payload.end_time); // jshint ignore:line\n\n  this.duration = deserialize.integer(payload.duration); // jshint ignore:line\n\n  this.url = payload.url; // jshint ignore:line\n\n  this.links = payload.links; // jshint ignore:line\n  // Context\n\n  this._context = undefined;\n  this._solution = {\n    roomSid: roomSid,\n    sid: sid || this.sid\n  };\n};\n\nObject.defineProperty(ParticipantInstance.prototype, '_proxy', {\n  get: function () {\n    if (!this._context) {\n      this._context = new ParticipantContext(this._version, this._solution.roomSid, this._solution.sid);\n    }\n\n    return this._context;\n  }\n});\n/* jshint ignore:start */\n\n/**\n * fetch a ParticipantInstance\n *\n * @function fetch\n * @memberof Twilio.Video.V1.RoomContext.ParticipantInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed ParticipantInstance\n */\n\n/* jshint ignore:end */\n\nParticipantInstance.prototype.fetch = function fetch(callback) {\n  return this._proxy.fetch(callback);\n};\n/* jshint ignore:start */\n\n/**\n * update a ParticipantInstance\n *\n * @function update\n * @memberof Twilio.Video.V1.RoomContext.ParticipantInstance#\n *\n * @param {object} [opts] - Options for request\n * @param {participant.status} [opts.status] - The new status of the resource\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed ParticipantInstance\n */\n\n/* jshint ignore:end */\n\n\nParticipantInstance.prototype.update = function update(opts, callback) {\n  return this._proxy.update(opts, callback);\n};\n/* jshint ignore:start */\n\n/**\n * Access the publishedTracks\n *\n * @function publishedTracks\n * @memberof Twilio.Video.V1.RoomContext.ParticipantInstance#\n *\n * @returns {Twilio.Video.V1.RoomContext.ParticipantContext.PublishedTrackList}\n */\n\n/* jshint ignore:end */\n\n\nParticipantInstance.prototype.publishedTracks = function publishedTracks() {\n  return this._proxy.publishedTracks;\n};\n/* jshint ignore:start */\n\n/**\n * Access the subscribedTracks\n *\n * @function subscribedTracks\n * @memberof Twilio.Video.V1.RoomContext.ParticipantInstance#\n *\n * @returns {Twilio.Video.V1.RoomContext.ParticipantContext.SubscribedTrackList}\n */\n\n/* jshint ignore:end */\n\n\nParticipantInstance.prototype.subscribedTracks = function subscribedTracks() {\n  return this._proxy.subscribedTracks;\n};\n/* jshint ignore:start */\n\n/**\n * Access the subscribeRules\n *\n * @function subscribeRules\n * @memberof Twilio.Video.V1.RoomContext.ParticipantInstance#\n *\n * @returns {Twilio.Video.V1.RoomContext.ParticipantContext.SubscribeRulesList}\n */\n\n/* jshint ignore:end */\n\n\nParticipantInstance.prototype.subscribeRules = function subscribeRules() {\n  return this._proxy.subscribeRules;\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Video.V1.RoomContext.ParticipantInstance#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nParticipantInstance.prototype.toJSON = function toJSON() {\n  let clone = {};\n\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n\n  return clone;\n};\n\nParticipantInstance.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the ParticipantContext\n *\n * @constructor Twilio.Video.V1.RoomContext.ParticipantContext\n *\n * @property {Twilio.Video.V1.RoomContext.ParticipantContext.PublishedTrackList} publishedTracks -\n *          publishedTracks resource\n * @property {Twilio.Video.V1.RoomContext.ParticipantContext.SubscribedTrackList} subscribedTracks -\n *          subscribedTracks resource\n * @property {Twilio.Video.V1.RoomContext.ParticipantContext.SubscribeRulesList} subscribeRules -\n *          subscribeRules resource\n *\n * @param {V1} version - Version of the resource\n * @param {sid_like} roomSid -\n *          The SID of the room with the Participant resource to fetch\n * @param {sid_like} sid - The SID that identifies the resource to fetch\n */\n\n/* jshint ignore:end */\n\n\nParticipantContext = function ParticipantContext(version, roomSid, sid) {\n  this._version = version; // Path Solution\n\n  this._solution = {\n    roomSid: roomSid,\n    sid: sid\n  };\n  this._uri = `/Rooms/${roomSid}/Participants/${sid}`; // Dependents\n\n  this._publishedTracks = undefined;\n  this._subscribedTracks = undefined;\n  this._subscribeRules = undefined;\n};\n/* jshint ignore:start */\n\n/**\n * fetch a ParticipantInstance\n *\n * @function fetch\n * @memberof Twilio.Video.V1.RoomContext.ParticipantContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed ParticipantInstance\n */\n\n/* jshint ignore:end */\n\n\nParticipantContext.prototype.fetch = function fetch(callback) {\n  var deferred = Q.defer();\n\n  var promise = this._version.fetch({\n    uri: this._uri,\n    method: 'GET'\n  });\n\n  promise = promise.then(function (payload) {\n    deferred.resolve(new ParticipantInstance(this._version, payload, this._solution.roomSid, this._solution.sid));\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n/* jshint ignore:start */\n\n/**\n * update a ParticipantInstance\n *\n * @function update\n * @memberof Twilio.Video.V1.RoomContext.ParticipantContext#\n *\n * @param {object} [opts] - Options for request\n * @param {participant.status} [opts.status] - The new status of the resource\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed ParticipantInstance\n */\n\n/* jshint ignore:end */\n\n\nParticipantContext.prototype.update = function update(opts, callback) {\n  if (_.isFunction(opts)) {\n    callback = opts;\n    opts = {};\n  }\n\n  opts = opts || {};\n  var deferred = Q.defer();\n  var data = values.of({\n    'Status': _.get(opts, 'status')\n  });\n\n  var promise = this._version.update({\n    uri: this._uri,\n    method: 'POST',\n    data: data\n  });\n\n  promise = promise.then(function (payload) {\n    deferred.resolve(new ParticipantInstance(this._version, payload, this._solution.roomSid, this._solution.sid));\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\nObject.defineProperty(ParticipantContext.prototype, 'publishedTracks', {\n  get: function () {\n    if (!this._publishedTracks) {\n      this._publishedTracks = new PublishedTrackList(this._version, this._solution.roomSid, this._solution.sid);\n    }\n\n    return this._publishedTracks;\n  }\n});\nObject.defineProperty(ParticipantContext.prototype, 'subscribedTracks', {\n  get: function () {\n    if (!this._subscribedTracks) {\n      this._subscribedTracks = new SubscribedTrackList(this._version, this._solution.roomSid, this._solution.sid);\n    }\n\n    return this._subscribedTracks;\n  }\n});\nObject.defineProperty(ParticipantContext.prototype, 'subscribeRules', {\n  get: function () {\n    if (!this._subscribeRules) {\n      this._subscribeRules = new SubscribeRulesList(this._version, this._solution.roomSid, this._solution.sid);\n    }\n\n    return this._subscribeRules;\n  }\n});\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Video.V1.RoomContext.ParticipantContext#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\nParticipantContext.prototype.toJSON = function toJSON() {\n  return this._solution;\n};\n\nParticipantContext.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\nmodule.exports = {\n  ParticipantList: ParticipantList,\n  ParticipantPage: ParticipantPage,\n  ParticipantInstance: ParticipantInstance,\n  ParticipantContext: ParticipantContext\n};","map":{"version":3,"names":["Q","require","_","util","Page","PublishedTrackList","SubscribeRulesList","SubscribedTrackList","deserialize","serialize","values","ParticipantList","ParticipantPage","ParticipantInstance","ParticipantContext","version","roomSid","ParticipantListInstance","sid","get","_version","_solution","_uri","each","opts","callback","isFunction","isUndefined","Error","done","currentPage","currentResource","limits","readLimits","limit","pageSize","onComplete","error","fetchNextPage","fn","promise","then","page","instances","instance","bind","nextPage","catch","merge","list","deferred","defer","allResources","resource","push","length","resolve","reject","nodeify","data","of","iso8601DateTime","pageToken","pageNumber","uri","method","params","payload","getPage","targetUrl","_domain","twilio","request","toJSON","inspect","custom","depth","options","response","solution","prototype","constructor","call","extend","getInstance","clone","forOwn","value","key","startsWith","room_sid","accountSid","account_sid","status","identity","dateCreated","date_created","dateUpdated","date_updated","startTime","start_time","endTime","end_time","duration","integer","url","links","_context","undefined","Object","defineProperty","fetch","_proxy","update","publishedTracks","subscribedTracks","subscribeRules","_publishedTracks","_subscribedTracks","_subscribeRules","module","exports"],"sources":["/Users/hooniesun/rmit/fwp/assessment1/lan/node_modules/twilio/lib/rest/video/v1/room/roomParticipant.js"],"sourcesContent":["'use strict';\n\n/* jshint ignore:start */\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n/* jshint ignore:end */\n\nvar Q = require('q');  /* jshint ignore:line */\nvar _ = require('lodash');  /* jshint ignore:line */\nvar util = require('util');  /* jshint ignore:line */\nvar Page = require('../../../../base/Page');  /* jshint ignore:line */\nvar PublishedTrackList = require(\n    './roomParticipant/roomParticipantPublishedTrack').PublishedTrackList;\nvar SubscribeRulesList = require(\n    './roomParticipant/roomParticipantSubscribeRule').SubscribeRulesList;\nvar SubscribedTrackList = require(\n    './roomParticipant/roomParticipantSubscribedTrack').SubscribedTrackList;\nvar deserialize = require(\n    '../../../../base/deserialize');  /* jshint ignore:line */\nvar serialize = require('../../../../base/serialize');  /* jshint ignore:line */\nvar values = require('../../../../base/values');  /* jshint ignore:line */\n\nvar ParticipantList;\nvar ParticipantPage;\nvar ParticipantInstance;\nvar ParticipantContext;\n\n/* jshint ignore:start */\n/**\n * Initialize the ParticipantList\n *\n * @constructor Twilio.Video.V1.RoomContext.ParticipantList\n *\n * @param {Twilio.Video.V1} version - Version of the resource\n * @param {string} roomSid - The SID of the participant's room\n */\n/* jshint ignore:end */\nParticipantList = function ParticipantList(version, roomSid) {\n  /* jshint ignore:start */\n  /**\n   * @function participants\n   * @memberof Twilio.Video.V1.RoomContext#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Video.V1.RoomContext.ParticipantContext}\n   */\n  /* jshint ignore:end */\n  function ParticipantListInstance(sid) {\n    return ParticipantListInstance.get(sid);\n  }\n\n  ParticipantListInstance._version = version;\n  // Path Solution\n  ParticipantListInstance._solution = {roomSid: roomSid};\n  ParticipantListInstance._uri = `/Rooms/${roomSid}/Participants`;\n  /* jshint ignore:start */\n  /**\n   * Streams ParticipantInstance records from the API.\n   *\n   * This operation lazily loads records as efficiently as possible until the limit\n   * is reached.\n   *\n   * The results are passed into the callback function, so this operation is memory\n   * efficient.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function each\n   * @memberof Twilio.Video.V1.RoomContext.ParticipantList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {participant.status} [opts.status] -\n   *          Read only the participants with this status\n   * @param {string} [opts.identity] -\n   *          Read only the Participants with this user identity value\n   * @param {Date} [opts.dateCreatedAfter] -\n   *          Read only Participants that started after this date in UTC ISO 8601 format\n   * @param {Date} [opts.dateCreatedBefore] -\n   *          Read only Participants that started before this date in ISO 8601 format\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         each() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no pageSize is defined but a limit is defined,\n   *         each() will attempt to read the limit with the most efficient\n   *         page size, i.e. min(limit, 1000)\n   * @param {Function} [opts.callback] -\n   *         Function to process each record. If this and a positional\n   *         callback are passed, this one will be used\n   * @param {Function} [opts.done] -\n   *          Function to be called upon completion of streaming\n   * @param {Function} [callback] - Function to process each record\n   */\n  /* jshint ignore:end */\n  ParticipantListInstance.each = function each(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    if (opts.callback) {\n      callback = opts.callback;\n    }\n    if (_.isUndefined(callback)) {\n      throw new Error('Callback function must be provided');\n    }\n\n    var done = false;\n    var currentPage = 1;\n    var currentResource = 0;\n    var limits = this._version.readLimits({\n      limit: opts.limit,\n      pageSize: opts.pageSize\n    });\n\n    function onComplete(error) {\n      done = true;\n      if (_.isFunction(opts.done)) {\n        opts.done(error);\n      }\n    }\n\n    function fetchNextPage(fn) {\n      var promise = fn();\n      if (_.isUndefined(promise)) {\n        onComplete();\n        return;\n      }\n\n      promise.then(function(page) {\n        _.each(page.instances, function(instance) {\n          if (done || (!_.isUndefined(opts.limit) && currentResource >= opts.limit)) {\n            done = true;\n            return false;\n          }\n\n          currentResource++;\n          callback(instance, onComplete);\n        });\n\n        if (!done) {\n          currentPage++;\n          fetchNextPage(_.bind(page.nextPage, page));\n        } else {\n          onComplete();\n        }\n      });\n\n      promise.catch(onComplete);\n    }\n\n    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Lists ParticipantInstance records from the API as a list.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function list\n   * @memberof Twilio.Video.V1.RoomContext.ParticipantList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {participant.status} [opts.status] -\n   *          Read only the participants with this status\n   * @param {string} [opts.identity] -\n   *          Read only the Participants with this user identity value\n   * @param {Date} [opts.dateCreatedAfter] -\n   *          Read only Participants that started after this date in UTC ISO 8601 format\n   * @param {Date} [opts.dateCreatedBefore] -\n   *          Read only Participants that started before this date in ISO 8601 format\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         list() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no page_size is defined but a limit is defined,\n   *         list() will attempt to read the limit with the most\n   *         efficient page size, i.e. min(limit, 1000)\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  ParticipantListInstance.list = function list(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    var deferred = Q.defer();\n    var allResources = [];\n    opts.callback = function(resource, done) {\n      allResources.push(resource);\n\n      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {\n        done();\n      }\n    };\n\n    opts.done = function(error) {\n      if (_.isUndefined(error)) {\n        deferred.resolve(allResources);\n      } else {\n        deferred.reject(error);\n      }\n    };\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    this.each(opts);\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single page of ParticipantInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function page\n   * @memberof Twilio.Video.V1.RoomContext.ParticipantList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {participant.status} [opts.status] -\n   *          Read only the participants with this status\n   * @param {string} [opts.identity] -\n   *          Read only the Participants with this user identity value\n   * @param {Date} [opts.dateCreatedAfter] -\n   *          Read only Participants that started after this date in UTC ISO 8601 format\n   * @param {Date} [opts.dateCreatedBefore] -\n   *          Read only Participants that started before this date in ISO 8601 format\n   * @param {string} [opts.pageToken] - PageToken provided by the API\n   * @param {number} [opts.pageNumber] -\n   *          Page Number, this value is simply for client state\n   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  ParticipantListInstance.page = function page(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n\n    var deferred = Q.defer();\n    var data = values.of({\n      'Status': _.get(opts, 'status'),\n      'Identity': _.get(opts, 'identity'),\n      'DateCreatedAfter': serialize.iso8601DateTime(_.get(opts, 'dateCreatedAfter')),\n      'DateCreatedBefore': serialize.iso8601DateTime(_.get(opts, 'dateCreatedBefore')),\n      'PageToken': opts.pageToken,\n      'Page': opts.pageNumber,\n      'PageSize': opts.pageSize\n    });\n\n    var promise = this._version.page({uri: this._uri, method: 'GET', params: data});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new ParticipantPage(this._version, payload, this._solution));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single target page of ParticipantInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function getPage\n   * @memberof Twilio.Video.V1.RoomContext.ParticipantList#\n   *\n   * @param {string} [targetUrl] - API-generated URL for the requested results page\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  ParticipantListInstance.getPage = function getPage(targetUrl, callback) {\n    var deferred = Q.defer();\n\n    var promise = this._version._domain.twilio.request({method: 'GET', uri: targetUrl});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new ParticipantPage(this._version, payload, this._solution));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Constructs a participant\n   *\n   * @function get\n   * @memberof Twilio.Video.V1.RoomContext.ParticipantList#\n   *\n   * @param {string} sid - The SID that identifies the resource to fetch\n   *\n   * @returns {Twilio.Video.V1.RoomContext.ParticipantContext}\n   */\n  /* jshint ignore:end */\n  ParticipantListInstance.get = function get(sid) {\n    return new ParticipantContext(this._version, this._solution.roomSid, sid);\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Video.V1.RoomContext.ParticipantList#\n   *\n   * @returns Object\n   */\n  /* jshint ignore:end */\n  ParticipantListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n\n  ParticipantListInstance[util.inspect.custom] = function inspect(depth, options)\n      {\n    return util.inspect(this.toJSON(), options);\n  };\n\n  return ParticipantListInstance;\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the ParticipantPage\n *\n * @constructor Twilio.Video.V1.RoomContext.ParticipantPage\n *\n * @param {V1} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {ParticipantSolution} solution - Path solution\n *\n * @returns ParticipantPage\n */\n/* jshint ignore:end */\nParticipantPage = function ParticipantPage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n\n_.extend(ParticipantPage.prototype, Page.prototype);\nParticipantPage.prototype.constructor = ParticipantPage;\n\n/* jshint ignore:start */\n/**\n * Build an instance of ParticipantInstance\n *\n * @function getInstance\n * @memberof Twilio.Video.V1.RoomContext.ParticipantPage#\n *\n * @param {ParticipantPayload} payload - Payload response from the API\n *\n * @returns ParticipantInstance\n */\n/* jshint ignore:end */\nParticipantPage.prototype.getInstance = function getInstance(payload) {\n  return new ParticipantInstance(this._version, payload, this._solution.roomSid);\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Video.V1.RoomContext.ParticipantPage#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nParticipantPage.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function(value, key) {\n    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\n\nParticipantPage.prototype[util.inspect.custom] = function inspect(depth,\n    options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the ParticipantContext\n *\n * @constructor Twilio.Video.V1.RoomContext.ParticipantInstance\n *\n * @property {string} sid - The unique string that identifies the resource\n * @property {string} roomSid - The SID of the participant's room\n * @property {string} accountSid - The SID of the Account that created the resource\n * @property {participant.status} status - The status of the Participant\n * @property {string} identity - The string that identifies the resource's User\n * @property {Date} dateCreated -\n *          The ISO 8601 date and time in GMT when the resource was created\n * @property {Date} dateUpdated -\n *          The ISO 8601 date and time in GMT when the resource was last updated\n * @property {Date} startTime -\n *          The time of participant connected to the room in ISO 8601 format\n * @property {Date} endTime -\n *          The time when the participant disconnected from the room in ISO 8601 format\n * @property {number} duration -\n *          Duration of time in seconds the participant was connected\n * @property {string} url - The absolute URL of the resource\n * @property {string} links - The URLs of related resources\n *\n * @param {V1} version - Version of the resource\n * @param {ParticipantPayload} payload - The instance payload\n * @param {sid} roomSid - The SID of the participant's room\n * @param {sid_like} sid - The SID that identifies the resource to fetch\n */\n/* jshint ignore:end */\nParticipantInstance = function ParticipantInstance(version, payload, roomSid,\n                                                    sid) {\n  this._version = version;\n\n  // Marshaled Properties\n  this.sid = payload.sid; // jshint ignore:line\n  this.roomSid = payload.room_sid; // jshint ignore:line\n  this.accountSid = payload.account_sid; // jshint ignore:line\n  this.status = payload.status; // jshint ignore:line\n  this.identity = payload.identity; // jshint ignore:line\n  this.dateCreated = deserialize.iso8601DateTime(payload.date_created); // jshint ignore:line\n  this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated); // jshint ignore:line\n  this.startTime = deserialize.iso8601DateTime(payload.start_time); // jshint ignore:line\n  this.endTime = deserialize.iso8601DateTime(payload.end_time); // jshint ignore:line\n  this.duration = deserialize.integer(payload.duration); // jshint ignore:line\n  this.url = payload.url; // jshint ignore:line\n  this.links = payload.links; // jshint ignore:line\n\n  // Context\n  this._context = undefined;\n  this._solution = {roomSid: roomSid, sid: sid || this.sid, };\n};\n\nObject.defineProperty(ParticipantInstance.prototype,\n  '_proxy', {\n    get: function() {\n      if (!this._context) {\n        this._context = new ParticipantContext(this._version, this._solution.roomSid, this._solution.sid);\n      }\n\n      return this._context;\n    }\n});\n\n/* jshint ignore:start */\n/**\n * fetch a ParticipantInstance\n *\n * @function fetch\n * @memberof Twilio.Video.V1.RoomContext.ParticipantInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed ParticipantInstance\n */\n/* jshint ignore:end */\nParticipantInstance.prototype.fetch = function fetch(callback) {\n  return this._proxy.fetch(callback);\n};\n\n/* jshint ignore:start */\n/**\n * update a ParticipantInstance\n *\n * @function update\n * @memberof Twilio.Video.V1.RoomContext.ParticipantInstance#\n *\n * @param {object} [opts] - Options for request\n * @param {participant.status} [opts.status] - The new status of the resource\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed ParticipantInstance\n */\n/* jshint ignore:end */\nParticipantInstance.prototype.update = function update(opts, callback) {\n  return this._proxy.update(opts, callback);\n};\n\n/* jshint ignore:start */\n/**\n * Access the publishedTracks\n *\n * @function publishedTracks\n * @memberof Twilio.Video.V1.RoomContext.ParticipantInstance#\n *\n * @returns {Twilio.Video.V1.RoomContext.ParticipantContext.PublishedTrackList}\n */\n/* jshint ignore:end */\nParticipantInstance.prototype.publishedTracks = function publishedTracks() {\n  return this._proxy.publishedTracks;\n};\n\n/* jshint ignore:start */\n/**\n * Access the subscribedTracks\n *\n * @function subscribedTracks\n * @memberof Twilio.Video.V1.RoomContext.ParticipantInstance#\n *\n * @returns {Twilio.Video.V1.RoomContext.ParticipantContext.SubscribedTrackList}\n */\n/* jshint ignore:end */\nParticipantInstance.prototype.subscribedTracks = function subscribedTracks() {\n  return this._proxy.subscribedTracks;\n};\n\n/* jshint ignore:start */\n/**\n * Access the subscribeRules\n *\n * @function subscribeRules\n * @memberof Twilio.Video.V1.RoomContext.ParticipantInstance#\n *\n * @returns {Twilio.Video.V1.RoomContext.ParticipantContext.SubscribeRulesList}\n */\n/* jshint ignore:end */\nParticipantInstance.prototype.subscribeRules = function subscribeRules() {\n  return this._proxy.subscribeRules;\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Video.V1.RoomContext.ParticipantInstance#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nParticipantInstance.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function(value, key) {\n    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\n\nParticipantInstance.prototype[util.inspect.custom] = function inspect(depth,\n    options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the ParticipantContext\n *\n * @constructor Twilio.Video.V1.RoomContext.ParticipantContext\n *\n * @property {Twilio.Video.V1.RoomContext.ParticipantContext.PublishedTrackList} publishedTracks -\n *          publishedTracks resource\n * @property {Twilio.Video.V1.RoomContext.ParticipantContext.SubscribedTrackList} subscribedTracks -\n *          subscribedTracks resource\n * @property {Twilio.Video.V1.RoomContext.ParticipantContext.SubscribeRulesList} subscribeRules -\n *          subscribeRules resource\n *\n * @param {V1} version - Version of the resource\n * @param {sid_like} roomSid -\n *          The SID of the room with the Participant resource to fetch\n * @param {sid_like} sid - The SID that identifies the resource to fetch\n */\n/* jshint ignore:end */\nParticipantContext = function ParticipantContext(version, roomSid, sid) {\n  this._version = version;\n\n  // Path Solution\n  this._solution = {roomSid: roomSid, sid: sid, };\n  this._uri = `/Rooms/${roomSid}/Participants/${sid}`;\n\n  // Dependents\n  this._publishedTracks = undefined;\n  this._subscribedTracks = undefined;\n  this._subscribeRules = undefined;\n};\n\n/* jshint ignore:start */\n/**\n * fetch a ParticipantInstance\n *\n * @function fetch\n * @memberof Twilio.Video.V1.RoomContext.ParticipantContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed ParticipantInstance\n */\n/* jshint ignore:end */\nParticipantContext.prototype.fetch = function fetch(callback) {\n  var deferred = Q.defer();\n  var promise = this._version.fetch({uri: this._uri, method: 'GET'});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(new ParticipantInstance(\n      this._version,\n      payload,\n      this._solution.roomSid,\n      this._solution.sid\n    ));\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * update a ParticipantInstance\n *\n * @function update\n * @memberof Twilio.Video.V1.RoomContext.ParticipantContext#\n *\n * @param {object} [opts] - Options for request\n * @param {participant.status} [opts.status] - The new status of the resource\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed ParticipantInstance\n */\n/* jshint ignore:end */\nParticipantContext.prototype.update = function update(opts, callback) {\n  if (_.isFunction(opts)) {\n    callback = opts;\n    opts = {};\n  }\n  opts = opts || {};\n\n  var deferred = Q.defer();\n  var data = values.of({'Status': _.get(opts, 'status')});\n\n  var promise = this._version.update({uri: this._uri, method: 'POST', data: data});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(new ParticipantInstance(\n      this._version,\n      payload,\n      this._solution.roomSid,\n      this._solution.sid\n    ));\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\nObject.defineProperty(ParticipantContext.prototype,\n  'publishedTracks', {\n    get: function() {\n      if (!this._publishedTracks) {\n        this._publishedTracks = new PublishedTrackList(\n          this._version,\n          this._solution.roomSid,\n          this._solution.sid\n        );\n      }\n      return this._publishedTracks;\n    }\n});\n\nObject.defineProperty(ParticipantContext.prototype,\n  'subscribedTracks', {\n    get: function() {\n      if (!this._subscribedTracks) {\n        this._subscribedTracks = new SubscribedTrackList(\n          this._version,\n          this._solution.roomSid,\n          this._solution.sid\n        );\n      }\n      return this._subscribedTracks;\n    }\n});\n\nObject.defineProperty(ParticipantContext.prototype,\n  'subscribeRules', {\n    get: function() {\n      if (!this._subscribeRules) {\n        this._subscribeRules = new SubscribeRulesList(\n          this._version,\n          this._solution.roomSid,\n          this._solution.sid\n        );\n      }\n      return this._subscribeRules;\n    }\n});\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Video.V1.RoomContext.ParticipantContext#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nParticipantContext.prototype.toJSON = function toJSON() {\n  return this._solution;\n};\n\nParticipantContext.prototype[util.inspect.custom] = function inspect(depth,\n    options) {\n  return util.inspect(this.toJSON(), options);\n};\n\nmodule.exports = {\n  ParticipantList: ParticipantList,\n  ParticipantPage: ParticipantPage,\n  ParticipantInstance: ParticipantInstance,\n  ParticipantContext: ParticipantContext\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}