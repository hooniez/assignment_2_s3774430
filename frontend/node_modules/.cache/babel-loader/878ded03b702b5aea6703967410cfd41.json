{"ast":null,"code":"'use strict';\n/* jshint ignore:start */\n\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n\n/* jshint ignore:end */\n\nvar Q = require('q');\n/* jshint ignore:line */\n\n\nvar _ = require('lodash');\n/* jshint ignore:line */\n\n\nvar util = require('util');\n/* jshint ignore:line */\n\n\nvar FieldList = require('./task/field').FieldList;\n\nvar Page = require('../../../../base/Page');\n/* jshint ignore:line */\n\n\nvar SampleList = require('./task/sample').SampleList;\n\nvar TaskActionsList = require('./task/taskActions').TaskActionsList;\n\nvar TaskStatisticsList = require('./task/taskStatistics').TaskStatisticsList;\n\nvar deserialize = require('../../../../base/deserialize');\n/* jshint ignore:line */\n\n\nvar serialize = require('../../../../base/serialize');\n/* jshint ignore:line */\n\n\nvar values = require('../../../../base/values');\n/* jshint ignore:line */\n\n\nvar TaskList;\nvar TaskPage;\nvar TaskInstance;\nvar TaskContext;\n/* jshint ignore:start */\n\n/**\n * Initialize the TaskList\n *\n * PLEASE NOTE that this class contains preview products that are subject to\n * change. Use them with caution. If you currently do not have developer preview\n * access, please contact help@twilio.com.\n *\n * @constructor Twilio.Preview.Understand.AssistantContext.TaskList\n *\n * @param {Twilio.Preview.Understand} version - Version of the resource\n * @param {string} assistantSid - The unique ID of the Assistant.\n */\n\n/* jshint ignore:end */\n\nTaskList = function TaskList(version, assistantSid) {\n  /* jshint ignore:start */\n\n  /**\n   * @function tasks\n   * @memberof Twilio.Preview.Understand.AssistantContext#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Preview.Understand.AssistantContext.TaskContext}\n   */\n\n  /* jshint ignore:end */\n  function TaskListInstance(sid) {\n    return TaskListInstance.get(sid);\n  }\n\n  TaskListInstance._version = version; // Path Solution\n\n  TaskListInstance._solution = {\n    assistantSid: assistantSid\n  };\n  TaskListInstance._uri = `/Assistants/${assistantSid}/Tasks`;\n  /* jshint ignore:start */\n\n  /**\n   * Streams TaskInstance records from the API.\n   *\n   * This operation lazily loads records as efficiently as possible until the limit\n   * is reached.\n   *\n   * The results are passed into the callback function, so this operation is memory\n   * efficient.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function each\n   * @memberof Twilio.Preview.Understand.AssistantContext.TaskList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         each() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no pageSize is defined but a limit is defined,\n   *         each() will attempt to read the limit with the most efficient\n   *         page size, i.e. min(limit, 1000)\n   * @param {Function} [opts.callback] -\n   *         Function to process each record. If this and a positional\n   *         callback are passed, this one will be used\n   * @param {Function} [opts.done] -\n   *          Function to be called upon completion of streaming\n   * @param {Function} [callback] - Function to process each record\n   */\n\n  /* jshint ignore:end */\n\n  TaskListInstance.each = function each(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n\n    if (opts.callback) {\n      callback = opts.callback;\n    }\n\n    if (_.isUndefined(callback)) {\n      throw new Error('Callback function must be provided');\n    }\n\n    var done = false;\n    var currentPage = 1;\n    var currentResource = 0;\n\n    var limits = this._version.readLimits({\n      limit: opts.limit,\n      pageSize: opts.pageSize\n    });\n\n    function onComplete(error) {\n      done = true;\n\n      if (_.isFunction(opts.done)) {\n        opts.done(error);\n      }\n    }\n\n    function fetchNextPage(fn) {\n      var promise = fn();\n\n      if (_.isUndefined(promise)) {\n        onComplete();\n        return;\n      }\n\n      promise.then(function (page) {\n        _.each(page.instances, function (instance) {\n          if (done || !_.isUndefined(opts.limit) && currentResource >= opts.limit) {\n            done = true;\n            return false;\n          }\n\n          currentResource++;\n          callback(instance, onComplete);\n        });\n\n        if (!done) {\n          currentPage++;\n          fetchNextPage(_.bind(page.nextPage, page));\n        } else {\n          onComplete();\n        }\n      });\n      promise.catch(onComplete);\n    }\n\n    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Lists TaskInstance records from the API as a list.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function list\n   * @memberof Twilio.Preview.Understand.AssistantContext.TaskList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         list() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no page_size is defined but a limit is defined,\n   *         list() will attempt to read the limit with the most\n   *         efficient page size, i.e. min(limit, 1000)\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  TaskListInstance.list = function list(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n    var deferred = Q.defer();\n    var allResources = [];\n\n    opts.callback = function (resource, done) {\n      allResources.push(resource);\n\n      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {\n        done();\n      }\n    };\n\n    opts.done = function (error) {\n      if (_.isUndefined(error)) {\n        deferred.resolve(allResources);\n      } else {\n        deferred.reject(error);\n      }\n    };\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    this.each(opts);\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Retrieve a single page of TaskInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function page\n   * @memberof Twilio.Preview.Understand.AssistantContext.TaskList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.pageToken] - PageToken provided by the API\n   * @param {number} [opts.pageNumber] -\n   *          Page Number, this value is simply for client state\n   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  TaskListInstance.page = function page(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n    var deferred = Q.defer();\n    var data = values.of({\n      'PageToken': opts.pageToken,\n      'Page': opts.pageNumber,\n      'PageSize': opts.pageSize\n    });\n\n    var promise = this._version.page({\n      uri: this._uri,\n      method: 'GET',\n      params: data\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new TaskPage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Retrieve a single target page of TaskInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function getPage\n   * @memberof Twilio.Preview.Understand.AssistantContext.TaskList#\n   *\n   * @param {string} [targetUrl] - API-generated URL for the requested results page\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  TaskListInstance.getPage = function getPage(targetUrl, callback) {\n    var deferred = Q.defer();\n\n    var promise = this._version._domain.twilio.request({\n      method: 'GET',\n      uri: targetUrl\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new TaskPage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * create a TaskInstance\n   *\n   * @function create\n   * @memberof Twilio.Preview.Understand.AssistantContext.TaskList#\n   *\n   * @param {object} opts - Options for request\n   * @param {string} opts.uniqueName -\n   *          A user-provided string that uniquely identifies this resource as an alternative to the sid. Unique up to 64 characters long.\n   * @param {string} [opts.friendlyName] -\n   *          A user-provided string that identifies this resource. It is non-unique and can up to 255 characters long.\n   * @param {object} [opts.actions] -\n   *          A user-provided JSON object encoded as a string to specify the actions for this task. It is optional and non-unique.\n   * @param {string} [opts.actionsUrl] -\n   *          User-provided HTTP endpoint where from the assistant fetches actions\n   * @param {function} [callback] - Callback to handle processed record\n   *\n   * @returns {Promise} Resolves to processed TaskInstance\n   */\n\n  /* jshint ignore:end */\n\n\n  TaskListInstance.create = function create(opts, callback) {\n    if (_.isUndefined(opts)) {\n      throw new Error('Required parameter \"opts\" missing.');\n    }\n\n    if (_.isUndefined(opts['uniqueName'])) {\n      throw new Error('Required parameter \"opts[\\'uniqueName\\']\" missing.');\n    }\n\n    var deferred = Q.defer();\n    var data = values.of({\n      'UniqueName': _.get(opts, 'uniqueName'),\n      'FriendlyName': _.get(opts, 'friendlyName'),\n      'Actions': serialize.object(_.get(opts, 'actions')),\n      'ActionsUrl': _.get(opts, 'actionsUrl')\n    });\n\n    var promise = this._version.create({\n      uri: this._uri,\n      method: 'POST',\n      data: data\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new TaskInstance(this._version, payload, this._solution.assistantSid, this._solution.sid));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Constructs a task\n   *\n   * @function get\n   * @memberof Twilio.Preview.Understand.AssistantContext.TaskList#\n   *\n   * @param {string} sid -\n   *          A 34 character string that uniquely identifies this resource.\n   *\n   * @returns {Twilio.Preview.Understand.AssistantContext.TaskContext}\n   */\n\n  /* jshint ignore:end */\n\n\n  TaskListInstance.get = function get(sid) {\n    return new TaskContext(this._version, this._solution.assistantSid, sid);\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Preview.Understand.AssistantContext.TaskList#\n   *\n   * @returns Object\n   */\n\n  /* jshint ignore:end */\n\n\n  TaskListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n\n  TaskListInstance[util.inspect.custom] = function inspect(depth, options) {\n    return util.inspect(this.toJSON(), options);\n  };\n\n  return TaskListInstance;\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the TaskPage\n *\n * PLEASE NOTE that this class contains preview products that are subject to\n * change. Use them with caution. If you currently do not have developer preview\n * access, please contact help@twilio.com.\n *\n * @constructor Twilio.Preview.Understand.AssistantContext.TaskPage\n *\n * @param {Understand} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {TaskSolution} solution - Path solution\n *\n * @returns TaskPage\n */\n\n/* jshint ignore:end */\n\n\nTaskPage = function TaskPage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n\n_.extend(TaskPage.prototype, Page.prototype);\n\nTaskPage.prototype.constructor = TaskPage;\n/* jshint ignore:start */\n\n/**\n * Build an instance of TaskInstance\n *\n * @function getInstance\n * @memberof Twilio.Preview.Understand.AssistantContext.TaskPage#\n *\n * @param {TaskPayload} payload - Payload response from the API\n *\n * @returns TaskInstance\n */\n\n/* jshint ignore:end */\n\nTaskPage.prototype.getInstance = function getInstance(payload) {\n  return new TaskInstance(this._version, payload, this._solution.assistantSid);\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Preview.Understand.AssistantContext.TaskPage#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nTaskPage.prototype.toJSON = function toJSON() {\n  let clone = {};\n\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n\n  return clone;\n};\n\nTaskPage.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the TaskContext\n *\n * PLEASE NOTE that this class contains preview products that are subject to\n * change. Use them with caution. If you currently do not have developer preview\n * access, please contact help@twilio.com.\n *\n * @constructor Twilio.Preview.Understand.AssistantContext.TaskInstance\n *\n * @property {string} accountSid -\n *          The unique ID of the Account that created this Task.\n * @property {Date} dateCreated - The date that this resource was created\n * @property {Date} dateUpdated - The date that this resource was last updated\n * @property {string} friendlyName -\n *          A user-provided string that identifies this resource. It is non-unique and can up to 255 characters long.\n * @property {string} links - The links\n * @property {string} assistantSid - The unique ID of the Assistant.\n * @property {string} sid -\n *          A 34 character string that uniquely identifies this resource.\n * @property {string} uniqueName -\n *          A user-provided string that uniquely identifies this resource as an alternative to the sid. Unique up to 64 characters long.\n * @property {string} actionsUrl -\n *          User-provided HTTP endpoint where from the assistant fetches actions\n * @property {string} url - The url\n *\n * @param {Understand} version - Version of the resource\n * @param {TaskPayload} payload - The instance payload\n * @param {sid} assistantSid - The unique ID of the Assistant.\n * @param {sid_like} sid -\n *          A 34 character string that uniquely identifies this resource.\n */\n\n/* jshint ignore:end */\n\n\nTaskInstance = function TaskInstance(version, payload, assistantSid, sid) {\n  this._version = version; // Marshaled Properties\n\n  this.accountSid = payload.account_sid; // jshint ignore:line\n\n  this.dateCreated = deserialize.iso8601DateTime(payload.date_created); // jshint ignore:line\n\n  this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated); // jshint ignore:line\n\n  this.friendlyName = payload.friendly_name; // jshint ignore:line\n\n  this.links = payload.links; // jshint ignore:line\n\n  this.assistantSid = payload.assistant_sid; // jshint ignore:line\n\n  this.sid = payload.sid; // jshint ignore:line\n\n  this.uniqueName = payload.unique_name; // jshint ignore:line\n\n  this.actionsUrl = payload.actions_url; // jshint ignore:line\n\n  this.url = payload.url; // jshint ignore:line\n  // Context\n\n  this._context = undefined;\n  this._solution = {\n    assistantSid: assistantSid,\n    sid: sid || this.sid\n  };\n};\n\nObject.defineProperty(TaskInstance.prototype, '_proxy', {\n  get: function () {\n    if (!this._context) {\n      this._context = new TaskContext(this._version, this._solution.assistantSid, this._solution.sid);\n    }\n\n    return this._context;\n  }\n});\n/* jshint ignore:start */\n\n/**\n * fetch a TaskInstance\n *\n * @function fetch\n * @memberof Twilio.Preview.Understand.AssistantContext.TaskInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed TaskInstance\n */\n\n/* jshint ignore:end */\n\nTaskInstance.prototype.fetch = function fetch(callback) {\n  return this._proxy.fetch(callback);\n};\n/* jshint ignore:start */\n\n/**\n * update a TaskInstance\n *\n * @function update\n * @memberof Twilio.Preview.Understand.AssistantContext.TaskInstance#\n *\n * @param {object} [opts] - Options for request\n * @param {string} [opts.friendlyName] -\n *          A user-provided string that identifies this resource. It is non-unique and can up to 255 characters long.\n * @param {string} [opts.uniqueName] -\n *          A user-provided string that uniquely identifies this resource as an alternative to the sid. Unique up to 64 characters long.\n * @param {object} [opts.actions] -\n *          A user-provided JSON object encoded as a string to specify the actions for this task. It is optional and non-unique.\n * @param {string} [opts.actionsUrl] -\n *          User-provided HTTP endpoint where from the assistant fetches actions\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed TaskInstance\n */\n\n/* jshint ignore:end */\n\n\nTaskInstance.prototype.update = function update(opts, callback) {\n  return this._proxy.update(opts, callback);\n};\n/* jshint ignore:start */\n\n/**\n * remove a TaskInstance\n *\n * @function remove\n * @memberof Twilio.Preview.Understand.AssistantContext.TaskInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed TaskInstance\n */\n\n/* jshint ignore:end */\n\n\nTaskInstance.prototype.remove = function remove(callback) {\n  return this._proxy.remove(callback);\n};\n/* jshint ignore:start */\n\n/**\n * Access the fields\n *\n * @function fields\n * @memberof Twilio.Preview.Understand.AssistantContext.TaskInstance#\n *\n * @returns {Twilio.Preview.Understand.AssistantContext.TaskContext.FieldList}\n */\n\n/* jshint ignore:end */\n\n\nTaskInstance.prototype.fields = function fields() {\n  return this._proxy.fields;\n};\n/* jshint ignore:start */\n\n/**\n * Access the samples\n *\n * @function samples\n * @memberof Twilio.Preview.Understand.AssistantContext.TaskInstance#\n *\n * @returns {Twilio.Preview.Understand.AssistantContext.TaskContext.SampleList}\n */\n\n/* jshint ignore:end */\n\n\nTaskInstance.prototype.samples = function samples() {\n  return this._proxy.samples;\n};\n/* jshint ignore:start */\n\n/**\n * Access the taskActions\n *\n * @function taskActions\n * @memberof Twilio.Preview.Understand.AssistantContext.TaskInstance#\n *\n * @returns {Twilio.Preview.Understand.AssistantContext.TaskContext.TaskActionsList}\n */\n\n/* jshint ignore:end */\n\n\nTaskInstance.prototype.taskActions = function taskActions() {\n  return this._proxy.taskActions;\n};\n/* jshint ignore:start */\n\n/**\n * Access the statistics\n *\n * @function statistics\n * @memberof Twilio.Preview.Understand.AssistantContext.TaskInstance#\n *\n * @returns {Twilio.Preview.Understand.AssistantContext.TaskContext.TaskStatisticsList}\n */\n\n/* jshint ignore:end */\n\n\nTaskInstance.prototype.statistics = function statistics() {\n  return this._proxy.statistics;\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Preview.Understand.AssistantContext.TaskInstance#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nTaskInstance.prototype.toJSON = function toJSON() {\n  let clone = {};\n\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n\n  return clone;\n};\n\nTaskInstance.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the TaskContext\n *\n * PLEASE NOTE that this class contains preview products that are subject to\n * change. Use them with caution. If you currently do not have developer preview\n * access, please contact help@twilio.com.\n *\n * @constructor Twilio.Preview.Understand.AssistantContext.TaskContext\n *\n * @property {Twilio.Preview.Understand.AssistantContext.TaskContext.FieldList} fields -\n *          fields resource\n * @property {Twilio.Preview.Understand.AssistantContext.TaskContext.SampleList} samples -\n *          samples resource\n * @property {Twilio.Preview.Understand.AssistantContext.TaskContext.TaskActionsList} taskActions -\n *          taskActions resource\n * @property {Twilio.Preview.Understand.AssistantContext.TaskContext.TaskStatisticsList} statistics -\n *          statistics resource\n *\n * @param {Understand} version - Version of the resource\n * @param {sid_like} assistantSid - The unique ID of the Assistant.\n * @param {sid_like} sid -\n *          A 34 character string that uniquely identifies this resource.\n */\n\n/* jshint ignore:end */\n\n\nTaskContext = function TaskContext(version, assistantSid, sid) {\n  this._version = version; // Path Solution\n\n  this._solution = {\n    assistantSid: assistantSid,\n    sid: sid\n  };\n  this._uri = `/Assistants/${assistantSid}/Tasks/${sid}`; // Dependents\n\n  this._fields = undefined;\n  this._samples = undefined;\n  this._taskActions = undefined;\n  this._statistics = undefined;\n};\n/* jshint ignore:start */\n\n/**\n * fetch a TaskInstance\n *\n * @function fetch\n * @memberof Twilio.Preview.Understand.AssistantContext.TaskContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed TaskInstance\n */\n\n/* jshint ignore:end */\n\n\nTaskContext.prototype.fetch = function fetch(callback) {\n  var deferred = Q.defer();\n\n  var promise = this._version.fetch({\n    uri: this._uri,\n    method: 'GET'\n  });\n\n  promise = promise.then(function (payload) {\n    deferred.resolve(new TaskInstance(this._version, payload, this._solution.assistantSid, this._solution.sid));\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n/* jshint ignore:start */\n\n/**\n * update a TaskInstance\n *\n * @function update\n * @memberof Twilio.Preview.Understand.AssistantContext.TaskContext#\n *\n * @param {object} [opts] - Options for request\n * @param {string} [opts.friendlyName] -\n *          A user-provided string that identifies this resource. It is non-unique and can up to 255 characters long.\n * @param {string} [opts.uniqueName] -\n *          A user-provided string that uniquely identifies this resource as an alternative to the sid. Unique up to 64 characters long.\n * @param {object} [opts.actions] -\n *          A user-provided JSON object encoded as a string to specify the actions for this task. It is optional and non-unique.\n * @param {string} [opts.actionsUrl] -\n *          User-provided HTTP endpoint where from the assistant fetches actions\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed TaskInstance\n */\n\n/* jshint ignore:end */\n\n\nTaskContext.prototype.update = function update(opts, callback) {\n  if (_.isFunction(opts)) {\n    callback = opts;\n    opts = {};\n  }\n\n  opts = opts || {};\n  var deferred = Q.defer();\n  var data = values.of({\n    'FriendlyName': _.get(opts, 'friendlyName'),\n    'UniqueName': _.get(opts, 'uniqueName'),\n    'Actions': serialize.object(_.get(opts, 'actions')),\n    'ActionsUrl': _.get(opts, 'actionsUrl')\n  });\n\n  var promise = this._version.update({\n    uri: this._uri,\n    method: 'POST',\n    data: data\n  });\n\n  promise = promise.then(function (payload) {\n    deferred.resolve(new TaskInstance(this._version, payload, this._solution.assistantSid, this._solution.sid));\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n/* jshint ignore:start */\n\n/**\n * remove a TaskInstance\n *\n * @function remove\n * @memberof Twilio.Preview.Understand.AssistantContext.TaskContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed TaskInstance\n */\n\n/* jshint ignore:end */\n\n\nTaskContext.prototype.remove = function remove(callback) {\n  var deferred = Q.defer();\n\n  var promise = this._version.remove({\n    uri: this._uri,\n    method: 'DELETE'\n  });\n\n  promise = promise.then(function (payload) {\n    deferred.resolve(payload);\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\nObject.defineProperty(TaskContext.prototype, 'fields', {\n  get: function () {\n    if (!this._fields) {\n      this._fields = new FieldList(this._version, this._solution.assistantSid, this._solution.sid);\n    }\n\n    return this._fields;\n  }\n});\nObject.defineProperty(TaskContext.prototype, 'samples', {\n  get: function () {\n    if (!this._samples) {\n      this._samples = new SampleList(this._version, this._solution.assistantSid, this._solution.sid);\n    }\n\n    return this._samples;\n  }\n});\nObject.defineProperty(TaskContext.prototype, 'taskActions', {\n  get: function () {\n    if (!this._taskActions) {\n      this._taskActions = new TaskActionsList(this._version, this._solution.assistantSid, this._solution.sid);\n    }\n\n    return this._taskActions;\n  }\n});\nObject.defineProperty(TaskContext.prototype, 'statistics', {\n  get: function () {\n    if (!this._statistics) {\n      this._statistics = new TaskStatisticsList(this._version, this._solution.assistantSid, this._solution.sid);\n    }\n\n    return this._statistics;\n  }\n});\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Preview.Understand.AssistantContext.TaskContext#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\nTaskContext.prototype.toJSON = function toJSON() {\n  return this._solution;\n};\n\nTaskContext.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\nmodule.exports = {\n  TaskList: TaskList,\n  TaskPage: TaskPage,\n  TaskInstance: TaskInstance,\n  TaskContext: TaskContext\n};","map":{"version":3,"names":["Q","require","_","util","FieldList","Page","SampleList","TaskActionsList","TaskStatisticsList","deserialize","serialize","values","TaskList","TaskPage","TaskInstance","TaskContext","version","assistantSid","TaskListInstance","sid","get","_version","_solution","_uri","each","opts","callback","isFunction","isUndefined","Error","done","currentPage","currentResource","limits","readLimits","limit","pageSize","onComplete","error","fetchNextPage","fn","promise","then","page","instances","instance","bind","nextPage","catch","merge","list","deferred","defer","allResources","resource","push","length","resolve","reject","nodeify","data","of","pageToken","pageNumber","uri","method","params","payload","getPage","targetUrl","_domain","twilio","request","create","object","toJSON","inspect","custom","depth","options","response","solution","prototype","constructor","call","extend","getInstance","clone","forOwn","value","key","startsWith","accountSid","account_sid","dateCreated","iso8601DateTime","date_created","dateUpdated","date_updated","friendlyName","friendly_name","links","assistant_sid","uniqueName","unique_name","actionsUrl","actions_url","url","_context","undefined","Object","defineProperty","fetch","_proxy","update","remove","fields","samples","taskActions","statistics","_fields","_samples","_taskActions","_statistics","module","exports"],"sources":["/Users/hooniesun/rmit/fwp/assessment1/lan/node_modules/twilio/lib/rest/preview/understand/assistant/task.js"],"sourcesContent":["'use strict';\n\n/* jshint ignore:start */\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n/* jshint ignore:end */\n\nvar Q = require('q');  /* jshint ignore:line */\nvar _ = require('lodash');  /* jshint ignore:line */\nvar util = require('util');  /* jshint ignore:line */\nvar FieldList = require('./task/field').FieldList;\nvar Page = require('../../../../base/Page');  /* jshint ignore:line */\nvar SampleList = require('./task/sample').SampleList;\nvar TaskActionsList = require('./task/taskActions').TaskActionsList;\nvar TaskStatisticsList = require('./task/taskStatistics').TaskStatisticsList;\nvar deserialize = require(\n    '../../../../base/deserialize');  /* jshint ignore:line */\nvar serialize = require('../../../../base/serialize');  /* jshint ignore:line */\nvar values = require('../../../../base/values');  /* jshint ignore:line */\n\nvar TaskList;\nvar TaskPage;\nvar TaskInstance;\nvar TaskContext;\n\n/* jshint ignore:start */\n/**\n * Initialize the TaskList\n *\n * PLEASE NOTE that this class contains preview products that are subject to\n * change. Use them with caution. If you currently do not have developer preview\n * access, please contact help@twilio.com.\n *\n * @constructor Twilio.Preview.Understand.AssistantContext.TaskList\n *\n * @param {Twilio.Preview.Understand} version - Version of the resource\n * @param {string} assistantSid - The unique ID of the Assistant.\n */\n/* jshint ignore:end */\nTaskList = function TaskList(version, assistantSid) {\n  /* jshint ignore:start */\n  /**\n   * @function tasks\n   * @memberof Twilio.Preview.Understand.AssistantContext#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Preview.Understand.AssistantContext.TaskContext}\n   */\n  /* jshint ignore:end */\n  function TaskListInstance(sid) {\n    return TaskListInstance.get(sid);\n  }\n\n  TaskListInstance._version = version;\n  // Path Solution\n  TaskListInstance._solution = {assistantSid: assistantSid};\n  TaskListInstance._uri = `/Assistants/${assistantSid}/Tasks`;\n  /* jshint ignore:start */\n  /**\n   * Streams TaskInstance records from the API.\n   *\n   * This operation lazily loads records as efficiently as possible until the limit\n   * is reached.\n   *\n   * The results are passed into the callback function, so this operation is memory\n   * efficient.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function each\n   * @memberof Twilio.Preview.Understand.AssistantContext.TaskList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         each() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no pageSize is defined but a limit is defined,\n   *         each() will attempt to read the limit with the most efficient\n   *         page size, i.e. min(limit, 1000)\n   * @param {Function} [opts.callback] -\n   *         Function to process each record. If this and a positional\n   *         callback are passed, this one will be used\n   * @param {Function} [opts.done] -\n   *          Function to be called upon completion of streaming\n   * @param {Function} [callback] - Function to process each record\n   */\n  /* jshint ignore:end */\n  TaskListInstance.each = function each(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    if (opts.callback) {\n      callback = opts.callback;\n    }\n    if (_.isUndefined(callback)) {\n      throw new Error('Callback function must be provided');\n    }\n\n    var done = false;\n    var currentPage = 1;\n    var currentResource = 0;\n    var limits = this._version.readLimits({\n      limit: opts.limit,\n      pageSize: opts.pageSize\n    });\n\n    function onComplete(error) {\n      done = true;\n      if (_.isFunction(opts.done)) {\n        opts.done(error);\n      }\n    }\n\n    function fetchNextPage(fn) {\n      var promise = fn();\n      if (_.isUndefined(promise)) {\n        onComplete();\n        return;\n      }\n\n      promise.then(function(page) {\n        _.each(page.instances, function(instance) {\n          if (done || (!_.isUndefined(opts.limit) && currentResource >= opts.limit)) {\n            done = true;\n            return false;\n          }\n\n          currentResource++;\n          callback(instance, onComplete);\n        });\n\n        if (!done) {\n          currentPage++;\n          fetchNextPage(_.bind(page.nextPage, page));\n        } else {\n          onComplete();\n        }\n      });\n\n      promise.catch(onComplete);\n    }\n\n    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Lists TaskInstance records from the API as a list.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function list\n   * @memberof Twilio.Preview.Understand.AssistantContext.TaskList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         list() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no page_size is defined but a limit is defined,\n   *         list() will attempt to read the limit with the most\n   *         efficient page size, i.e. min(limit, 1000)\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  TaskListInstance.list = function list(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    var deferred = Q.defer();\n    var allResources = [];\n    opts.callback = function(resource, done) {\n      allResources.push(resource);\n\n      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {\n        done();\n      }\n    };\n\n    opts.done = function(error) {\n      if (_.isUndefined(error)) {\n        deferred.resolve(allResources);\n      } else {\n        deferred.reject(error);\n      }\n    };\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    this.each(opts);\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single page of TaskInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function page\n   * @memberof Twilio.Preview.Understand.AssistantContext.TaskList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.pageToken] - PageToken provided by the API\n   * @param {number} [opts.pageNumber] -\n   *          Page Number, this value is simply for client state\n   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  TaskListInstance.page = function page(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n\n    var deferred = Q.defer();\n    var data = values.of({\n      'PageToken': opts.pageToken,\n      'Page': opts.pageNumber,\n      'PageSize': opts.pageSize\n    });\n\n    var promise = this._version.page({uri: this._uri, method: 'GET', params: data});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new TaskPage(this._version, payload, this._solution));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single target page of TaskInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function getPage\n   * @memberof Twilio.Preview.Understand.AssistantContext.TaskList#\n   *\n   * @param {string} [targetUrl] - API-generated URL for the requested results page\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  TaskListInstance.getPage = function getPage(targetUrl, callback) {\n    var deferred = Q.defer();\n\n    var promise = this._version._domain.twilio.request({method: 'GET', uri: targetUrl});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new TaskPage(this._version, payload, this._solution));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * create a TaskInstance\n   *\n   * @function create\n   * @memberof Twilio.Preview.Understand.AssistantContext.TaskList#\n   *\n   * @param {object} opts - Options for request\n   * @param {string} opts.uniqueName -\n   *          A user-provided string that uniquely identifies this resource as an alternative to the sid. Unique up to 64 characters long.\n   * @param {string} [opts.friendlyName] -\n   *          A user-provided string that identifies this resource. It is non-unique and can up to 255 characters long.\n   * @param {object} [opts.actions] -\n   *          A user-provided JSON object encoded as a string to specify the actions for this task. It is optional and non-unique.\n   * @param {string} [opts.actionsUrl] -\n   *          User-provided HTTP endpoint where from the assistant fetches actions\n   * @param {function} [callback] - Callback to handle processed record\n   *\n   * @returns {Promise} Resolves to processed TaskInstance\n   */\n  /* jshint ignore:end */\n  TaskListInstance.create = function create(opts, callback) {\n    if (_.isUndefined(opts)) {\n      throw new Error('Required parameter \"opts\" missing.');\n    }\n    if (_.isUndefined(opts['uniqueName'])) {\n      throw new Error('Required parameter \"opts[\\'uniqueName\\']\" missing.');\n    }\n\n    var deferred = Q.defer();\n    var data = values.of({\n      'UniqueName': _.get(opts, 'uniqueName'),\n      'FriendlyName': _.get(opts, 'friendlyName'),\n      'Actions': serialize.object(_.get(opts, 'actions')),\n      'ActionsUrl': _.get(opts, 'actionsUrl')\n    });\n\n    var promise = this._version.create({uri: this._uri, method: 'POST', data: data});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new TaskInstance(\n        this._version,\n        payload,\n        this._solution.assistantSid,\n        this._solution.sid\n      ));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Constructs a task\n   *\n   * @function get\n   * @memberof Twilio.Preview.Understand.AssistantContext.TaskList#\n   *\n   * @param {string} sid -\n   *          A 34 character string that uniquely identifies this resource.\n   *\n   * @returns {Twilio.Preview.Understand.AssistantContext.TaskContext}\n   */\n  /* jshint ignore:end */\n  TaskListInstance.get = function get(sid) {\n    return new TaskContext(this._version, this._solution.assistantSid, sid);\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Preview.Understand.AssistantContext.TaskList#\n   *\n   * @returns Object\n   */\n  /* jshint ignore:end */\n  TaskListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n\n  TaskListInstance[util.inspect.custom] = function inspect(depth, options) {\n    return util.inspect(this.toJSON(), options);\n  };\n\n  return TaskListInstance;\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the TaskPage\n *\n * PLEASE NOTE that this class contains preview products that are subject to\n * change. Use them with caution. If you currently do not have developer preview\n * access, please contact help@twilio.com.\n *\n * @constructor Twilio.Preview.Understand.AssistantContext.TaskPage\n *\n * @param {Understand} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {TaskSolution} solution - Path solution\n *\n * @returns TaskPage\n */\n/* jshint ignore:end */\nTaskPage = function TaskPage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n\n_.extend(TaskPage.prototype, Page.prototype);\nTaskPage.prototype.constructor = TaskPage;\n\n/* jshint ignore:start */\n/**\n * Build an instance of TaskInstance\n *\n * @function getInstance\n * @memberof Twilio.Preview.Understand.AssistantContext.TaskPage#\n *\n * @param {TaskPayload} payload - Payload response from the API\n *\n * @returns TaskInstance\n */\n/* jshint ignore:end */\nTaskPage.prototype.getInstance = function getInstance(payload) {\n  return new TaskInstance(this._version, payload, this._solution.assistantSid);\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Preview.Understand.AssistantContext.TaskPage#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nTaskPage.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function(value, key) {\n    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\n\nTaskPage.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the TaskContext\n *\n * PLEASE NOTE that this class contains preview products that are subject to\n * change. Use them with caution. If you currently do not have developer preview\n * access, please contact help@twilio.com.\n *\n * @constructor Twilio.Preview.Understand.AssistantContext.TaskInstance\n *\n * @property {string} accountSid -\n *          The unique ID of the Account that created this Task.\n * @property {Date} dateCreated - The date that this resource was created\n * @property {Date} dateUpdated - The date that this resource was last updated\n * @property {string} friendlyName -\n *          A user-provided string that identifies this resource. It is non-unique and can up to 255 characters long.\n * @property {string} links - The links\n * @property {string} assistantSid - The unique ID of the Assistant.\n * @property {string} sid -\n *          A 34 character string that uniquely identifies this resource.\n * @property {string} uniqueName -\n *          A user-provided string that uniquely identifies this resource as an alternative to the sid. Unique up to 64 characters long.\n * @property {string} actionsUrl -\n *          User-provided HTTP endpoint where from the assistant fetches actions\n * @property {string} url - The url\n *\n * @param {Understand} version - Version of the resource\n * @param {TaskPayload} payload - The instance payload\n * @param {sid} assistantSid - The unique ID of the Assistant.\n * @param {sid_like} sid -\n *          A 34 character string that uniquely identifies this resource.\n */\n/* jshint ignore:end */\nTaskInstance = function TaskInstance(version, payload, assistantSid, sid) {\n  this._version = version;\n\n  // Marshaled Properties\n  this.accountSid = payload.account_sid; // jshint ignore:line\n  this.dateCreated = deserialize.iso8601DateTime(payload.date_created); // jshint ignore:line\n  this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated); // jshint ignore:line\n  this.friendlyName = payload.friendly_name; // jshint ignore:line\n  this.links = payload.links; // jshint ignore:line\n  this.assistantSid = payload.assistant_sid; // jshint ignore:line\n  this.sid = payload.sid; // jshint ignore:line\n  this.uniqueName = payload.unique_name; // jshint ignore:line\n  this.actionsUrl = payload.actions_url; // jshint ignore:line\n  this.url = payload.url; // jshint ignore:line\n\n  // Context\n  this._context = undefined;\n  this._solution = {assistantSid: assistantSid, sid: sid || this.sid, };\n};\n\nObject.defineProperty(TaskInstance.prototype,\n  '_proxy', {\n    get: function() {\n      if (!this._context) {\n        this._context = new TaskContext(this._version, this._solution.assistantSid, this._solution.sid);\n      }\n\n      return this._context;\n    }\n});\n\n/* jshint ignore:start */\n/**\n * fetch a TaskInstance\n *\n * @function fetch\n * @memberof Twilio.Preview.Understand.AssistantContext.TaskInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed TaskInstance\n */\n/* jshint ignore:end */\nTaskInstance.prototype.fetch = function fetch(callback) {\n  return this._proxy.fetch(callback);\n};\n\n/* jshint ignore:start */\n/**\n * update a TaskInstance\n *\n * @function update\n * @memberof Twilio.Preview.Understand.AssistantContext.TaskInstance#\n *\n * @param {object} [opts] - Options for request\n * @param {string} [opts.friendlyName] -\n *          A user-provided string that identifies this resource. It is non-unique and can up to 255 characters long.\n * @param {string} [opts.uniqueName] -\n *          A user-provided string that uniquely identifies this resource as an alternative to the sid. Unique up to 64 characters long.\n * @param {object} [opts.actions] -\n *          A user-provided JSON object encoded as a string to specify the actions for this task. It is optional and non-unique.\n * @param {string} [opts.actionsUrl] -\n *          User-provided HTTP endpoint where from the assistant fetches actions\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed TaskInstance\n */\n/* jshint ignore:end */\nTaskInstance.prototype.update = function update(opts, callback) {\n  return this._proxy.update(opts, callback);\n};\n\n/* jshint ignore:start */\n/**\n * remove a TaskInstance\n *\n * @function remove\n * @memberof Twilio.Preview.Understand.AssistantContext.TaskInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed TaskInstance\n */\n/* jshint ignore:end */\nTaskInstance.prototype.remove = function remove(callback) {\n  return this._proxy.remove(callback);\n};\n\n/* jshint ignore:start */\n/**\n * Access the fields\n *\n * @function fields\n * @memberof Twilio.Preview.Understand.AssistantContext.TaskInstance#\n *\n * @returns {Twilio.Preview.Understand.AssistantContext.TaskContext.FieldList}\n */\n/* jshint ignore:end */\nTaskInstance.prototype.fields = function fields() {\n  return this._proxy.fields;\n};\n\n/* jshint ignore:start */\n/**\n * Access the samples\n *\n * @function samples\n * @memberof Twilio.Preview.Understand.AssistantContext.TaskInstance#\n *\n * @returns {Twilio.Preview.Understand.AssistantContext.TaskContext.SampleList}\n */\n/* jshint ignore:end */\nTaskInstance.prototype.samples = function samples() {\n  return this._proxy.samples;\n};\n\n/* jshint ignore:start */\n/**\n * Access the taskActions\n *\n * @function taskActions\n * @memberof Twilio.Preview.Understand.AssistantContext.TaskInstance#\n *\n * @returns {Twilio.Preview.Understand.AssistantContext.TaskContext.TaskActionsList}\n */\n/* jshint ignore:end */\nTaskInstance.prototype.taskActions = function taskActions() {\n  return this._proxy.taskActions;\n};\n\n/* jshint ignore:start */\n/**\n * Access the statistics\n *\n * @function statistics\n * @memberof Twilio.Preview.Understand.AssistantContext.TaskInstance#\n *\n * @returns {Twilio.Preview.Understand.AssistantContext.TaskContext.TaskStatisticsList}\n */\n/* jshint ignore:end */\nTaskInstance.prototype.statistics = function statistics() {\n  return this._proxy.statistics;\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Preview.Understand.AssistantContext.TaskInstance#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nTaskInstance.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function(value, key) {\n    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\n\nTaskInstance.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the TaskContext\n *\n * PLEASE NOTE that this class contains preview products that are subject to\n * change. Use them with caution. If you currently do not have developer preview\n * access, please contact help@twilio.com.\n *\n * @constructor Twilio.Preview.Understand.AssistantContext.TaskContext\n *\n * @property {Twilio.Preview.Understand.AssistantContext.TaskContext.FieldList} fields -\n *          fields resource\n * @property {Twilio.Preview.Understand.AssistantContext.TaskContext.SampleList} samples -\n *          samples resource\n * @property {Twilio.Preview.Understand.AssistantContext.TaskContext.TaskActionsList} taskActions -\n *          taskActions resource\n * @property {Twilio.Preview.Understand.AssistantContext.TaskContext.TaskStatisticsList} statistics -\n *          statistics resource\n *\n * @param {Understand} version - Version of the resource\n * @param {sid_like} assistantSid - The unique ID of the Assistant.\n * @param {sid_like} sid -\n *          A 34 character string that uniquely identifies this resource.\n */\n/* jshint ignore:end */\nTaskContext = function TaskContext(version, assistantSid, sid) {\n  this._version = version;\n\n  // Path Solution\n  this._solution = {assistantSid: assistantSid, sid: sid, };\n  this._uri = `/Assistants/${assistantSid}/Tasks/${sid}`;\n\n  // Dependents\n  this._fields = undefined;\n  this._samples = undefined;\n  this._taskActions = undefined;\n  this._statistics = undefined;\n};\n\n/* jshint ignore:start */\n/**\n * fetch a TaskInstance\n *\n * @function fetch\n * @memberof Twilio.Preview.Understand.AssistantContext.TaskContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed TaskInstance\n */\n/* jshint ignore:end */\nTaskContext.prototype.fetch = function fetch(callback) {\n  var deferred = Q.defer();\n  var promise = this._version.fetch({uri: this._uri, method: 'GET'});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(new TaskInstance(\n      this._version,\n      payload,\n      this._solution.assistantSid,\n      this._solution.sid\n    ));\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * update a TaskInstance\n *\n * @function update\n * @memberof Twilio.Preview.Understand.AssistantContext.TaskContext#\n *\n * @param {object} [opts] - Options for request\n * @param {string} [opts.friendlyName] -\n *          A user-provided string that identifies this resource. It is non-unique and can up to 255 characters long.\n * @param {string} [opts.uniqueName] -\n *          A user-provided string that uniquely identifies this resource as an alternative to the sid. Unique up to 64 characters long.\n * @param {object} [opts.actions] -\n *          A user-provided JSON object encoded as a string to specify the actions for this task. It is optional and non-unique.\n * @param {string} [opts.actionsUrl] -\n *          User-provided HTTP endpoint where from the assistant fetches actions\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed TaskInstance\n */\n/* jshint ignore:end */\nTaskContext.prototype.update = function update(opts, callback) {\n  if (_.isFunction(opts)) {\n    callback = opts;\n    opts = {};\n  }\n  opts = opts || {};\n\n  var deferred = Q.defer();\n  var data = values.of({\n    'FriendlyName': _.get(opts, 'friendlyName'),\n    'UniqueName': _.get(opts, 'uniqueName'),\n    'Actions': serialize.object(_.get(opts, 'actions')),\n    'ActionsUrl': _.get(opts, 'actionsUrl')\n  });\n\n  var promise = this._version.update({uri: this._uri, method: 'POST', data: data});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(new TaskInstance(\n      this._version,\n      payload,\n      this._solution.assistantSid,\n      this._solution.sid\n    ));\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * remove a TaskInstance\n *\n * @function remove\n * @memberof Twilio.Preview.Understand.AssistantContext.TaskContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed TaskInstance\n */\n/* jshint ignore:end */\nTaskContext.prototype.remove = function remove(callback) {\n  var deferred = Q.defer();\n  var promise = this._version.remove({uri: this._uri, method: 'DELETE'});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(payload);\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\nObject.defineProperty(TaskContext.prototype,\n  'fields', {\n    get: function() {\n      if (!this._fields) {\n        this._fields = new FieldList(this._version, this._solution.assistantSid, this._solution.sid);\n      }\n      return this._fields;\n    }\n});\n\nObject.defineProperty(TaskContext.prototype,\n  'samples', {\n    get: function() {\n      if (!this._samples) {\n        this._samples = new SampleList(this._version, this._solution.assistantSid, this._solution.sid);\n      }\n      return this._samples;\n    }\n});\n\nObject.defineProperty(TaskContext.prototype,\n  'taskActions', {\n    get: function() {\n      if (!this._taskActions) {\n        this._taskActions = new TaskActionsList(\n          this._version,\n          this._solution.assistantSid,\n          this._solution.sid\n        );\n      }\n      return this._taskActions;\n    }\n});\n\nObject.defineProperty(TaskContext.prototype,\n  'statistics', {\n    get: function() {\n      if (!this._statistics) {\n        this._statistics = new TaskStatisticsList(\n          this._version,\n          this._solution.assistantSid,\n          this._solution.sid\n        );\n      }\n      return this._statistics;\n    }\n});\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Preview.Understand.AssistantContext.TaskContext#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nTaskContext.prototype.toJSON = function toJSON() {\n  return this._solution;\n};\n\nTaskContext.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\nmodule.exports = {\n  TaskList: TaskList,\n  TaskPage: TaskPage,\n  TaskInstance: TaskInstance,\n  TaskContext: TaskContext\n};\n"],"mappings":"AAAA;AAEA;;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;;AAEA,IAAIA,CAAC,GAAGC,OAAO,CAAC,GAAD,CAAf;AAAuB;;;AACvB,IAAIC,CAAC,GAAGD,OAAO,CAAC,QAAD,CAAf;AAA4B;;;AAC5B,IAAIE,IAAI,GAAGF,OAAO,CAAC,MAAD,CAAlB;AAA6B;;;AAC7B,IAAIG,SAAS,GAAGH,OAAO,CAAC,cAAD,CAAP,CAAwBG,SAAxC;;AACA,IAAIC,IAAI,GAAGJ,OAAO,CAAC,uBAAD,CAAlB;AAA8C;;;AAC9C,IAAIK,UAAU,GAAGL,OAAO,CAAC,eAAD,CAAP,CAAyBK,UAA1C;;AACA,IAAIC,eAAe,GAAGN,OAAO,CAAC,oBAAD,CAAP,CAA8BM,eAApD;;AACA,IAAIC,kBAAkB,GAAGP,OAAO,CAAC,uBAAD,CAAP,CAAiCO,kBAA1D;;AACA,IAAIC,WAAW,GAAGR,OAAO,CACrB,8BADqB,CAAzB;AACsC;;;AACtC,IAAIS,SAAS,GAAGT,OAAO,CAAC,4BAAD,CAAvB;AAAwD;;;AACxD,IAAIU,MAAM,GAAGV,OAAO,CAAC,yBAAD,CAApB;AAAkD;;;AAElD,IAAIW,QAAJ;AACA,IAAIC,QAAJ;AACA,IAAIC,YAAJ;AACA,IAAIC,WAAJ;AAEA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;;AACAH,QAAQ,GAAG,SAASA,QAAT,CAAkBI,OAAlB,EAA2BC,YAA3B,EAAyC;EAClD;;EACA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;;EACE;EACA,SAASC,gBAAT,CAA0BC,GAA1B,EAA+B;IAC7B,OAAOD,gBAAgB,CAACE,GAAjB,CAAqBD,GAArB,CAAP;EACD;;EAEDD,gBAAgB,CAACG,QAAjB,GAA4BL,OAA5B,CAfkD,CAgBlD;;EACAE,gBAAgB,CAACI,SAAjB,GAA6B;IAACL,YAAY,EAAEA;EAAf,CAA7B;EACAC,gBAAgB,CAACK,IAAjB,GAAyB,eAAcN,YAAa,QAApD;EACA;;EACA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EACE;;EACAC,gBAAgB,CAACM,IAAjB,GAAwB,SAASA,IAAT,CAAcC,IAAd,EAAoBC,QAApB,EAA8B;IACpD,IAAIxB,CAAC,CAACyB,UAAF,CAAaF,IAAb,CAAJ,EAAwB;MACtBC,QAAQ,GAAGD,IAAX;MACAA,IAAI,GAAG,EAAP;IACD;;IACDA,IAAI,GAAGA,IAAI,IAAI,EAAf;;IACA,IAAIA,IAAI,CAACC,QAAT,EAAmB;MACjBA,QAAQ,GAAGD,IAAI,CAACC,QAAhB;IACD;;IACD,IAAIxB,CAAC,CAAC0B,WAAF,CAAcF,QAAd,CAAJ,EAA6B;MAC3B,MAAM,IAAIG,KAAJ,CAAU,oCAAV,CAAN;IACD;;IAED,IAAIC,IAAI,GAAG,KAAX;IACA,IAAIC,WAAW,GAAG,CAAlB;IACA,IAAIC,eAAe,GAAG,CAAtB;;IACA,IAAIC,MAAM,GAAG,KAAKZ,QAAL,CAAca,UAAd,CAAyB;MACpCC,KAAK,EAAEV,IAAI,CAACU,KADwB;MAEpCC,QAAQ,EAAEX,IAAI,CAACW;IAFqB,CAAzB,CAAb;;IAKA,SAASC,UAAT,CAAoBC,KAApB,EAA2B;MACzBR,IAAI,GAAG,IAAP;;MACA,IAAI5B,CAAC,CAACyB,UAAF,CAAaF,IAAI,CAACK,IAAlB,CAAJ,EAA6B;QAC3BL,IAAI,CAACK,IAAL,CAAUQ,KAAV;MACD;IACF;;IAED,SAASC,aAAT,CAAuBC,EAAvB,EAA2B;MACzB,IAAIC,OAAO,GAAGD,EAAE,EAAhB;;MACA,IAAItC,CAAC,CAAC0B,WAAF,CAAca,OAAd,CAAJ,EAA4B;QAC1BJ,UAAU;QACV;MACD;;MAEDI,OAAO,CAACC,IAAR,CAAa,UAASC,IAAT,EAAe;QAC1BzC,CAAC,CAACsB,IAAF,CAAOmB,IAAI,CAACC,SAAZ,EAAuB,UAASC,QAAT,EAAmB;UACxC,IAAIf,IAAI,IAAK,CAAC5B,CAAC,CAAC0B,WAAF,CAAcH,IAAI,CAACU,KAAnB,CAAD,IAA8BH,eAAe,IAAIP,IAAI,CAACU,KAAnE,EAA2E;YACzEL,IAAI,GAAG,IAAP;YACA,OAAO,KAAP;UACD;;UAEDE,eAAe;UACfN,QAAQ,CAACmB,QAAD,EAAWR,UAAX,CAAR;QACD,CARD;;QAUA,IAAI,CAACP,IAAL,EAAW;UACTC,WAAW;UACXQ,aAAa,CAACrC,CAAC,CAAC4C,IAAF,CAAOH,IAAI,CAACI,QAAZ,EAAsBJ,IAAtB,CAAD,CAAb;QACD,CAHD,MAGO;UACLN,UAAU;QACX;MACF,CAjBD;MAmBAI,OAAO,CAACO,KAAR,CAAcX,UAAd;IACD;;IAEDE,aAAa,CAACrC,CAAC,CAAC4C,IAAF,CAAO,KAAKH,IAAZ,EAAkB,IAAlB,EAAwBzC,CAAC,CAAC+C,KAAF,CAAQxB,IAAR,EAAcQ,MAAd,CAAxB,CAAD,CAAb;EACD,CA1DD;EA4DA;;EACA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EACE;;;EACAf,gBAAgB,CAACgC,IAAjB,GAAwB,SAASA,IAAT,CAAczB,IAAd,EAAoBC,QAApB,EAA8B;IACpD,IAAIxB,CAAC,CAACyB,UAAF,CAAaF,IAAb,CAAJ,EAAwB;MACtBC,QAAQ,GAAGD,IAAX;MACAA,IAAI,GAAG,EAAP;IACD;;IACDA,IAAI,GAAGA,IAAI,IAAI,EAAf;IACA,IAAI0B,QAAQ,GAAGnD,CAAC,CAACoD,KAAF,EAAf;IACA,IAAIC,YAAY,GAAG,EAAnB;;IACA5B,IAAI,CAACC,QAAL,GAAgB,UAAS4B,QAAT,EAAmBxB,IAAnB,EAAyB;MACvCuB,YAAY,CAACE,IAAb,CAAkBD,QAAlB;;MAEA,IAAI,CAACpD,CAAC,CAAC0B,WAAF,CAAcH,IAAI,CAACU,KAAnB,CAAD,IAA8BkB,YAAY,CAACG,MAAb,KAAwB/B,IAAI,CAACU,KAA/D,EAAsE;QACpEL,IAAI;MACL;IACF,CAND;;IAQAL,IAAI,CAACK,IAAL,GAAY,UAASQ,KAAT,EAAgB;MAC1B,IAAIpC,CAAC,CAAC0B,WAAF,CAAcU,KAAd,CAAJ,EAA0B;QACxBa,QAAQ,CAACM,OAAT,CAAiBJ,YAAjB;MACD,CAFD,MAEO;QACLF,QAAQ,CAACO,MAAT,CAAgBpB,KAAhB;MACD;IACF,CAND;;IAQA,IAAIpC,CAAC,CAACyB,UAAF,CAAaD,QAAb,CAAJ,EAA4B;MAC1ByB,QAAQ,CAACV,OAAT,CAAiBkB,OAAjB,CAAyBjC,QAAzB;IACD;;IAED,KAAKF,IAAL,CAAUC,IAAV;IACA,OAAO0B,QAAQ,CAACV,OAAhB;EACD,CA9BD;EAgCA;;EACA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EACE;;;EACAvB,gBAAgB,CAACyB,IAAjB,GAAwB,SAASA,IAAT,CAAclB,IAAd,EAAoBC,QAApB,EAA8B;IACpD,IAAIxB,CAAC,CAACyB,UAAF,CAAaF,IAAb,CAAJ,EAAwB;MACtBC,QAAQ,GAAGD,IAAX;MACAA,IAAI,GAAG,EAAP;IACD;;IACDA,IAAI,GAAGA,IAAI,IAAI,EAAf;IAEA,IAAI0B,QAAQ,GAAGnD,CAAC,CAACoD,KAAF,EAAf;IACA,IAAIQ,IAAI,GAAGjD,MAAM,CAACkD,EAAP,CAAU;MACnB,aAAapC,IAAI,CAACqC,SADC;MAEnB,QAAQrC,IAAI,CAACsC,UAFM;MAGnB,YAAYtC,IAAI,CAACW;IAHE,CAAV,CAAX;;IAMA,IAAIK,OAAO,GAAG,KAAKpB,QAAL,CAAcsB,IAAd,CAAmB;MAACqB,GAAG,EAAE,KAAKzC,IAAX;MAAiB0C,MAAM,EAAE,KAAzB;MAAgCC,MAAM,EAAEN;IAAxC,CAAnB,CAAd;;IAEAnB,OAAO,GAAGA,OAAO,CAACC,IAAR,CAAa,UAASyB,OAAT,EAAkB;MACvChB,QAAQ,CAACM,OAAT,CAAiB,IAAI5C,QAAJ,CAAa,KAAKQ,QAAlB,EAA4B8C,OAA5B,EAAqC,KAAK7C,SAA1C,CAAjB;IACD,CAFsB,CAErBwB,IAFqB,CAEhB,IAFgB,CAAb,CAAV;IAIAL,OAAO,CAACO,KAAR,CAAc,UAASV,KAAT,EAAgB;MAC5Ba,QAAQ,CAACO,MAAT,CAAgBpB,KAAhB;IACD,CAFD;;IAIA,IAAIpC,CAAC,CAACyB,UAAF,CAAaD,QAAb,CAAJ,EAA4B;MAC1ByB,QAAQ,CAACV,OAAT,CAAiBkB,OAAjB,CAAyBjC,QAAzB;IACD;;IAED,OAAOyB,QAAQ,CAACV,OAAhB;EACD,CA7BD;EA+BA;;EACA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EACE;;;EACAvB,gBAAgB,CAACkD,OAAjB,GAA2B,SAASA,OAAT,CAAiBC,SAAjB,EAA4B3C,QAA5B,EAAsC;IAC/D,IAAIyB,QAAQ,GAAGnD,CAAC,CAACoD,KAAF,EAAf;;IAEA,IAAIX,OAAO,GAAG,KAAKpB,QAAL,CAAciD,OAAd,CAAsBC,MAAtB,CAA6BC,OAA7B,CAAqC;MAACP,MAAM,EAAE,KAAT;MAAgBD,GAAG,EAAEK;IAArB,CAArC,CAAd;;IAEA5B,OAAO,GAAGA,OAAO,CAACC,IAAR,CAAa,UAASyB,OAAT,EAAkB;MACvChB,QAAQ,CAACM,OAAT,CAAiB,IAAI5C,QAAJ,CAAa,KAAKQ,QAAlB,EAA4B8C,OAA5B,EAAqC,KAAK7C,SAA1C,CAAjB;IACD,CAFsB,CAErBwB,IAFqB,CAEhB,IAFgB,CAAb,CAAV;IAIAL,OAAO,CAACO,KAAR,CAAc,UAASV,KAAT,EAAgB;MAC5Ba,QAAQ,CAACO,MAAT,CAAgBpB,KAAhB;IACD,CAFD;;IAIA,IAAIpC,CAAC,CAACyB,UAAF,CAAaD,QAAb,CAAJ,EAA4B;MAC1ByB,QAAQ,CAACV,OAAT,CAAiBkB,OAAjB,CAAyBjC,QAAzB;IACD;;IAED,OAAOyB,QAAQ,CAACV,OAAhB;EACD,CAlBD;EAoBA;;EACA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EACE;;;EACAvB,gBAAgB,CAACuD,MAAjB,GAA0B,SAASA,MAAT,CAAgBhD,IAAhB,EAAsBC,QAAtB,EAAgC;IACxD,IAAIxB,CAAC,CAAC0B,WAAF,CAAcH,IAAd,CAAJ,EAAyB;MACvB,MAAM,IAAII,KAAJ,CAAU,oCAAV,CAAN;IACD;;IACD,IAAI3B,CAAC,CAAC0B,WAAF,CAAcH,IAAI,CAAC,YAAD,CAAlB,CAAJ,EAAuC;MACrC,MAAM,IAAII,KAAJ,CAAU,oDAAV,CAAN;IACD;;IAED,IAAIsB,QAAQ,GAAGnD,CAAC,CAACoD,KAAF,EAAf;IACA,IAAIQ,IAAI,GAAGjD,MAAM,CAACkD,EAAP,CAAU;MACnB,cAAc3D,CAAC,CAACkB,GAAF,CAAMK,IAAN,EAAY,YAAZ,CADK;MAEnB,gBAAgBvB,CAAC,CAACkB,GAAF,CAAMK,IAAN,EAAY,cAAZ,CAFG;MAGnB,WAAWf,SAAS,CAACgE,MAAV,CAAiBxE,CAAC,CAACkB,GAAF,CAAMK,IAAN,EAAY,SAAZ,CAAjB,CAHQ;MAInB,cAAcvB,CAAC,CAACkB,GAAF,CAAMK,IAAN,EAAY,YAAZ;IAJK,CAAV,CAAX;;IAOA,IAAIgB,OAAO,GAAG,KAAKpB,QAAL,CAAcoD,MAAd,CAAqB;MAACT,GAAG,EAAE,KAAKzC,IAAX;MAAiB0C,MAAM,EAAE,MAAzB;MAAiCL,IAAI,EAAEA;IAAvC,CAArB,CAAd;;IAEAnB,OAAO,GAAGA,OAAO,CAACC,IAAR,CAAa,UAASyB,OAAT,EAAkB;MACvChB,QAAQ,CAACM,OAAT,CAAiB,IAAI3C,YAAJ,CACf,KAAKO,QADU,EAEf8C,OAFe,EAGf,KAAK7C,SAAL,CAAeL,YAHA,EAIf,KAAKK,SAAL,CAAeH,GAJA,CAAjB;IAMD,CAPsB,CAOrB2B,IAPqB,CAOhB,IAPgB,CAAb,CAAV;IASAL,OAAO,CAACO,KAAR,CAAc,UAASV,KAAT,EAAgB;MAC5Ba,QAAQ,CAACO,MAAT,CAAgBpB,KAAhB;IACD,CAFD;;IAIA,IAAIpC,CAAC,CAACyB,UAAF,CAAaD,QAAb,CAAJ,EAA4B;MAC1ByB,QAAQ,CAACV,OAAT,CAAiBkB,OAAjB,CAAyBjC,QAAzB;IACD;;IAED,OAAOyB,QAAQ,CAACV,OAAhB;EACD,CApCD;EAsCA;;EACA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EACE;;;EACAvB,gBAAgB,CAACE,GAAjB,GAAuB,SAASA,GAAT,CAAaD,GAAb,EAAkB;IACvC,OAAO,IAAIJ,WAAJ,CAAgB,KAAKM,QAArB,EAA+B,KAAKC,SAAL,CAAeL,YAA9C,EAA4DE,GAA5D,CAAP;EACD,CAFD;EAIA;;EACA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;;EACE;;;EACAD,gBAAgB,CAACyD,MAAjB,GAA0B,SAASA,MAAT,GAAkB;IAC1C,OAAO,KAAKrD,SAAZ;EACD,CAFD;;EAIAJ,gBAAgB,CAACf,IAAI,CAACyE,OAAL,CAAaC,MAAd,CAAhB,GAAwC,SAASD,OAAT,CAAiBE,KAAjB,EAAwBC,OAAxB,EAAiC;IACvE,OAAO5E,IAAI,CAACyE,OAAL,CAAa,KAAKD,MAAL,EAAb,EAA4BI,OAA5B,CAAP;EACD,CAFD;;EAIA,OAAO7D,gBAAP;AACD,CAtWD;AAyWA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;;;AACAL,QAAQ,GAAG,SAASA,QAAT,CAAkBG,OAAlB,EAA2BgE,QAA3B,EAAqCC,QAArC,EAA+C;EACxD;EACA,KAAK3D,SAAL,GAAiB2D,QAAjB;EAEA5E,IAAI,CAAC6E,SAAL,CAAeC,WAAf,CAA2BC,IAA3B,CAAgC,IAAhC,EAAsCpE,OAAtC,EAA+CgE,QAA/C,EAAyD,KAAK1D,SAA9D;AACD,CALD;;AAOApB,CAAC,CAACmF,MAAF,CAASxE,QAAQ,CAACqE,SAAlB,EAA6B7E,IAAI,CAAC6E,SAAlC;;AACArE,QAAQ,CAACqE,SAAT,CAAmBC,WAAnB,GAAiCtE,QAAjC;AAEA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;;AACAA,QAAQ,CAACqE,SAAT,CAAmBI,WAAnB,GAAiC,SAASA,WAAT,CAAqBnB,OAArB,EAA8B;EAC7D,OAAO,IAAIrD,YAAJ,CAAiB,KAAKO,QAAtB,EAAgC8C,OAAhC,EAAyC,KAAK7C,SAAL,CAAeL,YAAxD,CAAP;AACD,CAFD;AAIA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;;;AACAJ,QAAQ,CAACqE,SAAT,CAAmBP,MAAnB,GAA4B,SAASA,MAAT,GAAkB;EAC5C,IAAIY,KAAK,GAAG,EAAZ;;EACArF,CAAC,CAACsF,MAAF,CAAS,IAAT,EAAe,UAASC,KAAT,EAAgBC,GAAhB,EAAqB;IAClC,IAAI,CAACxF,CAAC,CAACyF,UAAF,CAAaD,GAAb,EAAkB,GAAlB,CAAD,IAA2B,CAAExF,CAAC,CAACyB,UAAF,CAAa8D,KAAb,CAAjC,EAAsD;MACpDF,KAAK,CAACG,GAAD,CAAL,GAAaD,KAAb;IACD;EACF,CAJD;;EAKA,OAAOF,KAAP;AACD,CARD;;AAUA1E,QAAQ,CAACqE,SAAT,CAAmB/E,IAAI,CAACyE,OAAL,CAAaC,MAAhC,IAA0C,SAASD,OAAT,CAAiBE,KAAjB,EAAwBC,OAAxB,EAAiC;EACzE,OAAO5E,IAAI,CAACyE,OAAL,CAAa,KAAKD,MAAL,EAAb,EAA4BI,OAA5B,CAAP;AACD,CAFD;AAKA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;;;AACAjE,YAAY,GAAG,SAASA,YAAT,CAAsBE,OAAtB,EAA+BmD,OAA/B,EAAwClD,YAAxC,EAAsDE,GAAtD,EAA2D;EACxE,KAAKE,QAAL,GAAgBL,OAAhB,CADwE,CAGxE;;EACA,KAAK4E,UAAL,GAAkBzB,OAAO,CAAC0B,WAA1B,CAJwE,CAIjC;;EACvC,KAAKC,WAAL,GAAmBrF,WAAW,CAACsF,eAAZ,CAA4B5B,OAAO,CAAC6B,YAApC,CAAnB,CALwE,CAKF;;EACtE,KAAKC,WAAL,GAAmBxF,WAAW,CAACsF,eAAZ,CAA4B5B,OAAO,CAAC+B,YAApC,CAAnB,CANwE,CAMF;;EACtE,KAAKC,YAAL,GAAoBhC,OAAO,CAACiC,aAA5B,CAPwE,CAO7B;;EAC3C,KAAKC,KAAL,GAAalC,OAAO,CAACkC,KAArB,CARwE,CAQ5C;;EAC5B,KAAKpF,YAAL,GAAoBkD,OAAO,CAACmC,aAA5B,CATwE,CAS7B;;EAC3C,KAAKnF,GAAL,GAAWgD,OAAO,CAAChD,GAAnB,CAVwE,CAUhD;;EACxB,KAAKoF,UAAL,GAAkBpC,OAAO,CAACqC,WAA1B,CAXwE,CAWjC;;EACvC,KAAKC,UAAL,GAAkBtC,OAAO,CAACuC,WAA1B,CAZwE,CAYjC;;EACvC,KAAKC,GAAL,GAAWxC,OAAO,CAACwC,GAAnB,CAbwE,CAahD;EAExB;;EACA,KAAKC,QAAL,GAAgBC,SAAhB;EACA,KAAKvF,SAAL,GAAiB;IAACL,YAAY,EAAEA,YAAf;IAA6BE,GAAG,EAAEA,GAAG,IAAI,KAAKA;EAA9C,CAAjB;AACD,CAlBD;;AAoBA2F,MAAM,CAACC,cAAP,CAAsBjG,YAAY,CAACoE,SAAnC,EACE,QADF,EACY;EACR9D,GAAG,EAAE,YAAW;IACd,IAAI,CAAC,KAAKwF,QAAV,EAAoB;MAClB,KAAKA,QAAL,GAAgB,IAAI7F,WAAJ,CAAgB,KAAKM,QAArB,EAA+B,KAAKC,SAAL,CAAeL,YAA9C,EAA4D,KAAKK,SAAL,CAAeH,GAA3E,CAAhB;IACD;;IAED,OAAO,KAAKyF,QAAZ;EACD;AAPO,CADZ;AAWA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;;AACA9F,YAAY,CAACoE,SAAb,CAAuB8B,KAAvB,GAA+B,SAASA,KAAT,CAAetF,QAAf,EAAyB;EACtD,OAAO,KAAKuF,MAAL,CAAYD,KAAZ,CAAkBtF,QAAlB,CAAP;AACD,CAFD;AAIA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;;;AACAZ,YAAY,CAACoE,SAAb,CAAuBgC,MAAvB,GAAgC,SAASA,MAAT,CAAgBzF,IAAhB,EAAsBC,QAAtB,EAAgC;EAC9D,OAAO,KAAKuF,MAAL,CAAYC,MAAZ,CAAmBzF,IAAnB,EAAyBC,QAAzB,CAAP;AACD,CAFD;AAIA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;;;AACAZ,YAAY,CAACoE,SAAb,CAAuBiC,MAAvB,GAAgC,SAASA,MAAT,CAAgBzF,QAAhB,EAA0B;EACxD,OAAO,KAAKuF,MAAL,CAAYE,MAAZ,CAAmBzF,QAAnB,CAAP;AACD,CAFD;AAIA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;;;AACAZ,YAAY,CAACoE,SAAb,CAAuBkC,MAAvB,GAAgC,SAASA,MAAT,GAAkB;EAChD,OAAO,KAAKH,MAAL,CAAYG,MAAnB;AACD,CAFD;AAIA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;;;AACAtG,YAAY,CAACoE,SAAb,CAAuBmC,OAAvB,GAAiC,SAASA,OAAT,GAAmB;EAClD,OAAO,KAAKJ,MAAL,CAAYI,OAAnB;AACD,CAFD;AAIA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;;;AACAvG,YAAY,CAACoE,SAAb,CAAuBoC,WAAvB,GAAqC,SAASA,WAAT,GAAuB;EAC1D,OAAO,KAAKL,MAAL,CAAYK,WAAnB;AACD,CAFD;AAIA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;;;AACAxG,YAAY,CAACoE,SAAb,CAAuBqC,UAAvB,GAAoC,SAASA,UAAT,GAAsB;EACxD,OAAO,KAAKN,MAAL,CAAYM,UAAnB;AACD,CAFD;AAIA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;;;AACAzG,YAAY,CAACoE,SAAb,CAAuBP,MAAvB,GAAgC,SAASA,MAAT,GAAkB;EAChD,IAAIY,KAAK,GAAG,EAAZ;;EACArF,CAAC,CAACsF,MAAF,CAAS,IAAT,EAAe,UAASC,KAAT,EAAgBC,GAAhB,EAAqB;IAClC,IAAI,CAACxF,CAAC,CAACyF,UAAF,CAAaD,GAAb,EAAkB,GAAlB,CAAD,IAA2B,CAAExF,CAAC,CAACyB,UAAF,CAAa8D,KAAb,CAAjC,EAAsD;MACpDF,KAAK,CAACG,GAAD,CAAL,GAAaD,KAAb;IACD;EACF,CAJD;;EAKA,OAAOF,KAAP;AACD,CARD;;AAUAzE,YAAY,CAACoE,SAAb,CAAuB/E,IAAI,CAACyE,OAAL,CAAaC,MAApC,IAA8C,SAASD,OAAT,CAAiBE,KAAjB,EAAwBC,OAAxB,EAAiC;EAC7E,OAAO5E,IAAI,CAACyE,OAAL,CAAa,KAAKD,MAAL,EAAb,EAA4BI,OAA5B,CAAP;AACD,CAFD;AAKA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;;;AACAhE,WAAW,GAAG,SAASA,WAAT,CAAqBC,OAArB,EAA8BC,YAA9B,EAA4CE,GAA5C,EAAiD;EAC7D,KAAKE,QAAL,GAAgBL,OAAhB,CAD6D,CAG7D;;EACA,KAAKM,SAAL,GAAiB;IAACL,YAAY,EAAEA,YAAf;IAA6BE,GAAG,EAAEA;EAAlC,CAAjB;EACA,KAAKI,IAAL,GAAa,eAAcN,YAAa,UAASE,GAAI,EAArD,CAL6D,CAO7D;;EACA,KAAKqG,OAAL,GAAeX,SAAf;EACA,KAAKY,QAAL,GAAgBZ,SAAhB;EACA,KAAKa,YAAL,GAAoBb,SAApB;EACA,KAAKc,WAAL,GAAmBd,SAAnB;AACD,CAZD;AAcA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;;;AACA9F,WAAW,CAACmE,SAAZ,CAAsB8B,KAAtB,GAA8B,SAASA,KAAT,CAAetF,QAAf,EAAyB;EACrD,IAAIyB,QAAQ,GAAGnD,CAAC,CAACoD,KAAF,EAAf;;EACA,IAAIX,OAAO,GAAG,KAAKpB,QAAL,CAAc2F,KAAd,CAAoB;IAAChD,GAAG,EAAE,KAAKzC,IAAX;IAAiB0C,MAAM,EAAE;EAAzB,CAApB,CAAd;;EAEAxB,OAAO,GAAGA,OAAO,CAACC,IAAR,CAAa,UAASyB,OAAT,EAAkB;IACvChB,QAAQ,CAACM,OAAT,CAAiB,IAAI3C,YAAJ,CACf,KAAKO,QADU,EAEf8C,OAFe,EAGf,KAAK7C,SAAL,CAAeL,YAHA,EAIf,KAAKK,SAAL,CAAeH,GAJA,CAAjB;EAMD,CAPsB,CAOrB2B,IAPqB,CAOhB,IAPgB,CAAb,CAAV;EASAL,OAAO,CAACO,KAAR,CAAc,UAASV,KAAT,EAAgB;IAC5Ba,QAAQ,CAACO,MAAT,CAAgBpB,KAAhB;EACD,CAFD;;EAIA,IAAIpC,CAAC,CAACyB,UAAF,CAAaD,QAAb,CAAJ,EAA4B;IAC1ByB,QAAQ,CAACV,OAAT,CAAiBkB,OAAjB,CAAyBjC,QAAzB;EACD;;EAED,OAAOyB,QAAQ,CAACV,OAAhB;AACD,CAtBD;AAwBA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;;;AACA1B,WAAW,CAACmE,SAAZ,CAAsBgC,MAAtB,GAA+B,SAASA,MAAT,CAAgBzF,IAAhB,EAAsBC,QAAtB,EAAgC;EAC7D,IAAIxB,CAAC,CAACyB,UAAF,CAAaF,IAAb,CAAJ,EAAwB;IACtBC,QAAQ,GAAGD,IAAX;IACAA,IAAI,GAAG,EAAP;EACD;;EACDA,IAAI,GAAGA,IAAI,IAAI,EAAf;EAEA,IAAI0B,QAAQ,GAAGnD,CAAC,CAACoD,KAAF,EAAf;EACA,IAAIQ,IAAI,GAAGjD,MAAM,CAACkD,EAAP,CAAU;IACnB,gBAAgB3D,CAAC,CAACkB,GAAF,CAAMK,IAAN,EAAY,cAAZ,CADG;IAEnB,cAAcvB,CAAC,CAACkB,GAAF,CAAMK,IAAN,EAAY,YAAZ,CAFK;IAGnB,WAAWf,SAAS,CAACgE,MAAV,CAAiBxE,CAAC,CAACkB,GAAF,CAAMK,IAAN,EAAY,SAAZ,CAAjB,CAHQ;IAInB,cAAcvB,CAAC,CAACkB,GAAF,CAAMK,IAAN,EAAY,YAAZ;EAJK,CAAV,CAAX;;EAOA,IAAIgB,OAAO,GAAG,KAAKpB,QAAL,CAAc6F,MAAd,CAAqB;IAAClD,GAAG,EAAE,KAAKzC,IAAX;IAAiB0C,MAAM,EAAE,MAAzB;IAAiCL,IAAI,EAAEA;EAAvC,CAArB,CAAd;;EAEAnB,OAAO,GAAGA,OAAO,CAACC,IAAR,CAAa,UAASyB,OAAT,EAAkB;IACvChB,QAAQ,CAACM,OAAT,CAAiB,IAAI3C,YAAJ,CACf,KAAKO,QADU,EAEf8C,OAFe,EAGf,KAAK7C,SAAL,CAAeL,YAHA,EAIf,KAAKK,SAAL,CAAeH,GAJA,CAAjB;EAMD,CAPsB,CAOrB2B,IAPqB,CAOhB,IAPgB,CAAb,CAAV;EASAL,OAAO,CAACO,KAAR,CAAc,UAASV,KAAT,EAAgB;IAC5Ba,QAAQ,CAACO,MAAT,CAAgBpB,KAAhB;EACD,CAFD;;EAIA,IAAIpC,CAAC,CAACyB,UAAF,CAAaD,QAAb,CAAJ,EAA4B;IAC1ByB,QAAQ,CAACV,OAAT,CAAiBkB,OAAjB,CAAyBjC,QAAzB;EACD;;EAED,OAAOyB,QAAQ,CAACV,OAAhB;AACD,CAnCD;AAqCA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;;;AACA1B,WAAW,CAACmE,SAAZ,CAAsBiC,MAAtB,GAA+B,SAASA,MAAT,CAAgBzF,QAAhB,EAA0B;EACvD,IAAIyB,QAAQ,GAAGnD,CAAC,CAACoD,KAAF,EAAf;;EACA,IAAIX,OAAO,GAAG,KAAKpB,QAAL,CAAc8F,MAAd,CAAqB;IAACnD,GAAG,EAAE,KAAKzC,IAAX;IAAiB0C,MAAM,EAAE;EAAzB,CAArB,CAAd;;EAEAxB,OAAO,GAAGA,OAAO,CAACC,IAAR,CAAa,UAASyB,OAAT,EAAkB;IACvChB,QAAQ,CAACM,OAAT,CAAiBU,OAAjB;EACD,CAFsB,CAErBrB,IAFqB,CAEhB,IAFgB,CAAb,CAAV;EAIAL,OAAO,CAACO,KAAR,CAAc,UAASV,KAAT,EAAgB;IAC5Ba,QAAQ,CAACO,MAAT,CAAgBpB,KAAhB;EACD,CAFD;;EAIA,IAAIpC,CAAC,CAACyB,UAAF,CAAaD,QAAb,CAAJ,EAA4B;IAC1ByB,QAAQ,CAACV,OAAT,CAAiBkB,OAAjB,CAAyBjC,QAAzB;EACD;;EAED,OAAOyB,QAAQ,CAACV,OAAhB;AACD,CAjBD;;AAmBAqE,MAAM,CAACC,cAAP,CAAsBhG,WAAW,CAACmE,SAAlC,EACE,QADF,EACY;EACR9D,GAAG,EAAE,YAAW;IACd,IAAI,CAAC,KAAKoG,OAAV,EAAmB;MACjB,KAAKA,OAAL,GAAe,IAAIpH,SAAJ,CAAc,KAAKiB,QAAnB,EAA6B,KAAKC,SAAL,CAAeL,YAA5C,EAA0D,KAAKK,SAAL,CAAeH,GAAzE,CAAf;IACD;;IACD,OAAO,KAAKqG,OAAZ;EACD;AANO,CADZ;AAUAV,MAAM,CAACC,cAAP,CAAsBhG,WAAW,CAACmE,SAAlC,EACE,SADF,EACa;EACT9D,GAAG,EAAE,YAAW;IACd,IAAI,CAAC,KAAKqG,QAAV,EAAoB;MAClB,KAAKA,QAAL,GAAgB,IAAInH,UAAJ,CAAe,KAAKe,QAApB,EAA8B,KAAKC,SAAL,CAAeL,YAA7C,EAA2D,KAAKK,SAAL,CAAeH,GAA1E,CAAhB;IACD;;IACD,OAAO,KAAKsG,QAAZ;EACD;AANQ,CADb;AAUAX,MAAM,CAACC,cAAP,CAAsBhG,WAAW,CAACmE,SAAlC,EACE,aADF,EACiB;EACb9D,GAAG,EAAE,YAAW;IACd,IAAI,CAAC,KAAKsG,YAAV,EAAwB;MACtB,KAAKA,YAAL,GAAoB,IAAInH,eAAJ,CAClB,KAAKc,QADa,EAElB,KAAKC,SAAL,CAAeL,YAFG,EAGlB,KAAKK,SAAL,CAAeH,GAHG,CAApB;IAKD;;IACD,OAAO,KAAKuG,YAAZ;EACD;AAVY,CADjB;AAcAZ,MAAM,CAACC,cAAP,CAAsBhG,WAAW,CAACmE,SAAlC,EACE,YADF,EACgB;EACZ9D,GAAG,EAAE,YAAW;IACd,IAAI,CAAC,KAAKuG,WAAV,EAAuB;MACrB,KAAKA,WAAL,GAAmB,IAAInH,kBAAJ,CACjB,KAAKa,QADY,EAEjB,KAAKC,SAAL,CAAeL,YAFE,EAGjB,KAAKK,SAAL,CAAeH,GAHE,CAAnB;IAKD;;IACD,OAAO,KAAKwG,WAAZ;EACD;AAVW,CADhB;AAcA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;;AACA5G,WAAW,CAACmE,SAAZ,CAAsBP,MAAtB,GAA+B,SAASA,MAAT,GAAkB;EAC/C,OAAO,KAAKrD,SAAZ;AACD,CAFD;;AAIAP,WAAW,CAACmE,SAAZ,CAAsB/E,IAAI,CAACyE,OAAL,CAAaC,MAAnC,IAA6C,SAASD,OAAT,CAAiBE,KAAjB,EAAwBC,OAAxB,EAAiC;EAC5E,OAAO5E,IAAI,CAACyE,OAAL,CAAa,KAAKD,MAAL,EAAb,EAA4BI,OAA5B,CAAP;AACD,CAFD;;AAIA6C,MAAM,CAACC,OAAP,GAAiB;EACfjH,QAAQ,EAAEA,QADK;EAEfC,QAAQ,EAAEA,QAFK;EAGfC,YAAY,EAAEA,YAHC;EAIfC,WAAW,EAAEA;AAJE,CAAjB"},"metadata":{},"sourceType":"script"}