{"ast":null,"code":"'use strict';\n/* jshint ignore:start */\n\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n\n/* jshint ignore:end */\n\nvar Q = require('q');\n/* jshint ignore:line */\n\n\nvar _ = require('lodash');\n/* jshint ignore:line */\n\n\nvar util = require('util');\n/* jshint ignore:line */\n\n\nvar MessageList = require('./conversation/message').MessageList;\n\nvar Page = require('../../../../base/Page');\n/* jshint ignore:line */\n\n\nvar ParticipantList = require('./conversation/participant').ParticipantList;\n\nvar WebhookList = require('./conversation/webhook').WebhookList;\n\nvar deserialize = require('../../../../base/deserialize');\n/* jshint ignore:line */\n\n\nvar serialize = require('../../../../base/serialize');\n/* jshint ignore:line */\n\n\nvar values = require('../../../../base/values');\n/* jshint ignore:line */\n\n\nvar ConversationList;\nvar ConversationPage;\nvar ConversationInstance;\nvar ConversationContext;\n/* jshint ignore:start */\n\n/**\n * Initialize the ConversationList\n *\n * @constructor Twilio.Conversations.V1.ServiceContext.ConversationList\n *\n * @param {Twilio.Conversations.V1} version - Version of the resource\n * @param {string} chatServiceSid -\n *          The unique ID of the Conversation Service this conversation belongs to.\n */\n\n/* jshint ignore:end */\n\nConversationList = function ConversationList(version, chatServiceSid) {\n  /* jshint ignore:start */\n\n  /**\n   * @function conversations\n   * @memberof Twilio.Conversations.V1.ServiceContext#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Conversations.V1.ServiceContext.ConversationContext}\n   */\n\n  /* jshint ignore:end */\n  function ConversationListInstance(sid) {\n    return ConversationListInstance.get(sid);\n  }\n\n  ConversationListInstance._version = version; // Path Solution\n\n  ConversationListInstance._solution = {\n    chatServiceSid: chatServiceSid\n  };\n  ConversationListInstance._uri = `/Services/${chatServiceSid}/Conversations`;\n  /* jshint ignore:start */\n\n  /**\n   * create a ConversationInstance\n   *\n   * @function create\n   * @memberof Twilio.Conversations.V1.ServiceContext.ConversationList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.friendlyName] -\n   *          The human-readable name of this conversation.\n   * @param {string} [opts.uniqueName] -\n   *          An application-defined string that uniquely identifies the resource\n   * @param {string} [opts.attributes] -\n   *          An optional string metadata field you can use to store any data you wish.\n   * @param {string} [opts.messagingServiceSid] -\n   *          The unique ID of the Messaging Service this conversation belongs to.\n   * @param {Date} [opts.dateCreated] - The date that this resource was created.\n   * @param {Date} [opts.dateUpdated] - The date that this resource was last updated.\n   * @param {conversation.state} [opts.state] - Current state of this conversation.\n   * @param {string} [opts.timers.inactive] -\n   *          ISO8601 duration when conversation will be switched to `inactive` state.\n   * @param {string} [opts.timers.closed] -\n   *          ISO8601 duration when conversation will be switched to `closed` state.\n   * @param {conversation.webhook_enabled_type} [opts.xTwilioWebhookEnabled] -\n   *          The X-Twilio-Webhook-Enabled HTTP request header\n   * @param {function} [callback] - Callback to handle processed record\n   *\n   * @returns {Promise} Resolves to processed ConversationInstance\n   */\n\n  /* jshint ignore:end */\n\n  ConversationListInstance.create = function create(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n    var deferred = Q.defer();\n    var data = values.of({\n      'FriendlyName': _.get(opts, 'friendlyName'),\n      'UniqueName': _.get(opts, 'uniqueName'),\n      'Attributes': _.get(opts, 'attributes'),\n      'MessagingServiceSid': _.get(opts, 'messagingServiceSid'),\n      'DateCreated': serialize.iso8601DateTime(_.get(opts, 'dateCreated')),\n      'DateUpdated': serialize.iso8601DateTime(_.get(opts, 'dateUpdated')),\n      'State': _.get(opts, 'state'),\n      'Timers.Inactive': _.get(opts, 'timers.inactive'),\n      'Timers.Closed': _.get(opts, 'timers.closed')\n    });\n    var headers = values.of({\n      'X-Twilio-Webhook-Enabled': _.get(opts, 'xTwilioWebhookEnabled')\n    });\n\n    var promise = this._version.create({\n      uri: this._uri,\n      method: 'POST',\n      data: data,\n      headers: headers\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new ConversationInstance(this._version, payload, this._solution.chatServiceSid, this._solution.sid));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Streams ConversationInstance records from the API.\n   *\n   * This operation lazily loads records as efficiently as possible until the limit\n   * is reached.\n   *\n   * The results are passed into the callback function, so this operation is memory\n   * efficient.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function each\n   * @memberof Twilio.Conversations.V1.ServiceContext.ConversationList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         each() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no pageSize is defined but a limit is defined,\n   *         each() will attempt to read the limit with the most efficient\n   *         page size, i.e. min(limit, 1000)\n   * @param {Function} [opts.callback] -\n   *         Function to process each record. If this and a positional\n   *         callback are passed, this one will be used\n   * @param {Function} [opts.done] -\n   *          Function to be called upon completion of streaming\n   * @param {Function} [callback] - Function to process each record\n   */\n\n  /* jshint ignore:end */\n\n\n  ConversationListInstance.each = function each(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n\n    if (opts.callback) {\n      callback = opts.callback;\n    }\n\n    if (_.isUndefined(callback)) {\n      throw new Error('Callback function must be provided');\n    }\n\n    var done = false;\n    var currentPage = 1;\n    var currentResource = 0;\n\n    var limits = this._version.readLimits({\n      limit: opts.limit,\n      pageSize: opts.pageSize\n    });\n\n    function onComplete(error) {\n      done = true;\n\n      if (_.isFunction(opts.done)) {\n        opts.done(error);\n      }\n    }\n\n    function fetchNextPage(fn) {\n      var promise = fn();\n\n      if (_.isUndefined(promise)) {\n        onComplete();\n        return;\n      }\n\n      promise.then(function (page) {\n        _.each(page.instances, function (instance) {\n          if (done || !_.isUndefined(opts.limit) && currentResource >= opts.limit) {\n            done = true;\n            return false;\n          }\n\n          currentResource++;\n          callback(instance, onComplete);\n        });\n\n        if (!done) {\n          currentPage++;\n          fetchNextPage(_.bind(page.nextPage, page));\n        } else {\n          onComplete();\n        }\n      });\n      promise.catch(onComplete);\n    }\n\n    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Lists ConversationInstance records from the API as a list.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function list\n   * @memberof Twilio.Conversations.V1.ServiceContext.ConversationList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         list() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no page_size is defined but a limit is defined,\n   *         list() will attempt to read the limit with the most\n   *         efficient page size, i.e. min(limit, 1000)\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  ConversationListInstance.list = function list(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n    var deferred = Q.defer();\n    var allResources = [];\n\n    opts.callback = function (resource, done) {\n      allResources.push(resource);\n\n      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {\n        done();\n      }\n    };\n\n    opts.done = function (error) {\n      if (_.isUndefined(error)) {\n        deferred.resolve(allResources);\n      } else {\n        deferred.reject(error);\n      }\n    };\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    this.each(opts);\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Retrieve a single page of ConversationInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function page\n   * @memberof Twilio.Conversations.V1.ServiceContext.ConversationList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.pageToken] - PageToken provided by the API\n   * @param {number} [opts.pageNumber] -\n   *          Page Number, this value is simply for client state\n   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  ConversationListInstance.page = function page(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n    var deferred = Q.defer();\n    var data = values.of({\n      'PageToken': opts.pageToken,\n      'Page': opts.pageNumber,\n      'PageSize': opts.pageSize\n    });\n\n    var promise = this._version.page({\n      uri: this._uri,\n      method: 'GET',\n      params: data\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new ConversationPage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Retrieve a single target page of ConversationInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function getPage\n   * @memberof Twilio.Conversations.V1.ServiceContext.ConversationList#\n   *\n   * @param {string} [targetUrl] - API-generated URL for the requested results page\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  ConversationListInstance.getPage = function getPage(targetUrl, callback) {\n    var deferred = Q.defer();\n\n    var promise = this._version._domain.twilio.request({\n      method: 'GET',\n      uri: targetUrl\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new ConversationPage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Constructs a conversation\n   *\n   * @function get\n   * @memberof Twilio.Conversations.V1.ServiceContext.ConversationList#\n   *\n   * @param {string} sid -\n   *          A 34 character string that uniquely identifies this resource.\n   *\n   * @returns {Twilio.Conversations.V1.ServiceContext.ConversationContext}\n   */\n\n  /* jshint ignore:end */\n\n\n  ConversationListInstance.get = function get(sid) {\n    return new ConversationContext(this._version, this._solution.chatServiceSid, sid);\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Conversations.V1.ServiceContext.ConversationList#\n   *\n   * @returns Object\n   */\n\n  /* jshint ignore:end */\n\n\n  ConversationListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n\n  ConversationListInstance[util.inspect.custom] = function inspect(depth, options) {\n    return util.inspect(this.toJSON(), options);\n  };\n\n  return ConversationListInstance;\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the ConversationPage\n *\n * @constructor Twilio.Conversations.V1.ServiceContext.ConversationPage\n *\n * @param {V1} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {ConversationSolution} solution - Path solution\n *\n * @returns ConversationPage\n */\n\n/* jshint ignore:end */\n\n\nConversationPage = function ConversationPage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n\n_.extend(ConversationPage.prototype, Page.prototype);\n\nConversationPage.prototype.constructor = ConversationPage;\n/* jshint ignore:start */\n\n/**\n * Build an instance of ConversationInstance\n *\n * @function getInstance\n * @memberof Twilio.Conversations.V1.ServiceContext.ConversationPage#\n *\n * @param {ConversationPayload} payload - Payload response from the API\n *\n * @returns ConversationInstance\n */\n\n/* jshint ignore:end */\n\nConversationPage.prototype.getInstance = function getInstance(payload) {\n  return new ConversationInstance(this._version, payload, this._solution.chatServiceSid);\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Conversations.V1.ServiceContext.ConversationPage#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nConversationPage.prototype.toJSON = function toJSON() {\n  let clone = {};\n\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n\n  return clone;\n};\n\nConversationPage.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the ConversationContext\n *\n * @constructor Twilio.Conversations.V1.ServiceContext.ConversationInstance\n *\n * @property {string} accountSid -\n *          The unique ID of the Account responsible for this conversation.\n * @property {string} chatServiceSid -\n *          The unique ID of the Conversation Service this conversation belongs to.\n * @property {string} messagingServiceSid -\n *          The unique ID of the Messaging Service this conversation belongs to.\n * @property {string} sid -\n *          A 34 character string that uniquely identifies this resource.\n * @property {string} friendlyName - The human-readable name of this conversation.\n * @property {string} uniqueName -\n *          An application-defined string that uniquely identifies the resource\n * @property {string} attributes -\n *          An optional string metadata field you can use to store any data you wish.\n * @property {conversation.state} state - Current state of this conversation.\n * @property {Date} dateCreated - The date that this resource was created.\n * @property {Date} dateUpdated - The date that this resource was last updated.\n * @property {object} timers - Timer date values for this conversation.\n * @property {string} url - An absolute URL for this conversation.\n * @property {string} links -\n *          Absolute URLs to access the participants, messages and webhooks of this conversation.\n * @property {object} bindings - The bindings\n *\n * @param {V1} version - Version of the resource\n * @param {ConversationPayload} payload - The instance payload\n * @param {sid} chatServiceSid -\n *          The unique ID of the Conversation Service this conversation belongs to.\n * @param {sid_like} sid -\n *          A 34 character string that uniquely identifies this resource.\n */\n\n/* jshint ignore:end */\n\n\nConversationInstance = function ConversationInstance(version, payload, chatServiceSid, sid) {\n  this._version = version; // Marshaled Properties\n\n  this.accountSid = payload.account_sid; // jshint ignore:line\n\n  this.chatServiceSid = payload.chat_service_sid; // jshint ignore:line\n\n  this.messagingServiceSid = payload.messaging_service_sid; // jshint ignore:line\n\n  this.sid = payload.sid; // jshint ignore:line\n\n  this.friendlyName = payload.friendly_name; // jshint ignore:line\n\n  this.uniqueName = payload.unique_name; // jshint ignore:line\n\n  this.attributes = payload.attributes; // jshint ignore:line\n\n  this.state = payload.state; // jshint ignore:line\n\n  this.dateCreated = deserialize.iso8601DateTime(payload.date_created); // jshint ignore:line\n\n  this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated); // jshint ignore:line\n\n  this.timers = payload.timers; // jshint ignore:line\n\n  this.url = payload.url; // jshint ignore:line\n\n  this.links = payload.links; // jshint ignore:line\n\n  this.bindings = payload.bindings; // jshint ignore:line\n  // Context\n\n  this._context = undefined;\n  this._solution = {\n    chatServiceSid: chatServiceSid,\n    sid: sid || this.sid\n  };\n};\n\nObject.defineProperty(ConversationInstance.prototype, '_proxy', {\n  get: function () {\n    if (!this._context) {\n      this._context = new ConversationContext(this._version, this._solution.chatServiceSid, this._solution.sid);\n    }\n\n    return this._context;\n  }\n});\n/* jshint ignore:start */\n\n/**\n * update a ConversationInstance\n *\n * @function update\n * @memberof Twilio.Conversations.V1.ServiceContext.ConversationInstance#\n *\n * @param {object} [opts] - Options for request\n * @param {string} [opts.friendlyName] -\n *          The human-readable name of this conversation.\n * @param {Date} [opts.dateCreated] - The date that this resource was created.\n * @param {Date} [opts.dateUpdated] - The date that this resource was last updated.\n * @param {string} [opts.attributes] -\n *          An optional string metadata field you can use to store any data you wish.\n * @param {string} [opts.messagingServiceSid] -\n *          The unique ID of the Messaging Service this conversation belongs to.\n * @param {conversation.state} [opts.state] - Current state of this conversation.\n * @param {string} [opts.timers.inactive] -\n *          ISO8601 duration when conversation will be switched to `inactive` state.\n * @param {string} [opts.timers.closed] -\n *          ISO8601 duration when conversation will be switched to `closed` state.\n * @param {string} [opts.uniqueName] -\n *          An application-defined string that uniquely identifies the resource\n * @param {conversation.webhook_enabled_type} [opts.xTwilioWebhookEnabled] -\n *          The X-Twilio-Webhook-Enabled HTTP request header\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed ConversationInstance\n */\n\n/* jshint ignore:end */\n\nConversationInstance.prototype.update = function update(opts, callback) {\n  return this._proxy.update(opts, callback);\n};\n/* jshint ignore:start */\n\n/**\n * remove a ConversationInstance\n *\n * @function remove\n * @memberof Twilio.Conversations.V1.ServiceContext.ConversationInstance#\n *\n * @param {object} [opts] - Options for request\n * @param {conversation.webhook_enabled_type} [opts.xTwilioWebhookEnabled] -\n *          The X-Twilio-Webhook-Enabled HTTP request header\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed ConversationInstance\n */\n\n/* jshint ignore:end */\n\n\nConversationInstance.prototype.remove = function remove(opts, callback) {\n  return this._proxy.remove(opts, callback);\n};\n/* jshint ignore:start */\n\n/**\n * fetch a ConversationInstance\n *\n * @function fetch\n * @memberof Twilio.Conversations.V1.ServiceContext.ConversationInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed ConversationInstance\n */\n\n/* jshint ignore:end */\n\n\nConversationInstance.prototype.fetch = function fetch(callback) {\n  return this._proxy.fetch(callback);\n};\n/* jshint ignore:start */\n\n/**\n * Access the participants\n *\n * @function participants\n * @memberof Twilio.Conversations.V1.ServiceContext.ConversationInstance#\n *\n * @returns {Twilio.Conversations.V1.ServiceContext.ConversationContext.ParticipantList}\n */\n\n/* jshint ignore:end */\n\n\nConversationInstance.prototype.participants = function participants() {\n  return this._proxy.participants;\n};\n/* jshint ignore:start */\n\n/**\n * Access the messages\n *\n * @function messages\n * @memberof Twilio.Conversations.V1.ServiceContext.ConversationInstance#\n *\n * @returns {Twilio.Conversations.V1.ServiceContext.ConversationContext.MessageList}\n */\n\n/* jshint ignore:end */\n\n\nConversationInstance.prototype.messages = function messages() {\n  return this._proxy.messages;\n};\n/* jshint ignore:start */\n\n/**\n * Access the webhooks\n *\n * @function webhooks\n * @memberof Twilio.Conversations.V1.ServiceContext.ConversationInstance#\n *\n * @returns {Twilio.Conversations.V1.ServiceContext.ConversationContext.WebhookList}\n */\n\n/* jshint ignore:end */\n\n\nConversationInstance.prototype.webhooks = function webhooks() {\n  return this._proxy.webhooks;\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Conversations.V1.ServiceContext.ConversationInstance#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nConversationInstance.prototype.toJSON = function toJSON() {\n  let clone = {};\n\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n\n  return clone;\n};\n\nConversationInstance.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the ConversationContext\n *\n * @constructor Twilio.Conversations.V1.ServiceContext.ConversationContext\n *\n * @property {Twilio.Conversations.V1.ServiceContext.ConversationContext.ParticipantList} participants -\n *          participants resource\n * @property {Twilio.Conversations.V1.ServiceContext.ConversationContext.MessageList} messages -\n *          messages resource\n * @property {Twilio.Conversations.V1.ServiceContext.ConversationContext.WebhookList} webhooks -\n *          webhooks resource\n *\n * @param {V1} version - Version of the resource\n * @param {sid} chatServiceSid -\n *          The SID of the Conversation Service that the resource is associated with.\n * @param {sid_like} sid -\n *          A 34 character string that uniquely identifies this resource.\n */\n\n/* jshint ignore:end */\n\n\nConversationContext = function ConversationContext(version, chatServiceSid, sid) {\n  this._version = version; // Path Solution\n\n  this._solution = {\n    chatServiceSid: chatServiceSid,\n    sid: sid\n  };\n  this._uri = `/Services/${chatServiceSid}/Conversations/${sid}`; // Dependents\n\n  this._participants = undefined;\n  this._messages = undefined;\n  this._webhooks = undefined;\n};\n/* jshint ignore:start */\n\n/**\n * update a ConversationInstance\n *\n * @function update\n * @memberof Twilio.Conversations.V1.ServiceContext.ConversationContext#\n *\n * @param {object} [opts] - Options for request\n * @param {string} [opts.friendlyName] -\n *          The human-readable name of this conversation.\n * @param {Date} [opts.dateCreated] - The date that this resource was created.\n * @param {Date} [opts.dateUpdated] - The date that this resource was last updated.\n * @param {string} [opts.attributes] -\n *          An optional string metadata field you can use to store any data you wish.\n * @param {string} [opts.messagingServiceSid] -\n *          The unique ID of the Messaging Service this conversation belongs to.\n * @param {conversation.state} [opts.state] - Current state of this conversation.\n * @param {string} [opts.timers.inactive] -\n *          ISO8601 duration when conversation will be switched to `inactive` state.\n * @param {string} [opts.timers.closed] -\n *          ISO8601 duration when conversation will be switched to `closed` state.\n * @param {string} [opts.uniqueName] -\n *          An application-defined string that uniquely identifies the resource\n * @param {conversation.webhook_enabled_type} [opts.xTwilioWebhookEnabled] -\n *          The X-Twilio-Webhook-Enabled HTTP request header\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed ConversationInstance\n */\n\n/* jshint ignore:end */\n\n\nConversationContext.prototype.update = function update(opts, callback) {\n  if (_.isFunction(opts)) {\n    callback = opts;\n    opts = {};\n  }\n\n  opts = opts || {};\n  var deferred = Q.defer();\n  var data = values.of({\n    'FriendlyName': _.get(opts, 'friendlyName'),\n    'DateCreated': serialize.iso8601DateTime(_.get(opts, 'dateCreated')),\n    'DateUpdated': serialize.iso8601DateTime(_.get(opts, 'dateUpdated')),\n    'Attributes': _.get(opts, 'attributes'),\n    'MessagingServiceSid': _.get(opts, 'messagingServiceSid'),\n    'State': _.get(opts, 'state'),\n    'Timers.Inactive': _.get(opts, 'timers.inactive'),\n    'Timers.Closed': _.get(opts, 'timers.closed'),\n    'UniqueName': _.get(opts, 'uniqueName')\n  });\n  var headers = values.of({\n    'X-Twilio-Webhook-Enabled': _.get(opts, 'xTwilioWebhookEnabled')\n  });\n\n  var promise = this._version.update({\n    uri: this._uri,\n    method: 'POST',\n    data: data,\n    headers: headers\n  });\n\n  promise = promise.then(function (payload) {\n    deferred.resolve(new ConversationInstance(this._version, payload, this._solution.chatServiceSid, this._solution.sid));\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n/* jshint ignore:start */\n\n/**\n * remove a ConversationInstance\n *\n * @function remove\n * @memberof Twilio.Conversations.V1.ServiceContext.ConversationContext#\n *\n * @param {object} [opts] - Options for request\n * @param {conversation.webhook_enabled_type} [opts.xTwilioWebhookEnabled] -\n *          The X-Twilio-Webhook-Enabled HTTP request header\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed ConversationInstance\n */\n\n/* jshint ignore:end */\n\n\nConversationContext.prototype.remove = function remove(opts, callback) {\n  if (_.isFunction(opts)) {\n    callback = opts;\n    opts = {};\n  }\n\n  opts = opts || {};\n  var deferred = Q.defer();\n  var headers = values.of({\n    'X-Twilio-Webhook-Enabled': _.get(opts, 'xTwilioWebhookEnabled')\n  });\n\n  var promise = this._version.remove({\n    uri: this._uri,\n    method: 'DELETE',\n    headers: headers\n  });\n\n  promise = promise.then(function (payload) {\n    deferred.resolve(payload);\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n/* jshint ignore:start */\n\n/**\n * fetch a ConversationInstance\n *\n * @function fetch\n * @memberof Twilio.Conversations.V1.ServiceContext.ConversationContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed ConversationInstance\n */\n\n/* jshint ignore:end */\n\n\nConversationContext.prototype.fetch = function fetch(callback) {\n  var deferred = Q.defer();\n\n  var promise = this._version.fetch({\n    uri: this._uri,\n    method: 'GET'\n  });\n\n  promise = promise.then(function (payload) {\n    deferred.resolve(new ConversationInstance(this._version, payload, this._solution.chatServiceSid, this._solution.sid));\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\nObject.defineProperty(ConversationContext.prototype, 'participants', {\n  get: function () {\n    if (!this._participants) {\n      this._participants = new ParticipantList(this._version, this._solution.chatServiceSid, this._solution.sid);\n    }\n\n    return this._participants;\n  }\n});\nObject.defineProperty(ConversationContext.prototype, 'messages', {\n  get: function () {\n    if (!this._messages) {\n      this._messages = new MessageList(this._version, this._solution.chatServiceSid, this._solution.sid);\n    }\n\n    return this._messages;\n  }\n});\nObject.defineProperty(ConversationContext.prototype, 'webhooks', {\n  get: function () {\n    if (!this._webhooks) {\n      this._webhooks = new WebhookList(this._version, this._solution.chatServiceSid, this._solution.sid);\n    }\n\n    return this._webhooks;\n  }\n});\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Conversations.V1.ServiceContext.ConversationContext#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\nConversationContext.prototype.toJSON = function toJSON() {\n  return this._solution;\n};\n\nConversationContext.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\nmodule.exports = {\n  ConversationList: ConversationList,\n  ConversationPage: ConversationPage,\n  ConversationInstance: ConversationInstance,\n  ConversationContext: ConversationContext\n};","map":{"version":3,"names":["Q","require","_","util","MessageList","Page","ParticipantList","WebhookList","deserialize","serialize","values","ConversationList","ConversationPage","ConversationInstance","ConversationContext","version","chatServiceSid","ConversationListInstance","sid","get","_version","_solution","_uri","create","opts","callback","isFunction","deferred","defer","data","of","iso8601DateTime","headers","promise","uri","method","then","payload","resolve","bind","catch","error","reject","nodeify","each","isUndefined","Error","done","currentPage","currentResource","limits","readLimits","limit","pageSize","onComplete","fetchNextPage","fn","page","instances","instance","nextPage","merge","list","allResources","resource","push","length","pageToken","pageNumber","params","getPage","targetUrl","_domain","twilio","request","toJSON","inspect","custom","depth","options","response","solution","prototype","constructor","call","extend","getInstance","clone","forOwn","value","key","startsWith","accountSid","account_sid","chat_service_sid","messagingServiceSid","messaging_service_sid","friendlyName","friendly_name","uniqueName","unique_name","attributes","state","dateCreated","date_created","dateUpdated","date_updated","timers","url","links","bindings","_context","undefined","Object","defineProperty","update","_proxy","remove","fetch","participants","messages","webhooks","_participants","_messages","_webhooks","module","exports"],"sources":["/Users/hooniesun/rmit/fwp/assessment1/lan/node_modules/twilio/lib/rest/conversations/v1/service/conversation.js"],"sourcesContent":["'use strict';\n\n/* jshint ignore:start */\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n/* jshint ignore:end */\n\nvar Q = require('q');  /* jshint ignore:line */\nvar _ = require('lodash');  /* jshint ignore:line */\nvar util = require('util');  /* jshint ignore:line */\nvar MessageList = require('./conversation/message').MessageList;\nvar Page = require('../../../../base/Page');  /* jshint ignore:line */\nvar ParticipantList = require('./conversation/participant').ParticipantList;\nvar WebhookList = require('./conversation/webhook').WebhookList;\nvar deserialize = require(\n    '../../../../base/deserialize');  /* jshint ignore:line */\nvar serialize = require('../../../../base/serialize');  /* jshint ignore:line */\nvar values = require('../../../../base/values');  /* jshint ignore:line */\n\nvar ConversationList;\nvar ConversationPage;\nvar ConversationInstance;\nvar ConversationContext;\n\n/* jshint ignore:start */\n/**\n * Initialize the ConversationList\n *\n * @constructor Twilio.Conversations.V1.ServiceContext.ConversationList\n *\n * @param {Twilio.Conversations.V1} version - Version of the resource\n * @param {string} chatServiceSid -\n *          The unique ID of the Conversation Service this conversation belongs to.\n */\n/* jshint ignore:end */\nConversationList = function ConversationList(version, chatServiceSid) {\n  /* jshint ignore:start */\n  /**\n   * @function conversations\n   * @memberof Twilio.Conversations.V1.ServiceContext#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Conversations.V1.ServiceContext.ConversationContext}\n   */\n  /* jshint ignore:end */\n  function ConversationListInstance(sid) {\n    return ConversationListInstance.get(sid);\n  }\n\n  ConversationListInstance._version = version;\n  // Path Solution\n  ConversationListInstance._solution = {chatServiceSid: chatServiceSid};\n  ConversationListInstance._uri = `/Services/${chatServiceSid}/Conversations`;\n  /* jshint ignore:start */\n  /**\n   * create a ConversationInstance\n   *\n   * @function create\n   * @memberof Twilio.Conversations.V1.ServiceContext.ConversationList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.friendlyName] -\n   *          The human-readable name of this conversation.\n   * @param {string} [opts.uniqueName] -\n   *          An application-defined string that uniquely identifies the resource\n   * @param {string} [opts.attributes] -\n   *          An optional string metadata field you can use to store any data you wish.\n   * @param {string} [opts.messagingServiceSid] -\n   *          The unique ID of the Messaging Service this conversation belongs to.\n   * @param {Date} [opts.dateCreated] - The date that this resource was created.\n   * @param {Date} [opts.dateUpdated] - The date that this resource was last updated.\n   * @param {conversation.state} [opts.state] - Current state of this conversation.\n   * @param {string} [opts.timers.inactive] -\n   *          ISO8601 duration when conversation will be switched to `inactive` state.\n   * @param {string} [opts.timers.closed] -\n   *          ISO8601 duration when conversation will be switched to `closed` state.\n   * @param {conversation.webhook_enabled_type} [opts.xTwilioWebhookEnabled] -\n   *          The X-Twilio-Webhook-Enabled HTTP request header\n   * @param {function} [callback] - Callback to handle processed record\n   *\n   * @returns {Promise} Resolves to processed ConversationInstance\n   */\n  /* jshint ignore:end */\n  ConversationListInstance.create = function create(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n\n    var deferred = Q.defer();\n    var data = values.of({\n      'FriendlyName': _.get(opts, 'friendlyName'),\n      'UniqueName': _.get(opts, 'uniqueName'),\n      'Attributes': _.get(opts, 'attributes'),\n      'MessagingServiceSid': _.get(opts, 'messagingServiceSid'),\n      'DateCreated': serialize.iso8601DateTime(_.get(opts, 'dateCreated')),\n      'DateUpdated': serialize.iso8601DateTime(_.get(opts, 'dateUpdated')),\n      'State': _.get(opts, 'state'),\n      'Timers.Inactive': _.get(opts, 'timers.inactive'),\n      'Timers.Closed': _.get(opts, 'timers.closed')\n    });\n    var headers = values.of({'X-Twilio-Webhook-Enabled': _.get(opts, 'xTwilioWebhookEnabled')});\n\n    var promise = this._version.create({uri: this._uri, method: 'POST', data: data, headers: headers});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new ConversationInstance(\n        this._version,\n        payload,\n        this._solution.chatServiceSid,\n        this._solution.sid\n      ));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Streams ConversationInstance records from the API.\n   *\n   * This operation lazily loads records as efficiently as possible until the limit\n   * is reached.\n   *\n   * The results are passed into the callback function, so this operation is memory\n   * efficient.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function each\n   * @memberof Twilio.Conversations.V1.ServiceContext.ConversationList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         each() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no pageSize is defined but a limit is defined,\n   *         each() will attempt to read the limit with the most efficient\n   *         page size, i.e. min(limit, 1000)\n   * @param {Function} [opts.callback] -\n   *         Function to process each record. If this and a positional\n   *         callback are passed, this one will be used\n   * @param {Function} [opts.done] -\n   *          Function to be called upon completion of streaming\n   * @param {Function} [callback] - Function to process each record\n   */\n  /* jshint ignore:end */\n  ConversationListInstance.each = function each(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    if (opts.callback) {\n      callback = opts.callback;\n    }\n    if (_.isUndefined(callback)) {\n      throw new Error('Callback function must be provided');\n    }\n\n    var done = false;\n    var currentPage = 1;\n    var currentResource = 0;\n    var limits = this._version.readLimits({\n      limit: opts.limit,\n      pageSize: opts.pageSize\n    });\n\n    function onComplete(error) {\n      done = true;\n      if (_.isFunction(opts.done)) {\n        opts.done(error);\n      }\n    }\n\n    function fetchNextPage(fn) {\n      var promise = fn();\n      if (_.isUndefined(promise)) {\n        onComplete();\n        return;\n      }\n\n      promise.then(function(page) {\n        _.each(page.instances, function(instance) {\n          if (done || (!_.isUndefined(opts.limit) && currentResource >= opts.limit)) {\n            done = true;\n            return false;\n          }\n\n          currentResource++;\n          callback(instance, onComplete);\n        });\n\n        if (!done) {\n          currentPage++;\n          fetchNextPage(_.bind(page.nextPage, page));\n        } else {\n          onComplete();\n        }\n      });\n\n      promise.catch(onComplete);\n    }\n\n    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Lists ConversationInstance records from the API as a list.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function list\n   * @memberof Twilio.Conversations.V1.ServiceContext.ConversationList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         list() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no page_size is defined but a limit is defined,\n   *         list() will attempt to read the limit with the most\n   *         efficient page size, i.e. min(limit, 1000)\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  ConversationListInstance.list = function list(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    var deferred = Q.defer();\n    var allResources = [];\n    opts.callback = function(resource, done) {\n      allResources.push(resource);\n\n      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {\n        done();\n      }\n    };\n\n    opts.done = function(error) {\n      if (_.isUndefined(error)) {\n        deferred.resolve(allResources);\n      } else {\n        deferred.reject(error);\n      }\n    };\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    this.each(opts);\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single page of ConversationInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function page\n   * @memberof Twilio.Conversations.V1.ServiceContext.ConversationList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.pageToken] - PageToken provided by the API\n   * @param {number} [opts.pageNumber] -\n   *          Page Number, this value is simply for client state\n   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  ConversationListInstance.page = function page(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n\n    var deferred = Q.defer();\n    var data = values.of({\n      'PageToken': opts.pageToken,\n      'Page': opts.pageNumber,\n      'PageSize': opts.pageSize\n    });\n\n    var promise = this._version.page({uri: this._uri, method: 'GET', params: data});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new ConversationPage(this._version, payload, this._solution));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single target page of ConversationInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function getPage\n   * @memberof Twilio.Conversations.V1.ServiceContext.ConversationList#\n   *\n   * @param {string} [targetUrl] - API-generated URL for the requested results page\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  ConversationListInstance.getPage = function getPage(targetUrl, callback) {\n    var deferred = Q.defer();\n\n    var promise = this._version._domain.twilio.request({method: 'GET', uri: targetUrl});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new ConversationPage(this._version, payload, this._solution));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Constructs a conversation\n   *\n   * @function get\n   * @memberof Twilio.Conversations.V1.ServiceContext.ConversationList#\n   *\n   * @param {string} sid -\n   *          A 34 character string that uniquely identifies this resource.\n   *\n   * @returns {Twilio.Conversations.V1.ServiceContext.ConversationContext}\n   */\n  /* jshint ignore:end */\n  ConversationListInstance.get = function get(sid) {\n    return new ConversationContext(this._version, this._solution.chatServiceSid, sid);\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Conversations.V1.ServiceContext.ConversationList#\n   *\n   * @returns Object\n   */\n  /* jshint ignore:end */\n  ConversationListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n\n  ConversationListInstance[util.inspect.custom] = function inspect(depth, options)\n      {\n    return util.inspect(this.toJSON(), options);\n  };\n\n  return ConversationListInstance;\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the ConversationPage\n *\n * @constructor Twilio.Conversations.V1.ServiceContext.ConversationPage\n *\n * @param {V1} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {ConversationSolution} solution - Path solution\n *\n * @returns ConversationPage\n */\n/* jshint ignore:end */\nConversationPage = function ConversationPage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n\n_.extend(ConversationPage.prototype, Page.prototype);\nConversationPage.prototype.constructor = ConversationPage;\n\n/* jshint ignore:start */\n/**\n * Build an instance of ConversationInstance\n *\n * @function getInstance\n * @memberof Twilio.Conversations.V1.ServiceContext.ConversationPage#\n *\n * @param {ConversationPayload} payload - Payload response from the API\n *\n * @returns ConversationInstance\n */\n/* jshint ignore:end */\nConversationPage.prototype.getInstance = function getInstance(payload) {\n  return new ConversationInstance(this._version, payload, this._solution.chatServiceSid);\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Conversations.V1.ServiceContext.ConversationPage#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nConversationPage.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function(value, key) {\n    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\n\nConversationPage.prototype[util.inspect.custom] = function inspect(depth,\n    options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the ConversationContext\n *\n * @constructor Twilio.Conversations.V1.ServiceContext.ConversationInstance\n *\n * @property {string} accountSid -\n *          The unique ID of the Account responsible for this conversation.\n * @property {string} chatServiceSid -\n *          The unique ID of the Conversation Service this conversation belongs to.\n * @property {string} messagingServiceSid -\n *          The unique ID of the Messaging Service this conversation belongs to.\n * @property {string} sid -\n *          A 34 character string that uniquely identifies this resource.\n * @property {string} friendlyName - The human-readable name of this conversation.\n * @property {string} uniqueName -\n *          An application-defined string that uniquely identifies the resource\n * @property {string} attributes -\n *          An optional string metadata field you can use to store any data you wish.\n * @property {conversation.state} state - Current state of this conversation.\n * @property {Date} dateCreated - The date that this resource was created.\n * @property {Date} dateUpdated - The date that this resource was last updated.\n * @property {object} timers - Timer date values for this conversation.\n * @property {string} url - An absolute URL for this conversation.\n * @property {string} links -\n *          Absolute URLs to access the participants, messages and webhooks of this conversation.\n * @property {object} bindings - The bindings\n *\n * @param {V1} version - Version of the resource\n * @param {ConversationPayload} payload - The instance payload\n * @param {sid} chatServiceSid -\n *          The unique ID of the Conversation Service this conversation belongs to.\n * @param {sid_like} sid -\n *          A 34 character string that uniquely identifies this resource.\n */\n/* jshint ignore:end */\nConversationInstance = function ConversationInstance(version, payload,\n                                                      chatServiceSid, sid) {\n  this._version = version;\n\n  // Marshaled Properties\n  this.accountSid = payload.account_sid; // jshint ignore:line\n  this.chatServiceSid = payload.chat_service_sid; // jshint ignore:line\n  this.messagingServiceSid = payload.messaging_service_sid; // jshint ignore:line\n  this.sid = payload.sid; // jshint ignore:line\n  this.friendlyName = payload.friendly_name; // jshint ignore:line\n  this.uniqueName = payload.unique_name; // jshint ignore:line\n  this.attributes = payload.attributes; // jshint ignore:line\n  this.state = payload.state; // jshint ignore:line\n  this.dateCreated = deserialize.iso8601DateTime(payload.date_created); // jshint ignore:line\n  this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated); // jshint ignore:line\n  this.timers = payload.timers; // jshint ignore:line\n  this.url = payload.url; // jshint ignore:line\n  this.links = payload.links; // jshint ignore:line\n  this.bindings = payload.bindings; // jshint ignore:line\n\n  // Context\n  this._context = undefined;\n  this._solution = {chatServiceSid: chatServiceSid, sid: sid || this.sid, };\n};\n\nObject.defineProperty(ConversationInstance.prototype,\n  '_proxy', {\n    get: function() {\n      if (!this._context) {\n        this._context = new ConversationContext(\n          this._version,\n          this._solution.chatServiceSid,\n          this._solution.sid\n        );\n      }\n\n      return this._context;\n    }\n});\n\n/* jshint ignore:start */\n/**\n * update a ConversationInstance\n *\n * @function update\n * @memberof Twilio.Conversations.V1.ServiceContext.ConversationInstance#\n *\n * @param {object} [opts] - Options for request\n * @param {string} [opts.friendlyName] -\n *          The human-readable name of this conversation.\n * @param {Date} [opts.dateCreated] - The date that this resource was created.\n * @param {Date} [opts.dateUpdated] - The date that this resource was last updated.\n * @param {string} [opts.attributes] -\n *          An optional string metadata field you can use to store any data you wish.\n * @param {string} [opts.messagingServiceSid] -\n *          The unique ID of the Messaging Service this conversation belongs to.\n * @param {conversation.state} [opts.state] - Current state of this conversation.\n * @param {string} [opts.timers.inactive] -\n *          ISO8601 duration when conversation will be switched to `inactive` state.\n * @param {string} [opts.timers.closed] -\n *          ISO8601 duration when conversation will be switched to `closed` state.\n * @param {string} [opts.uniqueName] -\n *          An application-defined string that uniquely identifies the resource\n * @param {conversation.webhook_enabled_type} [opts.xTwilioWebhookEnabled] -\n *          The X-Twilio-Webhook-Enabled HTTP request header\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed ConversationInstance\n */\n/* jshint ignore:end */\nConversationInstance.prototype.update = function update(opts, callback) {\n  return this._proxy.update(opts, callback);\n};\n\n/* jshint ignore:start */\n/**\n * remove a ConversationInstance\n *\n * @function remove\n * @memberof Twilio.Conversations.V1.ServiceContext.ConversationInstance#\n *\n * @param {object} [opts] - Options for request\n * @param {conversation.webhook_enabled_type} [opts.xTwilioWebhookEnabled] -\n *          The X-Twilio-Webhook-Enabled HTTP request header\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed ConversationInstance\n */\n/* jshint ignore:end */\nConversationInstance.prototype.remove = function remove(opts, callback) {\n  return this._proxy.remove(opts, callback);\n};\n\n/* jshint ignore:start */\n/**\n * fetch a ConversationInstance\n *\n * @function fetch\n * @memberof Twilio.Conversations.V1.ServiceContext.ConversationInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed ConversationInstance\n */\n/* jshint ignore:end */\nConversationInstance.prototype.fetch = function fetch(callback) {\n  return this._proxy.fetch(callback);\n};\n\n/* jshint ignore:start */\n/**\n * Access the participants\n *\n * @function participants\n * @memberof Twilio.Conversations.V1.ServiceContext.ConversationInstance#\n *\n * @returns {Twilio.Conversations.V1.ServiceContext.ConversationContext.ParticipantList}\n */\n/* jshint ignore:end */\nConversationInstance.prototype.participants = function participants() {\n  return this._proxy.participants;\n};\n\n/* jshint ignore:start */\n/**\n * Access the messages\n *\n * @function messages\n * @memberof Twilio.Conversations.V1.ServiceContext.ConversationInstance#\n *\n * @returns {Twilio.Conversations.V1.ServiceContext.ConversationContext.MessageList}\n */\n/* jshint ignore:end */\nConversationInstance.prototype.messages = function messages() {\n  return this._proxy.messages;\n};\n\n/* jshint ignore:start */\n/**\n * Access the webhooks\n *\n * @function webhooks\n * @memberof Twilio.Conversations.V1.ServiceContext.ConversationInstance#\n *\n * @returns {Twilio.Conversations.V1.ServiceContext.ConversationContext.WebhookList}\n */\n/* jshint ignore:end */\nConversationInstance.prototype.webhooks = function webhooks() {\n  return this._proxy.webhooks;\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Conversations.V1.ServiceContext.ConversationInstance#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nConversationInstance.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function(value, key) {\n    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\n\nConversationInstance.prototype[util.inspect.custom] = function inspect(depth,\n    options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the ConversationContext\n *\n * @constructor Twilio.Conversations.V1.ServiceContext.ConversationContext\n *\n * @property {Twilio.Conversations.V1.ServiceContext.ConversationContext.ParticipantList} participants -\n *          participants resource\n * @property {Twilio.Conversations.V1.ServiceContext.ConversationContext.MessageList} messages -\n *          messages resource\n * @property {Twilio.Conversations.V1.ServiceContext.ConversationContext.WebhookList} webhooks -\n *          webhooks resource\n *\n * @param {V1} version - Version of the resource\n * @param {sid} chatServiceSid -\n *          The SID of the Conversation Service that the resource is associated with.\n * @param {sid_like} sid -\n *          A 34 character string that uniquely identifies this resource.\n */\n/* jshint ignore:end */\nConversationContext = function ConversationContext(version, chatServiceSid, sid)\n                                                    {\n  this._version = version;\n\n  // Path Solution\n  this._solution = {chatServiceSid: chatServiceSid, sid: sid, };\n  this._uri = `/Services/${chatServiceSid}/Conversations/${sid}`;\n\n  // Dependents\n  this._participants = undefined;\n  this._messages = undefined;\n  this._webhooks = undefined;\n};\n\n/* jshint ignore:start */\n/**\n * update a ConversationInstance\n *\n * @function update\n * @memberof Twilio.Conversations.V1.ServiceContext.ConversationContext#\n *\n * @param {object} [opts] - Options for request\n * @param {string} [opts.friendlyName] -\n *          The human-readable name of this conversation.\n * @param {Date} [opts.dateCreated] - The date that this resource was created.\n * @param {Date} [opts.dateUpdated] - The date that this resource was last updated.\n * @param {string} [opts.attributes] -\n *          An optional string metadata field you can use to store any data you wish.\n * @param {string} [opts.messagingServiceSid] -\n *          The unique ID of the Messaging Service this conversation belongs to.\n * @param {conversation.state} [opts.state] - Current state of this conversation.\n * @param {string} [opts.timers.inactive] -\n *          ISO8601 duration when conversation will be switched to `inactive` state.\n * @param {string} [opts.timers.closed] -\n *          ISO8601 duration when conversation will be switched to `closed` state.\n * @param {string} [opts.uniqueName] -\n *          An application-defined string that uniquely identifies the resource\n * @param {conversation.webhook_enabled_type} [opts.xTwilioWebhookEnabled] -\n *          The X-Twilio-Webhook-Enabled HTTP request header\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed ConversationInstance\n */\n/* jshint ignore:end */\nConversationContext.prototype.update = function update(opts, callback) {\n  if (_.isFunction(opts)) {\n    callback = opts;\n    opts = {};\n  }\n  opts = opts || {};\n\n  var deferred = Q.defer();\n  var data = values.of({\n    'FriendlyName': _.get(opts, 'friendlyName'),\n    'DateCreated': serialize.iso8601DateTime(_.get(opts, 'dateCreated')),\n    'DateUpdated': serialize.iso8601DateTime(_.get(opts, 'dateUpdated')),\n    'Attributes': _.get(opts, 'attributes'),\n    'MessagingServiceSid': _.get(opts, 'messagingServiceSid'),\n    'State': _.get(opts, 'state'),\n    'Timers.Inactive': _.get(opts, 'timers.inactive'),\n    'Timers.Closed': _.get(opts, 'timers.closed'),\n    'UniqueName': _.get(opts, 'uniqueName')\n  });\n  var headers = values.of({'X-Twilio-Webhook-Enabled': _.get(opts, 'xTwilioWebhookEnabled')});\n\n  var promise = this._version.update({uri: this._uri, method: 'POST', data: data, headers: headers});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(new ConversationInstance(\n      this._version,\n      payload,\n      this._solution.chatServiceSid,\n      this._solution.sid\n    ));\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * remove a ConversationInstance\n *\n * @function remove\n * @memberof Twilio.Conversations.V1.ServiceContext.ConversationContext#\n *\n * @param {object} [opts] - Options for request\n * @param {conversation.webhook_enabled_type} [opts.xTwilioWebhookEnabled] -\n *          The X-Twilio-Webhook-Enabled HTTP request header\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed ConversationInstance\n */\n/* jshint ignore:end */\nConversationContext.prototype.remove = function remove(opts, callback) {\n  if (_.isFunction(opts)) {\n    callback = opts;\n    opts = {};\n  }\n  opts = opts || {};\n\n  var deferred = Q.defer();\n  var headers = values.of({'X-Twilio-Webhook-Enabled': _.get(opts, 'xTwilioWebhookEnabled')});\n\n  var promise = this._version.remove({uri: this._uri, method: 'DELETE', headers: headers});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(payload);\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * fetch a ConversationInstance\n *\n * @function fetch\n * @memberof Twilio.Conversations.V1.ServiceContext.ConversationContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed ConversationInstance\n */\n/* jshint ignore:end */\nConversationContext.prototype.fetch = function fetch(callback) {\n  var deferred = Q.defer();\n  var promise = this._version.fetch({uri: this._uri, method: 'GET'});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(new ConversationInstance(\n      this._version,\n      payload,\n      this._solution.chatServiceSid,\n      this._solution.sid\n    ));\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\nObject.defineProperty(ConversationContext.prototype,\n  'participants', {\n    get: function() {\n      if (!this._participants) {\n        this._participants = new ParticipantList(\n          this._version,\n          this._solution.chatServiceSid,\n          this._solution.sid\n        );\n      }\n      return this._participants;\n    }\n});\n\nObject.defineProperty(ConversationContext.prototype,\n  'messages', {\n    get: function() {\n      if (!this._messages) {\n        this._messages = new MessageList(this._version, this._solution.chatServiceSid, this._solution.sid);\n      }\n      return this._messages;\n    }\n});\n\nObject.defineProperty(ConversationContext.prototype,\n  'webhooks', {\n    get: function() {\n      if (!this._webhooks) {\n        this._webhooks = new WebhookList(this._version, this._solution.chatServiceSid, this._solution.sid);\n      }\n      return this._webhooks;\n    }\n});\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Conversations.V1.ServiceContext.ConversationContext#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nConversationContext.prototype.toJSON = function toJSON() {\n  return this._solution;\n};\n\nConversationContext.prototype[util.inspect.custom] = function inspect(depth,\n    options) {\n  return util.inspect(this.toJSON(), options);\n};\n\nmodule.exports = {\n  ConversationList: ConversationList,\n  ConversationPage: ConversationPage,\n  ConversationInstance: ConversationInstance,\n  ConversationContext: ConversationContext\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}