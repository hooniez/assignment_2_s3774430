{"ast":null,"code":"var _jsxFileName = \"/Users/hooniesun/rmit/fwp/assessment1/lan/src/UI/MFA.js\",\n    _s = $RefreshSig$();\n\nimport * as React from \"react\";\nimport { Form, Button, Container, Modal } from \"react-bootstrap\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst axios = require(\"axios\");\n\nexport default function MFA(_ref) {\n  _s();\n\n  let {\n    show\n  } = _ref;\n  const [qrcodeSrc, setQrcodeSrc] = React.useState(\"\");\n  const [secret, setSecret] = React.useState(\"\");\n  const url = \"https://google-authenticator.p.rapidapi.com\";\n  const apiKey = \"414bc5d180msh86e5db53aea8bbcp1bcd81jsn6915fb5401f0\";\n\n  async function getQrCode() {\n    // options for the initial request to get a secret key\n    let res;\n    let options = {\n      method: \"GET\",\n      url: url + \"/new_v2/\",\n      headers: {\n        \"X-RapidAPI-Key\": apiKey,\n        \"X-RapidAPI-Host\": \"google-authenticator.p.rapidapi.com\"\n      }\n    };\n    res = await axios.request(options);\n    let secret = res.data;\n    setSecret(secret); // Re-define options again to make a request to get a QR code.\n\n    options = {\n      method: \"GET\",\n      url: url + \"/enroll/\",\n      params: {\n        secret: secret,\n        issuer: \"lan\",\n        account: \"JohnDoe\"\n      },\n      headers: {\n        \"X-RapidAPI-Key\": apiKey,\n        \"X-RapidAPI-Host\": \"google-authenticator.p.rapidapi.com\"\n      }\n    };\n    res = await axios.request(options);\n    setQrcodeSrc(res.data);\n  }\n\n  React.useEffect(() => {\n    getQrCode();\n  }, []);\n\n  const submitHandler = e => {\n    e.preventDefault();\n    const code = e.target[0].value;\n    const options = {\n      method: \"GET\",\n      url: url + \"/validate/\",\n      params: {\n        code: code,\n        secret: secret\n      },\n      headers: {\n        \"X-RapidAPI-Key\": apiKey,\n        \"X-RapidAPI-Host\": \"google-authenticator.p.rapidapi.com\"\n      }\n    };\n    axios.request(options).then(response => {\n      console.log(response.data);\n\n      if (response.data === \"True\") {\n        console.log(\"validated!\");\n      } else {\n        console.log(\"not really\");\n      }\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(Modal, {\n    show: show,\n    children: [/*#__PURE__*/_jsxDEV(Modal.Header, {\n      children: /*#__PURE__*/_jsxDEV(Modal.Title, {\n        children: \"Scan the barcode from Google Authenticator\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Modal.Body, {\n      children: /*#__PURE__*/_jsxDEV(\"img\", {\n        src: qrcodeSrc\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Modal.Footer, {\n      children: /*#__PURE__*/_jsxDEV(Form, {\n        onSubmit: submitHandler,\n        children: [/*#__PURE__*/_jsxDEV(Form.Group, {\n          controlId: \"authCode\",\n          children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n            children: \"Authentication Code\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 81,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n            type: \"text\",\n            required: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 82,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          type: \"submit\",\n          children: \"Authenticate\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 71,\n    columnNumber: 5\n  }, this);\n}\n\n_s(MFA, \"P86Ntgcc7Iq7/yQdl17Ac4a1oS4=\");\n\n_c = MFA;\n\nvar _c;\n\n$RefreshReg$(_c, \"MFA\");","map":{"version":3,"names":["React","Form","Button","Container","Modal","axios","require","MFA","show","qrcodeSrc","setQrcodeSrc","useState","secret","setSecret","url","apiKey","getQrCode","res","options","method","headers","request","data","params","issuer","account","useEffect","submitHandler","e","preventDefault","code","target","value","then","response","console","log"],"sources":["/Users/hooniesun/rmit/fwp/assessment1/lan/src/UI/MFA.js"],"sourcesContent":["import * as React from \"react\";\nimport { Form, Button, Container, Modal } from \"react-bootstrap\";\nconst axios = require(\"axios\");\n\nexport default function MFA({ show }) {\n  const [qrcodeSrc, setQrcodeSrc] = React.useState(\"\");\n  const [secret, setSecret] = React.useState(\"\");\n  const url = \"https://google-authenticator.p.rapidapi.com\";\n  const apiKey = \"414bc5d180msh86e5db53aea8bbcp1bcd81jsn6915fb5401f0\";\n\n  async function getQrCode() {\n    // options for the initial request to get a secret key\n    let res;\n    let options = {\n      method: \"GET\",\n      url: url + \"/new_v2/\",\n      headers: {\n        \"X-RapidAPI-Key\": apiKey,\n        \"X-RapidAPI-Host\": \"google-authenticator.p.rapidapi.com\",\n      },\n    };\n    res = await axios.request(options);\n    let secret = res.data;\n    setSecret(secret);\n\n    // Re-define options again to make a request to get a QR code.\n    options = {\n      method: \"GET\",\n      url: url + \"/enroll/\",\n      params: {\n        secret: secret,\n        issuer: \"lan\",\n        account: \"JohnDoe\",\n      },\n      headers: {\n        \"X-RapidAPI-Key\": apiKey,\n        \"X-RapidAPI-Host\": \"google-authenticator.p.rapidapi.com\",\n      },\n    };\n    res = await axios.request(options);\n    setQrcodeSrc(res.data);\n  }\n\n  React.useEffect(() => {\n    getQrCode();\n  }, []);\n\n  const submitHandler = (e) => {\n    e.preventDefault();\n    const code = e.target[0].value;\n    const options = {\n      method: \"GET\",\n      url: url + \"/validate/\",\n      params: { code: code, secret: secret },\n      headers: {\n        \"X-RapidAPI-Key\": apiKey,\n        \"X-RapidAPI-Host\": \"google-authenticator.p.rapidapi.com\",\n      },\n    };\n    axios.request(options).then((response) => {\n      console.log(response.data);\n      if (response.data === \"True\") {\n        console.log(\"validated!\");\n      } else {\n        console.log(\"not really\");\n      }\n    });\n  };\n\n  return (\n    <Modal show={show}>\n      <Modal.Header>\n        <Modal.Title>Scan the barcode from Google Authenticator</Modal.Title>\n      </Modal.Header>\n      <Modal.Body>\n        <img src={qrcodeSrc} />\n      </Modal.Body>\n      <Modal.Footer>\n        <Form onSubmit={submitHandler}>\n          <Form.Group controlId=\"authCode\">\n            <Form.Label>Authentication Code</Form.Label>\n            <Form.Control type=\"text\" required></Form.Control>\n          </Form.Group>\n          <Button type=\"submit\">Authenticate</Button>\n        </Form>\n      </Modal.Footer>\n    </Modal>\n  );\n}\n"],"mappings":";;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,IAAT,EAAeC,MAAf,EAAuBC,SAAvB,EAAkCC,KAAlC,QAA+C,iBAA/C;;;AACA,MAAMC,KAAK,GAAGC,OAAO,CAAC,OAAD,CAArB;;AAEA,eAAe,SAASC,GAAT,OAAuB;EAAA;;EAAA,IAAV;IAAEC;EAAF,CAAU;EACpC,MAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BV,KAAK,CAACW,QAAN,CAAe,EAAf,CAAlC;EACA,MAAM,CAACC,MAAD,EAASC,SAAT,IAAsBb,KAAK,CAACW,QAAN,CAAe,EAAf,CAA5B;EACA,MAAMG,GAAG,GAAG,6CAAZ;EACA,MAAMC,MAAM,GAAG,oDAAf;;EAEA,eAAeC,SAAf,GAA2B;IACzB;IACA,IAAIC,GAAJ;IACA,IAAIC,OAAO,GAAG;MACZC,MAAM,EAAE,KADI;MAEZL,GAAG,EAAEA,GAAG,GAAG,UAFC;MAGZM,OAAO,EAAE;QACP,kBAAkBL,MADX;QAEP,mBAAmB;MAFZ;IAHG,CAAd;IAQAE,GAAG,GAAG,MAAMZ,KAAK,CAACgB,OAAN,CAAcH,OAAd,CAAZ;IACA,IAAIN,MAAM,GAAGK,GAAG,CAACK,IAAjB;IACAT,SAAS,CAACD,MAAD,CAAT,CAbyB,CAezB;;IACAM,OAAO,GAAG;MACRC,MAAM,EAAE,KADA;MAERL,GAAG,EAAEA,GAAG,GAAG,UAFH;MAGRS,MAAM,EAAE;QACNX,MAAM,EAAEA,MADF;QAENY,MAAM,EAAE,KAFF;QAGNC,OAAO,EAAE;MAHH,CAHA;MAQRL,OAAO,EAAE;QACP,kBAAkBL,MADX;QAEP,mBAAmB;MAFZ;IARD,CAAV;IAaAE,GAAG,GAAG,MAAMZ,KAAK,CAACgB,OAAN,CAAcH,OAAd,CAAZ;IACAR,YAAY,CAACO,GAAG,CAACK,IAAL,CAAZ;EACD;;EAEDtB,KAAK,CAAC0B,SAAN,CAAgB,MAAM;IACpBV,SAAS;EACV,CAFD,EAEG,EAFH;;EAIA,MAAMW,aAAa,GAAIC,CAAD,IAAO;IAC3BA,CAAC,CAACC,cAAF;IACA,MAAMC,IAAI,GAAGF,CAAC,CAACG,MAAF,CAAS,CAAT,EAAYC,KAAzB;IACA,MAAMd,OAAO,GAAG;MACdC,MAAM,EAAE,KADM;MAEdL,GAAG,EAAEA,GAAG,GAAG,YAFG;MAGdS,MAAM,EAAE;QAAEO,IAAI,EAAEA,IAAR;QAAclB,MAAM,EAAEA;MAAtB,CAHM;MAIdQ,OAAO,EAAE;QACP,kBAAkBL,MADX;QAEP,mBAAmB;MAFZ;IAJK,CAAhB;IASAV,KAAK,CAACgB,OAAN,CAAcH,OAAd,EAAuBe,IAAvB,CAA6BC,QAAD,IAAc;MACxCC,OAAO,CAACC,GAAR,CAAYF,QAAQ,CAACZ,IAArB;;MACA,IAAIY,QAAQ,CAACZ,IAAT,KAAkB,MAAtB,EAA8B;QAC5Ba,OAAO,CAACC,GAAR,CAAY,YAAZ;MACD,CAFD,MAEO;QACLD,OAAO,CAACC,GAAR,CAAY,YAAZ;MACD;IACF,CAPD;EAQD,CApBD;;EAsBA,oBACE,QAAC,KAAD;IAAO,IAAI,EAAE5B,IAAb;IAAA,wBACE,QAAC,KAAD,CAAO,MAAP;MAAA,uBACE,QAAC,KAAD,CAAO,KAAP;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IADF;MAAA;MAAA;MAAA;IAAA,QADF,eAIE,QAAC,KAAD,CAAO,IAAP;MAAA,uBACE;QAAK,GAAG,EAAEC;MAAV;QAAA;QAAA;QAAA;MAAA;IADF;MAAA;MAAA;MAAA;IAAA,QAJF,eAOE,QAAC,KAAD,CAAO,MAAP;MAAA,uBACE,QAAC,IAAD;QAAM,QAAQ,EAAEkB,aAAhB;QAAA,wBACE,QAAC,IAAD,CAAM,KAAN;UAAY,SAAS,EAAC,UAAtB;UAAA,wBACE,QAAC,IAAD,CAAM,KAAN;YAAA;UAAA;YAAA;YAAA;YAAA;UAAA,QADF,eAEE,QAAC,IAAD,CAAM,OAAN;YAAc,IAAI,EAAC,MAAnB;YAA0B,QAAQ;UAAlC;YAAA;YAAA;YAAA;UAAA,QAFF;QAAA;UAAA;UAAA;UAAA;QAAA,QADF,eAKE,QAAC,MAAD;UAAQ,IAAI,EAAC,QAAb;UAAA;QAAA;UAAA;UAAA;UAAA;QAAA,QALF;MAAA;QAAA;QAAA;QAAA;MAAA;IADF;MAAA;MAAA;MAAA;IAAA,QAPF;EAAA;IAAA;IAAA;IAAA;EAAA,QADF;AAmBD;;GApFuBpB,G;;KAAAA,G"},"metadata":{},"sourceType":"module"}