{"ast":null,"code":"'use strict';\n/* jshint ignore:start */\n\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n\n/* jshint ignore:end */\n\nvar Q = require('q');\n/* jshint ignore:line */\n\n\nvar _ = require('lodash');\n/* jshint ignore:line */\n\n\nvar util = require('util');\n/* jshint ignore:line */\n\n\nvar Page = require('../../../base/Page');\n/* jshint ignore:line */\n\n\nvar PlaybackGrantList = require('./playerStreamer/playbackGrant').PlaybackGrantList;\n\nvar deserialize = require('../../../base/deserialize');\n/* jshint ignore:line */\n\n\nvar serialize = require('../../../base/serialize');\n/* jshint ignore:line */\n\n\nvar values = require('../../../base/values');\n/* jshint ignore:line */\n\n\nvar PlayerStreamerList;\nvar PlayerStreamerPage;\nvar PlayerStreamerInstance;\nvar PlayerStreamerContext;\n/* jshint ignore:start */\n\n/**\n * Initialize the PlayerStreamerList\n *\n * @constructor Twilio.Media.V1.PlayerStreamerList\n *\n * @param {Twilio.Media.V1} version - Version of the resource\n */\n\n/* jshint ignore:end */\n\nPlayerStreamerList = function PlayerStreamerList(version) {\n  /* jshint ignore:start */\n\n  /**\n   * @function playerStreamer\n   * @memberof Twilio.Media.V1#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Media.V1.PlayerStreamerContext}\n   */\n\n  /* jshint ignore:end */\n  function PlayerStreamerListInstance(sid) {\n    return PlayerStreamerListInstance.get(sid);\n  }\n\n  PlayerStreamerListInstance._version = version; // Path Solution\n\n  PlayerStreamerListInstance._solution = {};\n  PlayerStreamerListInstance._uri = `/PlayerStreamers`;\n  /* jshint ignore:start */\n\n  /**\n   * create a PlayerStreamerInstance\n   *\n   * @function create\n   * @memberof Twilio.Media.V1.PlayerStreamerList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {boolean} [opts.video] -\n   *          Whether the PlayerStreamer is configured to stream video\n   * @param {string} [opts.statusCallback] -\n   *          The URL to which Twilio will send PlayerStreamer event updates\n   * @param {string} [opts.statusCallbackMethod] -\n   *          The HTTP method Twilio should use to call the `status_callback` URL\n   * @param {number} [opts.maxDuration] - Maximum PlayerStreamer duration in seconds\n   * @param {function} [callback] - Callback to handle processed record\n   *\n   * @returns {Promise} Resolves to processed PlayerStreamerInstance\n   */\n\n  /* jshint ignore:end */\n\n  PlayerStreamerListInstance.create = function create(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n    var deferred = Q.defer();\n    var data = values.of({\n      'Video': serialize.bool(_.get(opts, 'video')),\n      'StatusCallback': _.get(opts, 'statusCallback'),\n      'StatusCallbackMethod': _.get(opts, 'statusCallbackMethod'),\n      'MaxDuration': _.get(opts, 'maxDuration')\n    });\n\n    var promise = this._version.create({\n      uri: this._uri,\n      method: 'POST',\n      data: data\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new PlayerStreamerInstance(this._version, payload, this._solution.sid));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Streams PlayerStreamerInstance records from the API.\n   *\n   * This operation lazily loads records as efficiently as possible until the limit\n   * is reached.\n   *\n   * The results are passed into the callback function, so this operation is memory\n   * efficient.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function each\n   * @memberof Twilio.Media.V1.PlayerStreamerList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {player_streamer.order} [opts.order] - The sort order of the list\n   * @param {player_streamer.status} [opts.status] - Status to filter by\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         each() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no pageSize is defined but a limit is defined,\n   *         each() will attempt to read the limit with the most efficient\n   *         page size, i.e. min(limit, 1000)\n   * @param {Function} [opts.callback] -\n   *         Function to process each record. If this and a positional\n   *         callback are passed, this one will be used\n   * @param {Function} [opts.done] -\n   *          Function to be called upon completion of streaming\n   * @param {Function} [callback] - Function to process each record\n   */\n\n  /* jshint ignore:end */\n\n\n  PlayerStreamerListInstance.each = function each(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n\n    if (opts.callback) {\n      callback = opts.callback;\n    }\n\n    if (_.isUndefined(callback)) {\n      throw new Error('Callback function must be provided');\n    }\n\n    var done = false;\n    var currentPage = 1;\n    var currentResource = 0;\n\n    var limits = this._version.readLimits({\n      limit: opts.limit,\n      pageSize: opts.pageSize\n    });\n\n    function onComplete(error) {\n      done = true;\n\n      if (_.isFunction(opts.done)) {\n        opts.done(error);\n      }\n    }\n\n    function fetchNextPage(fn) {\n      var promise = fn();\n\n      if (_.isUndefined(promise)) {\n        onComplete();\n        return;\n      }\n\n      promise.then(function (page) {\n        _.each(page.instances, function (instance) {\n          if (done || !_.isUndefined(opts.limit) && currentResource >= opts.limit) {\n            done = true;\n            return false;\n          }\n\n          currentResource++;\n          callback(instance, onComplete);\n        });\n\n        if (!done) {\n          currentPage++;\n          fetchNextPage(_.bind(page.nextPage, page));\n        } else {\n          onComplete();\n        }\n      });\n      promise.catch(onComplete);\n    }\n\n    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Lists PlayerStreamerInstance records from the API as a list.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function list\n   * @memberof Twilio.Media.V1.PlayerStreamerList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {player_streamer.order} [opts.order] - The sort order of the list\n   * @param {player_streamer.status} [opts.status] - Status to filter by\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         list() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no page_size is defined but a limit is defined,\n   *         list() will attempt to read the limit with the most\n   *         efficient page size, i.e. min(limit, 1000)\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  PlayerStreamerListInstance.list = function list(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n    var deferred = Q.defer();\n    var allResources = [];\n\n    opts.callback = function (resource, done) {\n      allResources.push(resource);\n\n      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {\n        done();\n      }\n    };\n\n    opts.done = function (error) {\n      if (_.isUndefined(error)) {\n        deferred.resolve(allResources);\n      } else {\n        deferred.reject(error);\n      }\n    };\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    this.each(opts);\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Retrieve a single page of PlayerStreamerInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function page\n   * @memberof Twilio.Media.V1.PlayerStreamerList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {player_streamer.order} [opts.order] - The sort order of the list\n   * @param {player_streamer.status} [opts.status] - Status to filter by\n   * @param {string} [opts.pageToken] - PageToken provided by the API\n   * @param {number} [opts.pageNumber] -\n   *          Page Number, this value is simply for client state\n   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  PlayerStreamerListInstance.page = function page(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n    var deferred = Q.defer();\n    var data = values.of({\n      'Order': _.get(opts, 'order'),\n      'Status': _.get(opts, 'status'),\n      'PageToken': opts.pageToken,\n      'Page': opts.pageNumber,\n      'PageSize': opts.pageSize\n    });\n\n    var promise = this._version.page({\n      uri: this._uri,\n      method: 'GET',\n      params: data\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new PlayerStreamerPage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Retrieve a single target page of PlayerStreamerInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function getPage\n   * @memberof Twilio.Media.V1.PlayerStreamerList#\n   *\n   * @param {string} [targetUrl] - API-generated URL for the requested results page\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  PlayerStreamerListInstance.getPage = function getPage(targetUrl, callback) {\n    var deferred = Q.defer();\n\n    var promise = this._version._domain.twilio.request({\n      method: 'GET',\n      uri: targetUrl\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new PlayerStreamerPage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Constructs a player_streamer\n   *\n   * @function get\n   * @memberof Twilio.Media.V1.PlayerStreamerList#\n   *\n   * @param {string} sid - The SID that identifies the resource to fetch\n   *\n   * @returns {Twilio.Media.V1.PlayerStreamerContext}\n   */\n\n  /* jshint ignore:end */\n\n\n  PlayerStreamerListInstance.get = function get(sid) {\n    return new PlayerStreamerContext(this._version, sid);\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Media.V1.PlayerStreamerList#\n   *\n   * @returns Object\n   */\n\n  /* jshint ignore:end */\n\n\n  PlayerStreamerListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n\n  PlayerStreamerListInstance[util.inspect.custom] = function inspect(depth, options) {\n    return util.inspect(this.toJSON(), options);\n  };\n\n  return PlayerStreamerListInstance;\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the PlayerStreamerPage\n *\n * @constructor Twilio.Media.V1.PlayerStreamerPage\n *\n * @param {V1} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {PlayerStreamerSolution} solution - Path solution\n *\n * @returns PlayerStreamerPage\n */\n\n/* jshint ignore:end */\n\n\nPlayerStreamerPage = function PlayerStreamerPage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n\n_.extend(PlayerStreamerPage.prototype, Page.prototype);\n\nPlayerStreamerPage.prototype.constructor = PlayerStreamerPage;\n/* jshint ignore:start */\n\n/**\n * Build an instance of PlayerStreamerInstance\n *\n * @function getInstance\n * @memberof Twilio.Media.V1.PlayerStreamerPage#\n *\n * @param {PlayerStreamerPayload} payload - Payload response from the API\n *\n * @returns PlayerStreamerInstance\n */\n\n/* jshint ignore:end */\n\nPlayerStreamerPage.prototype.getInstance = function getInstance(payload) {\n  return new PlayerStreamerInstance(this._version, payload);\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Media.V1.PlayerStreamerPage#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nPlayerStreamerPage.prototype.toJSON = function toJSON() {\n  let clone = {};\n\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n\n  return clone;\n};\n\nPlayerStreamerPage.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the PlayerStreamerContext\n *\n * @constructor Twilio.Media.V1.PlayerStreamerInstance\n *\n * @property {string} accountSid - The SID of the Account that created the resource\n * @property {Date} dateCreated -\n *          The ISO 8601 date and time in GMT when the resource was created\n * @property {Date} dateUpdated -\n *          The ISO 8601 date and time in GMT when the resource was last updated\n * @property {boolean} video -\n *          Whether the PlayerStreamer is configured to stream video\n * @property {string} links - The URLs of related resources\n * @property {string} sid - The unique string that identifies the resource\n * @property {player_streamer.status} status - The status of the PlayerStreamer\n * @property {string} url - The absolute URL of the resource\n * @property {string} statusCallback -\n *          The URL to which Twilio will send PlayerStreamer event updates\n * @property {string} statusCallbackMethod -\n *          The HTTP method Twilio should use to call the `status_callback` URL\n * @property {player_streamer.ended_reason} endedReason -\n *          The reason why a PlayerStreamer ended\n * @property {number} maxDuration - Maximum PlayerStreamer duration in seconds\n *\n * @param {V1} version - Version of the resource\n * @param {PlayerStreamerPayload} payload - The instance payload\n * @param {sid} sid - The SID that identifies the resource to fetch\n */\n\n/* jshint ignore:end */\n\n\nPlayerStreamerInstance = function PlayerStreamerInstance(version, payload, sid) {\n  this._version = version; // Marshaled Properties\n\n  this.accountSid = payload.account_sid; // jshint ignore:line\n\n  this.dateCreated = deserialize.iso8601DateTime(payload.date_created); // jshint ignore:line\n\n  this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated); // jshint ignore:line\n\n  this.video = payload.video; // jshint ignore:line\n\n  this.links = payload.links; // jshint ignore:line\n\n  this.sid = payload.sid; // jshint ignore:line\n\n  this.status = payload.status; // jshint ignore:line\n\n  this.url = payload.url; // jshint ignore:line\n\n  this.statusCallback = payload.status_callback; // jshint ignore:line\n\n  this.statusCallbackMethod = payload.status_callback_method; // jshint ignore:line\n\n  this.endedReason = payload.ended_reason; // jshint ignore:line\n\n  this.maxDuration = deserialize.integer(payload.max_duration); // jshint ignore:line\n  // Context\n\n  this._context = undefined;\n  this._solution = {\n    sid: sid || this.sid\n  };\n};\n\nObject.defineProperty(PlayerStreamerInstance.prototype, '_proxy', {\n  get: function () {\n    if (!this._context) {\n      this._context = new PlayerStreamerContext(this._version, this._solution.sid);\n    }\n\n    return this._context;\n  }\n});\n/* jshint ignore:start */\n\n/**\n * fetch a PlayerStreamerInstance\n *\n * @function fetch\n * @memberof Twilio.Media.V1.PlayerStreamerInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed PlayerStreamerInstance\n */\n\n/* jshint ignore:end */\n\nPlayerStreamerInstance.prototype.fetch = function fetch(callback) {\n  return this._proxy.fetch(callback);\n};\n/* jshint ignore:start */\n\n/**\n * update a PlayerStreamerInstance\n *\n * @function update\n * @memberof Twilio.Media.V1.PlayerStreamerInstance#\n *\n * @param {object} opts - Options for request\n * @param {player_streamer.update_status} opts.status -\n *          The status the PlayerStreamer should be transitioned to\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed PlayerStreamerInstance\n */\n\n/* jshint ignore:end */\n\n\nPlayerStreamerInstance.prototype.update = function update(opts, callback) {\n  return this._proxy.update(opts, callback);\n};\n/* jshint ignore:start */\n\n/**\n * Access the playbackGrant\n *\n * @function playbackGrant\n * @memberof Twilio.Media.V1.PlayerStreamerInstance#\n *\n * @returns {Twilio.Media.V1.PlayerStreamerContext.PlaybackGrantList}\n */\n\n/* jshint ignore:end */\n\n\nPlayerStreamerInstance.prototype.playbackGrant = function playbackGrant() {\n  return this._proxy.playbackGrant;\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Media.V1.PlayerStreamerInstance#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nPlayerStreamerInstance.prototype.toJSON = function toJSON() {\n  let clone = {};\n\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n\n  return clone;\n};\n\nPlayerStreamerInstance.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the PlayerStreamerContext\n *\n * @constructor Twilio.Media.V1.PlayerStreamerContext\n *\n * @property {Twilio.Media.V1.PlayerStreamerContext.PlaybackGrantList} playbackGrant -\n *          playbackGrant resource\n *\n * @param {V1} version - Version of the resource\n * @param {sid} sid - The SID that identifies the resource to fetch\n */\n\n/* jshint ignore:end */\n\n\nPlayerStreamerContext = function PlayerStreamerContext(version, sid) {\n  this._version = version; // Path Solution\n\n  this._solution = {\n    sid: sid\n  };\n  this._uri = `/PlayerStreamers/${sid}`; // Dependents\n\n  this._playbackGrant = undefined;\n};\n/* jshint ignore:start */\n\n/**\n * fetch a PlayerStreamerInstance\n *\n * @function fetch\n * @memberof Twilio.Media.V1.PlayerStreamerContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed PlayerStreamerInstance\n */\n\n/* jshint ignore:end */\n\n\nPlayerStreamerContext.prototype.fetch = function fetch(callback) {\n  var deferred = Q.defer();\n\n  var promise = this._version.fetch({\n    uri: this._uri,\n    method: 'GET'\n  });\n\n  promise = promise.then(function (payload) {\n    deferred.resolve(new PlayerStreamerInstance(this._version, payload, this._solution.sid));\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n/* jshint ignore:start */\n\n/**\n * update a PlayerStreamerInstance\n *\n * @function update\n * @memberof Twilio.Media.V1.PlayerStreamerContext#\n *\n * @param {object} opts - Options for request\n * @param {player_streamer.update_status} opts.status -\n *          The status the PlayerStreamer should be transitioned to\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed PlayerStreamerInstance\n */\n\n/* jshint ignore:end */\n\n\nPlayerStreamerContext.prototype.update = function update(opts, callback) {\n  if (_.isUndefined(opts)) {\n    throw new Error('Required parameter \"opts\" missing.');\n  }\n\n  if (_.isUndefined(opts['status'])) {\n    throw new Error('Required parameter \"opts[\\'status\\']\" missing.');\n  }\n\n  var deferred = Q.defer();\n  var data = values.of({\n    'Status': _.get(opts, 'status')\n  });\n\n  var promise = this._version.update({\n    uri: this._uri,\n    method: 'POST',\n    data: data\n  });\n\n  promise = promise.then(function (payload) {\n    deferred.resolve(new PlayerStreamerInstance(this._version, payload, this._solution.sid));\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\nObject.defineProperty(PlayerStreamerContext.prototype, 'playbackGrant', {\n  get: function () {\n    if (!this._playbackGrant) {\n      this._playbackGrant = new PlaybackGrantList(this._version, this._solution.sid);\n    }\n\n    return this._playbackGrant;\n  }\n});\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Media.V1.PlayerStreamerContext#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\nPlayerStreamerContext.prototype.toJSON = function toJSON() {\n  return this._solution;\n};\n\nPlayerStreamerContext.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\nmodule.exports = {\n  PlayerStreamerList: PlayerStreamerList,\n  PlayerStreamerPage: PlayerStreamerPage,\n  PlayerStreamerInstance: PlayerStreamerInstance,\n  PlayerStreamerContext: PlayerStreamerContext\n};","map":{"version":3,"names":["Q","require","_","util","Page","PlaybackGrantList","deserialize","serialize","values","PlayerStreamerList","PlayerStreamerPage","PlayerStreamerInstance","PlayerStreamerContext","version","PlayerStreamerListInstance","sid","get","_version","_solution","_uri","create","opts","callback","isFunction","deferred","defer","data","of","bool","promise","uri","method","then","payload","resolve","bind","catch","error","reject","nodeify","each","isUndefined","Error","done","currentPage","currentResource","limits","readLimits","limit","pageSize","onComplete","fetchNextPage","fn","page","instances","instance","nextPage","merge","list","allResources","resource","push","length","pageToken","pageNumber","params","getPage","targetUrl","_domain","twilio","request","toJSON","inspect","custom","depth","options","response","solution","prototype","constructor","call","extend","getInstance","clone","forOwn","value","key","startsWith","accountSid","account_sid","dateCreated","iso8601DateTime","date_created","dateUpdated","date_updated","video","links","status","url","statusCallback","status_callback","statusCallbackMethod","status_callback_method","endedReason","ended_reason","maxDuration","integer","max_duration","_context","undefined","Object","defineProperty","fetch","_proxy","update","playbackGrant","_playbackGrant","module","exports"],"sources":["/Users/hooniesun/rmit/fwp/assessment1/lan/node_modules/twilio/lib/rest/media/v1/playerStreamer.js"],"sourcesContent":["'use strict';\n\n/* jshint ignore:start */\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n/* jshint ignore:end */\n\nvar Q = require('q');  /* jshint ignore:line */\nvar _ = require('lodash');  /* jshint ignore:line */\nvar util = require('util');  /* jshint ignore:line */\nvar Page = require('../../../base/Page');  /* jshint ignore:line */\nvar PlaybackGrantList = require(\n    './playerStreamer/playbackGrant').PlaybackGrantList;\nvar deserialize = require(\n    '../../../base/deserialize');  /* jshint ignore:line */\nvar serialize = require('../../../base/serialize');  /* jshint ignore:line */\nvar values = require('../../../base/values');  /* jshint ignore:line */\n\nvar PlayerStreamerList;\nvar PlayerStreamerPage;\nvar PlayerStreamerInstance;\nvar PlayerStreamerContext;\n\n/* jshint ignore:start */\n/**\n * Initialize the PlayerStreamerList\n *\n * @constructor Twilio.Media.V1.PlayerStreamerList\n *\n * @param {Twilio.Media.V1} version - Version of the resource\n */\n/* jshint ignore:end */\nPlayerStreamerList = function PlayerStreamerList(version) {\n  /* jshint ignore:start */\n  /**\n   * @function playerStreamer\n   * @memberof Twilio.Media.V1#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Media.V1.PlayerStreamerContext}\n   */\n  /* jshint ignore:end */\n  function PlayerStreamerListInstance(sid) {\n    return PlayerStreamerListInstance.get(sid);\n  }\n\n  PlayerStreamerListInstance._version = version;\n  // Path Solution\n  PlayerStreamerListInstance._solution = {};\n  PlayerStreamerListInstance._uri = `/PlayerStreamers`;\n  /* jshint ignore:start */\n  /**\n   * create a PlayerStreamerInstance\n   *\n   * @function create\n   * @memberof Twilio.Media.V1.PlayerStreamerList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {boolean} [opts.video] -\n   *          Whether the PlayerStreamer is configured to stream video\n   * @param {string} [opts.statusCallback] -\n   *          The URL to which Twilio will send PlayerStreamer event updates\n   * @param {string} [opts.statusCallbackMethod] -\n   *          The HTTP method Twilio should use to call the `status_callback` URL\n   * @param {number} [opts.maxDuration] - Maximum PlayerStreamer duration in seconds\n   * @param {function} [callback] - Callback to handle processed record\n   *\n   * @returns {Promise} Resolves to processed PlayerStreamerInstance\n   */\n  /* jshint ignore:end */\n  PlayerStreamerListInstance.create = function create(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n\n    var deferred = Q.defer();\n    var data = values.of({\n      'Video': serialize.bool(_.get(opts, 'video')),\n      'StatusCallback': _.get(opts, 'statusCallback'),\n      'StatusCallbackMethod': _.get(opts, 'statusCallbackMethod'),\n      'MaxDuration': _.get(opts, 'maxDuration')\n    });\n\n    var promise = this._version.create({uri: this._uri, method: 'POST', data: data});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new PlayerStreamerInstance(this._version, payload, this._solution.sid));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Streams PlayerStreamerInstance records from the API.\n   *\n   * This operation lazily loads records as efficiently as possible until the limit\n   * is reached.\n   *\n   * The results are passed into the callback function, so this operation is memory\n   * efficient.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function each\n   * @memberof Twilio.Media.V1.PlayerStreamerList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {player_streamer.order} [opts.order] - The sort order of the list\n   * @param {player_streamer.status} [opts.status] - Status to filter by\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         each() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no pageSize is defined but a limit is defined,\n   *         each() will attempt to read the limit with the most efficient\n   *         page size, i.e. min(limit, 1000)\n   * @param {Function} [opts.callback] -\n   *         Function to process each record. If this and a positional\n   *         callback are passed, this one will be used\n   * @param {Function} [opts.done] -\n   *          Function to be called upon completion of streaming\n   * @param {Function} [callback] - Function to process each record\n   */\n  /* jshint ignore:end */\n  PlayerStreamerListInstance.each = function each(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    if (opts.callback) {\n      callback = opts.callback;\n    }\n    if (_.isUndefined(callback)) {\n      throw new Error('Callback function must be provided');\n    }\n\n    var done = false;\n    var currentPage = 1;\n    var currentResource = 0;\n    var limits = this._version.readLimits({\n      limit: opts.limit,\n      pageSize: opts.pageSize\n    });\n\n    function onComplete(error) {\n      done = true;\n      if (_.isFunction(opts.done)) {\n        opts.done(error);\n      }\n    }\n\n    function fetchNextPage(fn) {\n      var promise = fn();\n      if (_.isUndefined(promise)) {\n        onComplete();\n        return;\n      }\n\n      promise.then(function(page) {\n        _.each(page.instances, function(instance) {\n          if (done || (!_.isUndefined(opts.limit) && currentResource >= opts.limit)) {\n            done = true;\n            return false;\n          }\n\n          currentResource++;\n          callback(instance, onComplete);\n        });\n\n        if (!done) {\n          currentPage++;\n          fetchNextPage(_.bind(page.nextPage, page));\n        } else {\n          onComplete();\n        }\n      });\n\n      promise.catch(onComplete);\n    }\n\n    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Lists PlayerStreamerInstance records from the API as a list.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function list\n   * @memberof Twilio.Media.V1.PlayerStreamerList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {player_streamer.order} [opts.order] - The sort order of the list\n   * @param {player_streamer.status} [opts.status] - Status to filter by\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         list() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no page_size is defined but a limit is defined,\n   *         list() will attempt to read the limit with the most\n   *         efficient page size, i.e. min(limit, 1000)\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  PlayerStreamerListInstance.list = function list(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    var deferred = Q.defer();\n    var allResources = [];\n    opts.callback = function(resource, done) {\n      allResources.push(resource);\n\n      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {\n        done();\n      }\n    };\n\n    opts.done = function(error) {\n      if (_.isUndefined(error)) {\n        deferred.resolve(allResources);\n      } else {\n        deferred.reject(error);\n      }\n    };\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    this.each(opts);\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single page of PlayerStreamerInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function page\n   * @memberof Twilio.Media.V1.PlayerStreamerList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {player_streamer.order} [opts.order] - The sort order of the list\n   * @param {player_streamer.status} [opts.status] - Status to filter by\n   * @param {string} [opts.pageToken] - PageToken provided by the API\n   * @param {number} [opts.pageNumber] -\n   *          Page Number, this value is simply for client state\n   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  PlayerStreamerListInstance.page = function page(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n\n    var deferred = Q.defer();\n    var data = values.of({\n      'Order': _.get(opts, 'order'),\n      'Status': _.get(opts, 'status'),\n      'PageToken': opts.pageToken,\n      'Page': opts.pageNumber,\n      'PageSize': opts.pageSize\n    });\n\n    var promise = this._version.page({uri: this._uri, method: 'GET', params: data});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new PlayerStreamerPage(this._version, payload, this._solution));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single target page of PlayerStreamerInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function getPage\n   * @memberof Twilio.Media.V1.PlayerStreamerList#\n   *\n   * @param {string} [targetUrl] - API-generated URL for the requested results page\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  PlayerStreamerListInstance.getPage = function getPage(targetUrl, callback) {\n    var deferred = Q.defer();\n\n    var promise = this._version._domain.twilio.request({method: 'GET', uri: targetUrl});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new PlayerStreamerPage(this._version, payload, this._solution));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Constructs a player_streamer\n   *\n   * @function get\n   * @memberof Twilio.Media.V1.PlayerStreamerList#\n   *\n   * @param {string} sid - The SID that identifies the resource to fetch\n   *\n   * @returns {Twilio.Media.V1.PlayerStreamerContext}\n   */\n  /* jshint ignore:end */\n  PlayerStreamerListInstance.get = function get(sid) {\n    return new PlayerStreamerContext(this._version, sid);\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Media.V1.PlayerStreamerList#\n   *\n   * @returns Object\n   */\n  /* jshint ignore:end */\n  PlayerStreamerListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n\n  PlayerStreamerListInstance[util.inspect.custom] = function inspect(depth,\n      options) {\n    return util.inspect(this.toJSON(), options);\n  };\n\n  return PlayerStreamerListInstance;\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the PlayerStreamerPage\n *\n * @constructor Twilio.Media.V1.PlayerStreamerPage\n *\n * @param {V1} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {PlayerStreamerSolution} solution - Path solution\n *\n * @returns PlayerStreamerPage\n */\n/* jshint ignore:end */\nPlayerStreamerPage = function PlayerStreamerPage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n\n_.extend(PlayerStreamerPage.prototype, Page.prototype);\nPlayerStreamerPage.prototype.constructor = PlayerStreamerPage;\n\n/* jshint ignore:start */\n/**\n * Build an instance of PlayerStreamerInstance\n *\n * @function getInstance\n * @memberof Twilio.Media.V1.PlayerStreamerPage#\n *\n * @param {PlayerStreamerPayload} payload - Payload response from the API\n *\n * @returns PlayerStreamerInstance\n */\n/* jshint ignore:end */\nPlayerStreamerPage.prototype.getInstance = function getInstance(payload) {\n  return new PlayerStreamerInstance(this._version, payload);\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Media.V1.PlayerStreamerPage#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nPlayerStreamerPage.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function(value, key) {\n    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\n\nPlayerStreamerPage.prototype[util.inspect.custom] = function inspect(depth,\n    options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the PlayerStreamerContext\n *\n * @constructor Twilio.Media.V1.PlayerStreamerInstance\n *\n * @property {string} accountSid - The SID of the Account that created the resource\n * @property {Date} dateCreated -\n *          The ISO 8601 date and time in GMT when the resource was created\n * @property {Date} dateUpdated -\n *          The ISO 8601 date and time in GMT when the resource was last updated\n * @property {boolean} video -\n *          Whether the PlayerStreamer is configured to stream video\n * @property {string} links - The URLs of related resources\n * @property {string} sid - The unique string that identifies the resource\n * @property {player_streamer.status} status - The status of the PlayerStreamer\n * @property {string} url - The absolute URL of the resource\n * @property {string} statusCallback -\n *          The URL to which Twilio will send PlayerStreamer event updates\n * @property {string} statusCallbackMethod -\n *          The HTTP method Twilio should use to call the `status_callback` URL\n * @property {player_streamer.ended_reason} endedReason -\n *          The reason why a PlayerStreamer ended\n * @property {number} maxDuration - Maximum PlayerStreamer duration in seconds\n *\n * @param {V1} version - Version of the resource\n * @param {PlayerStreamerPayload} payload - The instance payload\n * @param {sid} sid - The SID that identifies the resource to fetch\n */\n/* jshint ignore:end */\nPlayerStreamerInstance = function PlayerStreamerInstance(version, payload, sid)\n                                                          {\n  this._version = version;\n\n  // Marshaled Properties\n  this.accountSid = payload.account_sid; // jshint ignore:line\n  this.dateCreated = deserialize.iso8601DateTime(payload.date_created); // jshint ignore:line\n  this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated); // jshint ignore:line\n  this.video = payload.video; // jshint ignore:line\n  this.links = payload.links; // jshint ignore:line\n  this.sid = payload.sid; // jshint ignore:line\n  this.status = payload.status; // jshint ignore:line\n  this.url = payload.url; // jshint ignore:line\n  this.statusCallback = payload.status_callback; // jshint ignore:line\n  this.statusCallbackMethod = payload.status_callback_method; // jshint ignore:line\n  this.endedReason = payload.ended_reason; // jshint ignore:line\n  this.maxDuration = deserialize.integer(payload.max_duration); // jshint ignore:line\n\n  // Context\n  this._context = undefined;\n  this._solution = {sid: sid || this.sid, };\n};\n\nObject.defineProperty(PlayerStreamerInstance.prototype,\n  '_proxy', {\n    get: function() {\n      if (!this._context) {\n        this._context = new PlayerStreamerContext(this._version, this._solution.sid);\n      }\n\n      return this._context;\n    }\n});\n\n/* jshint ignore:start */\n/**\n * fetch a PlayerStreamerInstance\n *\n * @function fetch\n * @memberof Twilio.Media.V1.PlayerStreamerInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed PlayerStreamerInstance\n */\n/* jshint ignore:end */\nPlayerStreamerInstance.prototype.fetch = function fetch(callback) {\n  return this._proxy.fetch(callback);\n};\n\n/* jshint ignore:start */\n/**\n * update a PlayerStreamerInstance\n *\n * @function update\n * @memberof Twilio.Media.V1.PlayerStreamerInstance#\n *\n * @param {object} opts - Options for request\n * @param {player_streamer.update_status} opts.status -\n *          The status the PlayerStreamer should be transitioned to\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed PlayerStreamerInstance\n */\n/* jshint ignore:end */\nPlayerStreamerInstance.prototype.update = function update(opts, callback) {\n  return this._proxy.update(opts, callback);\n};\n\n/* jshint ignore:start */\n/**\n * Access the playbackGrant\n *\n * @function playbackGrant\n * @memberof Twilio.Media.V1.PlayerStreamerInstance#\n *\n * @returns {Twilio.Media.V1.PlayerStreamerContext.PlaybackGrantList}\n */\n/* jshint ignore:end */\nPlayerStreamerInstance.prototype.playbackGrant = function playbackGrant() {\n  return this._proxy.playbackGrant;\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Media.V1.PlayerStreamerInstance#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nPlayerStreamerInstance.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function(value, key) {\n    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\n\nPlayerStreamerInstance.prototype[util.inspect.custom] = function inspect(depth,\n    options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the PlayerStreamerContext\n *\n * @constructor Twilio.Media.V1.PlayerStreamerContext\n *\n * @property {Twilio.Media.V1.PlayerStreamerContext.PlaybackGrantList} playbackGrant -\n *          playbackGrant resource\n *\n * @param {V1} version - Version of the resource\n * @param {sid} sid - The SID that identifies the resource to fetch\n */\n/* jshint ignore:end */\nPlayerStreamerContext = function PlayerStreamerContext(version, sid) {\n  this._version = version;\n\n  // Path Solution\n  this._solution = {sid: sid, };\n  this._uri = `/PlayerStreamers/${sid}`;\n\n  // Dependents\n  this._playbackGrant = undefined;\n};\n\n/* jshint ignore:start */\n/**\n * fetch a PlayerStreamerInstance\n *\n * @function fetch\n * @memberof Twilio.Media.V1.PlayerStreamerContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed PlayerStreamerInstance\n */\n/* jshint ignore:end */\nPlayerStreamerContext.prototype.fetch = function fetch(callback) {\n  var deferred = Q.defer();\n  var promise = this._version.fetch({uri: this._uri, method: 'GET'});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(new PlayerStreamerInstance(this._version, payload, this._solution.sid));\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * update a PlayerStreamerInstance\n *\n * @function update\n * @memberof Twilio.Media.V1.PlayerStreamerContext#\n *\n * @param {object} opts - Options for request\n * @param {player_streamer.update_status} opts.status -\n *          The status the PlayerStreamer should be transitioned to\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed PlayerStreamerInstance\n */\n/* jshint ignore:end */\nPlayerStreamerContext.prototype.update = function update(opts, callback) {\n  if (_.isUndefined(opts)) {\n    throw new Error('Required parameter \"opts\" missing.');\n  }\n  if (_.isUndefined(opts['status'])) {\n    throw new Error('Required parameter \"opts[\\'status\\']\" missing.');\n  }\n\n  var deferred = Q.defer();\n  var data = values.of({'Status': _.get(opts, 'status')});\n\n  var promise = this._version.update({uri: this._uri, method: 'POST', data: data});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(new PlayerStreamerInstance(this._version, payload, this._solution.sid));\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\nObject.defineProperty(PlayerStreamerContext.prototype,\n  'playbackGrant', {\n    get: function() {\n      if (!this._playbackGrant) {\n        this._playbackGrant = new PlaybackGrantList(this._version, this._solution.sid);\n      }\n      return this._playbackGrant;\n    }\n});\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Media.V1.PlayerStreamerContext#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nPlayerStreamerContext.prototype.toJSON = function toJSON() {\n  return this._solution;\n};\n\nPlayerStreamerContext.prototype[util.inspect.custom] = function inspect(depth,\n    options) {\n  return util.inspect(this.toJSON(), options);\n};\n\nmodule.exports = {\n  PlayerStreamerList: PlayerStreamerList,\n  PlayerStreamerPage: PlayerStreamerPage,\n  PlayerStreamerInstance: PlayerStreamerInstance,\n  PlayerStreamerContext: PlayerStreamerContext\n};\n"],"mappings":"AAAA;AAEA;;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;;AAEA,IAAIA,CAAC,GAAGC,OAAO,CAAC,GAAD,CAAf;AAAuB;;;AACvB,IAAIC,CAAC,GAAGD,OAAO,CAAC,QAAD,CAAf;AAA4B;;;AAC5B,IAAIE,IAAI,GAAGF,OAAO,CAAC,MAAD,CAAlB;AAA6B;;;AAC7B,IAAIG,IAAI,GAAGH,OAAO,CAAC,oBAAD,CAAlB;AAA2C;;;AAC3C,IAAII,iBAAiB,GAAGJ,OAAO,CAC3B,gCAD2B,CAAP,CACcI,iBADtC;;AAEA,IAAIC,WAAW,GAAGL,OAAO,CACrB,2BADqB,CAAzB;AACmC;;;AACnC,IAAIM,SAAS,GAAGN,OAAO,CAAC,yBAAD,CAAvB;AAAqD;;;AACrD,IAAIO,MAAM,GAAGP,OAAO,CAAC,sBAAD,CAApB;AAA+C;;;AAE/C,IAAIQ,kBAAJ;AACA,IAAIC,kBAAJ;AACA,IAAIC,sBAAJ;AACA,IAAIC,qBAAJ;AAEA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;;AACAH,kBAAkB,GAAG,SAASA,kBAAT,CAA4BI,OAA5B,EAAqC;EACxD;;EACA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;;EACE;EACA,SAASC,0BAAT,CAAoCC,GAApC,EAAyC;IACvC,OAAOD,0BAA0B,CAACE,GAA3B,CAA+BD,GAA/B,CAAP;EACD;;EAEDD,0BAA0B,CAACG,QAA3B,GAAsCJ,OAAtC,CAfwD,CAgBxD;;EACAC,0BAA0B,CAACI,SAA3B,GAAuC,EAAvC;EACAJ,0BAA0B,CAACK,IAA3B,GAAmC,kBAAnC;EACA;;EACA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EACE;;EACAL,0BAA0B,CAACM,MAA3B,GAAoC,SAASA,MAAT,CAAgBC,IAAhB,EAAsBC,QAAtB,EAAgC;IAClE,IAAIpB,CAAC,CAACqB,UAAF,CAAaF,IAAb,CAAJ,EAAwB;MACtBC,QAAQ,GAAGD,IAAX;MACAA,IAAI,GAAG,EAAP;IACD;;IACDA,IAAI,GAAGA,IAAI,IAAI,EAAf;IAEA,IAAIG,QAAQ,GAAGxB,CAAC,CAACyB,KAAF,EAAf;IACA,IAAIC,IAAI,GAAGlB,MAAM,CAACmB,EAAP,CAAU;MACnB,SAASpB,SAAS,CAACqB,IAAV,CAAe1B,CAAC,CAACc,GAAF,CAAMK,IAAN,EAAY,OAAZ,CAAf,CADU;MAEnB,kBAAkBnB,CAAC,CAACc,GAAF,CAAMK,IAAN,EAAY,gBAAZ,CAFC;MAGnB,wBAAwBnB,CAAC,CAACc,GAAF,CAAMK,IAAN,EAAY,sBAAZ,CAHL;MAInB,eAAenB,CAAC,CAACc,GAAF,CAAMK,IAAN,EAAY,aAAZ;IAJI,CAAV,CAAX;;IAOA,IAAIQ,OAAO,GAAG,KAAKZ,QAAL,CAAcG,MAAd,CAAqB;MAACU,GAAG,EAAE,KAAKX,IAAX;MAAiBY,MAAM,EAAE,MAAzB;MAAiCL,IAAI,EAAEA;IAAvC,CAArB,CAAd;;IAEAG,OAAO,GAAGA,OAAO,CAACG,IAAR,CAAa,UAASC,OAAT,EAAkB;MACvCT,QAAQ,CAACU,OAAT,CAAiB,IAAIvB,sBAAJ,CAA2B,KAAKM,QAAhC,EAA0CgB,OAA1C,EAAmD,KAAKf,SAAL,CAAeH,GAAlE,CAAjB;IACD,CAFsB,CAErBoB,IAFqB,CAEhB,IAFgB,CAAb,CAAV;IAIAN,OAAO,CAACO,KAAR,CAAc,UAASC,KAAT,EAAgB;MAC5Bb,QAAQ,CAACc,MAAT,CAAgBD,KAAhB;IACD,CAFD;;IAIA,IAAInC,CAAC,CAACqB,UAAF,CAAaD,QAAb,CAAJ,EAA4B;MAC1BE,QAAQ,CAACK,OAAT,CAAiBU,OAAjB,CAAyBjB,QAAzB;IACD;;IAED,OAAOE,QAAQ,CAACK,OAAhB;EACD,CA9BD;EAgCA;;EACA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EACE;;;EACAf,0BAA0B,CAAC0B,IAA3B,GAAkC,SAASA,IAAT,CAAcnB,IAAd,EAAoBC,QAApB,EAA8B;IAC9D,IAAIpB,CAAC,CAACqB,UAAF,CAAaF,IAAb,CAAJ,EAAwB;MACtBC,QAAQ,GAAGD,IAAX;MACAA,IAAI,GAAG,EAAP;IACD;;IACDA,IAAI,GAAGA,IAAI,IAAI,EAAf;;IACA,IAAIA,IAAI,CAACC,QAAT,EAAmB;MACjBA,QAAQ,GAAGD,IAAI,CAACC,QAAhB;IACD;;IACD,IAAIpB,CAAC,CAACuC,WAAF,CAAcnB,QAAd,CAAJ,EAA6B;MAC3B,MAAM,IAAIoB,KAAJ,CAAU,oCAAV,CAAN;IACD;;IAED,IAAIC,IAAI,GAAG,KAAX;IACA,IAAIC,WAAW,GAAG,CAAlB;IACA,IAAIC,eAAe,GAAG,CAAtB;;IACA,IAAIC,MAAM,GAAG,KAAK7B,QAAL,CAAc8B,UAAd,CAAyB;MACpCC,KAAK,EAAE3B,IAAI,CAAC2B,KADwB;MAEpCC,QAAQ,EAAE5B,IAAI,CAAC4B;IAFqB,CAAzB,CAAb;;IAKA,SAASC,UAAT,CAAoBb,KAApB,EAA2B;MACzBM,IAAI,GAAG,IAAP;;MACA,IAAIzC,CAAC,CAACqB,UAAF,CAAaF,IAAI,CAACsB,IAAlB,CAAJ,EAA6B;QAC3BtB,IAAI,CAACsB,IAAL,CAAUN,KAAV;MACD;IACF;;IAED,SAASc,aAAT,CAAuBC,EAAvB,EAA2B;MACzB,IAAIvB,OAAO,GAAGuB,EAAE,EAAhB;;MACA,IAAIlD,CAAC,CAACuC,WAAF,CAAcZ,OAAd,CAAJ,EAA4B;QAC1BqB,UAAU;QACV;MACD;;MAEDrB,OAAO,CAACG,IAAR,CAAa,UAASqB,IAAT,EAAe;QAC1BnD,CAAC,CAACsC,IAAF,CAAOa,IAAI,CAACC,SAAZ,EAAuB,UAASC,QAAT,EAAmB;UACxC,IAAIZ,IAAI,IAAK,CAACzC,CAAC,CAACuC,WAAF,CAAcpB,IAAI,CAAC2B,KAAnB,CAAD,IAA8BH,eAAe,IAAIxB,IAAI,CAAC2B,KAAnE,EAA2E;YACzEL,IAAI,GAAG,IAAP;YACA,OAAO,KAAP;UACD;;UAEDE,eAAe;UACfvB,QAAQ,CAACiC,QAAD,EAAWL,UAAX,CAAR;QACD,CARD;;QAUA,IAAI,CAACP,IAAL,EAAW;UACTC,WAAW;UACXO,aAAa,CAACjD,CAAC,CAACiC,IAAF,CAAOkB,IAAI,CAACG,QAAZ,EAAsBH,IAAtB,CAAD,CAAb;QACD,CAHD,MAGO;UACLH,UAAU;QACX;MACF,CAjBD;MAmBArB,OAAO,CAACO,KAAR,CAAcc,UAAd;IACD;;IAEDC,aAAa,CAACjD,CAAC,CAACiC,IAAF,CAAO,KAAKkB,IAAZ,EAAkB,IAAlB,EAAwBnD,CAAC,CAACuD,KAAF,CAAQpC,IAAR,EAAcyB,MAAd,CAAxB,CAAD,CAAb;EACD,CA1DD;EA4DA;;EACA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EACE;;;EACAhC,0BAA0B,CAAC4C,IAA3B,GAAkC,SAASA,IAAT,CAAcrC,IAAd,EAAoBC,QAApB,EAA8B;IAC9D,IAAIpB,CAAC,CAACqB,UAAF,CAAaF,IAAb,CAAJ,EAAwB;MACtBC,QAAQ,GAAGD,IAAX;MACAA,IAAI,GAAG,EAAP;IACD;;IACDA,IAAI,GAAGA,IAAI,IAAI,EAAf;IACA,IAAIG,QAAQ,GAAGxB,CAAC,CAACyB,KAAF,EAAf;IACA,IAAIkC,YAAY,GAAG,EAAnB;;IACAtC,IAAI,CAACC,QAAL,GAAgB,UAASsC,QAAT,EAAmBjB,IAAnB,EAAyB;MACvCgB,YAAY,CAACE,IAAb,CAAkBD,QAAlB;;MAEA,IAAI,CAAC1D,CAAC,CAACuC,WAAF,CAAcpB,IAAI,CAAC2B,KAAnB,CAAD,IAA8BW,YAAY,CAACG,MAAb,KAAwBzC,IAAI,CAAC2B,KAA/D,EAAsE;QACpEL,IAAI;MACL;IACF,CAND;;IAQAtB,IAAI,CAACsB,IAAL,GAAY,UAASN,KAAT,EAAgB;MAC1B,IAAInC,CAAC,CAACuC,WAAF,CAAcJ,KAAd,CAAJ,EAA0B;QACxBb,QAAQ,CAACU,OAAT,CAAiByB,YAAjB;MACD,CAFD,MAEO;QACLnC,QAAQ,CAACc,MAAT,CAAgBD,KAAhB;MACD;IACF,CAND;;IAQA,IAAInC,CAAC,CAACqB,UAAF,CAAaD,QAAb,CAAJ,EAA4B;MAC1BE,QAAQ,CAACK,OAAT,CAAiBU,OAAjB,CAAyBjB,QAAzB;IACD;;IAED,KAAKkB,IAAL,CAAUnB,IAAV;IACA,OAAOG,QAAQ,CAACK,OAAhB;EACD,CA9BD;EAgCA;;EACA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EACE;;;EACAf,0BAA0B,CAACuC,IAA3B,GAAkC,SAASA,IAAT,CAAchC,IAAd,EAAoBC,QAApB,EAA8B;IAC9D,IAAIpB,CAAC,CAACqB,UAAF,CAAaF,IAAb,CAAJ,EAAwB;MACtBC,QAAQ,GAAGD,IAAX;MACAA,IAAI,GAAG,EAAP;IACD;;IACDA,IAAI,GAAGA,IAAI,IAAI,EAAf;IAEA,IAAIG,QAAQ,GAAGxB,CAAC,CAACyB,KAAF,EAAf;IACA,IAAIC,IAAI,GAAGlB,MAAM,CAACmB,EAAP,CAAU;MACnB,SAASzB,CAAC,CAACc,GAAF,CAAMK,IAAN,EAAY,OAAZ,CADU;MAEnB,UAAUnB,CAAC,CAACc,GAAF,CAAMK,IAAN,EAAY,QAAZ,CAFS;MAGnB,aAAaA,IAAI,CAAC0C,SAHC;MAInB,QAAQ1C,IAAI,CAAC2C,UAJM;MAKnB,YAAY3C,IAAI,CAAC4B;IALE,CAAV,CAAX;;IAQA,IAAIpB,OAAO,GAAG,KAAKZ,QAAL,CAAcoC,IAAd,CAAmB;MAACvB,GAAG,EAAE,KAAKX,IAAX;MAAiBY,MAAM,EAAE,KAAzB;MAAgCkC,MAAM,EAAEvC;IAAxC,CAAnB,CAAd;;IAEAG,OAAO,GAAGA,OAAO,CAACG,IAAR,CAAa,UAASC,OAAT,EAAkB;MACvCT,QAAQ,CAACU,OAAT,CAAiB,IAAIxB,kBAAJ,CAAuB,KAAKO,QAA5B,EAAsCgB,OAAtC,EAA+C,KAAKf,SAApD,CAAjB;IACD,CAFsB,CAErBiB,IAFqB,CAEhB,IAFgB,CAAb,CAAV;IAIAN,OAAO,CAACO,KAAR,CAAc,UAASC,KAAT,EAAgB;MAC5Bb,QAAQ,CAACc,MAAT,CAAgBD,KAAhB;IACD,CAFD;;IAIA,IAAInC,CAAC,CAACqB,UAAF,CAAaD,QAAb,CAAJ,EAA4B;MAC1BE,QAAQ,CAACK,OAAT,CAAiBU,OAAjB,CAAyBjB,QAAzB;IACD;;IAED,OAAOE,QAAQ,CAACK,OAAhB;EACD,CA/BD;EAiCA;;EACA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EACE;;;EACAf,0BAA0B,CAACoD,OAA3B,GAAqC,SAASA,OAAT,CAAiBC,SAAjB,EAA4B7C,QAA5B,EAAsC;IACzE,IAAIE,QAAQ,GAAGxB,CAAC,CAACyB,KAAF,EAAf;;IAEA,IAAII,OAAO,GAAG,KAAKZ,QAAL,CAAcmD,OAAd,CAAsBC,MAAtB,CAA6BC,OAA7B,CAAqC;MAACvC,MAAM,EAAE,KAAT;MAAgBD,GAAG,EAAEqC;IAArB,CAArC,CAAd;;IAEAtC,OAAO,GAAGA,OAAO,CAACG,IAAR,CAAa,UAASC,OAAT,EAAkB;MACvCT,QAAQ,CAACU,OAAT,CAAiB,IAAIxB,kBAAJ,CAAuB,KAAKO,QAA5B,EAAsCgB,OAAtC,EAA+C,KAAKf,SAApD,CAAjB;IACD,CAFsB,CAErBiB,IAFqB,CAEhB,IAFgB,CAAb,CAAV;IAIAN,OAAO,CAACO,KAAR,CAAc,UAASC,KAAT,EAAgB;MAC5Bb,QAAQ,CAACc,MAAT,CAAgBD,KAAhB;IACD,CAFD;;IAIA,IAAInC,CAAC,CAACqB,UAAF,CAAaD,QAAb,CAAJ,EAA4B;MAC1BE,QAAQ,CAACK,OAAT,CAAiBU,OAAjB,CAAyBjB,QAAzB;IACD;;IAED,OAAOE,QAAQ,CAACK,OAAhB;EACD,CAlBD;EAoBA;;EACA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EACE;;;EACAf,0BAA0B,CAACE,GAA3B,GAAiC,SAASA,GAAT,CAAaD,GAAb,EAAkB;IACjD,OAAO,IAAIH,qBAAJ,CAA0B,KAAKK,QAA/B,EAAyCF,GAAzC,CAAP;EACD,CAFD;EAIA;;EACA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;;EACE;;;EACAD,0BAA0B,CAACyD,MAA3B,GAAoC,SAASA,MAAT,GAAkB;IACpD,OAAO,KAAKrD,SAAZ;EACD,CAFD;;EAIAJ,0BAA0B,CAACX,IAAI,CAACqE,OAAL,CAAaC,MAAd,CAA1B,GAAkD,SAASD,OAAT,CAAiBE,KAAjB,EAC9CC,OAD8C,EACrC;IACX,OAAOxE,IAAI,CAACqE,OAAL,CAAa,KAAKD,MAAL,EAAb,EAA4BI,OAA5B,CAAP;EACD,CAHD;;EAKA,OAAO7D,0BAAP;AACD,CAvWD;AA0WA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;;;AACAJ,kBAAkB,GAAG,SAASA,kBAAT,CAA4BG,OAA5B,EAAqC+D,QAArC,EAA+CC,QAA/C,EAAyD;EAC5E;EACA,KAAK3D,SAAL,GAAiB2D,QAAjB;EAEAzE,IAAI,CAAC0E,SAAL,CAAeC,WAAf,CAA2BC,IAA3B,CAAgC,IAAhC,EAAsCnE,OAAtC,EAA+C+D,QAA/C,EAAyD,KAAK1D,SAA9D;AACD,CALD;;AAOAhB,CAAC,CAAC+E,MAAF,CAASvE,kBAAkB,CAACoE,SAA5B,EAAuC1E,IAAI,CAAC0E,SAA5C;;AACApE,kBAAkB,CAACoE,SAAnB,CAA6BC,WAA7B,GAA2CrE,kBAA3C;AAEA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;;AACAA,kBAAkB,CAACoE,SAAnB,CAA6BI,WAA7B,GAA2C,SAASA,WAAT,CAAqBjD,OAArB,EAA8B;EACvE,OAAO,IAAItB,sBAAJ,CAA2B,KAAKM,QAAhC,EAA0CgB,OAA1C,CAAP;AACD,CAFD;AAIA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;;;AACAvB,kBAAkB,CAACoE,SAAnB,CAA6BP,MAA7B,GAAsC,SAASA,MAAT,GAAkB;EACtD,IAAIY,KAAK,GAAG,EAAZ;;EACAjF,CAAC,CAACkF,MAAF,CAAS,IAAT,EAAe,UAASC,KAAT,EAAgBC,GAAhB,EAAqB;IAClC,IAAI,CAACpF,CAAC,CAACqF,UAAF,CAAaD,GAAb,EAAkB,GAAlB,CAAD,IAA2B,CAAEpF,CAAC,CAACqB,UAAF,CAAa8D,KAAb,CAAjC,EAAsD;MACpDF,KAAK,CAACG,GAAD,CAAL,GAAaD,KAAb;IACD;EACF,CAJD;;EAKA,OAAOF,KAAP;AACD,CARD;;AAUAzE,kBAAkB,CAACoE,SAAnB,CAA6B3E,IAAI,CAACqE,OAAL,CAAaC,MAA1C,IAAoD,SAASD,OAAT,CAAiBE,KAAjB,EAChDC,OADgD,EACvC;EACX,OAAOxE,IAAI,CAACqE,OAAL,CAAa,KAAKD,MAAL,EAAb,EAA4BI,OAA5B,CAAP;AACD,CAHD;AAMA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;;;AACAhE,sBAAsB,GAAG,SAASA,sBAAT,CAAgCE,OAAhC,EAAyCoB,OAAzC,EAAkDlB,GAAlD,EACiC;EACxD,KAAKE,QAAL,GAAgBJ,OAAhB,CADwD,CAGxD;;EACA,KAAK2E,UAAL,GAAkBvD,OAAO,CAACwD,WAA1B,CAJwD,CAIjB;;EACvC,KAAKC,WAAL,GAAmBpF,WAAW,CAACqF,eAAZ,CAA4B1D,OAAO,CAAC2D,YAApC,CAAnB,CALwD,CAKc;;EACtE,KAAKC,WAAL,GAAmBvF,WAAW,CAACqF,eAAZ,CAA4B1D,OAAO,CAAC6D,YAApC,CAAnB,CANwD,CAMc;;EACtE,KAAKC,KAAL,GAAa9D,OAAO,CAAC8D,KAArB,CAPwD,CAO5B;;EAC5B,KAAKC,KAAL,GAAa/D,OAAO,CAAC+D,KAArB,CARwD,CAQ5B;;EAC5B,KAAKjF,GAAL,GAAWkB,OAAO,CAAClB,GAAnB,CATwD,CAShC;;EACxB,KAAKkF,MAAL,GAAchE,OAAO,CAACgE,MAAtB,CAVwD,CAU1B;;EAC9B,KAAKC,GAAL,GAAWjE,OAAO,CAACiE,GAAnB,CAXwD,CAWhC;;EACxB,KAAKC,cAAL,GAAsBlE,OAAO,CAACmE,eAA9B,CAZwD,CAYT;;EAC/C,KAAKC,oBAAL,GAA4BpE,OAAO,CAACqE,sBAApC,CAbwD,CAaI;;EAC5D,KAAKC,WAAL,GAAmBtE,OAAO,CAACuE,YAA3B,CAdwD,CAcf;;EACzC,KAAKC,WAAL,GAAmBnG,WAAW,CAACoG,OAAZ,CAAoBzE,OAAO,CAAC0E,YAA5B,CAAnB,CAfwD,CAeM;EAE9D;;EACA,KAAKC,QAAL,GAAgBC,SAAhB;EACA,KAAK3F,SAAL,GAAiB;IAACH,GAAG,EAAEA,GAAG,IAAI,KAAKA;EAAlB,CAAjB;AACD,CArBD;;AAuBA+F,MAAM,CAACC,cAAP,CAAsBpG,sBAAsB,CAACmE,SAA7C,EACE,QADF,EACY;EACR9D,GAAG,EAAE,YAAW;IACd,IAAI,CAAC,KAAK4F,QAAV,EAAoB;MAClB,KAAKA,QAAL,GAAgB,IAAIhG,qBAAJ,CAA0B,KAAKK,QAA/B,EAAyC,KAAKC,SAAL,CAAeH,GAAxD,CAAhB;IACD;;IAED,OAAO,KAAK6F,QAAZ;EACD;AAPO,CADZ;AAWA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;;AACAjG,sBAAsB,CAACmE,SAAvB,CAAiCkC,KAAjC,GAAyC,SAASA,KAAT,CAAe1F,QAAf,EAAyB;EAChE,OAAO,KAAK2F,MAAL,CAAYD,KAAZ,CAAkB1F,QAAlB,CAAP;AACD,CAFD;AAIA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;;;AACAX,sBAAsB,CAACmE,SAAvB,CAAiCoC,MAAjC,GAA0C,SAASA,MAAT,CAAgB7F,IAAhB,EAAsBC,QAAtB,EAAgC;EACxE,OAAO,KAAK2F,MAAL,CAAYC,MAAZ,CAAmB7F,IAAnB,EAAyBC,QAAzB,CAAP;AACD,CAFD;AAIA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;;;AACAX,sBAAsB,CAACmE,SAAvB,CAAiCqC,aAAjC,GAAiD,SAASA,aAAT,GAAyB;EACxE,OAAO,KAAKF,MAAL,CAAYE,aAAnB;AACD,CAFD;AAIA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;;;AACAxG,sBAAsB,CAACmE,SAAvB,CAAiCP,MAAjC,GAA0C,SAASA,MAAT,GAAkB;EAC1D,IAAIY,KAAK,GAAG,EAAZ;;EACAjF,CAAC,CAACkF,MAAF,CAAS,IAAT,EAAe,UAASC,KAAT,EAAgBC,GAAhB,EAAqB;IAClC,IAAI,CAACpF,CAAC,CAACqF,UAAF,CAAaD,GAAb,EAAkB,GAAlB,CAAD,IAA2B,CAAEpF,CAAC,CAACqB,UAAF,CAAa8D,KAAb,CAAjC,EAAsD;MACpDF,KAAK,CAACG,GAAD,CAAL,GAAaD,KAAb;IACD;EACF,CAJD;;EAKA,OAAOF,KAAP;AACD,CARD;;AAUAxE,sBAAsB,CAACmE,SAAvB,CAAiC3E,IAAI,CAACqE,OAAL,CAAaC,MAA9C,IAAwD,SAASD,OAAT,CAAiBE,KAAjB,EACpDC,OADoD,EAC3C;EACX,OAAOxE,IAAI,CAACqE,OAAL,CAAa,KAAKD,MAAL,EAAb,EAA4BI,OAA5B,CAAP;AACD,CAHD;AAMA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;;;AACA/D,qBAAqB,GAAG,SAASA,qBAAT,CAA+BC,OAA/B,EAAwCE,GAAxC,EAA6C;EACnE,KAAKE,QAAL,GAAgBJ,OAAhB,CADmE,CAGnE;;EACA,KAAKK,SAAL,GAAiB;IAACH,GAAG,EAAEA;EAAN,CAAjB;EACA,KAAKI,IAAL,GAAa,oBAAmBJ,GAAI,EAApC,CALmE,CAOnE;;EACA,KAAKqG,cAAL,GAAsBP,SAAtB;AACD,CATD;AAWA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;;;AACAjG,qBAAqB,CAACkE,SAAtB,CAAgCkC,KAAhC,GAAwC,SAASA,KAAT,CAAe1F,QAAf,EAAyB;EAC/D,IAAIE,QAAQ,GAAGxB,CAAC,CAACyB,KAAF,EAAf;;EACA,IAAII,OAAO,GAAG,KAAKZ,QAAL,CAAc+F,KAAd,CAAoB;IAAClF,GAAG,EAAE,KAAKX,IAAX;IAAiBY,MAAM,EAAE;EAAzB,CAApB,CAAd;;EAEAF,OAAO,GAAGA,OAAO,CAACG,IAAR,CAAa,UAASC,OAAT,EAAkB;IACvCT,QAAQ,CAACU,OAAT,CAAiB,IAAIvB,sBAAJ,CAA2B,KAAKM,QAAhC,EAA0CgB,OAA1C,EAAmD,KAAKf,SAAL,CAAeH,GAAlE,CAAjB;EACD,CAFsB,CAErBoB,IAFqB,CAEhB,IAFgB,CAAb,CAAV;EAIAN,OAAO,CAACO,KAAR,CAAc,UAASC,KAAT,EAAgB;IAC5Bb,QAAQ,CAACc,MAAT,CAAgBD,KAAhB;EACD,CAFD;;EAIA,IAAInC,CAAC,CAACqB,UAAF,CAAaD,QAAb,CAAJ,EAA4B;IAC1BE,QAAQ,CAACK,OAAT,CAAiBU,OAAjB,CAAyBjB,QAAzB;EACD;;EAED,OAAOE,QAAQ,CAACK,OAAhB;AACD,CAjBD;AAmBA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;;;AACAjB,qBAAqB,CAACkE,SAAtB,CAAgCoC,MAAhC,GAAyC,SAASA,MAAT,CAAgB7F,IAAhB,EAAsBC,QAAtB,EAAgC;EACvE,IAAIpB,CAAC,CAACuC,WAAF,CAAcpB,IAAd,CAAJ,EAAyB;IACvB,MAAM,IAAIqB,KAAJ,CAAU,oCAAV,CAAN;EACD;;EACD,IAAIxC,CAAC,CAACuC,WAAF,CAAcpB,IAAI,CAAC,QAAD,CAAlB,CAAJ,EAAmC;IACjC,MAAM,IAAIqB,KAAJ,CAAU,gDAAV,CAAN;EACD;;EAED,IAAIlB,QAAQ,GAAGxB,CAAC,CAACyB,KAAF,EAAf;EACA,IAAIC,IAAI,GAAGlB,MAAM,CAACmB,EAAP,CAAU;IAAC,UAAUzB,CAAC,CAACc,GAAF,CAAMK,IAAN,EAAY,QAAZ;EAAX,CAAV,CAAX;;EAEA,IAAIQ,OAAO,GAAG,KAAKZ,QAAL,CAAciG,MAAd,CAAqB;IAACpF,GAAG,EAAE,KAAKX,IAAX;IAAiBY,MAAM,EAAE,MAAzB;IAAiCL,IAAI,EAAEA;EAAvC,CAArB,CAAd;;EAEAG,OAAO,GAAGA,OAAO,CAACG,IAAR,CAAa,UAASC,OAAT,EAAkB;IACvCT,QAAQ,CAACU,OAAT,CAAiB,IAAIvB,sBAAJ,CAA2B,KAAKM,QAAhC,EAA0CgB,OAA1C,EAAmD,KAAKf,SAAL,CAAeH,GAAlE,CAAjB;EACD,CAFsB,CAErBoB,IAFqB,CAEhB,IAFgB,CAAb,CAAV;EAIAN,OAAO,CAACO,KAAR,CAAc,UAASC,KAAT,EAAgB;IAC5Bb,QAAQ,CAACc,MAAT,CAAgBD,KAAhB;EACD,CAFD;;EAIA,IAAInC,CAAC,CAACqB,UAAF,CAAaD,QAAb,CAAJ,EAA4B;IAC1BE,QAAQ,CAACK,OAAT,CAAiBU,OAAjB,CAAyBjB,QAAzB;EACD;;EAED,OAAOE,QAAQ,CAACK,OAAhB;AACD,CA1BD;;AA4BAiF,MAAM,CAACC,cAAP,CAAsBnG,qBAAqB,CAACkE,SAA5C,EACE,eADF,EACmB;EACf9D,GAAG,EAAE,YAAW;IACd,IAAI,CAAC,KAAKoG,cAAV,EAA0B;MACxB,KAAKA,cAAL,GAAsB,IAAI/G,iBAAJ,CAAsB,KAAKY,QAA3B,EAAqC,KAAKC,SAAL,CAAeH,GAApD,CAAtB;IACD;;IACD,OAAO,KAAKqG,cAAZ;EACD;AANc,CADnB;AAUA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;;AACAxG,qBAAqB,CAACkE,SAAtB,CAAgCP,MAAhC,GAAyC,SAASA,MAAT,GAAkB;EACzD,OAAO,KAAKrD,SAAZ;AACD,CAFD;;AAIAN,qBAAqB,CAACkE,SAAtB,CAAgC3E,IAAI,CAACqE,OAAL,CAAaC,MAA7C,IAAuD,SAASD,OAAT,CAAiBE,KAAjB,EACnDC,OADmD,EAC1C;EACX,OAAOxE,IAAI,CAACqE,OAAL,CAAa,KAAKD,MAAL,EAAb,EAA4BI,OAA5B,CAAP;AACD,CAHD;;AAKA0C,MAAM,CAACC,OAAP,GAAiB;EACf7G,kBAAkB,EAAEA,kBADL;EAEfC,kBAAkB,EAAEA,kBAFL;EAGfC,sBAAsB,EAAEA,sBAHT;EAIfC,qBAAqB,EAAEA;AAJR,CAAjB"},"metadata":{},"sourceType":"script"}