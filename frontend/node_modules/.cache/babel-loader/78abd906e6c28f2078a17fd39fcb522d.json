{"ast":null,"code":"'use strict';\n/* jshint ignore:start */\n\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n\n/* jshint ignore:end */\n\nvar Q = require('q');\n/* jshint ignore:line */\n\n\nvar _ = require('lodash');\n/* jshint ignore:line */\n\n\nvar util = require('util');\n/* jshint ignore:line */\n\n\nvar Page = require('../../../../../base/Page');\n/* jshint ignore:line */\n\n\nvar serialize = require('../../../../../base/serialize');\n/* jshint ignore:line */\n\n\nvar values = require('../../../../../base/values');\n/* jshint ignore:line */\n\n\nvar InteractionChannelParticipantList;\nvar InteractionChannelParticipantPage;\nvar InteractionChannelParticipantInstance;\nvar InteractionChannelParticipantContext;\n/* jshint ignore:start */\n\n/**\n * Initialize the InteractionChannelParticipantList\n *\n * @constructor Twilio.FlexApi.V1.InteractionContext.InteractionChannelContext.InteractionChannelParticipantList\n *\n * @param {Twilio.FlexApi.V1} version - Version of the resource\n * @param {string} interactionSid - The Interaction Sid for this channel.\n * @param {string} channelSid - The Channel Sid for this Participant.\n */\n\n/* jshint ignore:end */\n\nInteractionChannelParticipantList = function InteractionChannelParticipantList(version, interactionSid, channelSid) {\n  /* jshint ignore:start */\n\n  /**\n   * @function participants\n   * @memberof Twilio.FlexApi.V1.InteractionContext.InteractionChannelContext#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.FlexApi.V1.InteractionContext.InteractionChannelContext.InteractionChannelParticipantContext}\n   */\n\n  /* jshint ignore:end */\n  function InteractionChannelParticipantListInstance(sid) {\n    return InteractionChannelParticipantListInstance.get(sid);\n  }\n\n  InteractionChannelParticipantListInstance._version = version; // Path Solution\n\n  InteractionChannelParticipantListInstance._solution = {\n    interactionSid: interactionSid,\n    channelSid: channelSid\n  };\n  InteractionChannelParticipantListInstance._uri = `/Interactions/${interactionSid}/Channels/${channelSid}/Participants`;\n  /* jshint ignore:start */\n\n  /**\n   * create a InteractionChannelParticipantInstance\n   *\n   * @function create\n   * @memberof Twilio.FlexApi.V1.InteractionContext.InteractionChannelContext.InteractionChannelParticipantList#\n   *\n   * @param {object} opts - Options for request\n   * @param {interaction_channel_participant.type} opts.type - Participant type.\n   * @param {object} opts.mediaProperties -\n   *          JSON representing the Media Properties for the new Participant.\n   * @param {function} [callback] - Callback to handle processed record\n   *\n   * @returns {Promise} Resolves to processed InteractionChannelParticipantInstance\n   */\n\n  /* jshint ignore:end */\n\n  InteractionChannelParticipantListInstance.create = function create(opts, callback) {\n    if (_.isUndefined(opts)) {\n      throw new Error('Required parameter \"opts\" missing.');\n    }\n\n    if (_.isUndefined(opts['type'])) {\n      throw new Error('Required parameter \"opts[\\'type\\']\" missing.');\n    }\n\n    if (_.isUndefined(opts['mediaProperties'])) {\n      throw new Error('Required parameter \"opts[\\'mediaProperties\\']\" missing.');\n    }\n\n    var deferred = Q.defer();\n    var data = values.of({\n      'Type': _.get(opts, 'type'),\n      'MediaProperties': serialize.object(_.get(opts, 'mediaProperties'))\n    });\n\n    var promise = this._version.create({\n      uri: this._uri,\n      method: 'POST',\n      data: data\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new InteractionChannelParticipantInstance(this._version, payload, this._solution.interactionSid, this._solution.channelSid, this._solution.sid));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Streams InteractionChannelParticipantInstance records from the API.\n   *\n   * This operation lazily loads records as efficiently as possible until the limit\n   * is reached.\n   *\n   * The results are passed into the callback function, so this operation is memory\n   * efficient.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function each\n   * @memberof Twilio.FlexApi.V1.InteractionContext.InteractionChannelContext.InteractionChannelParticipantList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         each() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no pageSize is defined but a limit is defined,\n   *         each() will attempt to read the limit with the most efficient\n   *         page size, i.e. min(limit, 1000)\n   * @param {Function} [opts.callback] -\n   *         Function to process each record. If this and a positional\n   *         callback are passed, this one will be used\n   * @param {Function} [opts.done] -\n   *          Function to be called upon completion of streaming\n   * @param {Function} [callback] - Function to process each record\n   */\n\n  /* jshint ignore:end */\n\n\n  InteractionChannelParticipantListInstance.each = function each(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n\n    if (opts.callback) {\n      callback = opts.callback;\n    }\n\n    if (_.isUndefined(callback)) {\n      throw new Error('Callback function must be provided');\n    }\n\n    var done = false;\n    var currentPage = 1;\n    var currentResource = 0;\n\n    var limits = this._version.readLimits({\n      limit: opts.limit,\n      pageSize: opts.pageSize\n    });\n\n    function onComplete(error) {\n      done = true;\n\n      if (_.isFunction(opts.done)) {\n        opts.done(error);\n      }\n    }\n\n    function fetchNextPage(fn) {\n      var promise = fn();\n\n      if (_.isUndefined(promise)) {\n        onComplete();\n        return;\n      }\n\n      promise.then(function (page) {\n        _.each(page.instances, function (instance) {\n          if (done || !_.isUndefined(opts.limit) && currentResource >= opts.limit) {\n            done = true;\n            return false;\n          }\n\n          currentResource++;\n          callback(instance, onComplete);\n        });\n\n        if (!done) {\n          currentPage++;\n          fetchNextPage(_.bind(page.nextPage, page));\n        } else {\n          onComplete();\n        }\n      });\n      promise.catch(onComplete);\n    }\n\n    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Lists InteractionChannelParticipantInstance records from the API as a list.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function list\n   * @memberof Twilio.FlexApi.V1.InteractionContext.InteractionChannelContext.InteractionChannelParticipantList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         list() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no page_size is defined but a limit is defined,\n   *         list() will attempt to read the limit with the most\n   *         efficient page size, i.e. min(limit, 1000)\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  InteractionChannelParticipantListInstance.list = function list(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n    var deferred = Q.defer();\n    var allResources = [];\n\n    opts.callback = function (resource, done) {\n      allResources.push(resource);\n\n      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {\n        done();\n      }\n    };\n\n    opts.done = function (error) {\n      if (_.isUndefined(error)) {\n        deferred.resolve(allResources);\n      } else {\n        deferred.reject(error);\n      }\n    };\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    this.each(opts);\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Retrieve a single page of InteractionChannelParticipantInstance records from the\n   * API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function page\n   * @memberof Twilio.FlexApi.V1.InteractionContext.InteractionChannelContext.InteractionChannelParticipantList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.pageToken] - PageToken provided by the API\n   * @param {number} [opts.pageNumber] -\n   *          Page Number, this value is simply for client state\n   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  InteractionChannelParticipantListInstance.page = function page(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n    var deferred = Q.defer();\n    var data = values.of({\n      'PageToken': opts.pageToken,\n      'Page': opts.pageNumber,\n      'PageSize': opts.pageSize\n    });\n\n    var promise = this._version.page({\n      uri: this._uri,\n      method: 'GET',\n      params: data\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new InteractionChannelParticipantPage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Retrieve a single target page of InteractionChannelParticipantInstance records\n   * from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function getPage\n   * @memberof Twilio.FlexApi.V1.InteractionContext.InteractionChannelContext.InteractionChannelParticipantList#\n   *\n   * @param {string} [targetUrl] - API-generated URL for the requested results page\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  InteractionChannelParticipantListInstance.getPage = function getPage(targetUrl, callback) {\n    var deferred = Q.defer();\n\n    var promise = this._version._domain.twilio.request({\n      method: 'GET',\n      uri: targetUrl\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new InteractionChannelParticipantPage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Constructs a interaction_channel_participant\n   *\n   * @function get\n   * @memberof Twilio.FlexApi.V1.InteractionContext.InteractionChannelContext.InteractionChannelParticipantList#\n   *\n   * @param {string} sid - The unique string that identifies the resource\n   *\n   * @returns {Twilio.FlexApi.V1.InteractionContext.InteractionChannelContext.InteractionChannelParticipantContext}\n   */\n\n  /* jshint ignore:end */\n\n\n  InteractionChannelParticipantListInstance.get = function get(sid) {\n    return new InteractionChannelParticipantContext(this._version, this._solution.interactionSid, this._solution.channelSid, sid);\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.FlexApi.V1.InteractionContext.InteractionChannelContext.InteractionChannelParticipantList#\n   *\n   * @returns Object\n   */\n\n  /* jshint ignore:end */\n\n\n  InteractionChannelParticipantListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n\n  InteractionChannelParticipantListInstance[util.inspect.custom] = function inspect(depth, options) {\n    return util.inspect(this.toJSON(), options);\n  };\n\n  return InteractionChannelParticipantListInstance;\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the InteractionChannelParticipantPage\n *\n * @constructor Twilio.FlexApi.V1.InteractionContext.InteractionChannelContext.InteractionChannelParticipantPage\n *\n * @param {V1} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {InteractionChannelParticipantSolution} solution - Path solution\n *\n * @returns InteractionChannelParticipantPage\n */\n\n/* jshint ignore:end */\n\n\nInteractionChannelParticipantPage = function InteractionChannelParticipantPage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n\n_.extend(InteractionChannelParticipantPage.prototype, Page.prototype);\n\nInteractionChannelParticipantPage.prototype.constructor = InteractionChannelParticipantPage;\n/* jshint ignore:start */\n\n/**\n * Build an instance of InteractionChannelParticipantInstance\n *\n * @function getInstance\n * @memberof Twilio.FlexApi.V1.InteractionContext.InteractionChannelContext.InteractionChannelParticipantPage#\n *\n * @param {InteractionChannelParticipantPayload} payload -\n *          Payload response from the API\n *\n * @returns InteractionChannelParticipantInstance\n */\n\n/* jshint ignore:end */\n\nInteractionChannelParticipantPage.prototype.getInstance = function getInstance(payload) {\n  return new InteractionChannelParticipantInstance(this._version, payload, this._solution.interactionSid, this._solution.channelSid);\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.FlexApi.V1.InteractionContext.InteractionChannelContext.InteractionChannelParticipantPage#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nInteractionChannelParticipantPage.prototype.toJSON = function toJSON() {\n  let clone = {};\n\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n\n  return clone;\n};\n\nInteractionChannelParticipantPage.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the InteractionChannelParticipantContext\n *\n * @constructor Twilio.FlexApi.V1.InteractionContext.InteractionChannelContext.InteractionChannelParticipantInstance\n *\n * @property {string} sid - The unique string that identifies the resource\n * @property {interaction_channel_participant.type} type - Participant type.\n * @property {string} interactionSid - The Interaction Sid for this channel.\n * @property {string} channelSid - The Channel Sid for this Participant.\n * @property {string} url - The url\n *\n * @param {V1} version - Version of the resource\n * @param {InteractionChannelParticipantPayload} payload - The instance payload\n * @param {sid} interactionSid - The Interaction Sid for this channel.\n * @param {sid} channelSid - The Channel Sid for this Participant.\n * @param {sid} sid - The unique string that identifies the resource\n */\n\n/* jshint ignore:end */\n\n\nInteractionChannelParticipantInstance = function InteractionChannelParticipantInstance(version, payload, interactionSid, channelSid, sid) {\n  this._version = version; // Marshaled Properties\n\n  this.sid = payload.sid; // jshint ignore:line\n\n  this.type = payload.type; // jshint ignore:line\n\n  this.interactionSid = payload.interaction_sid; // jshint ignore:line\n\n  this.channelSid = payload.channel_sid; // jshint ignore:line\n\n  this.url = payload.url; // jshint ignore:line\n  // Context\n\n  this._context = undefined;\n  this._solution = {\n    interactionSid: interactionSid,\n    channelSid: channelSid,\n    sid: sid || this.sid\n  };\n};\n\nObject.defineProperty(InteractionChannelParticipantInstance.prototype, '_proxy', {\n  get: function () {\n    if (!this._context) {\n      this._context = new InteractionChannelParticipantContext(this._version, this._solution.interactionSid, this._solution.channelSid, this._solution.sid);\n    }\n\n    return this._context;\n  }\n});\n/* jshint ignore:start */\n\n/**\n * update a InteractionChannelParticipantInstance\n *\n * @function update\n * @memberof Twilio.FlexApi.V1.InteractionContext.InteractionChannelContext.InteractionChannelParticipantInstance#\n *\n * @param {object} opts - Options for request\n * @param {interaction_channel_participant.status} opts.status -\n *          The Participant's status.\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed InteractionChannelParticipantInstance\n */\n\n/* jshint ignore:end */\n\nInteractionChannelParticipantInstance.prototype.update = function update(opts, callback) {\n  return this._proxy.update(opts, callback);\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.FlexApi.V1.InteractionContext.InteractionChannelContext.InteractionChannelParticipantInstance#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nInteractionChannelParticipantInstance.prototype.toJSON = function toJSON() {\n  let clone = {};\n\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n\n  return clone;\n};\n\nInteractionChannelParticipantInstance.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the InteractionChannelParticipantContext\n *\n * @constructor Twilio.FlexApi.V1.InteractionContext.InteractionChannelContext.InteractionChannelParticipantContext\n *\n * @param {V1} version - Version of the resource\n * @param {sid} interactionSid - The Interaction Sid for this channel.\n * @param {sid} channelSid - The Channel Sid for this Participant.\n * @param {sid} sid - The unique string that identifies the resource\n */\n\n/* jshint ignore:end */\n\n\nInteractionChannelParticipantContext = function InteractionChannelParticipantContext(version, interactionSid, channelSid, sid) {\n  this._version = version; // Path Solution\n\n  this._solution = {\n    interactionSid: interactionSid,\n    channelSid: channelSid,\n    sid: sid\n  };\n  this._uri = `/Interactions/${interactionSid}/Channels/${channelSid}/Participants/${sid}`;\n};\n/* jshint ignore:start */\n\n/**\n * update a InteractionChannelParticipantInstance\n *\n * @function update\n * @memberof Twilio.FlexApi.V1.InteractionContext.InteractionChannelContext.InteractionChannelParticipantContext#\n *\n * @param {object} opts - Options for request\n * @param {interaction_channel_participant.status} opts.status -\n *          The Participant's status.\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed InteractionChannelParticipantInstance\n */\n\n/* jshint ignore:end */\n\n\nInteractionChannelParticipantContext.prototype.update = function update(opts, callback) {\n  if (_.isUndefined(opts)) {\n    throw new Error('Required parameter \"opts\" missing.');\n  }\n\n  if (_.isUndefined(opts['status'])) {\n    throw new Error('Required parameter \"opts[\\'status\\']\" missing.');\n  }\n\n  var deferred = Q.defer();\n  var data = values.of({\n    'Status': _.get(opts, 'status')\n  });\n\n  var promise = this._version.update({\n    uri: this._uri,\n    method: 'POST',\n    data: data\n  });\n\n  promise = promise.then(function (payload) {\n    deferred.resolve(new InteractionChannelParticipantInstance(this._version, payload, this._solution.interactionSid, this._solution.channelSid, this._solution.sid));\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.FlexApi.V1.InteractionContext.InteractionChannelContext.InteractionChannelParticipantContext#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nInteractionChannelParticipantContext.prototype.toJSON = function toJSON() {\n  return this._solution;\n};\n\nInteractionChannelParticipantContext.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\nmodule.exports = {\n  InteractionChannelParticipantList: InteractionChannelParticipantList,\n  InteractionChannelParticipantPage: InteractionChannelParticipantPage,\n  InteractionChannelParticipantInstance: InteractionChannelParticipantInstance,\n  InteractionChannelParticipantContext: InteractionChannelParticipantContext\n};","map":{"version":3,"names":["Q","require","_","util","Page","serialize","values","InteractionChannelParticipantList","InteractionChannelParticipantPage","InteractionChannelParticipantInstance","InteractionChannelParticipantContext","version","interactionSid","channelSid","InteractionChannelParticipantListInstance","sid","get","_version","_solution","_uri","create","opts","callback","isUndefined","Error","deferred","defer","data","of","object","promise","uri","method","then","payload","resolve","bind","catch","error","reject","isFunction","nodeify","each","done","currentPage","currentResource","limits","readLimits","limit","pageSize","onComplete","fetchNextPage","fn","page","instances","instance","nextPage","merge","list","allResources","resource","push","length","pageToken","pageNumber","params","getPage","targetUrl","_domain","twilio","request","toJSON","inspect","custom","depth","options","response","solution","prototype","constructor","call","extend","getInstance","clone","forOwn","value","key","startsWith","type","interaction_sid","channel_sid","url","_context","undefined","Object","defineProperty","update","_proxy","module","exports"],"sources":["/Users/hooniesun/rmit/fwp/assessment1/lan/node_modules/twilio/lib/rest/flexApi/v1/interaction/interactionChannel/interactionChannelParticipant.js"],"sourcesContent":["'use strict';\n\n/* jshint ignore:start */\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n/* jshint ignore:end */\n\nvar Q = require('q');  /* jshint ignore:line */\nvar _ = require('lodash');  /* jshint ignore:line */\nvar util = require('util');  /* jshint ignore:line */\nvar Page = require('../../../../../base/Page');  /* jshint ignore:line */\nvar serialize = require(\n    '../../../../../base/serialize');  /* jshint ignore:line */\nvar values = require('../../../../../base/values');  /* jshint ignore:line */\n\nvar InteractionChannelParticipantList;\nvar InteractionChannelParticipantPage;\nvar InteractionChannelParticipantInstance;\nvar InteractionChannelParticipantContext;\n\n/* jshint ignore:start */\n/**\n * Initialize the InteractionChannelParticipantList\n *\n * @constructor Twilio.FlexApi.V1.InteractionContext.InteractionChannelContext.InteractionChannelParticipantList\n *\n * @param {Twilio.FlexApi.V1} version - Version of the resource\n * @param {string} interactionSid - The Interaction Sid for this channel.\n * @param {string} channelSid - The Channel Sid for this Participant.\n */\n/* jshint ignore:end */\nInteractionChannelParticipantList = function\n    InteractionChannelParticipantList(version, interactionSid, channelSid) {\n  /* jshint ignore:start */\n  /**\n   * @function participants\n   * @memberof Twilio.FlexApi.V1.InteractionContext.InteractionChannelContext#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.FlexApi.V1.InteractionContext.InteractionChannelContext.InteractionChannelParticipantContext}\n   */\n  /* jshint ignore:end */\n  function InteractionChannelParticipantListInstance(sid) {\n    return InteractionChannelParticipantListInstance.get(sid);\n  }\n\n  InteractionChannelParticipantListInstance._version = version;\n  // Path Solution\n  InteractionChannelParticipantListInstance._solution = {\n    interactionSid: interactionSid,\n    channelSid: channelSid\n  };\n  InteractionChannelParticipantListInstance._uri = `/Interactions/${interactionSid}/Channels/${channelSid}/Participants`;\n  /* jshint ignore:start */\n  /**\n   * create a InteractionChannelParticipantInstance\n   *\n   * @function create\n   * @memberof Twilio.FlexApi.V1.InteractionContext.InteractionChannelContext.InteractionChannelParticipantList#\n   *\n   * @param {object} opts - Options for request\n   * @param {interaction_channel_participant.type} opts.type - Participant type.\n   * @param {object} opts.mediaProperties -\n   *          JSON representing the Media Properties for the new Participant.\n   * @param {function} [callback] - Callback to handle processed record\n   *\n   * @returns {Promise} Resolves to processed InteractionChannelParticipantInstance\n   */\n  /* jshint ignore:end */\n  InteractionChannelParticipantListInstance.create = function create(opts,\n      callback) {\n    if (_.isUndefined(opts)) {\n      throw new Error('Required parameter \"opts\" missing.');\n    }\n    if (_.isUndefined(opts['type'])) {\n      throw new Error('Required parameter \"opts[\\'type\\']\" missing.');\n    }\n    if (_.isUndefined(opts['mediaProperties'])) {\n      throw new Error('Required parameter \"opts[\\'mediaProperties\\']\" missing.');\n    }\n\n    var deferred = Q.defer();\n    var data = values.of({\n      'Type': _.get(opts, 'type'),\n      'MediaProperties': serialize.object(_.get(opts, 'mediaProperties'))\n    });\n\n    var promise = this._version.create({uri: this._uri, method: 'POST', data: data});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new InteractionChannelParticipantInstance(\n        this._version,\n        payload,\n        this._solution.interactionSid,\n        this._solution.channelSid,\n        this._solution.sid\n      ));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Streams InteractionChannelParticipantInstance records from the API.\n   *\n   * This operation lazily loads records as efficiently as possible until the limit\n   * is reached.\n   *\n   * The results are passed into the callback function, so this operation is memory\n   * efficient.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function each\n   * @memberof Twilio.FlexApi.V1.InteractionContext.InteractionChannelContext.InteractionChannelParticipantList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         each() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no pageSize is defined but a limit is defined,\n   *         each() will attempt to read the limit with the most efficient\n   *         page size, i.e. min(limit, 1000)\n   * @param {Function} [opts.callback] -\n   *         Function to process each record. If this and a positional\n   *         callback are passed, this one will be used\n   * @param {Function} [opts.done] -\n   *          Function to be called upon completion of streaming\n   * @param {Function} [callback] - Function to process each record\n   */\n  /* jshint ignore:end */\n  InteractionChannelParticipantListInstance.each = function each(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    if (opts.callback) {\n      callback = opts.callback;\n    }\n    if (_.isUndefined(callback)) {\n      throw new Error('Callback function must be provided');\n    }\n\n    var done = false;\n    var currentPage = 1;\n    var currentResource = 0;\n    var limits = this._version.readLimits({\n      limit: opts.limit,\n      pageSize: opts.pageSize\n    });\n\n    function onComplete(error) {\n      done = true;\n      if (_.isFunction(opts.done)) {\n        opts.done(error);\n      }\n    }\n\n    function fetchNextPage(fn) {\n      var promise = fn();\n      if (_.isUndefined(promise)) {\n        onComplete();\n        return;\n      }\n\n      promise.then(function(page) {\n        _.each(page.instances, function(instance) {\n          if (done || (!_.isUndefined(opts.limit) && currentResource >= opts.limit)) {\n            done = true;\n            return false;\n          }\n\n          currentResource++;\n          callback(instance, onComplete);\n        });\n\n        if (!done) {\n          currentPage++;\n          fetchNextPage(_.bind(page.nextPage, page));\n        } else {\n          onComplete();\n        }\n      });\n\n      promise.catch(onComplete);\n    }\n\n    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Lists InteractionChannelParticipantInstance records from the API as a list.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function list\n   * @memberof Twilio.FlexApi.V1.InteractionContext.InteractionChannelContext.InteractionChannelParticipantList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         list() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no page_size is defined but a limit is defined,\n   *         list() will attempt to read the limit with the most\n   *         efficient page size, i.e. min(limit, 1000)\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  InteractionChannelParticipantListInstance.list = function list(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    var deferred = Q.defer();\n    var allResources = [];\n    opts.callback = function(resource, done) {\n      allResources.push(resource);\n\n      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {\n        done();\n      }\n    };\n\n    opts.done = function(error) {\n      if (_.isUndefined(error)) {\n        deferred.resolve(allResources);\n      } else {\n        deferred.reject(error);\n      }\n    };\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    this.each(opts);\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single page of InteractionChannelParticipantInstance records from the\n   * API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function page\n   * @memberof Twilio.FlexApi.V1.InteractionContext.InteractionChannelContext.InteractionChannelParticipantList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.pageToken] - PageToken provided by the API\n   * @param {number} [opts.pageNumber] -\n   *          Page Number, this value is simply for client state\n   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  InteractionChannelParticipantListInstance.page = function page(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n\n    var deferred = Q.defer();\n    var data = values.of({\n      'PageToken': opts.pageToken,\n      'Page': opts.pageNumber,\n      'PageSize': opts.pageSize\n    });\n\n    var promise = this._version.page({uri: this._uri, method: 'GET', params: data});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new InteractionChannelParticipantPage(this._version, payload, this._solution));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single target page of InteractionChannelParticipantInstance records\n   * from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function getPage\n   * @memberof Twilio.FlexApi.V1.InteractionContext.InteractionChannelContext.InteractionChannelParticipantList#\n   *\n   * @param {string} [targetUrl] - API-generated URL for the requested results page\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  InteractionChannelParticipantListInstance.getPage = function getPage(targetUrl,\n      callback) {\n    var deferred = Q.defer();\n\n    var promise = this._version._domain.twilio.request({method: 'GET', uri: targetUrl});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new InteractionChannelParticipantPage(this._version, payload, this._solution));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Constructs a interaction_channel_participant\n   *\n   * @function get\n   * @memberof Twilio.FlexApi.V1.InteractionContext.InteractionChannelContext.InteractionChannelParticipantList#\n   *\n   * @param {string} sid - The unique string that identifies the resource\n   *\n   * @returns {Twilio.FlexApi.V1.InteractionContext.InteractionChannelContext.InteractionChannelParticipantContext}\n   */\n  /* jshint ignore:end */\n  InteractionChannelParticipantListInstance.get = function get(sid) {\n    return new InteractionChannelParticipantContext(\n      this._version,\n      this._solution.interactionSid,\n      this._solution.channelSid,\n      sid\n    );\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.FlexApi.V1.InteractionContext.InteractionChannelContext.InteractionChannelParticipantList#\n   *\n   * @returns Object\n   */\n  /* jshint ignore:end */\n  InteractionChannelParticipantListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n\n  InteractionChannelParticipantListInstance[util.inspect.custom] = function\n      inspect(depth, options) {\n    return util.inspect(this.toJSON(), options);\n  };\n\n  return InteractionChannelParticipantListInstance;\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the InteractionChannelParticipantPage\n *\n * @constructor Twilio.FlexApi.V1.InteractionContext.InteractionChannelContext.InteractionChannelParticipantPage\n *\n * @param {V1} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {InteractionChannelParticipantSolution} solution - Path solution\n *\n * @returns InteractionChannelParticipantPage\n */\n/* jshint ignore:end */\nInteractionChannelParticipantPage = function\n    InteractionChannelParticipantPage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n\n_.extend(InteractionChannelParticipantPage.prototype, Page.prototype);\nInteractionChannelParticipantPage.prototype.constructor = InteractionChannelParticipantPage;\n\n/* jshint ignore:start */\n/**\n * Build an instance of InteractionChannelParticipantInstance\n *\n * @function getInstance\n * @memberof Twilio.FlexApi.V1.InteractionContext.InteractionChannelContext.InteractionChannelParticipantPage#\n *\n * @param {InteractionChannelParticipantPayload} payload -\n *          Payload response from the API\n *\n * @returns InteractionChannelParticipantInstance\n */\n/* jshint ignore:end */\nInteractionChannelParticipantPage.prototype.getInstance = function\n    getInstance(payload) {\n  return new InteractionChannelParticipantInstance(\n    this._version,\n    payload,\n    this._solution.interactionSid,\n    this._solution.channelSid\n  );\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.FlexApi.V1.InteractionContext.InteractionChannelContext.InteractionChannelParticipantPage#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nInteractionChannelParticipantPage.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function(value, key) {\n    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\n\nInteractionChannelParticipantPage.prototype[util.inspect.custom] = function\n    inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the InteractionChannelParticipantContext\n *\n * @constructor Twilio.FlexApi.V1.InteractionContext.InteractionChannelContext.InteractionChannelParticipantInstance\n *\n * @property {string} sid - The unique string that identifies the resource\n * @property {interaction_channel_participant.type} type - Participant type.\n * @property {string} interactionSid - The Interaction Sid for this channel.\n * @property {string} channelSid - The Channel Sid for this Participant.\n * @property {string} url - The url\n *\n * @param {V1} version - Version of the resource\n * @param {InteractionChannelParticipantPayload} payload - The instance payload\n * @param {sid} interactionSid - The Interaction Sid for this channel.\n * @param {sid} channelSid - The Channel Sid for this Participant.\n * @param {sid} sid - The unique string that identifies the resource\n */\n/* jshint ignore:end */\nInteractionChannelParticipantInstance = function\n    InteractionChannelParticipantInstance(version, payload, interactionSid,\n    channelSid, sid) {\n  this._version = version;\n\n  // Marshaled Properties\n  this.sid = payload.sid; // jshint ignore:line\n  this.type = payload.type; // jshint ignore:line\n  this.interactionSid = payload.interaction_sid; // jshint ignore:line\n  this.channelSid = payload.channel_sid; // jshint ignore:line\n  this.url = payload.url; // jshint ignore:line\n\n  // Context\n  this._context = undefined;\n  this._solution = {interactionSid: interactionSid, channelSid: channelSid, sid: sid || this.sid, };\n};\n\nObject.defineProperty(InteractionChannelParticipantInstance.prototype,\n  '_proxy', {\n    get: function() {\n      if (!this._context) {\n        this._context = new InteractionChannelParticipantContext(\n          this._version,\n          this._solution.interactionSid,\n          this._solution.channelSid,\n          this._solution.sid\n        );\n      }\n\n      return this._context;\n    }\n});\n\n/* jshint ignore:start */\n/**\n * update a InteractionChannelParticipantInstance\n *\n * @function update\n * @memberof Twilio.FlexApi.V1.InteractionContext.InteractionChannelContext.InteractionChannelParticipantInstance#\n *\n * @param {object} opts - Options for request\n * @param {interaction_channel_participant.status} opts.status -\n *          The Participant's status.\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed InteractionChannelParticipantInstance\n */\n/* jshint ignore:end */\nInteractionChannelParticipantInstance.prototype.update = function update(opts,\n    callback) {\n  return this._proxy.update(opts, callback);\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.FlexApi.V1.InteractionContext.InteractionChannelContext.InteractionChannelParticipantInstance#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nInteractionChannelParticipantInstance.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function(value, key) {\n    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\n\nInteractionChannelParticipantInstance.prototype[util.inspect.custom] = function\n    inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the InteractionChannelParticipantContext\n *\n * @constructor Twilio.FlexApi.V1.InteractionContext.InteractionChannelContext.InteractionChannelParticipantContext\n *\n * @param {V1} version - Version of the resource\n * @param {sid} interactionSid - The Interaction Sid for this channel.\n * @param {sid} channelSid - The Channel Sid for this Participant.\n * @param {sid} sid - The unique string that identifies the resource\n */\n/* jshint ignore:end */\nInteractionChannelParticipantContext = function\n    InteractionChannelParticipantContext(version, interactionSid, channelSid,\n    sid) {\n  this._version = version;\n\n  // Path Solution\n  this._solution = {interactionSid: interactionSid, channelSid: channelSid, sid: sid, };\n  this._uri = `/Interactions/${interactionSid}/Channels/${channelSid}/Participants/${sid}`;\n};\n\n/* jshint ignore:start */\n/**\n * update a InteractionChannelParticipantInstance\n *\n * @function update\n * @memberof Twilio.FlexApi.V1.InteractionContext.InteractionChannelContext.InteractionChannelParticipantContext#\n *\n * @param {object} opts - Options for request\n * @param {interaction_channel_participant.status} opts.status -\n *          The Participant's status.\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed InteractionChannelParticipantInstance\n */\n/* jshint ignore:end */\nInteractionChannelParticipantContext.prototype.update = function update(opts,\n    callback) {\n  if (_.isUndefined(opts)) {\n    throw new Error('Required parameter \"opts\" missing.');\n  }\n  if (_.isUndefined(opts['status'])) {\n    throw new Error('Required parameter \"opts[\\'status\\']\" missing.');\n  }\n\n  var deferred = Q.defer();\n  var data = values.of({'Status': _.get(opts, 'status')});\n\n  var promise = this._version.update({uri: this._uri, method: 'POST', data: data});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(new InteractionChannelParticipantInstance(\n      this._version,\n      payload,\n      this._solution.interactionSid,\n      this._solution.channelSid,\n      this._solution.sid\n    ));\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.FlexApi.V1.InteractionContext.InteractionChannelContext.InteractionChannelParticipantContext#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nInteractionChannelParticipantContext.prototype.toJSON = function toJSON() {\n  return this._solution;\n};\n\nInteractionChannelParticipantContext.prototype[util.inspect.custom] = function\n    inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\nmodule.exports = {\n  InteractionChannelParticipantList: InteractionChannelParticipantList,\n  InteractionChannelParticipantPage: InteractionChannelParticipantPage,\n  InteractionChannelParticipantInstance: InteractionChannelParticipantInstance,\n  InteractionChannelParticipantContext: InteractionChannelParticipantContext\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}