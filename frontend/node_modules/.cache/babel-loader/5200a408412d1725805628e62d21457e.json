{"ast":null,"code":"'use strict';\n/* jshint ignore:start */\n\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n\n/* jshint ignore:end */\n\nvar Q = require('q');\n/* jshint ignore:line */\n\n\nvar _ = require('lodash');\n/* jshint ignore:line */\n\n\nvar util = require('util');\n/* jshint ignore:line */\n\n\nvar Page = require('../../../../../base/Page');\n/* jshint ignore:line */\n\n\nvar serialize = require('../../../../../base/serialize');\n/* jshint ignore:line */\n\n\nvar values = require('../../../../../base/values');\n/* jshint ignore:line */\n\n\nvar InteractionChannelInviteList;\nvar InteractionChannelInvitePage;\nvar InteractionChannelInviteInstance;\n/* jshint ignore:start */\n\n/**\n * Initialize the InteractionChannelInviteList\n *\n * @constructor Twilio.FlexApi.V1.InteractionContext.InteractionChannelContext.InteractionChannelInviteList\n *\n * @param {Twilio.FlexApi.V1} version - Version of the resource\n * @param {string} interactionSid - The Interaction SID for this Channel\n * @param {string} channelSid - The Channel SID for this Invite\n */\n\n/* jshint ignore:end */\n\nInteractionChannelInviteList = function InteractionChannelInviteList(version, interactionSid, channelSid) {\n  /* jshint ignore:start */\n\n  /**\n   * @function invites\n   * @memberof Twilio.FlexApi.V1.InteractionContext.InteractionChannelContext#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.FlexApi.V1.InteractionContext.InteractionChannelContext.InteractionChannelInviteContext}\n   */\n\n  /* jshint ignore:end */\n  function InteractionChannelInviteListInstance(sid) {\n    return InteractionChannelInviteListInstance.get(sid);\n  }\n\n  InteractionChannelInviteListInstance._version = version; // Path Solution\n\n  InteractionChannelInviteListInstance._solution = {\n    interactionSid: interactionSid,\n    channelSid: channelSid\n  };\n  InteractionChannelInviteListInstance._uri = `/Interactions/${interactionSid}/Channels/${channelSid}/Invites`;\n  /* jshint ignore:start */\n\n  /**\n   * create a InteractionChannelInviteInstance\n   *\n   * @function create\n   * @memberof Twilio.FlexApi.V1.InteractionContext.InteractionChannelContext.InteractionChannelInviteList#\n   *\n   * @param {object} opts - Options for request\n   * @param {object} opts.routing - The Interaction's routing logic\n   * @param {function} [callback] - Callback to handle processed record\n   *\n   * @returns {Promise} Resolves to processed InteractionChannelInviteInstance\n   */\n\n  /* jshint ignore:end */\n\n  InteractionChannelInviteListInstance.create = function create(opts, callback) {\n    if (_.isUndefined(opts)) {\n      throw new Error('Required parameter \"opts\" missing.');\n    }\n\n    if (_.isUndefined(opts['routing'])) {\n      throw new Error('Required parameter \"opts[\\'routing\\']\" missing.');\n    }\n\n    var deferred = Q.defer();\n    var data = values.of({\n      'Routing': serialize.object(_.get(opts, 'routing'))\n    });\n\n    var promise = this._version.create({\n      uri: this._uri,\n      method: 'POST',\n      data: data\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new InteractionChannelInviteInstance(this._version, payload));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Streams InteractionChannelInviteInstance records from the API.\n   *\n   * This operation lazily loads records as efficiently as possible until the limit\n   * is reached.\n   *\n   * The results are passed into the callback function, so this operation is memory\n   * efficient.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function each\n   * @memberof Twilio.FlexApi.V1.InteractionContext.InteractionChannelContext.InteractionChannelInviteList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         each() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no pageSize is defined but a limit is defined,\n   *         each() will attempt to read the limit with the most efficient\n   *         page size, i.e. min(limit, 1000)\n   * @param {Function} [opts.callback] -\n   *         Function to process each record. If this and a positional\n   *         callback are passed, this one will be used\n   * @param {Function} [opts.done] -\n   *          Function to be called upon completion of streaming\n   * @param {Function} [callback] - Function to process each record\n   */\n\n  /* jshint ignore:end */\n\n\n  InteractionChannelInviteListInstance.each = function each(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n\n    if (opts.callback) {\n      callback = opts.callback;\n    }\n\n    if (_.isUndefined(callback)) {\n      throw new Error('Callback function must be provided');\n    }\n\n    var done = false;\n    var currentPage = 1;\n    var currentResource = 0;\n\n    var limits = this._version.readLimits({\n      limit: opts.limit,\n      pageSize: opts.pageSize\n    });\n\n    function onComplete(error) {\n      done = true;\n\n      if (_.isFunction(opts.done)) {\n        opts.done(error);\n      }\n    }\n\n    function fetchNextPage(fn) {\n      var promise = fn();\n\n      if (_.isUndefined(promise)) {\n        onComplete();\n        return;\n      }\n\n      promise.then(function (page) {\n        _.each(page.instances, function (instance) {\n          if (done || !_.isUndefined(opts.limit) && currentResource >= opts.limit) {\n            done = true;\n            return false;\n          }\n\n          currentResource++;\n          callback(instance, onComplete);\n        });\n\n        if (!done) {\n          currentPage++;\n          fetchNextPage(_.bind(page.nextPage, page));\n        } else {\n          onComplete();\n        }\n      });\n      promise.catch(onComplete);\n    }\n\n    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Lists InteractionChannelInviteInstance records from the API as a list.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function list\n   * @memberof Twilio.FlexApi.V1.InteractionContext.InteractionChannelContext.InteractionChannelInviteList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         list() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no page_size is defined but a limit is defined,\n   *         list() will attempt to read the limit with the most\n   *         efficient page size, i.e. min(limit, 1000)\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  InteractionChannelInviteListInstance.list = function list(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n    var deferred = Q.defer();\n    var allResources = [];\n\n    opts.callback = function (resource, done) {\n      allResources.push(resource);\n\n      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {\n        done();\n      }\n    };\n\n    opts.done = function (error) {\n      if (_.isUndefined(error)) {\n        deferred.resolve(allResources);\n      } else {\n        deferred.reject(error);\n      }\n    };\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    this.each(opts);\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Retrieve a single page of InteractionChannelInviteInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function page\n   * @memberof Twilio.FlexApi.V1.InteractionContext.InteractionChannelContext.InteractionChannelInviteList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.pageToken] - PageToken provided by the API\n   * @param {number} [opts.pageNumber] -\n   *          Page Number, this value is simply for client state\n   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  InteractionChannelInviteListInstance.page = function page(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n    var deferred = Q.defer();\n    var data = values.of({\n      'PageToken': opts.pageToken,\n      'Page': opts.pageNumber,\n      'PageSize': opts.pageSize\n    });\n\n    var promise = this._version.page({\n      uri: this._uri,\n      method: 'GET',\n      params: data\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new InteractionChannelInvitePage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Retrieve a single target page of InteractionChannelInviteInstance records from\n   * the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function getPage\n   * @memberof Twilio.FlexApi.V1.InteractionContext.InteractionChannelContext.InteractionChannelInviteList#\n   *\n   * @param {string} [targetUrl] - API-generated URL for the requested results page\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  InteractionChannelInviteListInstance.getPage = function getPage(targetUrl, callback) {\n    var deferred = Q.defer();\n\n    var promise = this._version._domain.twilio.request({\n      method: 'GET',\n      uri: targetUrl\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new InteractionChannelInvitePage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.FlexApi.V1.InteractionContext.InteractionChannelContext.InteractionChannelInviteList#\n   *\n   * @returns Object\n   */\n\n  /* jshint ignore:end */\n\n\n  InteractionChannelInviteListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n\n  InteractionChannelInviteListInstance[util.inspect.custom] = function inspect(depth, options) {\n    return util.inspect(this.toJSON(), options);\n  };\n\n  return InteractionChannelInviteListInstance;\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the InteractionChannelInvitePage\n *\n * @constructor Twilio.FlexApi.V1.InteractionContext.InteractionChannelContext.InteractionChannelInvitePage\n *\n * @param {V1} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {InteractionChannelInviteSolution} solution - Path solution\n *\n * @returns InteractionChannelInvitePage\n */\n\n/* jshint ignore:end */\n\n\nInteractionChannelInvitePage = function InteractionChannelInvitePage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n\n_.extend(InteractionChannelInvitePage.prototype, Page.prototype);\n\nInteractionChannelInvitePage.prototype.constructor = InteractionChannelInvitePage;\n/* jshint ignore:start */\n\n/**\n * Build an instance of InteractionChannelInviteInstance\n *\n * @function getInstance\n * @memberof Twilio.FlexApi.V1.InteractionContext.InteractionChannelContext.InteractionChannelInvitePage#\n *\n * @param {InteractionChannelInvitePayload} payload - Payload response from the API\n *\n * @returns InteractionChannelInviteInstance\n */\n\n/* jshint ignore:end */\n\nInteractionChannelInvitePage.prototype.getInstance = function getInstance(payload) {\n  return new InteractionChannelInviteInstance(this._version, payload, this._solution.interactionSid, this._solution.channelSid);\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.FlexApi.V1.InteractionContext.InteractionChannelContext.InteractionChannelInvitePage#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nInteractionChannelInvitePage.prototype.toJSON = function toJSON() {\n  let clone = {};\n\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n\n  return clone;\n};\n\nInteractionChannelInvitePage.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the InteractionChannelInviteContext\n *\n * @constructor Twilio.FlexApi.V1.InteractionContext.InteractionChannelContext.InteractionChannelInviteInstance\n *\n * @property {string} sid - The unique string that identifies the resource\n * @property {string} interactionSid - The Interaction SID for this Channel\n * @property {string} channelSid - The Channel SID for this Invite\n * @property {object} routing -\n *          A JSON object representing the routing rules for the Interaction Channel\n * @property {string} url - The url\n *\n * @param {V1} version - Version of the resource\n * @param {InteractionChannelInvitePayload} payload - The instance payload\n * @param {sid} interactionSid - The Interaction SID for this Channel\n * @param {sid} channelSid - The Channel SID for this Invite\n */\n\n/* jshint ignore:end */\n\n\nInteractionChannelInviteInstance = function InteractionChannelInviteInstance(version, payload, interactionSid, channelSid) {\n  this._version = version; // Marshaled Properties\n\n  this.sid = payload.sid; // jshint ignore:line\n\n  this.interactionSid = payload.interaction_sid; // jshint ignore:line\n\n  this.channelSid = payload.channel_sid; // jshint ignore:line\n\n  this.routing = payload.routing; // jshint ignore:line\n\n  this.url = payload.url; // jshint ignore:line\n  // Context\n\n  this._context = undefined;\n  this._solution = {\n    interactionSid: interactionSid,\n    channelSid: channelSid\n  };\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.FlexApi.V1.InteractionContext.InteractionChannelContext.InteractionChannelInviteInstance#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nInteractionChannelInviteInstance.prototype.toJSON = function toJSON() {\n  let clone = {};\n\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n\n  return clone;\n};\n\nInteractionChannelInviteInstance.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\nmodule.exports = {\n  InteractionChannelInviteList: InteractionChannelInviteList,\n  InteractionChannelInvitePage: InteractionChannelInvitePage,\n  InteractionChannelInviteInstance: InteractionChannelInviteInstance\n};","map":{"version":3,"names":["Q","require","_","util","Page","serialize","values","InteractionChannelInviteList","InteractionChannelInvitePage","InteractionChannelInviteInstance","version","interactionSid","channelSid","InteractionChannelInviteListInstance","sid","get","_version","_solution","_uri","create","opts","callback","isUndefined","Error","deferred","defer","data","of","object","promise","uri","method","then","payload","resolve","bind","catch","error","reject","isFunction","nodeify","each","done","currentPage","currentResource","limits","readLimits","limit","pageSize","onComplete","fetchNextPage","fn","page","instances","instance","nextPage","merge","list","allResources","resource","push","length","pageToken","pageNumber","params","getPage","targetUrl","_domain","twilio","request","toJSON","inspect","custom","depth","options","response","solution","prototype","constructor","call","extend","getInstance","clone","forOwn","value","key","startsWith","interaction_sid","channel_sid","routing","url","_context","undefined","module","exports"],"sources":["/Users/hooniesun/rmit/fwp/assessment1/lan/node_modules/twilio/lib/rest/flexApi/v1/interaction/interactionChannel/interactionChannelInvite.js"],"sourcesContent":["'use strict';\n\n/* jshint ignore:start */\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n/* jshint ignore:end */\n\nvar Q = require('q');  /* jshint ignore:line */\nvar _ = require('lodash');  /* jshint ignore:line */\nvar util = require('util');  /* jshint ignore:line */\nvar Page = require('../../../../../base/Page');  /* jshint ignore:line */\nvar serialize = require(\n    '../../../../../base/serialize');  /* jshint ignore:line */\nvar values = require('../../../../../base/values');  /* jshint ignore:line */\n\nvar InteractionChannelInviteList;\nvar InteractionChannelInvitePage;\nvar InteractionChannelInviteInstance;\n\n/* jshint ignore:start */\n/**\n * Initialize the InteractionChannelInviteList\n *\n * @constructor Twilio.FlexApi.V1.InteractionContext.InteractionChannelContext.InteractionChannelInviteList\n *\n * @param {Twilio.FlexApi.V1} version - Version of the resource\n * @param {string} interactionSid - The Interaction SID for this Channel\n * @param {string} channelSid - The Channel SID for this Invite\n */\n/* jshint ignore:end */\nInteractionChannelInviteList = function InteractionChannelInviteList(version,\n    interactionSid, channelSid) {\n  /* jshint ignore:start */\n  /**\n   * @function invites\n   * @memberof Twilio.FlexApi.V1.InteractionContext.InteractionChannelContext#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.FlexApi.V1.InteractionContext.InteractionChannelContext.InteractionChannelInviteContext}\n   */\n  /* jshint ignore:end */\n  function InteractionChannelInviteListInstance(sid) {\n    return InteractionChannelInviteListInstance.get(sid);\n  }\n\n  InteractionChannelInviteListInstance._version = version;\n  // Path Solution\n  InteractionChannelInviteListInstance._solution = {\n    interactionSid: interactionSid,\n    channelSid: channelSid\n  };\n  InteractionChannelInviteListInstance._uri = `/Interactions/${interactionSid}/Channels/${channelSid}/Invites`;\n  /* jshint ignore:start */\n  /**\n   * create a InteractionChannelInviteInstance\n   *\n   * @function create\n   * @memberof Twilio.FlexApi.V1.InteractionContext.InteractionChannelContext.InteractionChannelInviteList#\n   *\n   * @param {object} opts - Options for request\n   * @param {object} opts.routing - The Interaction's routing logic\n   * @param {function} [callback] - Callback to handle processed record\n   *\n   * @returns {Promise} Resolves to processed InteractionChannelInviteInstance\n   */\n  /* jshint ignore:end */\n  InteractionChannelInviteListInstance.create = function create(opts, callback) {\n    if (_.isUndefined(opts)) {\n      throw new Error('Required parameter \"opts\" missing.');\n    }\n    if (_.isUndefined(opts['routing'])) {\n      throw new Error('Required parameter \"opts[\\'routing\\']\" missing.');\n    }\n\n    var deferred = Q.defer();\n    var data = values.of({'Routing': serialize.object(_.get(opts, 'routing'))});\n\n    var promise = this._version.create({uri: this._uri, method: 'POST', data: data});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new InteractionChannelInviteInstance(this._version, payload));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Streams InteractionChannelInviteInstance records from the API.\n   *\n   * This operation lazily loads records as efficiently as possible until the limit\n   * is reached.\n   *\n   * The results are passed into the callback function, so this operation is memory\n   * efficient.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function each\n   * @memberof Twilio.FlexApi.V1.InteractionContext.InteractionChannelContext.InteractionChannelInviteList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         each() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no pageSize is defined but a limit is defined,\n   *         each() will attempt to read the limit with the most efficient\n   *         page size, i.e. min(limit, 1000)\n   * @param {Function} [opts.callback] -\n   *         Function to process each record. If this and a positional\n   *         callback are passed, this one will be used\n   * @param {Function} [opts.done] -\n   *          Function to be called upon completion of streaming\n   * @param {Function} [callback] - Function to process each record\n   */\n  /* jshint ignore:end */\n  InteractionChannelInviteListInstance.each = function each(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    if (opts.callback) {\n      callback = opts.callback;\n    }\n    if (_.isUndefined(callback)) {\n      throw new Error('Callback function must be provided');\n    }\n\n    var done = false;\n    var currentPage = 1;\n    var currentResource = 0;\n    var limits = this._version.readLimits({\n      limit: opts.limit,\n      pageSize: opts.pageSize\n    });\n\n    function onComplete(error) {\n      done = true;\n      if (_.isFunction(opts.done)) {\n        opts.done(error);\n      }\n    }\n\n    function fetchNextPage(fn) {\n      var promise = fn();\n      if (_.isUndefined(promise)) {\n        onComplete();\n        return;\n      }\n\n      promise.then(function(page) {\n        _.each(page.instances, function(instance) {\n          if (done || (!_.isUndefined(opts.limit) && currentResource >= opts.limit)) {\n            done = true;\n            return false;\n          }\n\n          currentResource++;\n          callback(instance, onComplete);\n        });\n\n        if (!done) {\n          currentPage++;\n          fetchNextPage(_.bind(page.nextPage, page));\n        } else {\n          onComplete();\n        }\n      });\n\n      promise.catch(onComplete);\n    }\n\n    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Lists InteractionChannelInviteInstance records from the API as a list.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function list\n   * @memberof Twilio.FlexApi.V1.InteractionContext.InteractionChannelContext.InteractionChannelInviteList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         list() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no page_size is defined but a limit is defined,\n   *         list() will attempt to read the limit with the most\n   *         efficient page size, i.e. min(limit, 1000)\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  InteractionChannelInviteListInstance.list = function list(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    var deferred = Q.defer();\n    var allResources = [];\n    opts.callback = function(resource, done) {\n      allResources.push(resource);\n\n      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {\n        done();\n      }\n    };\n\n    opts.done = function(error) {\n      if (_.isUndefined(error)) {\n        deferred.resolve(allResources);\n      } else {\n        deferred.reject(error);\n      }\n    };\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    this.each(opts);\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single page of InteractionChannelInviteInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function page\n   * @memberof Twilio.FlexApi.V1.InteractionContext.InteractionChannelContext.InteractionChannelInviteList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.pageToken] - PageToken provided by the API\n   * @param {number} [opts.pageNumber] -\n   *          Page Number, this value is simply for client state\n   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  InteractionChannelInviteListInstance.page = function page(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n\n    var deferred = Q.defer();\n    var data = values.of({\n      'PageToken': opts.pageToken,\n      'Page': opts.pageNumber,\n      'PageSize': opts.pageSize\n    });\n\n    var promise = this._version.page({uri: this._uri, method: 'GET', params: data});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new InteractionChannelInvitePage(this._version, payload, this._solution));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single target page of InteractionChannelInviteInstance records from\n   * the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function getPage\n   * @memberof Twilio.FlexApi.V1.InteractionContext.InteractionChannelContext.InteractionChannelInviteList#\n   *\n   * @param {string} [targetUrl] - API-generated URL for the requested results page\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  InteractionChannelInviteListInstance.getPage = function getPage(targetUrl,\n      callback) {\n    var deferred = Q.defer();\n\n    var promise = this._version._domain.twilio.request({method: 'GET', uri: targetUrl});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new InteractionChannelInvitePage(this._version, payload, this._solution));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.FlexApi.V1.InteractionContext.InteractionChannelContext.InteractionChannelInviteList#\n   *\n   * @returns Object\n   */\n  /* jshint ignore:end */\n  InteractionChannelInviteListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n\n  InteractionChannelInviteListInstance[util.inspect.custom] = function\n      inspect(depth, options) {\n    return util.inspect(this.toJSON(), options);\n  };\n\n  return InteractionChannelInviteListInstance;\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the InteractionChannelInvitePage\n *\n * @constructor Twilio.FlexApi.V1.InteractionContext.InteractionChannelContext.InteractionChannelInvitePage\n *\n * @param {V1} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {InteractionChannelInviteSolution} solution - Path solution\n *\n * @returns InteractionChannelInvitePage\n */\n/* jshint ignore:end */\nInteractionChannelInvitePage = function InteractionChannelInvitePage(version,\n    response, solution) {\n  // Path Solution\n  this._solution = solution;\n\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n\n_.extend(InteractionChannelInvitePage.prototype, Page.prototype);\nInteractionChannelInvitePage.prototype.constructor = InteractionChannelInvitePage;\n\n/* jshint ignore:start */\n/**\n * Build an instance of InteractionChannelInviteInstance\n *\n * @function getInstance\n * @memberof Twilio.FlexApi.V1.InteractionContext.InteractionChannelContext.InteractionChannelInvitePage#\n *\n * @param {InteractionChannelInvitePayload} payload - Payload response from the API\n *\n * @returns InteractionChannelInviteInstance\n */\n/* jshint ignore:end */\nInteractionChannelInvitePage.prototype.getInstance = function\n    getInstance(payload) {\n  return new InteractionChannelInviteInstance(\n    this._version,\n    payload,\n    this._solution.interactionSid,\n    this._solution.channelSid\n  );\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.FlexApi.V1.InteractionContext.InteractionChannelContext.InteractionChannelInvitePage#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nInteractionChannelInvitePage.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function(value, key) {\n    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\n\nInteractionChannelInvitePage.prototype[util.inspect.custom] = function\n    inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the InteractionChannelInviteContext\n *\n * @constructor Twilio.FlexApi.V1.InteractionContext.InteractionChannelContext.InteractionChannelInviteInstance\n *\n * @property {string} sid - The unique string that identifies the resource\n * @property {string} interactionSid - The Interaction SID for this Channel\n * @property {string} channelSid - The Channel SID for this Invite\n * @property {object} routing -\n *          A JSON object representing the routing rules for the Interaction Channel\n * @property {string} url - The url\n *\n * @param {V1} version - Version of the resource\n * @param {InteractionChannelInvitePayload} payload - The instance payload\n * @param {sid} interactionSid - The Interaction SID for this Channel\n * @param {sid} channelSid - The Channel SID for this Invite\n */\n/* jshint ignore:end */\nInteractionChannelInviteInstance = function\n    InteractionChannelInviteInstance(version, payload, interactionSid,\n    channelSid) {\n  this._version = version;\n\n  // Marshaled Properties\n  this.sid = payload.sid; // jshint ignore:line\n  this.interactionSid = payload.interaction_sid; // jshint ignore:line\n  this.channelSid = payload.channel_sid; // jshint ignore:line\n  this.routing = payload.routing; // jshint ignore:line\n  this.url = payload.url; // jshint ignore:line\n\n  // Context\n  this._context = undefined;\n  this._solution = {interactionSid: interactionSid, channelSid: channelSid, };\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.FlexApi.V1.InteractionContext.InteractionChannelContext.InteractionChannelInviteInstance#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nInteractionChannelInviteInstance.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function(value, key) {\n    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\n\nInteractionChannelInviteInstance.prototype[util.inspect.custom] = function\n    inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\nmodule.exports = {\n  InteractionChannelInviteList: InteractionChannelInviteList,\n  InteractionChannelInvitePage: InteractionChannelInvitePage,\n  InteractionChannelInviteInstance: InteractionChannelInviteInstance\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}