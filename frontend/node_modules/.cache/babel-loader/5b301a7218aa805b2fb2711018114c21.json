{"ast":null,"code":"// Generated by CoffeeScript 2.4.1\n(function () {\n  var NodeType, XMLCharacterData, XMLComment;\n  NodeType = require('./NodeType');\n  XMLCharacterData = require('./XMLCharacterData'); // Represents a comment node\n\n  module.exports = XMLComment = class XMLComment extends XMLCharacterData {\n    // Initializes a new instance of `XMLComment`\n    // `text` comment text\n    constructor(parent, text) {\n      super(parent);\n\n      if (text == null) {\n        throw new Error(\"Missing comment text. \" + this.debugInfo());\n      }\n\n      this.name = \"#comment\";\n      this.type = NodeType.Comment;\n      this.value = this.stringify.comment(text);\n    } // Creates and returns a deep clone of `this`\n\n\n    clone() {\n      return Object.create(this);\n    } // Converts the XML fragment to string\n    // `options.pretty` pretty prints the result\n    // `options.indent` indentation for pretty print\n    // `options.offset` how many indentations to add to every line for pretty print\n    // `options.newline` newline sequence for pretty print\n\n\n    toString(options) {\n      return this.options.writer.comment(this, this.options.writer.filterOptions(options));\n    }\n\n  };\n}).call(this);","map":{"version":3,"names":["NodeType","XMLCharacterData","XMLComment","require","module","exports","constructor","parent","text","Error","debugInfo","name","type","Comment","value","stringify","comment","clone","Object","create","toString","options","writer","filterOptions","call"],"sources":["/Users/hooniesun/rmit/fwp/assessment1/lan/node_modules/xmlbuilder/lib/XMLComment.js"],"sourcesContent":["// Generated by CoffeeScript 2.4.1\n(function() {\n  var NodeType, XMLCharacterData, XMLComment;\n\n  NodeType = require('./NodeType');\n\n  XMLCharacterData = require('./XMLCharacterData');\n\n  // Represents a comment node\n  module.exports = XMLComment = class XMLComment extends XMLCharacterData {\n    // Initializes a new instance of `XMLComment`\n\n    // `text` comment text\n    constructor(parent, text) {\n      super(parent);\n      if (text == null) {\n        throw new Error(\"Missing comment text. \" + this.debugInfo());\n      }\n      this.name = \"#comment\";\n      this.type = NodeType.Comment;\n      this.value = this.stringify.comment(text);\n    }\n\n    // Creates and returns a deep clone of `this`\n    clone() {\n      return Object.create(this);\n    }\n\n    // Converts the XML fragment to string\n\n    // `options.pretty` pretty prints the result\n    // `options.indent` indentation for pretty print\n    // `options.offset` how many indentations to add to every line for pretty print\n    // `options.newline` newline sequence for pretty print\n    toString(options) {\n      return this.options.writer.comment(this, this.options.writer.filterOptions(options));\n    }\n\n  };\n\n}).call(this);\n"],"mappings":"AAAA;AACA,CAAC,YAAW;EACV,IAAIA,QAAJ,EAAcC,gBAAd,EAAgCC,UAAhC;EAEAF,QAAQ,GAAGG,OAAO,CAAC,YAAD,CAAlB;EAEAF,gBAAgB,GAAGE,OAAO,CAAC,oBAAD,CAA1B,CALU,CAOV;;EACAC,MAAM,CAACC,OAAP,GAAiBH,UAAU,GAAG,MAAMA,UAAN,SAAyBD,gBAAzB,CAA0C;IACtE;IAEA;IACAK,WAAW,CAACC,MAAD,EAASC,IAAT,EAAe;MACxB,MAAMD,MAAN;;MACA,IAAIC,IAAI,IAAI,IAAZ,EAAkB;QAChB,MAAM,IAAIC,KAAJ,CAAU,2BAA2B,KAAKC,SAAL,EAArC,CAAN;MACD;;MACD,KAAKC,IAAL,GAAY,UAAZ;MACA,KAAKC,IAAL,GAAYZ,QAAQ,CAACa,OAArB;MACA,KAAKC,KAAL,GAAa,KAAKC,SAAL,CAAeC,OAAf,CAAuBR,IAAvB,CAAb;IACD,CAZqE,CActE;;;IACAS,KAAK,GAAG;MACN,OAAOC,MAAM,CAACC,MAAP,CAAc,IAAd,CAAP;IACD,CAjBqE,CAmBtE;IAEA;IACA;IACA;IACA;;;IACAC,QAAQ,CAACC,OAAD,EAAU;MAChB,OAAO,KAAKA,OAAL,CAAaC,MAAb,CAAoBN,OAApB,CAA4B,IAA5B,EAAkC,KAAKK,OAAL,CAAaC,MAAb,CAAoBC,aAApB,CAAkCF,OAAlC,CAAlC,CAAP;IACD;;EA3BqE,CAAxE;AA+BD,CAvCD,EAuCGG,IAvCH,CAuCQ,IAvCR"},"metadata":{},"sourceType":"script"}