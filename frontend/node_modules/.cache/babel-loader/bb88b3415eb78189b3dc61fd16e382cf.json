{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useEffect } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport formatDate from \"./formatDate\";\nimport validate from \"./SignFormValidationRules\";\n\nconst useSignForm = (type, dispatchUser, users) => {\n  _s();\n\n  const [isPasswordVisible, setIsPasswordVisble] = useState(false); // const [isEmailValid, setIsEmailValid] = React.useState(true);\n\n  const [values, setValues] = useState({});\n  const [errors, serErrors] = useState({});\n  const [isLoading, setIsLoading] = useState(false);\n  const [isMFAVisible, setIsMFAVisible] = useState(false);\n  const [user, setUser] = useState(null);\n  const timeDelayed = 1000;\n  const navigate = useNavigate();\n\n  const togglePasswordVisability = event => {\n    setIsPasswordVisble(!isPasswordVisible);\n  };\n\n  let handleSubmit;\n  let handleChange;\n  let authenticateUser;\n\n  if (type === \"signin\") {\n    // const [isPasswordCorrect, setIsPasswordCorrect] = React.useState(true);\n    handleSubmit = event => {// event.preventDefault();\n      // let email = event.target[0].value;\n      // let password = event.target[1].value;\n      // if (email in users) {\n      //   if (users[email].password === password) {\n      //     setUser({\n      //       ...user,\n      //       email: email,\n      //       password: password,\n      //       secret: users[email].secret,\n      //     });\n      //     setIsPasswordCorrect(true);\n      //     setIsEmailValid(true);\n      //     setIsMFAVisible(true);\n      //   } else {\n      //     // Password doesn't match\n      //     setIsEmailValid(true);\n      //     setIsPasswordCorrect(false);\n      //   }\n      // } else {\n      //   // Email doesn't exist\n      //   setIsEmailValid(false);\n      //   setIsPasswordCorrect(true);\n      // }\n    };\n\n    const authenticateUser = () => {// dispatchUser({ type: \"SIGNIN_USER\", payload: users[user.email] });\n      // setIsMFAVisible(false);\n      // setIsLoading(true);\n      // setTimeout(() => {\n      //   setIsLoading(false);\n      //   navigate(\"/profile\");\n      // }, timeDelayed);\n    };\n  } else if (type === \"signup\") {\n    // const [isPasswordValid, setIsPasswordValid] = React.useState(true);\n    // const [isPasswordIdentical, setIsPasswordIdentical] = React.useState(true);\n    // A list of avatars from which to randomly assign to the user\n    const avatars = [\"male\", \"female\", \"human\", \"identicon\", \"initials\", \"bottts\", \"avataaars\", \"jdenticon\", \"gridy\", \"micah\"];\n    let validatePasswordTimeoutId;\n    let confirmPasswordTimeoutId;\n    let validateEmailTimeoutId;\n\n    handleChange = event => {\n      console.log(event.target.name);\n    };\n\n    handleSubmit = event => {\n      event.preventDefault(); // let email = event.target[2].value;\n      // let password = event.target[3].value;\n      // let confirmedPassword = event.target[4].value;\n      // // Make sure to check whether all the entries are valid once more\n      // if (\n      //   validateEmail(email) &&\n      //   validatePassword(password) &&\n      //   confirmPassword(confirmedPassword)\n      // ) {\n      //   // Before storing the user data, ensure the user has scanned a QR code in Google Authenticator\n      //   setIsMFAVisible(true);\n      //   setUser({\n      //     firstName: event.target[0].value,\n      //     lastName: event.target[1].value,\n      //     email: email,\n      //     password: confirmedPassword,\n      //     joinedDate: formatDate(),\n      //     avatarsrc: `https://avatars.dicebear.com/api/${\n      //       avatars[Math.floor(Math.random() * avatars.length)]\n      //     }/${email}.svg`,\n      //     posts: [],\n      //   });\n      // } else {\n      //   setIsEmailValid(validateEmail(email));\n      //   setIsPasswordValid(validatePassword(password));\n      //   setIsPasswordIdentical(confirmPassword(confirmedPassword));\n      // }\n    }; // const validateEmailHandler = (event) => {\n    //   clearTimeout(validateEmailTimeoutId);\n    //   validateEmailTimeoutId = setTimeout(() => {\n    //     setIsEmailValid(validateEmail(event.target.value));\n    //   }, timeDelayed);\n    // };\n    // const validatePasswordHandler = (event) => {\n    //   clearTimeout(validatePasswordTimeoutId);\n    //   validatePasswordTimeoutId = setTimeout(() => {\n    //     setIsPasswordValid(validatePassword(event.target.value));\n    //   }, timeDelayed);\n    // };\n    // const confirmPasswordHandler = (event) => {\n    //   clearTimeout(confirmPasswordTimeoutId);\n    //   confirmPasswordTimeoutId = setTimeout(() => {\n    //     setIsPasswordIdentical(confirmPassword(event.target.value));\n    //   }, timeDelayed);\n    // };\n    // The function gets called within MFA if the user has successfully scanned the QR code and typed in the OTP\n\n\n    authenticateUser = secret => {// dispatchUser({\n      //   type: \"SIGNUP_USER\",\n      //   payload: { ...user, secret: secret },\n      // });\n      // setIsLoading(true);\n      // clearTimeout(validateEmailTimeoutId);\n      // clearTimeout(confirmPasswordTimeoutId);\n      // clearTimeout(validatePasswordTimeoutId);\n      // setTimeout(() => {\n      //   setIsLoading(false);\n      //   navigate(\"/profile\");\n      // }, timeDelayed);\n    };\n  }\n\n  return {\n    isLoading,\n    isMFAVisible,\n    setIsMFAVisible,\n    authenticateUser,\n    handleChange,\n    handleSubmit,\n    values,\n    errors\n  };\n};\n\n_s(useSignForm, \"Zy3Wyo08jrI+YKVSUn5whKQCI1Q=\", false, function () {\n  return [useNavigate];\n});\n\nexport default useSignForm;","map":{"version":3,"names":["useState","useEffect","useNavigate","formatDate","validate","useSignForm","type","dispatchUser","users","isPasswordVisible","setIsPasswordVisble","values","setValues","errors","serErrors","isLoading","setIsLoading","isMFAVisible","setIsMFAVisible","user","setUser","timeDelayed","navigate","togglePasswordVisability","event","handleSubmit","handleChange","authenticateUser","avatars","validatePasswordTimeoutId","confirmPasswordTimeoutId","validateEmailTimeoutId","console","log","target","name","preventDefault","secret"],"sources":["/Users/hooniesun/rmit/fwp/assessment1/lan/src/UI/useSignForm.js"],"sourcesContent":["import { useState, useEffect } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport formatDate from \"./formatDate\";\nimport validate from \"./SignFormValidationRules\";\n\nconst useSignForm = (type, dispatchUser, users) => {\n  const [isPasswordVisible, setIsPasswordVisble] = useState(false);\n  // const [isEmailValid, setIsEmailValid] = React.useState(true);\n  const [values, setValues] = useState({});\n  const [errors, serErrors] = useState({});\n  const [isLoading, setIsLoading] = useState(false);\n  const [isMFAVisible, setIsMFAVisible] = useState(false);\n  const [user, setUser] = useState(null);\n  const timeDelayed = 1000;\n  const navigate = useNavigate();\n\n  const togglePasswordVisability = (event) => {\n    setIsPasswordVisble(!isPasswordVisible);\n  };\n\n  let handleSubmit;\n  let handleChange;\n  let authenticateUser;\n\n  if (type === \"signin\") {\n    // const [isPasswordCorrect, setIsPasswordCorrect] = React.useState(true);\n\n    handleSubmit = (event) => {\n      // event.preventDefault();\n      // let email = event.target[0].value;\n      // let password = event.target[1].value;\n      // if (email in users) {\n      //   if (users[email].password === password) {\n      //     setUser({\n      //       ...user,\n      //       email: email,\n      //       password: password,\n      //       secret: users[email].secret,\n      //     });\n      //     setIsPasswordCorrect(true);\n      //     setIsEmailValid(true);\n      //     setIsMFAVisible(true);\n      //   } else {\n      //     // Password doesn't match\n      //     setIsEmailValid(true);\n      //     setIsPasswordCorrect(false);\n      //   }\n      // } else {\n      //   // Email doesn't exist\n      //   setIsEmailValid(false);\n      //   setIsPasswordCorrect(true);\n      // }\n    };\n\n    const authenticateUser = () => {\n      // dispatchUser({ type: \"SIGNIN_USER\", payload: users[user.email] });\n      // setIsMFAVisible(false);\n      // setIsLoading(true);\n      // setTimeout(() => {\n      //   setIsLoading(false);\n      //   navigate(\"/profile\");\n      // }, timeDelayed);\n    };\n  } else if (type === \"signup\") {\n    // const [isPasswordValid, setIsPasswordValid] = React.useState(true);\n    // const [isPasswordIdentical, setIsPasswordIdentical] = React.useState(true);\n\n    // A list of avatars from which to randomly assign to the user\n    const avatars = [\n      \"male\",\n      \"female\",\n      \"human\",\n      \"identicon\",\n      \"initials\",\n      \"bottts\",\n      \"avataaars\",\n      \"jdenticon\",\n      \"gridy\",\n      \"micah\",\n    ];\n\n    let validatePasswordTimeoutId;\n    let confirmPasswordTimeoutId;\n    let validateEmailTimeoutId;\n\n    handleChange = (event) => {\n      console.log(event.target.name);\n    };\n\n    handleSubmit = (event) => {\n      event.preventDefault();\n\n      // let email = event.target[2].value;\n      // let password = event.target[3].value;\n      // let confirmedPassword = event.target[4].value;\n\n      // // Make sure to check whether all the entries are valid once more\n      // if (\n      //   validateEmail(email) &&\n      //   validatePassword(password) &&\n      //   confirmPassword(confirmedPassword)\n      // ) {\n      //   // Before storing the user data, ensure the user has scanned a QR code in Google Authenticator\n      //   setIsMFAVisible(true);\n\n      //   setUser({\n      //     firstName: event.target[0].value,\n      //     lastName: event.target[1].value,\n      //     email: email,\n      //     password: confirmedPassword,\n      //     joinedDate: formatDate(),\n      //     avatarsrc: `https://avatars.dicebear.com/api/${\n      //       avatars[Math.floor(Math.random() * avatars.length)]\n      //     }/${email}.svg`,\n      //     posts: [],\n      //   });\n      // } else {\n      //   setIsEmailValid(validateEmail(email));\n      //   setIsPasswordValid(validatePassword(password));\n      //   setIsPasswordIdentical(confirmPassword(confirmedPassword));\n      // }\n    };\n\n    // const validateEmailHandler = (event) => {\n    //   clearTimeout(validateEmailTimeoutId);\n    //   validateEmailTimeoutId = setTimeout(() => {\n    //     setIsEmailValid(validateEmail(event.target.value));\n    //   }, timeDelayed);\n    // };\n\n    // const validatePasswordHandler = (event) => {\n    //   clearTimeout(validatePasswordTimeoutId);\n    //   validatePasswordTimeoutId = setTimeout(() => {\n    //     setIsPasswordValid(validatePassword(event.target.value));\n    //   }, timeDelayed);\n    // };\n\n    // const confirmPasswordHandler = (event) => {\n    //   clearTimeout(confirmPasswordTimeoutId);\n    //   confirmPasswordTimeoutId = setTimeout(() => {\n    //     setIsPasswordIdentical(confirmPassword(event.target.value));\n    //   }, timeDelayed);\n    // };\n\n    // The function gets called within MFA if the user has successfully scanned the QR code and typed in the OTP\n    authenticateUser = (secret) => {\n      // dispatchUser({\n      //   type: \"SIGNUP_USER\",\n      //   payload: { ...user, secret: secret },\n      // });\n      // setIsLoading(true);\n      // clearTimeout(validateEmailTimeoutId);\n      // clearTimeout(confirmPasswordTimeoutId);\n      // clearTimeout(validatePasswordTimeoutId);\n      // setTimeout(() => {\n      //   setIsLoading(false);\n      //   navigate(\"/profile\");\n      // }, timeDelayed);\n    };\n  }\n\n  return {\n    isLoading,\n    isMFAVisible,\n    setIsMFAVisible,\n    authenticateUser,\n    handleChange,\n    handleSubmit,\n    values,\n    errors,\n  };\n};\n\nexport default useSignForm;\n"],"mappings":";;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,SAASC,WAAT,QAA4B,kBAA5B;AACA,OAAOC,UAAP,MAAuB,cAAvB;AACA,OAAOC,QAAP,MAAqB,2BAArB;;AAEA,MAAMC,WAAW,GAAG,CAACC,IAAD,EAAOC,YAAP,EAAqBC,KAArB,KAA+B;EAAA;;EACjD,MAAM,CAACC,iBAAD,EAAoBC,mBAApB,IAA2CV,QAAQ,CAAC,KAAD,CAAzD,CADiD,CAEjD;;EACA,MAAM,CAACW,MAAD,EAASC,SAAT,IAAsBZ,QAAQ,CAAC,EAAD,CAApC;EACA,MAAM,CAACa,MAAD,EAASC,SAAT,IAAsBd,QAAQ,CAAC,EAAD,CAApC;EACA,MAAM,CAACe,SAAD,EAAYC,YAAZ,IAA4BhB,QAAQ,CAAC,KAAD,CAA1C;EACA,MAAM,CAACiB,YAAD,EAAeC,eAAf,IAAkClB,QAAQ,CAAC,KAAD,CAAhD;EACA,MAAM,CAACmB,IAAD,EAAOC,OAAP,IAAkBpB,QAAQ,CAAC,IAAD,CAAhC;EACA,MAAMqB,WAAW,GAAG,IAApB;EACA,MAAMC,QAAQ,GAAGpB,WAAW,EAA5B;;EAEA,MAAMqB,wBAAwB,GAAIC,KAAD,IAAW;IAC1Cd,mBAAmB,CAAC,CAACD,iBAAF,CAAnB;EACD,CAFD;;EAIA,IAAIgB,YAAJ;EACA,IAAIC,YAAJ;EACA,IAAIC,gBAAJ;;EAEA,IAAIrB,IAAI,KAAK,QAAb,EAAuB;IACrB;IAEAmB,YAAY,GAAID,KAAD,IAAW,CACxB;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;IACD,CAzBD;;IA2BA,MAAMG,gBAAgB,GAAG,MAAM,CAC7B;MACA;MACA;MACA;MACA;MACA;MACA;IACD,CARD;EASD,CAvCD,MAuCO,IAAIrB,IAAI,KAAK,QAAb,EAAuB;IAC5B;IACA;IAEA;IACA,MAAMsB,OAAO,GAAG,CACd,MADc,EAEd,QAFc,EAGd,OAHc,EAId,WAJc,EAKd,UALc,EAMd,QANc,EAOd,WAPc,EAQd,WARc,EASd,OATc,EAUd,OAVc,CAAhB;IAaA,IAAIC,yBAAJ;IACA,IAAIC,wBAAJ;IACA,IAAIC,sBAAJ;;IAEAL,YAAY,GAAIF,KAAD,IAAW;MACxBQ,OAAO,CAACC,GAAR,CAAYT,KAAK,CAACU,MAAN,CAAaC,IAAzB;IACD,CAFD;;IAIAV,YAAY,GAAID,KAAD,IAAW;MACxBA,KAAK,CAACY,cAAN,GADwB,CAGxB;MACA;MACA;MAEA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MAEA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;IACD,CAhCD,CA1B4B,CA4D5B;IACA;IACA;IACA;IACA;IACA;IAEA;IACA;IACA;IACA;IACA;IACA;IAEA;IACA;IACA;IACA;IACA;IACA;IAEA;;;IACAT,gBAAgB,GAAIU,MAAD,IAAY,CAC7B;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;IACD,CAbD;EAcD;;EAED,OAAO;IACLtB,SADK;IAELE,YAFK;IAGLC,eAHK;IAILS,gBAJK;IAKLD,YALK;IAMLD,YANK;IAOLd,MAPK;IAQLE;EARK,CAAP;AAUD,CAtKD;;GAAMR,W;UASaH,W;;;AA+JnB,eAAeG,WAAf"},"metadata":{},"sourceType":"module"}