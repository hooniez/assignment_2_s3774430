{"ast":null,"code":"'use strict';\n/* jshint ignore:start */\n\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n\n/* jshint ignore:end */\n\nvar Q = require('q');\n/* jshint ignore:line */\n\n\nvar _ = require('lodash');\n/* jshint ignore:line */\n\n\nvar util = require('util');\n/* jshint ignore:line */\n\n\nvar CredentialListList = require('./trunk/credentialList').CredentialListList;\n\nvar IpAccessControlListList = require('./trunk/ipAccessControlList').IpAccessControlListList;\n\nvar OriginationUrlList = require('./trunk/originationUrl').OriginationUrlList;\n\nvar Page = require('../../../base/Page');\n/* jshint ignore:line */\n\n\nvar PhoneNumberList = require('./trunk/phoneNumber').PhoneNumberList;\n\nvar RecordingList = require('./trunk/recording').RecordingList;\n\nvar deserialize = require('../../../base/deserialize');\n/* jshint ignore:line */\n\n\nvar serialize = require('../../../base/serialize');\n/* jshint ignore:line */\n\n\nvar values = require('../../../base/values');\n/* jshint ignore:line */\n\n\nvar TrunkList;\nvar TrunkPage;\nvar TrunkInstance;\nvar TrunkContext;\n/* jshint ignore:start */\n\n/**\n * Initialize the TrunkList\n *\n * @constructor Twilio.Trunking.V1.TrunkList\n *\n * @param {Twilio.Trunking.V1} version - Version of the resource\n */\n\n/* jshint ignore:end */\n\nTrunkList = function TrunkList(version) {\n  /* jshint ignore:start */\n\n  /**\n   * @function trunks\n   * @memberof Twilio.Trunking.V1#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Trunking.V1.TrunkContext}\n   */\n\n  /* jshint ignore:end */\n  function TrunkListInstance(sid) {\n    return TrunkListInstance.get(sid);\n  }\n\n  TrunkListInstance._version = version; // Path Solution\n\n  TrunkListInstance._solution = {};\n  TrunkListInstance._uri = `/Trunks`;\n  /* jshint ignore:start */\n\n  /**\n   * create a TrunkInstance\n   *\n   * @function create\n   * @memberof Twilio.Trunking.V1.TrunkList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.friendlyName] - A string to describe the resource\n   * @param {string} [opts.domainName] -\n   *          The unique address you reserve on Twilio to which you route your SIP traffic\n   * @param {string} [opts.disasterRecoveryUrl] -\n   *          The HTTP URL that we should call if an error occurs while sending SIP traffic towards your configured Origination URL\n   * @param {string} [opts.disasterRecoveryMethod] -\n   *          The HTTP method we should use to call the disaster_recovery_url\n   * @param {trunk.transfer_setting} [opts.transferMode] -\n   *          The call transfer settings for the trunk\n   * @param {boolean} [opts.secure] -\n   *          Whether Secure Trunking is enabled for the trunk\n   * @param {boolean} [opts.cnamLookupEnabled] -\n   *          Whether Caller ID Name (CNAM) lookup should be enabled for the trunk\n   * @param {trunk.transfer_caller_id} [opts.transferCallerId] -\n   *          Caller Id for transfer target\n   * @param {function} [callback] - Callback to handle processed record\n   *\n   * @returns {Promise} Resolves to processed TrunkInstance\n   */\n\n  /* jshint ignore:end */\n\n  TrunkListInstance.create = function create(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n    var deferred = Q.defer();\n    var data = values.of({\n      'FriendlyName': _.get(opts, 'friendlyName'),\n      'DomainName': _.get(opts, 'domainName'),\n      'DisasterRecoveryUrl': _.get(opts, 'disasterRecoveryUrl'),\n      'DisasterRecoveryMethod': _.get(opts, 'disasterRecoveryMethod'),\n      'TransferMode': _.get(opts, 'transferMode'),\n      'Secure': serialize.bool(_.get(opts, 'secure')),\n      'CnamLookupEnabled': serialize.bool(_.get(opts, 'cnamLookupEnabled')),\n      'TransferCallerId': _.get(opts, 'transferCallerId')\n    });\n\n    var promise = this._version.create({\n      uri: this._uri,\n      method: 'POST',\n      data: data\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new TrunkInstance(this._version, payload, this._solution.sid));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Streams TrunkInstance records from the API.\n   *\n   * This operation lazily loads records as efficiently as possible until the limit\n   * is reached.\n   *\n   * The results are passed into the callback function, so this operation is memory\n   * efficient.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function each\n   * @memberof Twilio.Trunking.V1.TrunkList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         each() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no pageSize is defined but a limit is defined,\n   *         each() will attempt to read the limit with the most efficient\n   *         page size, i.e. min(limit, 1000)\n   * @param {Function} [opts.callback] -\n   *         Function to process each record. If this and a positional\n   *         callback are passed, this one will be used\n   * @param {Function} [opts.done] -\n   *          Function to be called upon completion of streaming\n   * @param {Function} [callback] - Function to process each record\n   */\n\n  /* jshint ignore:end */\n\n\n  TrunkListInstance.each = function each(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n\n    if (opts.callback) {\n      callback = opts.callback;\n    }\n\n    if (_.isUndefined(callback)) {\n      throw new Error('Callback function must be provided');\n    }\n\n    var done = false;\n    var currentPage = 1;\n    var currentResource = 0;\n\n    var limits = this._version.readLimits({\n      limit: opts.limit,\n      pageSize: opts.pageSize\n    });\n\n    function onComplete(error) {\n      done = true;\n\n      if (_.isFunction(opts.done)) {\n        opts.done(error);\n      }\n    }\n\n    function fetchNextPage(fn) {\n      var promise = fn();\n\n      if (_.isUndefined(promise)) {\n        onComplete();\n        return;\n      }\n\n      promise.then(function (page) {\n        _.each(page.instances, function (instance) {\n          if (done || !_.isUndefined(opts.limit) && currentResource >= opts.limit) {\n            done = true;\n            return false;\n          }\n\n          currentResource++;\n          callback(instance, onComplete);\n        });\n\n        if (!done) {\n          currentPage++;\n          fetchNextPage(_.bind(page.nextPage, page));\n        } else {\n          onComplete();\n        }\n      });\n      promise.catch(onComplete);\n    }\n\n    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Lists TrunkInstance records from the API as a list.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function list\n   * @memberof Twilio.Trunking.V1.TrunkList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         list() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no page_size is defined but a limit is defined,\n   *         list() will attempt to read the limit with the most\n   *         efficient page size, i.e. min(limit, 1000)\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  TrunkListInstance.list = function list(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n    var deferred = Q.defer();\n    var allResources = [];\n\n    opts.callback = function (resource, done) {\n      allResources.push(resource);\n\n      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {\n        done();\n      }\n    };\n\n    opts.done = function (error) {\n      if (_.isUndefined(error)) {\n        deferred.resolve(allResources);\n      } else {\n        deferred.reject(error);\n      }\n    };\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    this.each(opts);\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Retrieve a single page of TrunkInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function page\n   * @memberof Twilio.Trunking.V1.TrunkList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.pageToken] - PageToken provided by the API\n   * @param {number} [opts.pageNumber] -\n   *          Page Number, this value is simply for client state\n   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  TrunkListInstance.page = function page(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n    var deferred = Q.defer();\n    var data = values.of({\n      'PageToken': opts.pageToken,\n      'Page': opts.pageNumber,\n      'PageSize': opts.pageSize\n    });\n\n    var promise = this._version.page({\n      uri: this._uri,\n      method: 'GET',\n      params: data\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new TrunkPage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Retrieve a single target page of TrunkInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function getPage\n   * @memberof Twilio.Trunking.V1.TrunkList#\n   *\n   * @param {string} [targetUrl] - API-generated URL for the requested results page\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  TrunkListInstance.getPage = function getPage(targetUrl, callback) {\n    var deferred = Q.defer();\n\n    var promise = this._version._domain.twilio.request({\n      method: 'GET',\n      uri: targetUrl\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new TrunkPage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Constructs a trunk\n   *\n   * @function get\n   * @memberof Twilio.Trunking.V1.TrunkList#\n   *\n   * @param {string} sid - The unique string that identifies the resource\n   *\n   * @returns {Twilio.Trunking.V1.TrunkContext}\n   */\n\n  /* jshint ignore:end */\n\n\n  TrunkListInstance.get = function get(sid) {\n    return new TrunkContext(this._version, sid);\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Trunking.V1.TrunkList#\n   *\n   * @returns Object\n   */\n\n  /* jshint ignore:end */\n\n\n  TrunkListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n\n  TrunkListInstance[util.inspect.custom] = function inspect(depth, options) {\n    return util.inspect(this.toJSON(), options);\n  };\n\n  return TrunkListInstance;\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the TrunkPage\n *\n * @constructor Twilio.Trunking.V1.TrunkPage\n *\n * @param {V1} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {TrunkSolution} solution - Path solution\n *\n * @returns TrunkPage\n */\n\n/* jshint ignore:end */\n\n\nTrunkPage = function TrunkPage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n\n_.extend(TrunkPage.prototype, Page.prototype);\n\nTrunkPage.prototype.constructor = TrunkPage;\n/* jshint ignore:start */\n\n/**\n * Build an instance of TrunkInstance\n *\n * @function getInstance\n * @memberof Twilio.Trunking.V1.TrunkPage#\n *\n * @param {TrunkPayload} payload - Payload response from the API\n *\n * @returns TrunkInstance\n */\n\n/* jshint ignore:end */\n\nTrunkPage.prototype.getInstance = function getInstance(payload) {\n  return new TrunkInstance(this._version, payload);\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Trunking.V1.TrunkPage#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nTrunkPage.prototype.toJSON = function toJSON() {\n  let clone = {};\n\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n\n  return clone;\n};\n\nTrunkPage.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the TrunkContext\n *\n * @constructor Twilio.Trunking.V1.TrunkInstance\n *\n * @property {string} accountSid - The SID of the Account that created the resource\n * @property {string} domainName -\n *          The unique address you reserve on Twilio to which you route your SIP traffic\n * @property {string} disasterRecoveryMethod -\n *          The HTTP method we use to call the disaster_recovery_url\n * @property {string} disasterRecoveryUrl -\n *          The HTTP URL that we call if an error occurs while sending SIP traffic towards your configured Origination URL\n * @property {string} friendlyName -\n *          The string that you assigned to describe the resource\n * @property {boolean} secure - Whether Secure Trunking is enabled for the trunk\n * @property {object} recording - The recording settings for the trunk\n * @property {trunk.transfer_setting} transferMode -\n *          The call transfer settings for the trunk\n * @property {trunk.transfer_caller_id} transferCallerId -\n *          Caller Id for transfer target\n * @property {boolean} cnamLookupEnabled -\n *          Whether Caller ID Name (CNAM) lookup is enabled for the trunk\n * @property {string} authType - The types of authentication mapped to the domain\n * @property {string} authTypeSet - Reserved\n * @property {Date} dateCreated -\n *          The RFC 2822 date and time in GMT when the resource was created\n * @property {Date} dateUpdated -\n *          The RFC 2822 date and time in GMT when the resource was last updated\n * @property {string} sid - The unique string that identifies the resource\n * @property {string} url - The absolute URL of the resource\n * @property {string} links - The URLs of related resources\n *\n * @param {V1} version - Version of the resource\n * @param {TrunkPayload} payload - The instance payload\n * @param {sid} sid - The unique string that identifies the resource\n */\n\n/* jshint ignore:end */\n\n\nTrunkInstance = function TrunkInstance(version, payload, sid) {\n  this._version = version; // Marshaled Properties\n\n  this.accountSid = payload.account_sid; // jshint ignore:line\n\n  this.domainName = payload.domain_name; // jshint ignore:line\n\n  this.disasterRecoveryMethod = payload.disaster_recovery_method; // jshint ignore:line\n\n  this.disasterRecoveryUrl = payload.disaster_recovery_url; // jshint ignore:line\n\n  this.friendlyName = payload.friendly_name; // jshint ignore:line\n\n  this.secure = payload.secure; // jshint ignore:line\n\n  this.recording = payload.recording; // jshint ignore:line\n\n  this.transferMode = payload.transfer_mode; // jshint ignore:line\n\n  this.transferCallerId = payload.transfer_caller_id; // jshint ignore:line\n\n  this.cnamLookupEnabled = payload.cnam_lookup_enabled; // jshint ignore:line\n\n  this.authType = payload.auth_type; // jshint ignore:line\n\n  this.authTypeSet = payload.auth_type_set; // jshint ignore:line\n\n  this.dateCreated = deserialize.iso8601DateTime(payload.date_created); // jshint ignore:line\n\n  this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated); // jshint ignore:line\n\n  this.sid = payload.sid; // jshint ignore:line\n\n  this.url = payload.url; // jshint ignore:line\n\n  this.links = payload.links; // jshint ignore:line\n  // Context\n\n  this._context = undefined;\n  this._solution = {\n    sid: sid || this.sid\n  };\n};\n\nObject.defineProperty(TrunkInstance.prototype, '_proxy', {\n  get: function () {\n    if (!this._context) {\n      this._context = new TrunkContext(this._version, this._solution.sid);\n    }\n\n    return this._context;\n  }\n});\n/* jshint ignore:start */\n\n/**\n * fetch a TrunkInstance\n *\n * @function fetch\n * @memberof Twilio.Trunking.V1.TrunkInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed TrunkInstance\n */\n\n/* jshint ignore:end */\n\nTrunkInstance.prototype.fetch = function fetch(callback) {\n  return this._proxy.fetch(callback);\n};\n/* jshint ignore:start */\n\n/**\n * remove a TrunkInstance\n *\n * @function remove\n * @memberof Twilio.Trunking.V1.TrunkInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed TrunkInstance\n */\n\n/* jshint ignore:end */\n\n\nTrunkInstance.prototype.remove = function remove(callback) {\n  return this._proxy.remove(callback);\n};\n/* jshint ignore:start */\n\n/**\n * update a TrunkInstance\n *\n * @function update\n * @memberof Twilio.Trunking.V1.TrunkInstance#\n *\n * @param {object} [opts] - Options for request\n * @param {string} [opts.friendlyName] - A string to describe the resource\n * @param {string} [opts.domainName] -\n *          The unique address you reserve on Twilio to which you route your SIP traffic\n * @param {string} [opts.disasterRecoveryUrl] -\n *          The HTTP URL that we should call if an error occurs while sending SIP traffic towards your configured Origination URL\n * @param {string} [opts.disasterRecoveryMethod] -\n *          The HTTP method we should use to call the disaster_recovery_url\n * @param {trunk.transfer_setting} [opts.transferMode] -\n *          The call transfer settings for the trunk\n * @param {boolean} [opts.secure] -\n *          Whether Secure Trunking is enabled for the trunk\n * @param {boolean} [opts.cnamLookupEnabled] -\n *          Whether Caller ID Name (CNAM) lookup should be enabled for the trunk\n * @param {trunk.transfer_caller_id} [opts.transferCallerId] -\n *          Caller Id for transfer target\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed TrunkInstance\n */\n\n/* jshint ignore:end */\n\n\nTrunkInstance.prototype.update = function update(opts, callback) {\n  return this._proxy.update(opts, callback);\n};\n/* jshint ignore:start */\n\n/**\n * Access the originationUrls\n *\n * @function originationUrls\n * @memberof Twilio.Trunking.V1.TrunkInstance#\n *\n * @returns {Twilio.Trunking.V1.TrunkContext.OriginationUrlList}\n */\n\n/* jshint ignore:end */\n\n\nTrunkInstance.prototype.originationUrls = function originationUrls() {\n  return this._proxy.originationUrls;\n};\n/* jshint ignore:start */\n\n/**\n * Access the credentialsLists\n *\n * @function credentialsLists\n * @memberof Twilio.Trunking.V1.TrunkInstance#\n *\n * @returns {Twilio.Trunking.V1.TrunkContext.CredentialListList}\n */\n\n/* jshint ignore:end */\n\n\nTrunkInstance.prototype.credentialsLists = function credentialsLists() {\n  return this._proxy.credentialsLists;\n};\n/* jshint ignore:start */\n\n/**\n * Access the ipAccessControlLists\n *\n * @function ipAccessControlLists\n * @memberof Twilio.Trunking.V1.TrunkInstance#\n *\n * @returns {Twilio.Trunking.V1.TrunkContext.IpAccessControlListList}\n */\n\n/* jshint ignore:end */\n\n\nTrunkInstance.prototype.ipAccessControlLists = function ipAccessControlLists() {\n  return this._proxy.ipAccessControlLists;\n};\n/* jshint ignore:start */\n\n/**\n * Access the phoneNumbers\n *\n * @function phoneNumbers\n * @memberof Twilio.Trunking.V1.TrunkInstance#\n *\n * @returns {Twilio.Trunking.V1.TrunkContext.PhoneNumberList}\n */\n\n/* jshint ignore:end */\n\n\nTrunkInstance.prototype.phoneNumbers = function phoneNumbers() {\n  return this._proxy.phoneNumbers;\n};\n/* jshint ignore:start */\n\n/**\n * Access the recordings\n *\n * @function recordings\n * @memberof Twilio.Trunking.V1.TrunkInstance#\n *\n * @returns {Twilio.Trunking.V1.TrunkContext.RecordingList}\n */\n\n/* jshint ignore:end */\n\n\nTrunkInstance.prototype.recordings = function recordings() {\n  return this._proxy.recordings;\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Trunking.V1.TrunkInstance#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nTrunkInstance.prototype.toJSON = function toJSON() {\n  let clone = {};\n\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n\n  return clone;\n};\n\nTrunkInstance.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the TrunkContext\n *\n * @constructor Twilio.Trunking.V1.TrunkContext\n *\n * @property {Twilio.Trunking.V1.TrunkContext.OriginationUrlList} originationUrls -\n *          originationUrls resource\n * @property {Twilio.Trunking.V1.TrunkContext.CredentialListList} credentialsLists -\n *          credentialsLists resource\n * @property {Twilio.Trunking.V1.TrunkContext.IpAccessControlListList} ipAccessControlLists -\n *          ipAccessControlLists resource\n * @property {Twilio.Trunking.V1.TrunkContext.PhoneNumberList} phoneNumbers -\n *          phoneNumbers resource\n * @property {Twilio.Trunking.V1.TrunkContext.RecordingList} recordings -\n *          recordings resource\n *\n * @param {V1} version - Version of the resource\n * @param {sid} sid - The unique string that identifies the resource\n */\n\n/* jshint ignore:end */\n\n\nTrunkContext = function TrunkContext(version, sid) {\n  this._version = version; // Path Solution\n\n  this._solution = {\n    sid: sid\n  };\n  this._uri = `/Trunks/${sid}`; // Dependents\n\n  this._originationUrls = undefined;\n  this._credentialsLists = undefined;\n  this._ipAccessControlLists = undefined;\n  this._phoneNumbers = undefined;\n  this._recordings = undefined;\n};\n/* jshint ignore:start */\n\n/**\n * fetch a TrunkInstance\n *\n * @function fetch\n * @memberof Twilio.Trunking.V1.TrunkContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed TrunkInstance\n */\n\n/* jshint ignore:end */\n\n\nTrunkContext.prototype.fetch = function fetch(callback) {\n  var deferred = Q.defer();\n\n  var promise = this._version.fetch({\n    uri: this._uri,\n    method: 'GET'\n  });\n\n  promise = promise.then(function (payload) {\n    deferred.resolve(new TrunkInstance(this._version, payload, this._solution.sid));\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n/* jshint ignore:start */\n\n/**\n * remove a TrunkInstance\n *\n * @function remove\n * @memberof Twilio.Trunking.V1.TrunkContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed TrunkInstance\n */\n\n/* jshint ignore:end */\n\n\nTrunkContext.prototype.remove = function remove(callback) {\n  var deferred = Q.defer();\n\n  var promise = this._version.remove({\n    uri: this._uri,\n    method: 'DELETE'\n  });\n\n  promise = promise.then(function (payload) {\n    deferred.resolve(payload);\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n/* jshint ignore:start */\n\n/**\n * update a TrunkInstance\n *\n * @function update\n * @memberof Twilio.Trunking.V1.TrunkContext#\n *\n * @param {object} [opts] - Options for request\n * @param {string} [opts.friendlyName] - A string to describe the resource\n * @param {string} [opts.domainName] -\n *          The unique address you reserve on Twilio to which you route your SIP traffic\n * @param {string} [opts.disasterRecoveryUrl] -\n *          The HTTP URL that we should call if an error occurs while sending SIP traffic towards your configured Origination URL\n * @param {string} [opts.disasterRecoveryMethod] -\n *          The HTTP method we should use to call the disaster_recovery_url\n * @param {trunk.transfer_setting} [opts.transferMode] -\n *          The call transfer settings for the trunk\n * @param {boolean} [opts.secure] -\n *          Whether Secure Trunking is enabled for the trunk\n * @param {boolean} [opts.cnamLookupEnabled] -\n *          Whether Caller ID Name (CNAM) lookup should be enabled for the trunk\n * @param {trunk.transfer_caller_id} [opts.transferCallerId] -\n *          Caller Id for transfer target\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed TrunkInstance\n */\n\n/* jshint ignore:end */\n\n\nTrunkContext.prototype.update = function update(opts, callback) {\n  if (_.isFunction(opts)) {\n    callback = opts;\n    opts = {};\n  }\n\n  opts = opts || {};\n  var deferred = Q.defer();\n  var data = values.of({\n    'FriendlyName': _.get(opts, 'friendlyName'),\n    'DomainName': _.get(opts, 'domainName'),\n    'DisasterRecoveryUrl': _.get(opts, 'disasterRecoveryUrl'),\n    'DisasterRecoveryMethod': _.get(opts, 'disasterRecoveryMethod'),\n    'TransferMode': _.get(opts, 'transferMode'),\n    'Secure': serialize.bool(_.get(opts, 'secure')),\n    'CnamLookupEnabled': serialize.bool(_.get(opts, 'cnamLookupEnabled')),\n    'TransferCallerId': _.get(opts, 'transferCallerId')\n  });\n\n  var promise = this._version.update({\n    uri: this._uri,\n    method: 'POST',\n    data: data\n  });\n\n  promise = promise.then(function (payload) {\n    deferred.resolve(new TrunkInstance(this._version, payload, this._solution.sid));\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\nObject.defineProperty(TrunkContext.prototype, 'originationUrls', {\n  get: function () {\n    if (!this._originationUrls) {\n      this._originationUrls = new OriginationUrlList(this._version, this._solution.sid);\n    }\n\n    return this._originationUrls;\n  }\n});\nObject.defineProperty(TrunkContext.prototype, 'credentialsLists', {\n  get: function () {\n    if (!this._credentialsLists) {\n      this._credentialsLists = new CredentialListList(this._version, this._solution.sid);\n    }\n\n    return this._credentialsLists;\n  }\n});\nObject.defineProperty(TrunkContext.prototype, 'ipAccessControlLists', {\n  get: function () {\n    if (!this._ipAccessControlLists) {\n      this._ipAccessControlLists = new IpAccessControlListList(this._version, this._solution.sid);\n    }\n\n    return this._ipAccessControlLists;\n  }\n});\nObject.defineProperty(TrunkContext.prototype, 'phoneNumbers', {\n  get: function () {\n    if (!this._phoneNumbers) {\n      this._phoneNumbers = new PhoneNumberList(this._version, this._solution.sid);\n    }\n\n    return this._phoneNumbers;\n  }\n});\nObject.defineProperty(TrunkContext.prototype, 'recordings', {\n  get: function () {\n    if (!this._recordings) {\n      this._recordings = new RecordingList(this._version, this._solution.sid);\n    }\n\n    return this._recordings;\n  }\n});\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Trunking.V1.TrunkContext#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\nTrunkContext.prototype.toJSON = function toJSON() {\n  return this._solution;\n};\n\nTrunkContext.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\nmodule.exports = {\n  TrunkList: TrunkList,\n  TrunkPage: TrunkPage,\n  TrunkInstance: TrunkInstance,\n  TrunkContext: TrunkContext\n};","map":{"version":3,"names":["Q","require","_","util","CredentialListList","IpAccessControlListList","OriginationUrlList","Page","PhoneNumberList","RecordingList","deserialize","serialize","values","TrunkList","TrunkPage","TrunkInstance","TrunkContext","version","TrunkListInstance","sid","get","_version","_solution","_uri","create","opts","callback","isFunction","deferred","defer","data","of","bool","promise","uri","method","then","payload","resolve","bind","catch","error","reject","nodeify","each","isUndefined","Error","done","currentPage","currentResource","limits","readLimits","limit","pageSize","onComplete","fetchNextPage","fn","page","instances","instance","nextPage","merge","list","allResources","resource","push","length","pageToken","pageNumber","params","getPage","targetUrl","_domain","twilio","request","toJSON","inspect","custom","depth","options","response","solution","prototype","constructor","call","extend","getInstance","clone","forOwn","value","key","startsWith","accountSid","account_sid","domainName","domain_name","disasterRecoveryMethod","disaster_recovery_method","disasterRecoveryUrl","disaster_recovery_url","friendlyName","friendly_name","secure","recording","transferMode","transfer_mode","transferCallerId","transfer_caller_id","cnamLookupEnabled","cnam_lookup_enabled","authType","auth_type","authTypeSet","auth_type_set","dateCreated","iso8601DateTime","date_created","dateUpdated","date_updated","url","links","_context","undefined","Object","defineProperty","fetch","_proxy","remove","update","originationUrls","credentialsLists","ipAccessControlLists","phoneNumbers","recordings","_originationUrls","_credentialsLists","_ipAccessControlLists","_phoneNumbers","_recordings","module","exports"],"sources":["/Users/hooniesun/rmit/fwp/assessment1/lan/node_modules/twilio/lib/rest/trunking/v1/trunk.js"],"sourcesContent":["'use strict';\n\n/* jshint ignore:start */\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n/* jshint ignore:end */\n\nvar Q = require('q');  /* jshint ignore:line */\nvar _ = require('lodash');  /* jshint ignore:line */\nvar util = require('util');  /* jshint ignore:line */\nvar CredentialListList = require('./trunk/credentialList').CredentialListList;\nvar IpAccessControlListList = require(\n    './trunk/ipAccessControlList').IpAccessControlListList;\nvar OriginationUrlList = require('./trunk/originationUrl').OriginationUrlList;\nvar Page = require('../../../base/Page');  /* jshint ignore:line */\nvar PhoneNumberList = require('./trunk/phoneNumber').PhoneNumberList;\nvar RecordingList = require('./trunk/recording').RecordingList;\nvar deserialize = require(\n    '../../../base/deserialize');  /* jshint ignore:line */\nvar serialize = require('../../../base/serialize');  /* jshint ignore:line */\nvar values = require('../../../base/values');  /* jshint ignore:line */\n\nvar TrunkList;\nvar TrunkPage;\nvar TrunkInstance;\nvar TrunkContext;\n\n/* jshint ignore:start */\n/**\n * Initialize the TrunkList\n *\n * @constructor Twilio.Trunking.V1.TrunkList\n *\n * @param {Twilio.Trunking.V1} version - Version of the resource\n */\n/* jshint ignore:end */\nTrunkList = function TrunkList(version) {\n  /* jshint ignore:start */\n  /**\n   * @function trunks\n   * @memberof Twilio.Trunking.V1#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Trunking.V1.TrunkContext}\n   */\n  /* jshint ignore:end */\n  function TrunkListInstance(sid) {\n    return TrunkListInstance.get(sid);\n  }\n\n  TrunkListInstance._version = version;\n  // Path Solution\n  TrunkListInstance._solution = {};\n  TrunkListInstance._uri = `/Trunks`;\n  /* jshint ignore:start */\n  /**\n   * create a TrunkInstance\n   *\n   * @function create\n   * @memberof Twilio.Trunking.V1.TrunkList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.friendlyName] - A string to describe the resource\n   * @param {string} [opts.domainName] -\n   *          The unique address you reserve on Twilio to which you route your SIP traffic\n   * @param {string} [opts.disasterRecoveryUrl] -\n   *          The HTTP URL that we should call if an error occurs while sending SIP traffic towards your configured Origination URL\n   * @param {string} [opts.disasterRecoveryMethod] -\n   *          The HTTP method we should use to call the disaster_recovery_url\n   * @param {trunk.transfer_setting} [opts.transferMode] -\n   *          The call transfer settings for the trunk\n   * @param {boolean} [opts.secure] -\n   *          Whether Secure Trunking is enabled for the trunk\n   * @param {boolean} [opts.cnamLookupEnabled] -\n   *          Whether Caller ID Name (CNAM) lookup should be enabled for the trunk\n   * @param {trunk.transfer_caller_id} [opts.transferCallerId] -\n   *          Caller Id for transfer target\n   * @param {function} [callback] - Callback to handle processed record\n   *\n   * @returns {Promise} Resolves to processed TrunkInstance\n   */\n  /* jshint ignore:end */\n  TrunkListInstance.create = function create(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n\n    var deferred = Q.defer();\n    var data = values.of({\n      'FriendlyName': _.get(opts, 'friendlyName'),\n      'DomainName': _.get(opts, 'domainName'),\n      'DisasterRecoveryUrl': _.get(opts, 'disasterRecoveryUrl'),\n      'DisasterRecoveryMethod': _.get(opts, 'disasterRecoveryMethod'),\n      'TransferMode': _.get(opts, 'transferMode'),\n      'Secure': serialize.bool(_.get(opts, 'secure')),\n      'CnamLookupEnabled': serialize.bool(_.get(opts, 'cnamLookupEnabled')),\n      'TransferCallerId': _.get(opts, 'transferCallerId')\n    });\n\n    var promise = this._version.create({uri: this._uri, method: 'POST', data: data});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new TrunkInstance(this._version, payload, this._solution.sid));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Streams TrunkInstance records from the API.\n   *\n   * This operation lazily loads records as efficiently as possible until the limit\n   * is reached.\n   *\n   * The results are passed into the callback function, so this operation is memory\n   * efficient.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function each\n   * @memberof Twilio.Trunking.V1.TrunkList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         each() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no pageSize is defined but a limit is defined,\n   *         each() will attempt to read the limit with the most efficient\n   *         page size, i.e. min(limit, 1000)\n   * @param {Function} [opts.callback] -\n   *         Function to process each record. If this and a positional\n   *         callback are passed, this one will be used\n   * @param {Function} [opts.done] -\n   *          Function to be called upon completion of streaming\n   * @param {Function} [callback] - Function to process each record\n   */\n  /* jshint ignore:end */\n  TrunkListInstance.each = function each(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    if (opts.callback) {\n      callback = opts.callback;\n    }\n    if (_.isUndefined(callback)) {\n      throw new Error('Callback function must be provided');\n    }\n\n    var done = false;\n    var currentPage = 1;\n    var currentResource = 0;\n    var limits = this._version.readLimits({\n      limit: opts.limit,\n      pageSize: opts.pageSize\n    });\n\n    function onComplete(error) {\n      done = true;\n      if (_.isFunction(opts.done)) {\n        opts.done(error);\n      }\n    }\n\n    function fetchNextPage(fn) {\n      var promise = fn();\n      if (_.isUndefined(promise)) {\n        onComplete();\n        return;\n      }\n\n      promise.then(function(page) {\n        _.each(page.instances, function(instance) {\n          if (done || (!_.isUndefined(opts.limit) && currentResource >= opts.limit)) {\n            done = true;\n            return false;\n          }\n\n          currentResource++;\n          callback(instance, onComplete);\n        });\n\n        if (!done) {\n          currentPage++;\n          fetchNextPage(_.bind(page.nextPage, page));\n        } else {\n          onComplete();\n        }\n      });\n\n      promise.catch(onComplete);\n    }\n\n    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Lists TrunkInstance records from the API as a list.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function list\n   * @memberof Twilio.Trunking.V1.TrunkList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         list() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no page_size is defined but a limit is defined,\n   *         list() will attempt to read the limit with the most\n   *         efficient page size, i.e. min(limit, 1000)\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  TrunkListInstance.list = function list(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    var deferred = Q.defer();\n    var allResources = [];\n    opts.callback = function(resource, done) {\n      allResources.push(resource);\n\n      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {\n        done();\n      }\n    };\n\n    opts.done = function(error) {\n      if (_.isUndefined(error)) {\n        deferred.resolve(allResources);\n      } else {\n        deferred.reject(error);\n      }\n    };\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    this.each(opts);\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single page of TrunkInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function page\n   * @memberof Twilio.Trunking.V1.TrunkList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.pageToken] - PageToken provided by the API\n   * @param {number} [opts.pageNumber] -\n   *          Page Number, this value is simply for client state\n   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  TrunkListInstance.page = function page(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n\n    var deferred = Q.defer();\n    var data = values.of({\n      'PageToken': opts.pageToken,\n      'Page': opts.pageNumber,\n      'PageSize': opts.pageSize\n    });\n\n    var promise = this._version.page({uri: this._uri, method: 'GET', params: data});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new TrunkPage(this._version, payload, this._solution));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single target page of TrunkInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function getPage\n   * @memberof Twilio.Trunking.V1.TrunkList#\n   *\n   * @param {string} [targetUrl] - API-generated URL for the requested results page\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  TrunkListInstance.getPage = function getPage(targetUrl, callback) {\n    var deferred = Q.defer();\n\n    var promise = this._version._domain.twilio.request({method: 'GET', uri: targetUrl});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new TrunkPage(this._version, payload, this._solution));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Constructs a trunk\n   *\n   * @function get\n   * @memberof Twilio.Trunking.V1.TrunkList#\n   *\n   * @param {string} sid - The unique string that identifies the resource\n   *\n   * @returns {Twilio.Trunking.V1.TrunkContext}\n   */\n  /* jshint ignore:end */\n  TrunkListInstance.get = function get(sid) {\n    return new TrunkContext(this._version, sid);\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Trunking.V1.TrunkList#\n   *\n   * @returns Object\n   */\n  /* jshint ignore:end */\n  TrunkListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n\n  TrunkListInstance[util.inspect.custom] = function inspect(depth, options) {\n    return util.inspect(this.toJSON(), options);\n  };\n\n  return TrunkListInstance;\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the TrunkPage\n *\n * @constructor Twilio.Trunking.V1.TrunkPage\n *\n * @param {V1} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {TrunkSolution} solution - Path solution\n *\n * @returns TrunkPage\n */\n/* jshint ignore:end */\nTrunkPage = function TrunkPage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n\n_.extend(TrunkPage.prototype, Page.prototype);\nTrunkPage.prototype.constructor = TrunkPage;\n\n/* jshint ignore:start */\n/**\n * Build an instance of TrunkInstance\n *\n * @function getInstance\n * @memberof Twilio.Trunking.V1.TrunkPage#\n *\n * @param {TrunkPayload} payload - Payload response from the API\n *\n * @returns TrunkInstance\n */\n/* jshint ignore:end */\nTrunkPage.prototype.getInstance = function getInstance(payload) {\n  return new TrunkInstance(this._version, payload);\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Trunking.V1.TrunkPage#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nTrunkPage.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function(value, key) {\n    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\n\nTrunkPage.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the TrunkContext\n *\n * @constructor Twilio.Trunking.V1.TrunkInstance\n *\n * @property {string} accountSid - The SID of the Account that created the resource\n * @property {string} domainName -\n *          The unique address you reserve on Twilio to which you route your SIP traffic\n * @property {string} disasterRecoveryMethod -\n *          The HTTP method we use to call the disaster_recovery_url\n * @property {string} disasterRecoveryUrl -\n *          The HTTP URL that we call if an error occurs while sending SIP traffic towards your configured Origination URL\n * @property {string} friendlyName -\n *          The string that you assigned to describe the resource\n * @property {boolean} secure - Whether Secure Trunking is enabled for the trunk\n * @property {object} recording - The recording settings for the trunk\n * @property {trunk.transfer_setting} transferMode -\n *          The call transfer settings for the trunk\n * @property {trunk.transfer_caller_id} transferCallerId -\n *          Caller Id for transfer target\n * @property {boolean} cnamLookupEnabled -\n *          Whether Caller ID Name (CNAM) lookup is enabled for the trunk\n * @property {string} authType - The types of authentication mapped to the domain\n * @property {string} authTypeSet - Reserved\n * @property {Date} dateCreated -\n *          The RFC 2822 date and time in GMT when the resource was created\n * @property {Date} dateUpdated -\n *          The RFC 2822 date and time in GMT when the resource was last updated\n * @property {string} sid - The unique string that identifies the resource\n * @property {string} url - The absolute URL of the resource\n * @property {string} links - The URLs of related resources\n *\n * @param {V1} version - Version of the resource\n * @param {TrunkPayload} payload - The instance payload\n * @param {sid} sid - The unique string that identifies the resource\n */\n/* jshint ignore:end */\nTrunkInstance = function TrunkInstance(version, payload, sid) {\n  this._version = version;\n\n  // Marshaled Properties\n  this.accountSid = payload.account_sid; // jshint ignore:line\n  this.domainName = payload.domain_name; // jshint ignore:line\n  this.disasterRecoveryMethod = payload.disaster_recovery_method; // jshint ignore:line\n  this.disasterRecoveryUrl = payload.disaster_recovery_url; // jshint ignore:line\n  this.friendlyName = payload.friendly_name; // jshint ignore:line\n  this.secure = payload.secure; // jshint ignore:line\n  this.recording = payload.recording; // jshint ignore:line\n  this.transferMode = payload.transfer_mode; // jshint ignore:line\n  this.transferCallerId = payload.transfer_caller_id; // jshint ignore:line\n  this.cnamLookupEnabled = payload.cnam_lookup_enabled; // jshint ignore:line\n  this.authType = payload.auth_type; // jshint ignore:line\n  this.authTypeSet = payload.auth_type_set; // jshint ignore:line\n  this.dateCreated = deserialize.iso8601DateTime(payload.date_created); // jshint ignore:line\n  this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated); // jshint ignore:line\n  this.sid = payload.sid; // jshint ignore:line\n  this.url = payload.url; // jshint ignore:line\n  this.links = payload.links; // jshint ignore:line\n\n  // Context\n  this._context = undefined;\n  this._solution = {sid: sid || this.sid, };\n};\n\nObject.defineProperty(TrunkInstance.prototype,\n  '_proxy', {\n    get: function() {\n      if (!this._context) {\n        this._context = new TrunkContext(this._version, this._solution.sid);\n      }\n\n      return this._context;\n    }\n});\n\n/* jshint ignore:start */\n/**\n * fetch a TrunkInstance\n *\n * @function fetch\n * @memberof Twilio.Trunking.V1.TrunkInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed TrunkInstance\n */\n/* jshint ignore:end */\nTrunkInstance.prototype.fetch = function fetch(callback) {\n  return this._proxy.fetch(callback);\n};\n\n/* jshint ignore:start */\n/**\n * remove a TrunkInstance\n *\n * @function remove\n * @memberof Twilio.Trunking.V1.TrunkInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed TrunkInstance\n */\n/* jshint ignore:end */\nTrunkInstance.prototype.remove = function remove(callback) {\n  return this._proxy.remove(callback);\n};\n\n/* jshint ignore:start */\n/**\n * update a TrunkInstance\n *\n * @function update\n * @memberof Twilio.Trunking.V1.TrunkInstance#\n *\n * @param {object} [opts] - Options for request\n * @param {string} [opts.friendlyName] - A string to describe the resource\n * @param {string} [opts.domainName] -\n *          The unique address you reserve on Twilio to which you route your SIP traffic\n * @param {string} [opts.disasterRecoveryUrl] -\n *          The HTTP URL that we should call if an error occurs while sending SIP traffic towards your configured Origination URL\n * @param {string} [opts.disasterRecoveryMethod] -\n *          The HTTP method we should use to call the disaster_recovery_url\n * @param {trunk.transfer_setting} [opts.transferMode] -\n *          The call transfer settings for the trunk\n * @param {boolean} [opts.secure] -\n *          Whether Secure Trunking is enabled for the trunk\n * @param {boolean} [opts.cnamLookupEnabled] -\n *          Whether Caller ID Name (CNAM) lookup should be enabled for the trunk\n * @param {trunk.transfer_caller_id} [opts.transferCallerId] -\n *          Caller Id for transfer target\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed TrunkInstance\n */\n/* jshint ignore:end */\nTrunkInstance.prototype.update = function update(opts, callback) {\n  return this._proxy.update(opts, callback);\n};\n\n/* jshint ignore:start */\n/**\n * Access the originationUrls\n *\n * @function originationUrls\n * @memberof Twilio.Trunking.V1.TrunkInstance#\n *\n * @returns {Twilio.Trunking.V1.TrunkContext.OriginationUrlList}\n */\n/* jshint ignore:end */\nTrunkInstance.prototype.originationUrls = function originationUrls() {\n  return this._proxy.originationUrls;\n};\n\n/* jshint ignore:start */\n/**\n * Access the credentialsLists\n *\n * @function credentialsLists\n * @memberof Twilio.Trunking.V1.TrunkInstance#\n *\n * @returns {Twilio.Trunking.V1.TrunkContext.CredentialListList}\n */\n/* jshint ignore:end */\nTrunkInstance.prototype.credentialsLists = function credentialsLists() {\n  return this._proxy.credentialsLists;\n};\n\n/* jshint ignore:start */\n/**\n * Access the ipAccessControlLists\n *\n * @function ipAccessControlLists\n * @memberof Twilio.Trunking.V1.TrunkInstance#\n *\n * @returns {Twilio.Trunking.V1.TrunkContext.IpAccessControlListList}\n */\n/* jshint ignore:end */\nTrunkInstance.prototype.ipAccessControlLists = function ipAccessControlLists() {\n  return this._proxy.ipAccessControlLists;\n};\n\n/* jshint ignore:start */\n/**\n * Access the phoneNumbers\n *\n * @function phoneNumbers\n * @memberof Twilio.Trunking.V1.TrunkInstance#\n *\n * @returns {Twilio.Trunking.V1.TrunkContext.PhoneNumberList}\n */\n/* jshint ignore:end */\nTrunkInstance.prototype.phoneNumbers = function phoneNumbers() {\n  return this._proxy.phoneNumbers;\n};\n\n/* jshint ignore:start */\n/**\n * Access the recordings\n *\n * @function recordings\n * @memberof Twilio.Trunking.V1.TrunkInstance#\n *\n * @returns {Twilio.Trunking.V1.TrunkContext.RecordingList}\n */\n/* jshint ignore:end */\nTrunkInstance.prototype.recordings = function recordings() {\n  return this._proxy.recordings;\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Trunking.V1.TrunkInstance#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nTrunkInstance.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function(value, key) {\n    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\n\nTrunkInstance.prototype[util.inspect.custom] = function inspect(depth, options)\n    {\n  return util.inspect(this.toJSON(), options);\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the TrunkContext\n *\n * @constructor Twilio.Trunking.V1.TrunkContext\n *\n * @property {Twilio.Trunking.V1.TrunkContext.OriginationUrlList} originationUrls -\n *          originationUrls resource\n * @property {Twilio.Trunking.V1.TrunkContext.CredentialListList} credentialsLists -\n *          credentialsLists resource\n * @property {Twilio.Trunking.V1.TrunkContext.IpAccessControlListList} ipAccessControlLists -\n *          ipAccessControlLists resource\n * @property {Twilio.Trunking.V1.TrunkContext.PhoneNumberList} phoneNumbers -\n *          phoneNumbers resource\n * @property {Twilio.Trunking.V1.TrunkContext.RecordingList} recordings -\n *          recordings resource\n *\n * @param {V1} version - Version of the resource\n * @param {sid} sid - The unique string that identifies the resource\n */\n/* jshint ignore:end */\nTrunkContext = function TrunkContext(version, sid) {\n  this._version = version;\n\n  // Path Solution\n  this._solution = {sid: sid, };\n  this._uri = `/Trunks/${sid}`;\n\n  // Dependents\n  this._originationUrls = undefined;\n  this._credentialsLists = undefined;\n  this._ipAccessControlLists = undefined;\n  this._phoneNumbers = undefined;\n  this._recordings = undefined;\n};\n\n/* jshint ignore:start */\n/**\n * fetch a TrunkInstance\n *\n * @function fetch\n * @memberof Twilio.Trunking.V1.TrunkContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed TrunkInstance\n */\n/* jshint ignore:end */\nTrunkContext.prototype.fetch = function fetch(callback) {\n  var deferred = Q.defer();\n  var promise = this._version.fetch({uri: this._uri, method: 'GET'});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(new TrunkInstance(this._version, payload, this._solution.sid));\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * remove a TrunkInstance\n *\n * @function remove\n * @memberof Twilio.Trunking.V1.TrunkContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed TrunkInstance\n */\n/* jshint ignore:end */\nTrunkContext.prototype.remove = function remove(callback) {\n  var deferred = Q.defer();\n  var promise = this._version.remove({uri: this._uri, method: 'DELETE'});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(payload);\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * update a TrunkInstance\n *\n * @function update\n * @memberof Twilio.Trunking.V1.TrunkContext#\n *\n * @param {object} [opts] - Options for request\n * @param {string} [opts.friendlyName] - A string to describe the resource\n * @param {string} [opts.domainName] -\n *          The unique address you reserve on Twilio to which you route your SIP traffic\n * @param {string} [opts.disasterRecoveryUrl] -\n *          The HTTP URL that we should call if an error occurs while sending SIP traffic towards your configured Origination URL\n * @param {string} [opts.disasterRecoveryMethod] -\n *          The HTTP method we should use to call the disaster_recovery_url\n * @param {trunk.transfer_setting} [opts.transferMode] -\n *          The call transfer settings for the trunk\n * @param {boolean} [opts.secure] -\n *          Whether Secure Trunking is enabled for the trunk\n * @param {boolean} [opts.cnamLookupEnabled] -\n *          Whether Caller ID Name (CNAM) lookup should be enabled for the trunk\n * @param {trunk.transfer_caller_id} [opts.transferCallerId] -\n *          Caller Id for transfer target\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed TrunkInstance\n */\n/* jshint ignore:end */\nTrunkContext.prototype.update = function update(opts, callback) {\n  if (_.isFunction(opts)) {\n    callback = opts;\n    opts = {};\n  }\n  opts = opts || {};\n\n  var deferred = Q.defer();\n  var data = values.of({\n    'FriendlyName': _.get(opts, 'friendlyName'),\n    'DomainName': _.get(opts, 'domainName'),\n    'DisasterRecoveryUrl': _.get(opts, 'disasterRecoveryUrl'),\n    'DisasterRecoveryMethod': _.get(opts, 'disasterRecoveryMethod'),\n    'TransferMode': _.get(opts, 'transferMode'),\n    'Secure': serialize.bool(_.get(opts, 'secure')),\n    'CnamLookupEnabled': serialize.bool(_.get(opts, 'cnamLookupEnabled')),\n    'TransferCallerId': _.get(opts, 'transferCallerId')\n  });\n\n  var promise = this._version.update({uri: this._uri, method: 'POST', data: data});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(new TrunkInstance(this._version, payload, this._solution.sid));\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\nObject.defineProperty(TrunkContext.prototype,\n  'originationUrls', {\n    get: function() {\n      if (!this._originationUrls) {\n        this._originationUrls = new OriginationUrlList(this._version, this._solution.sid);\n      }\n      return this._originationUrls;\n    }\n});\n\nObject.defineProperty(TrunkContext.prototype,\n  'credentialsLists', {\n    get: function() {\n      if (!this._credentialsLists) {\n        this._credentialsLists = new CredentialListList(this._version, this._solution.sid);\n      }\n      return this._credentialsLists;\n    }\n});\n\nObject.defineProperty(TrunkContext.prototype,\n  'ipAccessControlLists', {\n    get: function() {\n      if (!this._ipAccessControlLists) {\n        this._ipAccessControlLists = new IpAccessControlListList(this._version, this._solution.sid);\n      }\n      return this._ipAccessControlLists;\n    }\n});\n\nObject.defineProperty(TrunkContext.prototype,\n  'phoneNumbers', {\n    get: function() {\n      if (!this._phoneNumbers) {\n        this._phoneNumbers = new PhoneNumberList(this._version, this._solution.sid);\n      }\n      return this._phoneNumbers;\n    }\n});\n\nObject.defineProperty(TrunkContext.prototype,\n  'recordings', {\n    get: function() {\n      if (!this._recordings) {\n        this._recordings = new RecordingList(this._version, this._solution.sid);\n      }\n      return this._recordings;\n    }\n});\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Trunking.V1.TrunkContext#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nTrunkContext.prototype.toJSON = function toJSON() {\n  return this._solution;\n};\n\nTrunkContext.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\nmodule.exports = {\n  TrunkList: TrunkList,\n  TrunkPage: TrunkPage,\n  TrunkInstance: TrunkInstance,\n  TrunkContext: TrunkContext\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}