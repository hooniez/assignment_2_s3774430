{"ast":null,"code":"'use strict';\n/* jshint ignore:start */\n\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n\n/* jshint ignore:end */\n\nvar Q = require('q');\n/* jshint ignore:line */\n\n\nvar _ = require('lodash');\n/* jshint ignore:line */\n\n\nvar util = require('util');\n/* jshint ignore:line */\n\n\nvar InteractionChannelInviteList = require('./interactionChannel/interactionChannelInvite').InteractionChannelInviteList;\n\nvar InteractionChannelParticipantList = require('./interactionChannel/interactionChannelParticipant').InteractionChannelParticipantList;\n\nvar Page = require('../../../../base/Page');\n/* jshint ignore:line */\n\n\nvar deserialize = require('../../../../base/deserialize');\n/* jshint ignore:line */\n\n\nvar serialize = require('../../../../base/serialize');\n/* jshint ignore:line */\n\n\nvar values = require('../../../../base/values');\n/* jshint ignore:line */\n\n\nvar InteractionChannelList;\nvar InteractionChannelPage;\nvar InteractionChannelInstance;\nvar InteractionChannelContext;\n/* jshint ignore:start */\n\n/**\n * Initialize the InteractionChannelList\n *\n * @constructor Twilio.FlexApi.V1.InteractionContext.InteractionChannelList\n *\n * @param {Twilio.FlexApi.V1} version - Version of the resource\n * @param {string} interactionSid - The unique string that identifies the resource.\n */\n\n/* jshint ignore:end */\n\nInteractionChannelList = function InteractionChannelList(version, interactionSid) {\n  /* jshint ignore:start */\n\n  /**\n   * @function channels\n   * @memberof Twilio.FlexApi.V1.InteractionContext#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.FlexApi.V1.InteractionContext.InteractionChannelContext}\n   */\n\n  /* jshint ignore:end */\n  function InteractionChannelListInstance(sid) {\n    return InteractionChannelListInstance.get(sid);\n  }\n\n  InteractionChannelListInstance._version = version; // Path Solution\n\n  InteractionChannelListInstance._solution = {\n    interactionSid: interactionSid\n  };\n  InteractionChannelListInstance._uri = `/Interactions/${interactionSid}/Channels`;\n  /* jshint ignore:start */\n\n  /**\n   * Streams InteractionChannelInstance records from the API.\n   *\n   * This operation lazily loads records as efficiently as possible until the limit\n   * is reached.\n   *\n   * The results are passed into the callback function, so this operation is memory\n   * efficient.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function each\n   * @memberof Twilio.FlexApi.V1.InteractionContext.InteractionChannelList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         each() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no pageSize is defined but a limit is defined,\n   *         each() will attempt to read the limit with the most efficient\n   *         page size, i.e. min(limit, 1000)\n   * @param {Function} [opts.callback] -\n   *         Function to process each record. If this and a positional\n   *         callback are passed, this one will be used\n   * @param {Function} [opts.done] -\n   *          Function to be called upon completion of streaming\n   * @param {Function} [callback] - Function to process each record\n   */\n\n  /* jshint ignore:end */\n\n  InteractionChannelListInstance.each = function each(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n\n    if (opts.callback) {\n      callback = opts.callback;\n    }\n\n    if (_.isUndefined(callback)) {\n      throw new Error('Callback function must be provided');\n    }\n\n    var done = false;\n    var currentPage = 1;\n    var currentResource = 0;\n\n    var limits = this._version.readLimits({\n      limit: opts.limit,\n      pageSize: opts.pageSize\n    });\n\n    function onComplete(error) {\n      done = true;\n\n      if (_.isFunction(opts.done)) {\n        opts.done(error);\n      }\n    }\n\n    function fetchNextPage(fn) {\n      var promise = fn();\n\n      if (_.isUndefined(promise)) {\n        onComplete();\n        return;\n      }\n\n      promise.then(function (page) {\n        _.each(page.instances, function (instance) {\n          if (done || !_.isUndefined(opts.limit) && currentResource >= opts.limit) {\n            done = true;\n            return false;\n          }\n\n          currentResource++;\n          callback(instance, onComplete);\n        });\n\n        if (!done) {\n          currentPage++;\n          fetchNextPage(_.bind(page.nextPage, page));\n        } else {\n          onComplete();\n        }\n      });\n      promise.catch(onComplete);\n    }\n\n    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Lists InteractionChannelInstance records from the API as a list.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function list\n   * @memberof Twilio.FlexApi.V1.InteractionContext.InteractionChannelList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         list() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no page_size is defined but a limit is defined,\n   *         list() will attempt to read the limit with the most\n   *         efficient page size, i.e. min(limit, 1000)\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  InteractionChannelListInstance.list = function list(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n    var deferred = Q.defer();\n    var allResources = [];\n\n    opts.callback = function (resource, done) {\n      allResources.push(resource);\n\n      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {\n        done();\n      }\n    };\n\n    opts.done = function (error) {\n      if (_.isUndefined(error)) {\n        deferred.resolve(allResources);\n      } else {\n        deferred.reject(error);\n      }\n    };\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    this.each(opts);\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Retrieve a single page of InteractionChannelInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function page\n   * @memberof Twilio.FlexApi.V1.InteractionContext.InteractionChannelList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.pageToken] - PageToken provided by the API\n   * @param {number} [opts.pageNumber] -\n   *          Page Number, this value is simply for client state\n   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  InteractionChannelListInstance.page = function page(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n    var deferred = Q.defer();\n    var data = values.of({\n      'PageToken': opts.pageToken,\n      'Page': opts.pageNumber,\n      'PageSize': opts.pageSize\n    });\n\n    var promise = this._version.page({\n      uri: this._uri,\n      method: 'GET',\n      params: data\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new InteractionChannelPage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Retrieve a single target page of InteractionChannelInstance records from the\n   * API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function getPage\n   * @memberof Twilio.FlexApi.V1.InteractionContext.InteractionChannelList#\n   *\n   * @param {string} [targetUrl] - API-generated URL for the requested results page\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  InteractionChannelListInstance.getPage = function getPage(targetUrl, callback) {\n    var deferred = Q.defer();\n\n    var promise = this._version._domain.twilio.request({\n      method: 'GET',\n      uri: targetUrl\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new InteractionChannelPage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Constructs a interaction_channel\n   *\n   * @function get\n   * @memberof Twilio.FlexApi.V1.InteractionContext.InteractionChannelList#\n   *\n   * @param {string} sid - The unique string that identifies the resource\n   *\n   * @returns {Twilio.FlexApi.V1.InteractionContext.InteractionChannelContext}\n   */\n\n  /* jshint ignore:end */\n\n\n  InteractionChannelListInstance.get = function get(sid) {\n    return new InteractionChannelContext(this._version, this._solution.interactionSid, sid);\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.FlexApi.V1.InteractionContext.InteractionChannelList#\n   *\n   * @returns Object\n   */\n\n  /* jshint ignore:end */\n\n\n  InteractionChannelListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n\n  InteractionChannelListInstance[util.inspect.custom] = function inspect(depth, options) {\n    return util.inspect(this.toJSON(), options);\n  };\n\n  return InteractionChannelListInstance;\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the InteractionChannelPage\n *\n * @constructor Twilio.FlexApi.V1.InteractionContext.InteractionChannelPage\n *\n * @param {V1} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {InteractionChannelSolution} solution - Path solution\n *\n * @returns InteractionChannelPage\n */\n\n/* jshint ignore:end */\n\n\nInteractionChannelPage = function InteractionChannelPage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n\n_.extend(InteractionChannelPage.prototype, Page.prototype);\n\nInteractionChannelPage.prototype.constructor = InteractionChannelPage;\n/* jshint ignore:start */\n\n/**\n * Build an instance of InteractionChannelInstance\n *\n * @function getInstance\n * @memberof Twilio.FlexApi.V1.InteractionContext.InteractionChannelPage#\n *\n * @param {InteractionChannelPayload} payload - Payload response from the API\n *\n * @returns InteractionChannelInstance\n */\n\n/* jshint ignore:end */\n\nInteractionChannelPage.prototype.getInstance = function getInstance(payload) {\n  return new InteractionChannelInstance(this._version, payload, this._solution.interactionSid);\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.FlexApi.V1.InteractionContext.InteractionChannelPage#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nInteractionChannelPage.prototype.toJSON = function toJSON() {\n  let clone = {};\n\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n\n  return clone;\n};\n\nInteractionChannelPage.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the InteractionChannelContext\n *\n * @constructor Twilio.FlexApi.V1.InteractionContext.InteractionChannelInstance\n *\n * @property {string} sid - The unique string that identifies the resource\n * @property {string} interactionSid -\n *          The unique string that identifies the resource.\n * @property {interaction_channel.type} type - The Interaction Channel's type.\n * @property {interaction_channel.channel_status} status -\n *          The status of this channel.\n * @property {number} errorCode - The Twilio error code for a failed channel.\n * @property {string} errorMessage - The error message for a failed channel.\n * @property {string} url - The url\n * @property {string} links - The links\n *\n * @param {V1} version - Version of the resource\n * @param {InteractionChannelPayload} payload - The instance payload\n * @param {sid} interactionSid - The unique string that identifies the resource.\n * @param {sid} sid - The unique string that identifies the resource\n */\n\n/* jshint ignore:end */\n\n\nInteractionChannelInstance = function InteractionChannelInstance(version, payload, interactionSid, sid) {\n  this._version = version; // Marshaled Properties\n\n  this.sid = payload.sid; // jshint ignore:line\n\n  this.interactionSid = payload.interaction_sid; // jshint ignore:line\n\n  this.type = payload.type; // jshint ignore:line\n\n  this.status = payload.status; // jshint ignore:line\n\n  this.errorCode = deserialize.integer(payload.error_code); // jshint ignore:line\n\n  this.errorMessage = payload.error_message; // jshint ignore:line\n\n  this.url = payload.url; // jshint ignore:line\n\n  this.links = payload.links; // jshint ignore:line\n  // Context\n\n  this._context = undefined;\n  this._solution = {\n    interactionSid: interactionSid,\n    sid: sid || this.sid\n  };\n};\n\nObject.defineProperty(InteractionChannelInstance.prototype, '_proxy', {\n  get: function () {\n    if (!this._context) {\n      this._context = new InteractionChannelContext(this._version, this._solution.interactionSid, this._solution.sid);\n    }\n\n    return this._context;\n  }\n});\n/* jshint ignore:start */\n\n/**\n * fetch a InteractionChannelInstance\n *\n * @function fetch\n * @memberof Twilio.FlexApi.V1.InteractionContext.InteractionChannelInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed InteractionChannelInstance\n */\n\n/* jshint ignore:end */\n\nInteractionChannelInstance.prototype.fetch = function fetch(callback) {\n  return this._proxy.fetch(callback);\n};\n/* jshint ignore:start */\n\n/**\n * update a InteractionChannelInstance\n *\n * @function update\n * @memberof Twilio.FlexApi.V1.InteractionContext.InteractionChannelInstance#\n *\n * @param {object} opts - Options for request\n * @param {interaction_channel.status} opts.status -\n *          Required. The Interaction channels's status\n * @param {object} [opts.routing] - Optional. The state of associated tasks.\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed InteractionChannelInstance\n */\n\n/* jshint ignore:end */\n\n\nInteractionChannelInstance.prototype.update = function update(opts, callback) {\n  return this._proxy.update(opts, callback);\n};\n/* jshint ignore:start */\n\n/**\n * Access the invites\n *\n * @function invites\n * @memberof Twilio.FlexApi.V1.InteractionContext.InteractionChannelInstance#\n *\n * @returns {Twilio.FlexApi.V1.InteractionContext.InteractionChannelContext.InteractionChannelInviteList}\n */\n\n/* jshint ignore:end */\n\n\nInteractionChannelInstance.prototype.invites = function invites() {\n  return this._proxy.invites;\n};\n/* jshint ignore:start */\n\n/**\n * Access the participants\n *\n * @function participants\n * @memberof Twilio.FlexApi.V1.InteractionContext.InteractionChannelInstance#\n *\n * @returns {Twilio.FlexApi.V1.InteractionContext.InteractionChannelContext.InteractionChannelParticipantList}\n */\n\n/* jshint ignore:end */\n\n\nInteractionChannelInstance.prototype.participants = function participants() {\n  return this._proxy.participants;\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.FlexApi.V1.InteractionContext.InteractionChannelInstance#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nInteractionChannelInstance.prototype.toJSON = function toJSON() {\n  let clone = {};\n\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n\n  return clone;\n};\n\nInteractionChannelInstance.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the InteractionChannelContext\n *\n * @constructor Twilio.FlexApi.V1.InteractionContext.InteractionChannelContext\n *\n * @property {Twilio.FlexApi.V1.InteractionContext.InteractionChannelContext.InteractionChannelInviteList} invites -\n *          invites resource\n * @property {Twilio.FlexApi.V1.InteractionContext.InteractionChannelContext.InteractionChannelParticipantList} participants -\n *          participants resource\n *\n * @param {V1} version - Version of the resource\n * @param {sid} interactionSid - The unique string that identifies the resource\n * @param {sid} sid - The unique string that identifies the resource\n */\n\n/* jshint ignore:end */\n\n\nInteractionChannelContext = function InteractionChannelContext(version, interactionSid, sid) {\n  this._version = version; // Path Solution\n\n  this._solution = {\n    interactionSid: interactionSid,\n    sid: sid\n  };\n  this._uri = `/Interactions/${interactionSid}/Channels/${sid}`; // Dependents\n\n  this._invites = undefined;\n  this._participants = undefined;\n};\n/* jshint ignore:start */\n\n/**\n * fetch a InteractionChannelInstance\n *\n * @function fetch\n * @memberof Twilio.FlexApi.V1.InteractionContext.InteractionChannelContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed InteractionChannelInstance\n */\n\n/* jshint ignore:end */\n\n\nInteractionChannelContext.prototype.fetch = function fetch(callback) {\n  var deferred = Q.defer();\n\n  var promise = this._version.fetch({\n    uri: this._uri,\n    method: 'GET'\n  });\n\n  promise = promise.then(function (payload) {\n    deferred.resolve(new InteractionChannelInstance(this._version, payload, this._solution.interactionSid, this._solution.sid));\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n/* jshint ignore:start */\n\n/**\n * update a InteractionChannelInstance\n *\n * @function update\n * @memberof Twilio.FlexApi.V1.InteractionContext.InteractionChannelContext#\n *\n * @param {object} opts - Options for request\n * @param {interaction_channel.status} opts.status -\n *          Required. The Interaction channels's status\n * @param {object} [opts.routing] - Optional. The state of associated tasks.\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed InteractionChannelInstance\n */\n\n/* jshint ignore:end */\n\n\nInteractionChannelContext.prototype.update = function update(opts, callback) {\n  if (_.isUndefined(opts)) {\n    throw new Error('Required parameter \"opts\" missing.');\n  }\n\n  if (_.isUndefined(opts['status'])) {\n    throw new Error('Required parameter \"opts[\\'status\\']\" missing.');\n  }\n\n  var deferred = Q.defer();\n  var data = values.of({\n    'Status': _.get(opts, 'status'),\n    'Routing': serialize.object(_.get(opts, 'routing'))\n  });\n\n  var promise = this._version.update({\n    uri: this._uri,\n    method: 'POST',\n    data: data\n  });\n\n  promise = promise.then(function (payload) {\n    deferred.resolve(new InteractionChannelInstance(this._version, payload, this._solution.interactionSid, this._solution.sid));\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\nObject.defineProperty(InteractionChannelContext.prototype, 'invites', {\n  get: function () {\n    if (!this._invites) {\n      this._invites = new InteractionChannelInviteList(this._version, this._solution.interactionSid, this._solution.sid);\n    }\n\n    return this._invites;\n  }\n});\nObject.defineProperty(InteractionChannelContext.prototype, 'participants', {\n  get: function () {\n    if (!this._participants) {\n      this._participants = new InteractionChannelParticipantList(this._version, this._solution.interactionSid, this._solution.sid);\n    }\n\n    return this._participants;\n  }\n});\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.FlexApi.V1.InteractionContext.InteractionChannelContext#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\nInteractionChannelContext.prototype.toJSON = function toJSON() {\n  return this._solution;\n};\n\nInteractionChannelContext.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\nmodule.exports = {\n  InteractionChannelList: InteractionChannelList,\n  InteractionChannelPage: InteractionChannelPage,\n  InteractionChannelInstance: InteractionChannelInstance,\n  InteractionChannelContext: InteractionChannelContext\n};","map":{"version":3,"names":["Q","require","_","util","InteractionChannelInviteList","InteractionChannelParticipantList","Page","deserialize","serialize","values","InteractionChannelList","InteractionChannelPage","InteractionChannelInstance","InteractionChannelContext","version","interactionSid","InteractionChannelListInstance","sid","get","_version","_solution","_uri","each","opts","callback","isFunction","isUndefined","Error","done","currentPage","currentResource","limits","readLimits","limit","pageSize","onComplete","error","fetchNextPage","fn","promise","then","page","instances","instance","bind","nextPage","catch","merge","list","deferred","defer","allResources","resource","push","length","resolve","reject","nodeify","data","of","pageToken","pageNumber","uri","method","params","payload","getPage","targetUrl","_domain","twilio","request","toJSON","inspect","custom","depth","options","response","solution","prototype","constructor","call","extend","getInstance","clone","forOwn","value","key","startsWith","interaction_sid","type","status","errorCode","integer","error_code","errorMessage","error_message","url","links","_context","undefined","Object","defineProperty","fetch","_proxy","update","invites","participants","_invites","_participants","object","module","exports"],"sources":["/Users/hooniesun/rmit/fwp/assessment1/lan/node_modules/twilio/lib/rest/flexApi/v1/interaction/interactionChannel.js"],"sourcesContent":["'use strict';\n\n/* jshint ignore:start */\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n/* jshint ignore:end */\n\nvar Q = require('q');  /* jshint ignore:line */\nvar _ = require('lodash');  /* jshint ignore:line */\nvar util = require('util');  /* jshint ignore:line */\nvar InteractionChannelInviteList = require(\n    './interactionChannel/interactionChannelInvite').InteractionChannelInviteList;\nvar InteractionChannelParticipantList = require(\n    './interactionChannel/interactionChannelParticipant').InteractionChannelParticipantList;\nvar Page = require('../../../../base/Page');  /* jshint ignore:line */\nvar deserialize = require(\n    '../../../../base/deserialize');  /* jshint ignore:line */\nvar serialize = require('../../../../base/serialize');  /* jshint ignore:line */\nvar values = require('../../../../base/values');  /* jshint ignore:line */\n\nvar InteractionChannelList;\nvar InteractionChannelPage;\nvar InteractionChannelInstance;\nvar InteractionChannelContext;\n\n/* jshint ignore:start */\n/**\n * Initialize the InteractionChannelList\n *\n * @constructor Twilio.FlexApi.V1.InteractionContext.InteractionChannelList\n *\n * @param {Twilio.FlexApi.V1} version - Version of the resource\n * @param {string} interactionSid - The unique string that identifies the resource.\n */\n/* jshint ignore:end */\nInteractionChannelList = function InteractionChannelList(version,\n                                                          interactionSid) {\n  /* jshint ignore:start */\n  /**\n   * @function channels\n   * @memberof Twilio.FlexApi.V1.InteractionContext#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.FlexApi.V1.InteractionContext.InteractionChannelContext}\n   */\n  /* jshint ignore:end */\n  function InteractionChannelListInstance(sid) {\n    return InteractionChannelListInstance.get(sid);\n  }\n\n  InteractionChannelListInstance._version = version;\n  // Path Solution\n  InteractionChannelListInstance._solution = {interactionSid: interactionSid};\n  InteractionChannelListInstance._uri = `/Interactions/${interactionSid}/Channels`;\n  /* jshint ignore:start */\n  /**\n   * Streams InteractionChannelInstance records from the API.\n   *\n   * This operation lazily loads records as efficiently as possible until the limit\n   * is reached.\n   *\n   * The results are passed into the callback function, so this operation is memory\n   * efficient.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function each\n   * @memberof Twilio.FlexApi.V1.InteractionContext.InteractionChannelList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         each() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no pageSize is defined but a limit is defined,\n   *         each() will attempt to read the limit with the most efficient\n   *         page size, i.e. min(limit, 1000)\n   * @param {Function} [opts.callback] -\n   *         Function to process each record. If this and a positional\n   *         callback are passed, this one will be used\n   * @param {Function} [opts.done] -\n   *          Function to be called upon completion of streaming\n   * @param {Function} [callback] - Function to process each record\n   */\n  /* jshint ignore:end */\n  InteractionChannelListInstance.each = function each(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    if (opts.callback) {\n      callback = opts.callback;\n    }\n    if (_.isUndefined(callback)) {\n      throw new Error('Callback function must be provided');\n    }\n\n    var done = false;\n    var currentPage = 1;\n    var currentResource = 0;\n    var limits = this._version.readLimits({\n      limit: opts.limit,\n      pageSize: opts.pageSize\n    });\n\n    function onComplete(error) {\n      done = true;\n      if (_.isFunction(opts.done)) {\n        opts.done(error);\n      }\n    }\n\n    function fetchNextPage(fn) {\n      var promise = fn();\n      if (_.isUndefined(promise)) {\n        onComplete();\n        return;\n      }\n\n      promise.then(function(page) {\n        _.each(page.instances, function(instance) {\n          if (done || (!_.isUndefined(opts.limit) && currentResource >= opts.limit)) {\n            done = true;\n            return false;\n          }\n\n          currentResource++;\n          callback(instance, onComplete);\n        });\n\n        if (!done) {\n          currentPage++;\n          fetchNextPage(_.bind(page.nextPage, page));\n        } else {\n          onComplete();\n        }\n      });\n\n      promise.catch(onComplete);\n    }\n\n    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Lists InteractionChannelInstance records from the API as a list.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function list\n   * @memberof Twilio.FlexApi.V1.InteractionContext.InteractionChannelList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         list() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no page_size is defined but a limit is defined,\n   *         list() will attempt to read the limit with the most\n   *         efficient page size, i.e. min(limit, 1000)\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  InteractionChannelListInstance.list = function list(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    var deferred = Q.defer();\n    var allResources = [];\n    opts.callback = function(resource, done) {\n      allResources.push(resource);\n\n      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {\n        done();\n      }\n    };\n\n    opts.done = function(error) {\n      if (_.isUndefined(error)) {\n        deferred.resolve(allResources);\n      } else {\n        deferred.reject(error);\n      }\n    };\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    this.each(opts);\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single page of InteractionChannelInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function page\n   * @memberof Twilio.FlexApi.V1.InteractionContext.InteractionChannelList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.pageToken] - PageToken provided by the API\n   * @param {number} [opts.pageNumber] -\n   *          Page Number, this value is simply for client state\n   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  InteractionChannelListInstance.page = function page(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n\n    var deferred = Q.defer();\n    var data = values.of({\n      'PageToken': opts.pageToken,\n      'Page': opts.pageNumber,\n      'PageSize': opts.pageSize\n    });\n\n    var promise = this._version.page({uri: this._uri, method: 'GET', params: data});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new InteractionChannelPage(this._version, payload, this._solution));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single target page of InteractionChannelInstance records from the\n   * API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function getPage\n   * @memberof Twilio.FlexApi.V1.InteractionContext.InteractionChannelList#\n   *\n   * @param {string} [targetUrl] - API-generated URL for the requested results page\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  InteractionChannelListInstance.getPage = function getPage(targetUrl, callback) {\n    var deferred = Q.defer();\n\n    var promise = this._version._domain.twilio.request({method: 'GET', uri: targetUrl});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new InteractionChannelPage(this._version, payload, this._solution));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Constructs a interaction_channel\n   *\n   * @function get\n   * @memberof Twilio.FlexApi.V1.InteractionContext.InteractionChannelList#\n   *\n   * @param {string} sid - The unique string that identifies the resource\n   *\n   * @returns {Twilio.FlexApi.V1.InteractionContext.InteractionChannelContext}\n   */\n  /* jshint ignore:end */\n  InteractionChannelListInstance.get = function get(sid) {\n    return new InteractionChannelContext(this._version, this._solution.interactionSid, sid);\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.FlexApi.V1.InteractionContext.InteractionChannelList#\n   *\n   * @returns Object\n   */\n  /* jshint ignore:end */\n  InteractionChannelListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n\n  InteractionChannelListInstance[util.inspect.custom] = function inspect(depth,\n      options) {\n    return util.inspect(this.toJSON(), options);\n  };\n\n  return InteractionChannelListInstance;\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the InteractionChannelPage\n *\n * @constructor Twilio.FlexApi.V1.InteractionContext.InteractionChannelPage\n *\n * @param {V1} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {InteractionChannelSolution} solution - Path solution\n *\n * @returns InteractionChannelPage\n */\n/* jshint ignore:end */\nInteractionChannelPage = function InteractionChannelPage(version, response,\n                                                          solution) {\n  // Path Solution\n  this._solution = solution;\n\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n\n_.extend(InteractionChannelPage.prototype, Page.prototype);\nInteractionChannelPage.prototype.constructor = InteractionChannelPage;\n\n/* jshint ignore:start */\n/**\n * Build an instance of InteractionChannelInstance\n *\n * @function getInstance\n * @memberof Twilio.FlexApi.V1.InteractionContext.InteractionChannelPage#\n *\n * @param {InteractionChannelPayload} payload - Payload response from the API\n *\n * @returns InteractionChannelInstance\n */\n/* jshint ignore:end */\nInteractionChannelPage.prototype.getInstance = function getInstance(payload) {\n  return new InteractionChannelInstance(this._version, payload, this._solution.interactionSid);\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.FlexApi.V1.InteractionContext.InteractionChannelPage#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nInteractionChannelPage.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function(value, key) {\n    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\n\nInteractionChannelPage.prototype[util.inspect.custom] = function inspect(depth,\n    options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the InteractionChannelContext\n *\n * @constructor Twilio.FlexApi.V1.InteractionContext.InteractionChannelInstance\n *\n * @property {string} sid - The unique string that identifies the resource\n * @property {string} interactionSid -\n *          The unique string that identifies the resource.\n * @property {interaction_channel.type} type - The Interaction Channel's type.\n * @property {interaction_channel.channel_status} status -\n *          The status of this channel.\n * @property {number} errorCode - The Twilio error code for a failed channel.\n * @property {string} errorMessage - The error message for a failed channel.\n * @property {string} url - The url\n * @property {string} links - The links\n *\n * @param {V1} version - Version of the resource\n * @param {InteractionChannelPayload} payload - The instance payload\n * @param {sid} interactionSid - The unique string that identifies the resource.\n * @param {sid} sid - The unique string that identifies the resource\n */\n/* jshint ignore:end */\nInteractionChannelInstance = function InteractionChannelInstance(version,\n    payload, interactionSid, sid) {\n  this._version = version;\n\n  // Marshaled Properties\n  this.sid = payload.sid; // jshint ignore:line\n  this.interactionSid = payload.interaction_sid; // jshint ignore:line\n  this.type = payload.type; // jshint ignore:line\n  this.status = payload.status; // jshint ignore:line\n  this.errorCode = deserialize.integer(payload.error_code); // jshint ignore:line\n  this.errorMessage = payload.error_message; // jshint ignore:line\n  this.url = payload.url; // jshint ignore:line\n  this.links = payload.links; // jshint ignore:line\n\n  // Context\n  this._context = undefined;\n  this._solution = {interactionSid: interactionSid, sid: sid || this.sid, };\n};\n\nObject.defineProperty(InteractionChannelInstance.prototype,\n  '_proxy', {\n    get: function() {\n      if (!this._context) {\n        this._context = new InteractionChannelContext(\n          this._version,\n          this._solution.interactionSid,\n          this._solution.sid\n        );\n      }\n\n      return this._context;\n    }\n});\n\n/* jshint ignore:start */\n/**\n * fetch a InteractionChannelInstance\n *\n * @function fetch\n * @memberof Twilio.FlexApi.V1.InteractionContext.InteractionChannelInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed InteractionChannelInstance\n */\n/* jshint ignore:end */\nInteractionChannelInstance.prototype.fetch = function fetch(callback) {\n  return this._proxy.fetch(callback);\n};\n\n/* jshint ignore:start */\n/**\n * update a InteractionChannelInstance\n *\n * @function update\n * @memberof Twilio.FlexApi.V1.InteractionContext.InteractionChannelInstance#\n *\n * @param {object} opts - Options for request\n * @param {interaction_channel.status} opts.status -\n *          Required. The Interaction channels's status\n * @param {object} [opts.routing] - Optional. The state of associated tasks.\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed InteractionChannelInstance\n */\n/* jshint ignore:end */\nInteractionChannelInstance.prototype.update = function update(opts, callback) {\n  return this._proxy.update(opts, callback);\n};\n\n/* jshint ignore:start */\n/**\n * Access the invites\n *\n * @function invites\n * @memberof Twilio.FlexApi.V1.InteractionContext.InteractionChannelInstance#\n *\n * @returns {Twilio.FlexApi.V1.InteractionContext.InteractionChannelContext.InteractionChannelInviteList}\n */\n/* jshint ignore:end */\nInteractionChannelInstance.prototype.invites = function invites() {\n  return this._proxy.invites;\n};\n\n/* jshint ignore:start */\n/**\n * Access the participants\n *\n * @function participants\n * @memberof Twilio.FlexApi.V1.InteractionContext.InteractionChannelInstance#\n *\n * @returns {Twilio.FlexApi.V1.InteractionContext.InteractionChannelContext.InteractionChannelParticipantList}\n */\n/* jshint ignore:end */\nInteractionChannelInstance.prototype.participants = function participants() {\n  return this._proxy.participants;\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.FlexApi.V1.InteractionContext.InteractionChannelInstance#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nInteractionChannelInstance.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function(value, key) {\n    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\n\nInteractionChannelInstance.prototype[util.inspect.custom] = function\n    inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the InteractionChannelContext\n *\n * @constructor Twilio.FlexApi.V1.InteractionContext.InteractionChannelContext\n *\n * @property {Twilio.FlexApi.V1.InteractionContext.InteractionChannelContext.InteractionChannelInviteList} invites -\n *          invites resource\n * @property {Twilio.FlexApi.V1.InteractionContext.InteractionChannelContext.InteractionChannelParticipantList} participants -\n *          participants resource\n *\n * @param {V1} version - Version of the resource\n * @param {sid} interactionSid - The unique string that identifies the resource\n * @param {sid} sid - The unique string that identifies the resource\n */\n/* jshint ignore:end */\nInteractionChannelContext = function InteractionChannelContext(version,\n    interactionSid, sid) {\n  this._version = version;\n\n  // Path Solution\n  this._solution = {interactionSid: interactionSid, sid: sid, };\n  this._uri = `/Interactions/${interactionSid}/Channels/${sid}`;\n\n  // Dependents\n  this._invites = undefined;\n  this._participants = undefined;\n};\n\n/* jshint ignore:start */\n/**\n * fetch a InteractionChannelInstance\n *\n * @function fetch\n * @memberof Twilio.FlexApi.V1.InteractionContext.InteractionChannelContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed InteractionChannelInstance\n */\n/* jshint ignore:end */\nInteractionChannelContext.prototype.fetch = function fetch(callback) {\n  var deferred = Q.defer();\n  var promise = this._version.fetch({uri: this._uri, method: 'GET'});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(new InteractionChannelInstance(\n      this._version,\n      payload,\n      this._solution.interactionSid,\n      this._solution.sid\n    ));\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * update a InteractionChannelInstance\n *\n * @function update\n * @memberof Twilio.FlexApi.V1.InteractionContext.InteractionChannelContext#\n *\n * @param {object} opts - Options for request\n * @param {interaction_channel.status} opts.status -\n *          Required. The Interaction channels's status\n * @param {object} [opts.routing] - Optional. The state of associated tasks.\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed InteractionChannelInstance\n */\n/* jshint ignore:end */\nInteractionChannelContext.prototype.update = function update(opts, callback) {\n  if (_.isUndefined(opts)) {\n    throw new Error('Required parameter \"opts\" missing.');\n  }\n  if (_.isUndefined(opts['status'])) {\n    throw new Error('Required parameter \"opts[\\'status\\']\" missing.');\n  }\n\n  var deferred = Q.defer();\n  var data = values.of({\n    'Status': _.get(opts, 'status'),\n    'Routing': serialize.object(_.get(opts, 'routing'))\n  });\n\n  var promise = this._version.update({uri: this._uri, method: 'POST', data: data});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(new InteractionChannelInstance(\n      this._version,\n      payload,\n      this._solution.interactionSid,\n      this._solution.sid\n    ));\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\nObject.defineProperty(InteractionChannelContext.prototype,\n  'invites', {\n    get: function() {\n      if (!this._invites) {\n        this._invites = new InteractionChannelInviteList(\n          this._version,\n          this._solution.interactionSid,\n          this._solution.sid\n        );\n      }\n      return this._invites;\n    }\n});\n\nObject.defineProperty(InteractionChannelContext.prototype,\n  'participants', {\n    get: function() {\n      if (!this._participants) {\n        this._participants = new InteractionChannelParticipantList(\n          this._version,\n          this._solution.interactionSid,\n          this._solution.sid\n        );\n      }\n      return this._participants;\n    }\n});\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.FlexApi.V1.InteractionContext.InteractionChannelContext#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nInteractionChannelContext.prototype.toJSON = function toJSON() {\n  return this._solution;\n};\n\nInteractionChannelContext.prototype[util.inspect.custom] = function\n    inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\nmodule.exports = {\n  InteractionChannelList: InteractionChannelList,\n  InteractionChannelPage: InteractionChannelPage,\n  InteractionChannelInstance: InteractionChannelInstance,\n  InteractionChannelContext: InteractionChannelContext\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}