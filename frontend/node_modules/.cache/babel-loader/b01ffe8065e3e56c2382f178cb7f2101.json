{"ast":null,"code":"'use strict';\n/* jshint ignore:start */\n\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n\n/* jshint ignore:end */\n\nvar Q = require('q');\n/* jshint ignore:line */\n\n\nvar _ = require('lodash');\n/* jshint ignore:line */\n\n\nvar util = require('util');\n/* jshint ignore:line */\n\n\nvar Page = require('../../../../base/Page');\n/* jshint ignore:line */\n\n\nvar deserialize = require('../../../../base/deserialize');\n/* jshint ignore:line */\n\n\nvar values = require('../../../../base/values');\n/* jshint ignore:line */\n\n\nvar MessagingConfigurationList;\nvar MessagingConfigurationPage;\nvar MessagingConfigurationInstance;\nvar MessagingConfigurationContext;\n/* jshint ignore:start */\n\n/**\n * Initialize the MessagingConfigurationList\n *\n * @constructor Twilio.Verify.V2.ServiceContext.MessagingConfigurationList\n *\n * @param {Twilio.Verify.V2} version - Version of the resource\n * @param {string} serviceSid -\n *          The SID of the Service that the resource is associated with\n */\n\n/* jshint ignore:end */\n\nMessagingConfigurationList = function MessagingConfigurationList(version, serviceSid) {\n  /* jshint ignore:start */\n\n  /**\n   * @function messagingConfigurations\n   * @memberof Twilio.Verify.V2.ServiceContext#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Verify.V2.ServiceContext.MessagingConfigurationContext}\n   */\n\n  /* jshint ignore:end */\n  function MessagingConfigurationListInstance(sid) {\n    return MessagingConfigurationListInstance.get(sid);\n  }\n\n  MessagingConfigurationListInstance._version = version; // Path Solution\n\n  MessagingConfigurationListInstance._solution = {\n    serviceSid: serviceSid\n  };\n  MessagingConfigurationListInstance._uri = `/Services/${serviceSid}/MessagingConfigurations`;\n  /* jshint ignore:start */\n\n  /**\n   * create a MessagingConfigurationInstance\n   *\n   * @function create\n   * @memberof Twilio.Verify.V2.ServiceContext.MessagingConfigurationList#\n   *\n   * @param {object} opts - Options for request\n   * @param {string} opts.country -\n   *          The ISO-3166-1 country code of the country or `all`.\n   * @param {string} opts.messagingServiceSid -\n   *          The SID of the Messaging Service used for this configuration.\n   * @param {function} [callback] - Callback to handle processed record\n   *\n   * @returns {Promise} Resolves to processed MessagingConfigurationInstance\n   */\n\n  /* jshint ignore:end */\n\n  MessagingConfigurationListInstance.create = function create(opts, callback) {\n    if (_.isUndefined(opts)) {\n      throw new Error('Required parameter \"opts\" missing.');\n    }\n\n    if (_.isUndefined(opts['country'])) {\n      throw new Error('Required parameter \"opts[\\'country\\']\" missing.');\n    }\n\n    if (_.isUndefined(opts['messagingServiceSid'])) {\n      throw new Error('Required parameter \"opts[\\'messagingServiceSid\\']\" missing.');\n    }\n\n    var deferred = Q.defer();\n    var data = values.of({\n      'Country': _.get(opts, 'country'),\n      'MessagingServiceSid': _.get(opts, 'messagingServiceSid')\n    });\n\n    var promise = this._version.create({\n      uri: this._uri,\n      method: 'POST',\n      data: data\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new MessagingConfigurationInstance(this._version, payload, this._solution.serviceSid, this._solution.country));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Streams MessagingConfigurationInstance records from the API.\n   *\n   * This operation lazily loads records as efficiently as possible until the limit\n   * is reached.\n   *\n   * The results are passed into the callback function, so this operation is memory\n   * efficient.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function each\n   * @memberof Twilio.Verify.V2.ServiceContext.MessagingConfigurationList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         each() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no pageSize is defined but a limit is defined,\n   *         each() will attempt to read the limit with the most efficient\n   *         page size, i.e. min(limit, 1000)\n   * @param {Function} [opts.callback] -\n   *         Function to process each record. If this and a positional\n   *         callback are passed, this one will be used\n   * @param {Function} [opts.done] -\n   *          Function to be called upon completion of streaming\n   * @param {Function} [callback] - Function to process each record\n   */\n\n  /* jshint ignore:end */\n\n\n  MessagingConfigurationListInstance.each = function each(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n\n    if (opts.callback) {\n      callback = opts.callback;\n    }\n\n    if (_.isUndefined(callback)) {\n      throw new Error('Callback function must be provided');\n    }\n\n    var done = false;\n    var currentPage = 1;\n    var currentResource = 0;\n\n    var limits = this._version.readLimits({\n      limit: opts.limit,\n      pageSize: opts.pageSize\n    });\n\n    function onComplete(error) {\n      done = true;\n\n      if (_.isFunction(opts.done)) {\n        opts.done(error);\n      }\n    }\n\n    function fetchNextPage(fn) {\n      var promise = fn();\n\n      if (_.isUndefined(promise)) {\n        onComplete();\n        return;\n      }\n\n      promise.then(function (page) {\n        _.each(page.instances, function (instance) {\n          if (done || !_.isUndefined(opts.limit) && currentResource >= opts.limit) {\n            done = true;\n            return false;\n          }\n\n          currentResource++;\n          callback(instance, onComplete);\n        });\n\n        if (!done) {\n          currentPage++;\n          fetchNextPage(_.bind(page.nextPage, page));\n        } else {\n          onComplete();\n        }\n      });\n      promise.catch(onComplete);\n    }\n\n    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Lists MessagingConfigurationInstance records from the API as a list.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function list\n   * @memberof Twilio.Verify.V2.ServiceContext.MessagingConfigurationList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         list() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no page_size is defined but a limit is defined,\n   *         list() will attempt to read the limit with the most\n   *         efficient page size, i.e. min(limit, 1000)\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  MessagingConfigurationListInstance.list = function list(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n    var deferred = Q.defer();\n    var allResources = [];\n\n    opts.callback = function (resource, done) {\n      allResources.push(resource);\n\n      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {\n        done();\n      }\n    };\n\n    opts.done = function (error) {\n      if (_.isUndefined(error)) {\n        deferred.resolve(allResources);\n      } else {\n        deferred.reject(error);\n      }\n    };\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    this.each(opts);\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Retrieve a single page of MessagingConfigurationInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function page\n   * @memberof Twilio.Verify.V2.ServiceContext.MessagingConfigurationList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.pageToken] - PageToken provided by the API\n   * @param {number} [opts.pageNumber] -\n   *          Page Number, this value is simply for client state\n   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  MessagingConfigurationListInstance.page = function page(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n    var deferred = Q.defer();\n    var data = values.of({\n      'PageToken': opts.pageToken,\n      'Page': opts.pageNumber,\n      'PageSize': opts.pageSize\n    });\n\n    var promise = this._version.page({\n      uri: this._uri,\n      method: 'GET',\n      params: data\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new MessagingConfigurationPage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Retrieve a single target page of MessagingConfigurationInstance records from the\n   * API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function getPage\n   * @memberof Twilio.Verify.V2.ServiceContext.MessagingConfigurationList#\n   *\n   * @param {string} [targetUrl] - API-generated URL for the requested results page\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  MessagingConfigurationListInstance.getPage = function getPage(targetUrl, callback) {\n    var deferred = Q.defer();\n\n    var promise = this._version._domain.twilio.request({\n      method: 'GET',\n      uri: targetUrl\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new MessagingConfigurationPage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Constructs a messaging_configuration\n   *\n   * @function get\n   * @memberof Twilio.Verify.V2.ServiceContext.MessagingConfigurationList#\n   *\n   * @param {string} country - The ISO-3166-1 country code of the country or `all`.\n   *\n   * @returns {Twilio.Verify.V2.ServiceContext.MessagingConfigurationContext}\n   */\n\n  /* jshint ignore:end */\n\n\n  MessagingConfigurationListInstance.get = function get(country) {\n    return new MessagingConfigurationContext(this._version, this._solution.serviceSid, country);\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Verify.V2.ServiceContext.MessagingConfigurationList#\n   *\n   * @returns Object\n   */\n\n  /* jshint ignore:end */\n\n\n  MessagingConfigurationListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n\n  MessagingConfigurationListInstance[util.inspect.custom] = function inspect(depth, options) {\n    return util.inspect(this.toJSON(), options);\n  };\n\n  return MessagingConfigurationListInstance;\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the MessagingConfigurationPage\n *\n * @constructor Twilio.Verify.V2.ServiceContext.MessagingConfigurationPage\n *\n * @param {V2} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {MessagingConfigurationSolution} solution - Path solution\n *\n * @returns MessagingConfigurationPage\n */\n\n/* jshint ignore:end */\n\n\nMessagingConfigurationPage = function MessagingConfigurationPage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n\n_.extend(MessagingConfigurationPage.prototype, Page.prototype);\n\nMessagingConfigurationPage.prototype.constructor = MessagingConfigurationPage;\n/* jshint ignore:start */\n\n/**\n * Build an instance of MessagingConfigurationInstance\n *\n * @function getInstance\n * @memberof Twilio.Verify.V2.ServiceContext.MessagingConfigurationPage#\n *\n * @param {MessagingConfigurationPayload} payload - Payload response from the API\n *\n * @returns MessagingConfigurationInstance\n */\n\n/* jshint ignore:end */\n\nMessagingConfigurationPage.prototype.getInstance = function getInstance(payload) {\n  return new MessagingConfigurationInstance(this._version, payload, this._solution.serviceSid);\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Verify.V2.ServiceContext.MessagingConfigurationPage#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nMessagingConfigurationPage.prototype.toJSON = function toJSON() {\n  let clone = {};\n\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n\n  return clone;\n};\n\nMessagingConfigurationPage.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the MessagingConfigurationContext\n *\n * @constructor Twilio.Verify.V2.ServiceContext.MessagingConfigurationInstance\n *\n * @property {string} accountSid - The SID of the Account that created the resource\n * @property {string} serviceSid -\n *          The SID of the Service that the resource is associated with\n * @property {string} country -\n *          The ISO-3166-1 country code of the country or `all`.\n * @property {string} messagingServiceSid -\n *          The SID of the Messaging Service used for this configuration.\n * @property {Date} dateCreated -\n *          The RFC 2822 date and time in GMT when the resource was created\n * @property {Date} dateUpdated -\n *          The RFC 2822 date and time in GMT when the resource was last updated\n * @property {string} url - The URL of this resource.\n *\n * @param {V2} version - Version of the resource\n * @param {MessagingConfigurationPayload} payload - The instance payload\n * @param {sid} serviceSid -\n *          The SID of the Service that the resource is associated with\n * @param {string} country - The ISO-3166-1 country code of the country or `all`.\n */\n\n/* jshint ignore:end */\n\n\nMessagingConfigurationInstance = function MessagingConfigurationInstance(version, payload, serviceSid, country) {\n  this._version = version; // Marshaled Properties\n\n  this.accountSid = payload.account_sid; // jshint ignore:line\n\n  this.serviceSid = payload.service_sid; // jshint ignore:line\n\n  this.country = payload.country; // jshint ignore:line\n\n  this.messagingServiceSid = payload.messaging_service_sid; // jshint ignore:line\n\n  this.dateCreated = deserialize.iso8601DateTime(payload.date_created); // jshint ignore:line\n\n  this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated); // jshint ignore:line\n\n  this.url = payload.url; // jshint ignore:line\n  // Context\n\n  this._context = undefined;\n  this._solution = {\n    serviceSid: serviceSid,\n    country: country || this.country\n  };\n};\n\nObject.defineProperty(MessagingConfigurationInstance.prototype, '_proxy', {\n  get: function () {\n    if (!this._context) {\n      this._context = new MessagingConfigurationContext(this._version, this._solution.serviceSid, this._solution.country);\n    }\n\n    return this._context;\n  }\n});\n/* jshint ignore:start */\n\n/**\n * update a MessagingConfigurationInstance\n *\n * @function update\n * @memberof Twilio.Verify.V2.ServiceContext.MessagingConfigurationInstance#\n *\n * @param {object} opts - Options for request\n * @param {string} opts.messagingServiceSid -\n *          The SID of the Messaging Service used for this configuration.\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed MessagingConfigurationInstance\n */\n\n/* jshint ignore:end */\n\nMessagingConfigurationInstance.prototype.update = function update(opts, callback) {\n  return this._proxy.update(opts, callback);\n};\n/* jshint ignore:start */\n\n/**\n * fetch a MessagingConfigurationInstance\n *\n * @function fetch\n * @memberof Twilio.Verify.V2.ServiceContext.MessagingConfigurationInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed MessagingConfigurationInstance\n */\n\n/* jshint ignore:end */\n\n\nMessagingConfigurationInstance.prototype.fetch = function fetch(callback) {\n  return this._proxy.fetch(callback);\n};\n/* jshint ignore:start */\n\n/**\n * remove a MessagingConfigurationInstance\n *\n * @function remove\n * @memberof Twilio.Verify.V2.ServiceContext.MessagingConfigurationInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed MessagingConfigurationInstance\n */\n\n/* jshint ignore:end */\n\n\nMessagingConfigurationInstance.prototype.remove = function remove(callback) {\n  return this._proxy.remove(callback);\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Verify.V2.ServiceContext.MessagingConfigurationInstance#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nMessagingConfigurationInstance.prototype.toJSON = function toJSON() {\n  let clone = {};\n\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n\n  return clone;\n};\n\nMessagingConfigurationInstance.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the MessagingConfigurationContext\n *\n * @constructor Twilio.Verify.V2.ServiceContext.MessagingConfigurationContext\n *\n * @param {V2} version - Version of the resource\n * @param {sid} serviceSid -\n *          The SID of the Service that the resource is associated with\n * @param {string} country - The ISO-3166-1 country code of the country or `all`.\n */\n\n/* jshint ignore:end */\n\n\nMessagingConfigurationContext = function MessagingConfigurationContext(version, serviceSid, country) {\n  this._version = version; // Path Solution\n\n  this._solution = {\n    serviceSid: serviceSid,\n    country: country\n  };\n  this._uri = `/Services/${serviceSid}/MessagingConfigurations/${country}`;\n};\n/* jshint ignore:start */\n\n/**\n * update a MessagingConfigurationInstance\n *\n * @function update\n * @memberof Twilio.Verify.V2.ServiceContext.MessagingConfigurationContext#\n *\n * @param {object} opts - Options for request\n * @param {string} opts.messagingServiceSid -\n *          The SID of the Messaging Service used for this configuration.\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed MessagingConfigurationInstance\n */\n\n/* jshint ignore:end */\n\n\nMessagingConfigurationContext.prototype.update = function update(opts, callback) {\n  if (_.isUndefined(opts)) {\n    throw new Error('Required parameter \"opts\" missing.');\n  }\n\n  if (_.isUndefined(opts['messagingServiceSid'])) {\n    throw new Error('Required parameter \"opts[\\'messagingServiceSid\\']\" missing.');\n  }\n\n  var deferred = Q.defer();\n  var data = values.of({\n    'MessagingServiceSid': _.get(opts, 'messagingServiceSid')\n  });\n\n  var promise = this._version.update({\n    uri: this._uri,\n    method: 'POST',\n    data: data\n  });\n\n  promise = promise.then(function (payload) {\n    deferred.resolve(new MessagingConfigurationInstance(this._version, payload, this._solution.serviceSid, this._solution.country));\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n/* jshint ignore:start */\n\n/**\n * fetch a MessagingConfigurationInstance\n *\n * @function fetch\n * @memberof Twilio.Verify.V2.ServiceContext.MessagingConfigurationContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed MessagingConfigurationInstance\n */\n\n/* jshint ignore:end */\n\n\nMessagingConfigurationContext.prototype.fetch = function fetch(callback) {\n  var deferred = Q.defer();\n\n  var promise = this._version.fetch({\n    uri: this._uri,\n    method: 'GET'\n  });\n\n  promise = promise.then(function (payload) {\n    deferred.resolve(new MessagingConfigurationInstance(this._version, payload, this._solution.serviceSid, this._solution.country));\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n/* jshint ignore:start */\n\n/**\n * remove a MessagingConfigurationInstance\n *\n * @function remove\n * @memberof Twilio.Verify.V2.ServiceContext.MessagingConfigurationContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed MessagingConfigurationInstance\n */\n\n/* jshint ignore:end */\n\n\nMessagingConfigurationContext.prototype.remove = function remove(callback) {\n  var deferred = Q.defer();\n\n  var promise = this._version.remove({\n    uri: this._uri,\n    method: 'DELETE'\n  });\n\n  promise = promise.then(function (payload) {\n    deferred.resolve(payload);\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Verify.V2.ServiceContext.MessagingConfigurationContext#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nMessagingConfigurationContext.prototype.toJSON = function toJSON() {\n  return this._solution;\n};\n\nMessagingConfigurationContext.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\nmodule.exports = {\n  MessagingConfigurationList: MessagingConfigurationList,\n  MessagingConfigurationPage: MessagingConfigurationPage,\n  MessagingConfigurationInstance: MessagingConfigurationInstance,\n  MessagingConfigurationContext: MessagingConfigurationContext\n};","map":{"version":3,"names":["Q","require","_","util","Page","deserialize","values","MessagingConfigurationList","MessagingConfigurationPage","MessagingConfigurationInstance","MessagingConfigurationContext","version","serviceSid","MessagingConfigurationListInstance","sid","get","_version","_solution","_uri","create","opts","callback","isUndefined","Error","deferred","defer","data","of","promise","uri","method","then","payload","resolve","country","bind","catch","error","reject","isFunction","nodeify","each","done","currentPage","currentResource","limits","readLimits","limit","pageSize","onComplete","fetchNextPage","fn","page","instances","instance","nextPage","merge","list","allResources","resource","push","length","pageToken","pageNumber","params","getPage","targetUrl","_domain","twilio","request","toJSON","inspect","custom","depth","options","response","solution","prototype","constructor","call","extend","getInstance","clone","forOwn","value","key","startsWith","accountSid","account_sid","service_sid","messagingServiceSid","messaging_service_sid","dateCreated","iso8601DateTime","date_created","dateUpdated","date_updated","url","_context","undefined","Object","defineProperty","update","_proxy","fetch","remove","module","exports"],"sources":["/Users/hooniesun/rmit/fwp/assessment1/lan/node_modules/twilio/lib/rest/verify/v2/service/messagingConfiguration.js"],"sourcesContent":["'use strict';\n\n/* jshint ignore:start */\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n/* jshint ignore:end */\n\nvar Q = require('q');  /* jshint ignore:line */\nvar _ = require('lodash');  /* jshint ignore:line */\nvar util = require('util');  /* jshint ignore:line */\nvar Page = require('../../../../base/Page');  /* jshint ignore:line */\nvar deserialize = require(\n    '../../../../base/deserialize');  /* jshint ignore:line */\nvar values = require('../../../../base/values');  /* jshint ignore:line */\n\nvar MessagingConfigurationList;\nvar MessagingConfigurationPage;\nvar MessagingConfigurationInstance;\nvar MessagingConfigurationContext;\n\n/* jshint ignore:start */\n/**\n * Initialize the MessagingConfigurationList\n *\n * @constructor Twilio.Verify.V2.ServiceContext.MessagingConfigurationList\n *\n * @param {Twilio.Verify.V2} version - Version of the resource\n * @param {string} serviceSid -\n *          The SID of the Service that the resource is associated with\n */\n/* jshint ignore:end */\nMessagingConfigurationList = function MessagingConfigurationList(version,\n    serviceSid) {\n  /* jshint ignore:start */\n  /**\n   * @function messagingConfigurations\n   * @memberof Twilio.Verify.V2.ServiceContext#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Verify.V2.ServiceContext.MessagingConfigurationContext}\n   */\n  /* jshint ignore:end */\n  function MessagingConfigurationListInstance(sid) {\n    return MessagingConfigurationListInstance.get(sid);\n  }\n\n  MessagingConfigurationListInstance._version = version;\n  // Path Solution\n  MessagingConfigurationListInstance._solution = {serviceSid: serviceSid};\n  MessagingConfigurationListInstance._uri = `/Services/${serviceSid}/MessagingConfigurations`;\n  /* jshint ignore:start */\n  /**\n   * create a MessagingConfigurationInstance\n   *\n   * @function create\n   * @memberof Twilio.Verify.V2.ServiceContext.MessagingConfigurationList#\n   *\n   * @param {object} opts - Options for request\n   * @param {string} opts.country -\n   *          The ISO-3166-1 country code of the country or `all`.\n   * @param {string} opts.messagingServiceSid -\n   *          The SID of the Messaging Service used for this configuration.\n   * @param {function} [callback] - Callback to handle processed record\n   *\n   * @returns {Promise} Resolves to processed MessagingConfigurationInstance\n   */\n  /* jshint ignore:end */\n  MessagingConfigurationListInstance.create = function create(opts, callback) {\n    if (_.isUndefined(opts)) {\n      throw new Error('Required parameter \"opts\" missing.');\n    }\n    if (_.isUndefined(opts['country'])) {\n      throw new Error('Required parameter \"opts[\\'country\\']\" missing.');\n    }\n    if (_.isUndefined(opts['messagingServiceSid'])) {\n      throw new Error('Required parameter \"opts[\\'messagingServiceSid\\']\" missing.');\n    }\n\n    var deferred = Q.defer();\n    var data = values.of({\n      'Country': _.get(opts, 'country'),\n      'MessagingServiceSid': _.get(opts, 'messagingServiceSid')\n    });\n\n    var promise = this._version.create({uri: this._uri, method: 'POST', data: data});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new MessagingConfigurationInstance(\n        this._version,\n        payload,\n        this._solution.serviceSid,\n        this._solution.country\n      ));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Streams MessagingConfigurationInstance records from the API.\n   *\n   * This operation lazily loads records as efficiently as possible until the limit\n   * is reached.\n   *\n   * The results are passed into the callback function, so this operation is memory\n   * efficient.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function each\n   * @memberof Twilio.Verify.V2.ServiceContext.MessagingConfigurationList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         each() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no pageSize is defined but a limit is defined,\n   *         each() will attempt to read the limit with the most efficient\n   *         page size, i.e. min(limit, 1000)\n   * @param {Function} [opts.callback] -\n   *         Function to process each record. If this and a positional\n   *         callback are passed, this one will be used\n   * @param {Function} [opts.done] -\n   *          Function to be called upon completion of streaming\n   * @param {Function} [callback] - Function to process each record\n   */\n  /* jshint ignore:end */\n  MessagingConfigurationListInstance.each = function each(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    if (opts.callback) {\n      callback = opts.callback;\n    }\n    if (_.isUndefined(callback)) {\n      throw new Error('Callback function must be provided');\n    }\n\n    var done = false;\n    var currentPage = 1;\n    var currentResource = 0;\n    var limits = this._version.readLimits({\n      limit: opts.limit,\n      pageSize: opts.pageSize\n    });\n\n    function onComplete(error) {\n      done = true;\n      if (_.isFunction(opts.done)) {\n        opts.done(error);\n      }\n    }\n\n    function fetchNextPage(fn) {\n      var promise = fn();\n      if (_.isUndefined(promise)) {\n        onComplete();\n        return;\n      }\n\n      promise.then(function(page) {\n        _.each(page.instances, function(instance) {\n          if (done || (!_.isUndefined(opts.limit) && currentResource >= opts.limit)) {\n            done = true;\n            return false;\n          }\n\n          currentResource++;\n          callback(instance, onComplete);\n        });\n\n        if (!done) {\n          currentPage++;\n          fetchNextPage(_.bind(page.nextPage, page));\n        } else {\n          onComplete();\n        }\n      });\n\n      promise.catch(onComplete);\n    }\n\n    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Lists MessagingConfigurationInstance records from the API as a list.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function list\n   * @memberof Twilio.Verify.V2.ServiceContext.MessagingConfigurationList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         list() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no page_size is defined but a limit is defined,\n   *         list() will attempt to read the limit with the most\n   *         efficient page size, i.e. min(limit, 1000)\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  MessagingConfigurationListInstance.list = function list(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    var deferred = Q.defer();\n    var allResources = [];\n    opts.callback = function(resource, done) {\n      allResources.push(resource);\n\n      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {\n        done();\n      }\n    };\n\n    opts.done = function(error) {\n      if (_.isUndefined(error)) {\n        deferred.resolve(allResources);\n      } else {\n        deferred.reject(error);\n      }\n    };\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    this.each(opts);\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single page of MessagingConfigurationInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function page\n   * @memberof Twilio.Verify.V2.ServiceContext.MessagingConfigurationList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.pageToken] - PageToken provided by the API\n   * @param {number} [opts.pageNumber] -\n   *          Page Number, this value is simply for client state\n   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  MessagingConfigurationListInstance.page = function page(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n\n    var deferred = Q.defer();\n    var data = values.of({\n      'PageToken': opts.pageToken,\n      'Page': opts.pageNumber,\n      'PageSize': opts.pageSize\n    });\n\n    var promise = this._version.page({uri: this._uri, method: 'GET', params: data});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new MessagingConfigurationPage(this._version, payload, this._solution));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single target page of MessagingConfigurationInstance records from the\n   * API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function getPage\n   * @memberof Twilio.Verify.V2.ServiceContext.MessagingConfigurationList#\n   *\n   * @param {string} [targetUrl] - API-generated URL for the requested results page\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  MessagingConfigurationListInstance.getPage = function getPage(targetUrl,\n      callback) {\n    var deferred = Q.defer();\n\n    var promise = this._version._domain.twilio.request({method: 'GET', uri: targetUrl});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new MessagingConfigurationPage(this._version, payload, this._solution));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Constructs a messaging_configuration\n   *\n   * @function get\n   * @memberof Twilio.Verify.V2.ServiceContext.MessagingConfigurationList#\n   *\n   * @param {string} country - The ISO-3166-1 country code of the country or `all`.\n   *\n   * @returns {Twilio.Verify.V2.ServiceContext.MessagingConfigurationContext}\n   */\n  /* jshint ignore:end */\n  MessagingConfigurationListInstance.get = function get(country) {\n    return new MessagingConfigurationContext(this._version, this._solution.serviceSid, country);\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Verify.V2.ServiceContext.MessagingConfigurationList#\n   *\n   * @returns Object\n   */\n  /* jshint ignore:end */\n  MessagingConfigurationListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n\n  MessagingConfigurationListInstance[util.inspect.custom] = function\n      inspect(depth, options) {\n    return util.inspect(this.toJSON(), options);\n  };\n\n  return MessagingConfigurationListInstance;\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the MessagingConfigurationPage\n *\n * @constructor Twilio.Verify.V2.ServiceContext.MessagingConfigurationPage\n *\n * @param {V2} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {MessagingConfigurationSolution} solution - Path solution\n *\n * @returns MessagingConfigurationPage\n */\n/* jshint ignore:end */\nMessagingConfigurationPage = function MessagingConfigurationPage(version,\n    response, solution) {\n  // Path Solution\n  this._solution = solution;\n\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n\n_.extend(MessagingConfigurationPage.prototype, Page.prototype);\nMessagingConfigurationPage.prototype.constructor = MessagingConfigurationPage;\n\n/* jshint ignore:start */\n/**\n * Build an instance of MessagingConfigurationInstance\n *\n * @function getInstance\n * @memberof Twilio.Verify.V2.ServiceContext.MessagingConfigurationPage#\n *\n * @param {MessagingConfigurationPayload} payload - Payload response from the API\n *\n * @returns MessagingConfigurationInstance\n */\n/* jshint ignore:end */\nMessagingConfigurationPage.prototype.getInstance = function getInstance(payload)\n    {\n  return new MessagingConfigurationInstance(this._version, payload, this._solution.serviceSid);\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Verify.V2.ServiceContext.MessagingConfigurationPage#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nMessagingConfigurationPage.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function(value, key) {\n    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\n\nMessagingConfigurationPage.prototype[util.inspect.custom] = function\n    inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the MessagingConfigurationContext\n *\n * @constructor Twilio.Verify.V2.ServiceContext.MessagingConfigurationInstance\n *\n * @property {string} accountSid - The SID of the Account that created the resource\n * @property {string} serviceSid -\n *          The SID of the Service that the resource is associated with\n * @property {string} country -\n *          The ISO-3166-1 country code of the country or `all`.\n * @property {string} messagingServiceSid -\n *          The SID of the Messaging Service used for this configuration.\n * @property {Date} dateCreated -\n *          The RFC 2822 date and time in GMT when the resource was created\n * @property {Date} dateUpdated -\n *          The RFC 2822 date and time in GMT when the resource was last updated\n * @property {string} url - The URL of this resource.\n *\n * @param {V2} version - Version of the resource\n * @param {MessagingConfigurationPayload} payload - The instance payload\n * @param {sid} serviceSid -\n *          The SID of the Service that the resource is associated with\n * @param {string} country - The ISO-3166-1 country code of the country or `all`.\n */\n/* jshint ignore:end */\nMessagingConfigurationInstance = function\n    MessagingConfigurationInstance(version, payload, serviceSid, country) {\n  this._version = version;\n\n  // Marshaled Properties\n  this.accountSid = payload.account_sid; // jshint ignore:line\n  this.serviceSid = payload.service_sid; // jshint ignore:line\n  this.country = payload.country; // jshint ignore:line\n  this.messagingServiceSid = payload.messaging_service_sid; // jshint ignore:line\n  this.dateCreated = deserialize.iso8601DateTime(payload.date_created); // jshint ignore:line\n  this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated); // jshint ignore:line\n  this.url = payload.url; // jshint ignore:line\n\n  // Context\n  this._context = undefined;\n  this._solution = {serviceSid: serviceSid, country: country || this.country, };\n};\n\nObject.defineProperty(MessagingConfigurationInstance.prototype,\n  '_proxy', {\n    get: function() {\n      if (!this._context) {\n        this._context = new MessagingConfigurationContext(\n          this._version,\n          this._solution.serviceSid,\n          this._solution.country\n        );\n      }\n\n      return this._context;\n    }\n});\n\n/* jshint ignore:start */\n/**\n * update a MessagingConfigurationInstance\n *\n * @function update\n * @memberof Twilio.Verify.V2.ServiceContext.MessagingConfigurationInstance#\n *\n * @param {object} opts - Options for request\n * @param {string} opts.messagingServiceSid -\n *          The SID of the Messaging Service used for this configuration.\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed MessagingConfigurationInstance\n */\n/* jshint ignore:end */\nMessagingConfigurationInstance.prototype.update = function update(opts,\n    callback) {\n  return this._proxy.update(opts, callback);\n};\n\n/* jshint ignore:start */\n/**\n * fetch a MessagingConfigurationInstance\n *\n * @function fetch\n * @memberof Twilio.Verify.V2.ServiceContext.MessagingConfigurationInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed MessagingConfigurationInstance\n */\n/* jshint ignore:end */\nMessagingConfigurationInstance.prototype.fetch = function fetch(callback) {\n  return this._proxy.fetch(callback);\n};\n\n/* jshint ignore:start */\n/**\n * remove a MessagingConfigurationInstance\n *\n * @function remove\n * @memberof Twilio.Verify.V2.ServiceContext.MessagingConfigurationInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed MessagingConfigurationInstance\n */\n/* jshint ignore:end */\nMessagingConfigurationInstance.prototype.remove = function remove(callback) {\n  return this._proxy.remove(callback);\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Verify.V2.ServiceContext.MessagingConfigurationInstance#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nMessagingConfigurationInstance.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function(value, key) {\n    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\n\nMessagingConfigurationInstance.prototype[util.inspect.custom] = function\n    inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the MessagingConfigurationContext\n *\n * @constructor Twilio.Verify.V2.ServiceContext.MessagingConfigurationContext\n *\n * @param {V2} version - Version of the resource\n * @param {sid} serviceSid -\n *          The SID of the Service that the resource is associated with\n * @param {string} country - The ISO-3166-1 country code of the country or `all`.\n */\n/* jshint ignore:end */\nMessagingConfigurationContext = function MessagingConfigurationContext(version,\n    serviceSid, country) {\n  this._version = version;\n\n  // Path Solution\n  this._solution = {serviceSid: serviceSid, country: country, };\n  this._uri = `/Services/${serviceSid}/MessagingConfigurations/${country}`;\n};\n\n/* jshint ignore:start */\n/**\n * update a MessagingConfigurationInstance\n *\n * @function update\n * @memberof Twilio.Verify.V2.ServiceContext.MessagingConfigurationContext#\n *\n * @param {object} opts - Options for request\n * @param {string} opts.messagingServiceSid -\n *          The SID of the Messaging Service used for this configuration.\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed MessagingConfigurationInstance\n */\n/* jshint ignore:end */\nMessagingConfigurationContext.prototype.update = function update(opts, callback)\n    {\n  if (_.isUndefined(opts)) {\n    throw new Error('Required parameter \"opts\" missing.');\n  }\n  if (_.isUndefined(opts['messagingServiceSid'])) {\n    throw new Error('Required parameter \"opts[\\'messagingServiceSid\\']\" missing.');\n  }\n\n  var deferred = Q.defer();\n  var data = values.of({'MessagingServiceSid': _.get(opts, 'messagingServiceSid')});\n\n  var promise = this._version.update({uri: this._uri, method: 'POST', data: data});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(new MessagingConfigurationInstance(\n      this._version,\n      payload,\n      this._solution.serviceSid,\n      this._solution.country\n    ));\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * fetch a MessagingConfigurationInstance\n *\n * @function fetch\n * @memberof Twilio.Verify.V2.ServiceContext.MessagingConfigurationContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed MessagingConfigurationInstance\n */\n/* jshint ignore:end */\nMessagingConfigurationContext.prototype.fetch = function fetch(callback) {\n  var deferred = Q.defer();\n  var promise = this._version.fetch({uri: this._uri, method: 'GET'});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(new MessagingConfigurationInstance(\n      this._version,\n      payload,\n      this._solution.serviceSid,\n      this._solution.country\n    ));\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * remove a MessagingConfigurationInstance\n *\n * @function remove\n * @memberof Twilio.Verify.V2.ServiceContext.MessagingConfigurationContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed MessagingConfigurationInstance\n */\n/* jshint ignore:end */\nMessagingConfigurationContext.prototype.remove = function remove(callback) {\n  var deferred = Q.defer();\n  var promise = this._version.remove({uri: this._uri, method: 'DELETE'});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(payload);\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Verify.V2.ServiceContext.MessagingConfigurationContext#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nMessagingConfigurationContext.prototype.toJSON = function toJSON() {\n  return this._solution;\n};\n\nMessagingConfigurationContext.prototype[util.inspect.custom] = function\n    inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\nmodule.exports = {\n  MessagingConfigurationList: MessagingConfigurationList,\n  MessagingConfigurationPage: MessagingConfigurationPage,\n  MessagingConfigurationInstance: MessagingConfigurationInstance,\n  MessagingConfigurationContext: MessagingConfigurationContext\n};\n"],"mappings":"AAAA;AAEA;;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;;AAEA,IAAIA,CAAC,GAAGC,OAAO,CAAC,GAAD,CAAf;AAAuB;;;AACvB,IAAIC,CAAC,GAAGD,OAAO,CAAC,QAAD,CAAf;AAA4B;;;AAC5B,IAAIE,IAAI,GAAGF,OAAO,CAAC,MAAD,CAAlB;AAA6B;;;AAC7B,IAAIG,IAAI,GAAGH,OAAO,CAAC,uBAAD,CAAlB;AAA8C;;;AAC9C,IAAII,WAAW,GAAGJ,OAAO,CACrB,8BADqB,CAAzB;AACsC;;;AACtC,IAAIK,MAAM,GAAGL,OAAO,CAAC,yBAAD,CAApB;AAAkD;;;AAElD,IAAIM,0BAAJ;AACA,IAAIC,0BAAJ;AACA,IAAIC,8BAAJ;AACA,IAAIC,6BAAJ;AAEA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;;AACAH,0BAA0B,GAAG,SAASA,0BAAT,CAAoCI,OAApC,EACzBC,UADyB,EACb;EACd;;EACA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;;EACE;EACA,SAASC,kCAAT,CAA4CC,GAA5C,EAAiD;IAC/C,OAAOD,kCAAkC,CAACE,GAAnC,CAAuCD,GAAvC,CAAP;EACD;;EAEDD,kCAAkC,CAACG,QAAnC,GAA8CL,OAA9C,CAfc,CAgBd;;EACAE,kCAAkC,CAACI,SAAnC,GAA+C;IAACL,UAAU,EAAEA;EAAb,CAA/C;EACAC,kCAAkC,CAACK,IAAnC,GAA2C,aAAYN,UAAW,0BAAlE;EACA;;EACA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EACE;;EACAC,kCAAkC,CAACM,MAAnC,GAA4C,SAASA,MAAT,CAAgBC,IAAhB,EAAsBC,QAAtB,EAAgC;IAC1E,IAAInB,CAAC,CAACoB,WAAF,CAAcF,IAAd,CAAJ,EAAyB;MACvB,MAAM,IAAIG,KAAJ,CAAU,oCAAV,CAAN;IACD;;IACD,IAAIrB,CAAC,CAACoB,WAAF,CAAcF,IAAI,CAAC,SAAD,CAAlB,CAAJ,EAAoC;MAClC,MAAM,IAAIG,KAAJ,CAAU,iDAAV,CAAN;IACD;;IACD,IAAIrB,CAAC,CAACoB,WAAF,CAAcF,IAAI,CAAC,qBAAD,CAAlB,CAAJ,EAAgD;MAC9C,MAAM,IAAIG,KAAJ,CAAU,6DAAV,CAAN;IACD;;IAED,IAAIC,QAAQ,GAAGxB,CAAC,CAACyB,KAAF,EAAf;IACA,IAAIC,IAAI,GAAGpB,MAAM,CAACqB,EAAP,CAAU;MACnB,WAAWzB,CAAC,CAACa,GAAF,CAAMK,IAAN,EAAY,SAAZ,CADQ;MAEnB,uBAAuBlB,CAAC,CAACa,GAAF,CAAMK,IAAN,EAAY,qBAAZ;IAFJ,CAAV,CAAX;;IAKA,IAAIQ,OAAO,GAAG,KAAKZ,QAAL,CAAcG,MAAd,CAAqB;MAACU,GAAG,EAAE,KAAKX,IAAX;MAAiBY,MAAM,EAAE,MAAzB;MAAiCJ,IAAI,EAAEA;IAAvC,CAArB,CAAd;;IAEAE,OAAO,GAAGA,OAAO,CAACG,IAAR,CAAa,UAASC,OAAT,EAAkB;MACvCR,QAAQ,CAACS,OAAT,CAAiB,IAAIxB,8BAAJ,CACf,KAAKO,QADU,EAEfgB,OAFe,EAGf,KAAKf,SAAL,CAAeL,UAHA,EAIf,KAAKK,SAAL,CAAeiB,OAJA,CAAjB;IAMD,CAPsB,CAOrBC,IAPqB,CAOhB,IAPgB,CAAb,CAAV;IASAP,OAAO,CAACQ,KAAR,CAAc,UAASC,KAAT,EAAgB;MAC5Bb,QAAQ,CAACc,MAAT,CAAgBD,KAAhB;IACD,CAFD;;IAIA,IAAInC,CAAC,CAACqC,UAAF,CAAalB,QAAb,CAAJ,EAA4B;MAC1BG,QAAQ,CAACI,OAAT,CAAiBY,OAAjB,CAAyBnB,QAAzB;IACD;;IAED,OAAOG,QAAQ,CAACI,OAAhB;EACD,CArCD;EAuCA;;EACA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EACE;;;EACAf,kCAAkC,CAAC4B,IAAnC,GAA0C,SAASA,IAAT,CAAcrB,IAAd,EAAoBC,QAApB,EAA8B;IACtE,IAAInB,CAAC,CAACqC,UAAF,CAAanB,IAAb,CAAJ,EAAwB;MACtBC,QAAQ,GAAGD,IAAX;MACAA,IAAI,GAAG,EAAP;IACD;;IACDA,IAAI,GAAGA,IAAI,IAAI,EAAf;;IACA,IAAIA,IAAI,CAACC,QAAT,EAAmB;MACjBA,QAAQ,GAAGD,IAAI,CAACC,QAAhB;IACD;;IACD,IAAInB,CAAC,CAACoB,WAAF,CAAcD,QAAd,CAAJ,EAA6B;MAC3B,MAAM,IAAIE,KAAJ,CAAU,oCAAV,CAAN;IACD;;IAED,IAAImB,IAAI,GAAG,KAAX;IACA,IAAIC,WAAW,GAAG,CAAlB;IACA,IAAIC,eAAe,GAAG,CAAtB;;IACA,IAAIC,MAAM,GAAG,KAAK7B,QAAL,CAAc8B,UAAd,CAAyB;MACpCC,KAAK,EAAE3B,IAAI,CAAC2B,KADwB;MAEpCC,QAAQ,EAAE5B,IAAI,CAAC4B;IAFqB,CAAzB,CAAb;;IAKA,SAASC,UAAT,CAAoBZ,KAApB,EAA2B;MACzBK,IAAI,GAAG,IAAP;;MACA,IAAIxC,CAAC,CAACqC,UAAF,CAAanB,IAAI,CAACsB,IAAlB,CAAJ,EAA6B;QAC3BtB,IAAI,CAACsB,IAAL,CAAUL,KAAV;MACD;IACF;;IAED,SAASa,aAAT,CAAuBC,EAAvB,EAA2B;MACzB,IAAIvB,OAAO,GAAGuB,EAAE,EAAhB;;MACA,IAAIjD,CAAC,CAACoB,WAAF,CAAcM,OAAd,CAAJ,EAA4B;QAC1BqB,UAAU;QACV;MACD;;MAEDrB,OAAO,CAACG,IAAR,CAAa,UAASqB,IAAT,EAAe;QAC1BlD,CAAC,CAACuC,IAAF,CAAOW,IAAI,CAACC,SAAZ,EAAuB,UAASC,QAAT,EAAmB;UACxC,IAAIZ,IAAI,IAAK,CAACxC,CAAC,CAACoB,WAAF,CAAcF,IAAI,CAAC2B,KAAnB,CAAD,IAA8BH,eAAe,IAAIxB,IAAI,CAAC2B,KAAnE,EAA2E;YACzEL,IAAI,GAAG,IAAP;YACA,OAAO,KAAP;UACD;;UAEDE,eAAe;UACfvB,QAAQ,CAACiC,QAAD,EAAWL,UAAX,CAAR;QACD,CARD;;QAUA,IAAI,CAACP,IAAL,EAAW;UACTC,WAAW;UACXO,aAAa,CAAChD,CAAC,CAACiC,IAAF,CAAOiB,IAAI,CAACG,QAAZ,EAAsBH,IAAtB,CAAD,CAAb;QACD,CAHD,MAGO;UACLH,UAAU;QACX;MACF,CAjBD;MAmBArB,OAAO,CAACQ,KAAR,CAAca,UAAd;IACD;;IAEDC,aAAa,CAAChD,CAAC,CAACiC,IAAF,CAAO,KAAKiB,IAAZ,EAAkB,IAAlB,EAAwBlD,CAAC,CAACsD,KAAF,CAAQpC,IAAR,EAAcyB,MAAd,CAAxB,CAAD,CAAb;EACD,CA1DD;EA4DA;;EACA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EACE;;;EACAhC,kCAAkC,CAAC4C,IAAnC,GAA0C,SAASA,IAAT,CAAcrC,IAAd,EAAoBC,QAApB,EAA8B;IACtE,IAAInB,CAAC,CAACqC,UAAF,CAAanB,IAAb,CAAJ,EAAwB;MACtBC,QAAQ,GAAGD,IAAX;MACAA,IAAI,GAAG,EAAP;IACD;;IACDA,IAAI,GAAGA,IAAI,IAAI,EAAf;IACA,IAAII,QAAQ,GAAGxB,CAAC,CAACyB,KAAF,EAAf;IACA,IAAIiC,YAAY,GAAG,EAAnB;;IACAtC,IAAI,CAACC,QAAL,GAAgB,UAASsC,QAAT,EAAmBjB,IAAnB,EAAyB;MACvCgB,YAAY,CAACE,IAAb,CAAkBD,QAAlB;;MAEA,IAAI,CAACzD,CAAC,CAACoB,WAAF,CAAcF,IAAI,CAAC2B,KAAnB,CAAD,IAA8BW,YAAY,CAACG,MAAb,KAAwBzC,IAAI,CAAC2B,KAA/D,EAAsE;QACpEL,IAAI;MACL;IACF,CAND;;IAQAtB,IAAI,CAACsB,IAAL,GAAY,UAASL,KAAT,EAAgB;MAC1B,IAAInC,CAAC,CAACoB,WAAF,CAAce,KAAd,CAAJ,EAA0B;QACxBb,QAAQ,CAACS,OAAT,CAAiByB,YAAjB;MACD,CAFD,MAEO;QACLlC,QAAQ,CAACc,MAAT,CAAgBD,KAAhB;MACD;IACF,CAND;;IAQA,IAAInC,CAAC,CAACqC,UAAF,CAAalB,QAAb,CAAJ,EAA4B;MAC1BG,QAAQ,CAACI,OAAT,CAAiBY,OAAjB,CAAyBnB,QAAzB;IACD;;IAED,KAAKoB,IAAL,CAAUrB,IAAV;IACA,OAAOI,QAAQ,CAACI,OAAhB;EACD,CA9BD;EAgCA;;EACA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EACE;;;EACAf,kCAAkC,CAACuC,IAAnC,GAA0C,SAASA,IAAT,CAAchC,IAAd,EAAoBC,QAApB,EAA8B;IACtE,IAAInB,CAAC,CAACqC,UAAF,CAAanB,IAAb,CAAJ,EAAwB;MACtBC,QAAQ,GAAGD,IAAX;MACAA,IAAI,GAAG,EAAP;IACD;;IACDA,IAAI,GAAGA,IAAI,IAAI,EAAf;IAEA,IAAII,QAAQ,GAAGxB,CAAC,CAACyB,KAAF,EAAf;IACA,IAAIC,IAAI,GAAGpB,MAAM,CAACqB,EAAP,CAAU;MACnB,aAAaP,IAAI,CAAC0C,SADC;MAEnB,QAAQ1C,IAAI,CAAC2C,UAFM;MAGnB,YAAY3C,IAAI,CAAC4B;IAHE,CAAV,CAAX;;IAMA,IAAIpB,OAAO,GAAG,KAAKZ,QAAL,CAAcoC,IAAd,CAAmB;MAACvB,GAAG,EAAE,KAAKX,IAAX;MAAiBY,MAAM,EAAE,KAAzB;MAAgCkC,MAAM,EAAEtC;IAAxC,CAAnB,CAAd;;IAEAE,OAAO,GAAGA,OAAO,CAACG,IAAR,CAAa,UAASC,OAAT,EAAkB;MACvCR,QAAQ,CAACS,OAAT,CAAiB,IAAIzB,0BAAJ,CAA+B,KAAKQ,QAApC,EAA8CgB,OAA9C,EAAuD,KAAKf,SAA5D,CAAjB;IACD,CAFsB,CAErBkB,IAFqB,CAEhB,IAFgB,CAAb,CAAV;IAIAP,OAAO,CAACQ,KAAR,CAAc,UAASC,KAAT,EAAgB;MAC5Bb,QAAQ,CAACc,MAAT,CAAgBD,KAAhB;IACD,CAFD;;IAIA,IAAInC,CAAC,CAACqC,UAAF,CAAalB,QAAb,CAAJ,EAA4B;MAC1BG,QAAQ,CAACI,OAAT,CAAiBY,OAAjB,CAAyBnB,QAAzB;IACD;;IAED,OAAOG,QAAQ,CAACI,OAAhB;EACD,CA7BD;EA+BA;;EACA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EACE;;;EACAf,kCAAkC,CAACoD,OAAnC,GAA6C,SAASA,OAAT,CAAiBC,SAAjB,EACzC7C,QADyC,EAC/B;IACZ,IAAIG,QAAQ,GAAGxB,CAAC,CAACyB,KAAF,EAAf;;IAEA,IAAIG,OAAO,GAAG,KAAKZ,QAAL,CAAcmD,OAAd,CAAsBC,MAAtB,CAA6BC,OAA7B,CAAqC;MAACvC,MAAM,EAAE,KAAT;MAAgBD,GAAG,EAAEqC;IAArB,CAArC,CAAd;;IAEAtC,OAAO,GAAGA,OAAO,CAACG,IAAR,CAAa,UAASC,OAAT,EAAkB;MACvCR,QAAQ,CAACS,OAAT,CAAiB,IAAIzB,0BAAJ,CAA+B,KAAKQ,QAApC,EAA8CgB,OAA9C,EAAuD,KAAKf,SAA5D,CAAjB;IACD,CAFsB,CAErBkB,IAFqB,CAEhB,IAFgB,CAAb,CAAV;IAIAP,OAAO,CAACQ,KAAR,CAAc,UAASC,KAAT,EAAgB;MAC5Bb,QAAQ,CAACc,MAAT,CAAgBD,KAAhB;IACD,CAFD;;IAIA,IAAInC,CAAC,CAACqC,UAAF,CAAalB,QAAb,CAAJ,EAA4B;MAC1BG,QAAQ,CAACI,OAAT,CAAiBY,OAAjB,CAAyBnB,QAAzB;IACD;;IAED,OAAOG,QAAQ,CAACI,OAAhB;EACD,CAnBD;EAqBA;;EACA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EACE;;;EACAf,kCAAkC,CAACE,GAAnC,GAAyC,SAASA,GAAT,CAAamB,OAAb,EAAsB;IAC7D,OAAO,IAAIxB,6BAAJ,CAAkC,KAAKM,QAAvC,EAAiD,KAAKC,SAAL,CAAeL,UAAhE,EAA4EsB,OAA5E,CAAP;EACD,CAFD;EAIA;;EACA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;;EACE;;;EACArB,kCAAkC,CAACyD,MAAnC,GAA4C,SAASA,MAAT,GAAkB;IAC5D,OAAO,KAAKrD,SAAZ;EACD,CAFD;;EAIAJ,kCAAkC,CAACV,IAAI,CAACoE,OAAL,CAAaC,MAAd,CAAlC,GAA0D,SACtDD,OADsD,CAC9CE,KAD8C,EACvCC,OADuC,EAC9B;IAC1B,OAAOvE,IAAI,CAACoE,OAAL,CAAa,KAAKD,MAAL,EAAb,EAA4BI,OAA5B,CAAP;EACD,CAHD;;EAKA,OAAO7D,kCAAP;AACD,CAtWD;AAyWA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;;;AACAL,0BAA0B,GAAG,SAASA,0BAAT,CAAoCG,OAApC,EACzBgE,QADyB,EACfC,QADe,EACL;EACtB;EACA,KAAK3D,SAAL,GAAiB2D,QAAjB;EAEAxE,IAAI,CAACyE,SAAL,CAAeC,WAAf,CAA2BC,IAA3B,CAAgC,IAAhC,EAAsCpE,OAAtC,EAA+CgE,QAA/C,EAAyD,KAAK1D,SAA9D;AACD,CAND;;AAQAf,CAAC,CAAC8E,MAAF,CAASxE,0BAA0B,CAACqE,SAApC,EAA+CzE,IAAI,CAACyE,SAApD;;AACArE,0BAA0B,CAACqE,SAA3B,CAAqCC,WAArC,GAAmDtE,0BAAnD;AAEA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;;AACAA,0BAA0B,CAACqE,SAA3B,CAAqCI,WAArC,GAAmD,SAASA,WAAT,CAAqBjD,OAArB,EAC/C;EACF,OAAO,IAAIvB,8BAAJ,CAAmC,KAAKO,QAAxC,EAAkDgB,OAAlD,EAA2D,KAAKf,SAAL,CAAeL,UAA1E,CAAP;AACD,CAHD;AAKA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;;;AACAJ,0BAA0B,CAACqE,SAA3B,CAAqCP,MAArC,GAA8C,SAASA,MAAT,GAAkB;EAC9D,IAAIY,KAAK,GAAG,EAAZ;;EACAhF,CAAC,CAACiF,MAAF,CAAS,IAAT,EAAe,UAASC,KAAT,EAAgBC,GAAhB,EAAqB;IAClC,IAAI,CAACnF,CAAC,CAACoF,UAAF,CAAaD,GAAb,EAAkB,GAAlB,CAAD,IAA2B,CAAEnF,CAAC,CAACqC,UAAF,CAAa6C,KAAb,CAAjC,EAAsD;MACpDF,KAAK,CAACG,GAAD,CAAL,GAAaD,KAAb;IACD;EACF,CAJD;;EAKA,OAAOF,KAAP;AACD,CARD;;AAUA1E,0BAA0B,CAACqE,SAA3B,CAAqC1E,IAAI,CAACoE,OAAL,CAAaC,MAAlD,IAA4D,SACxDD,OADwD,CAChDE,KADgD,EACzCC,OADyC,EAChC;EAC1B,OAAOvE,IAAI,CAACoE,OAAL,CAAa,KAAKD,MAAL,EAAb,EAA4BI,OAA5B,CAAP;AACD,CAHD;AAMA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;;;AACAjE,8BAA8B,GAAG,SAC7BA,8BAD6B,CACEE,OADF,EACWqB,OADX,EACoBpB,UADpB,EACgCsB,OADhC,EACyC;EACxE,KAAKlB,QAAL,GAAgBL,OAAhB,CADwE,CAGxE;;EACA,KAAK4E,UAAL,GAAkBvD,OAAO,CAACwD,WAA1B,CAJwE,CAIjC;;EACvC,KAAK5E,UAAL,GAAkBoB,OAAO,CAACyD,WAA1B,CALwE,CAKjC;;EACvC,KAAKvD,OAAL,GAAeF,OAAO,CAACE,OAAvB,CANwE,CAMxC;;EAChC,KAAKwD,mBAAL,GAA2B1D,OAAO,CAAC2D,qBAAnC,CAPwE,CAOd;;EAC1D,KAAKC,WAAL,GAAmBvF,WAAW,CAACwF,eAAZ,CAA4B7D,OAAO,CAAC8D,YAApC,CAAnB,CARwE,CAQF;;EACtE,KAAKC,WAAL,GAAmB1F,WAAW,CAACwF,eAAZ,CAA4B7D,OAAO,CAACgE,YAApC,CAAnB,CATwE,CASF;;EACtE,KAAKC,GAAL,GAAWjE,OAAO,CAACiE,GAAnB,CAVwE,CAUhD;EAExB;;EACA,KAAKC,QAAL,GAAgBC,SAAhB;EACA,KAAKlF,SAAL,GAAiB;IAACL,UAAU,EAAEA,UAAb;IAAyBsB,OAAO,EAAEA,OAAO,IAAI,KAAKA;EAAlD,CAAjB;AACD,CAhBD;;AAkBAkE,MAAM,CAACC,cAAP,CAAsB5F,8BAA8B,CAACoE,SAArD,EACE,QADF,EACY;EACR9D,GAAG,EAAE,YAAW;IACd,IAAI,CAAC,KAAKmF,QAAV,EAAoB;MAClB,KAAKA,QAAL,GAAgB,IAAIxF,6BAAJ,CACd,KAAKM,QADS,EAEd,KAAKC,SAAL,CAAeL,UAFD,EAGd,KAAKK,SAAL,CAAeiB,OAHD,CAAhB;IAKD;;IAED,OAAO,KAAKgE,QAAZ;EACD;AAXO,CADZ;AAeA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;;AACAzF,8BAA8B,CAACoE,SAA/B,CAAyCyB,MAAzC,GAAkD,SAASA,MAAT,CAAgBlF,IAAhB,EAC9CC,QAD8C,EACpC;EACZ,OAAO,KAAKkF,MAAL,CAAYD,MAAZ,CAAmBlF,IAAnB,EAAyBC,QAAzB,CAAP;AACD,CAHD;AAKA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;;;AACAZ,8BAA8B,CAACoE,SAA/B,CAAyC2B,KAAzC,GAAiD,SAASA,KAAT,CAAenF,QAAf,EAAyB;EACxE,OAAO,KAAKkF,MAAL,CAAYC,KAAZ,CAAkBnF,QAAlB,CAAP;AACD,CAFD;AAIA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;;;AACAZ,8BAA8B,CAACoE,SAA/B,CAAyC4B,MAAzC,GAAkD,SAASA,MAAT,CAAgBpF,QAAhB,EAA0B;EAC1E,OAAO,KAAKkF,MAAL,CAAYE,MAAZ,CAAmBpF,QAAnB,CAAP;AACD,CAFD;AAIA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;;;AACAZ,8BAA8B,CAACoE,SAA/B,CAAyCP,MAAzC,GAAkD,SAASA,MAAT,GAAkB;EAClE,IAAIY,KAAK,GAAG,EAAZ;;EACAhF,CAAC,CAACiF,MAAF,CAAS,IAAT,EAAe,UAASC,KAAT,EAAgBC,GAAhB,EAAqB;IAClC,IAAI,CAACnF,CAAC,CAACoF,UAAF,CAAaD,GAAb,EAAkB,GAAlB,CAAD,IAA2B,CAAEnF,CAAC,CAACqC,UAAF,CAAa6C,KAAb,CAAjC,EAAsD;MACpDF,KAAK,CAACG,GAAD,CAAL,GAAaD,KAAb;IACD;EACF,CAJD;;EAKA,OAAOF,KAAP;AACD,CARD;;AAUAzE,8BAA8B,CAACoE,SAA/B,CAAyC1E,IAAI,CAACoE,OAAL,CAAaC,MAAtD,IAAgE,SAC5DD,OAD4D,CACpDE,KADoD,EAC7CC,OAD6C,EACpC;EAC1B,OAAOvE,IAAI,CAACoE,OAAL,CAAa,KAAKD,MAAL,EAAb,EAA4BI,OAA5B,CAAP;AACD,CAHD;AAMA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;;;AACAhE,6BAA6B,GAAG,SAASA,6BAAT,CAAuCC,OAAvC,EAC5BC,UAD4B,EAChBsB,OADgB,EACP;EACvB,KAAKlB,QAAL,GAAgBL,OAAhB,CADuB,CAGvB;;EACA,KAAKM,SAAL,GAAiB;IAACL,UAAU,EAAEA,UAAb;IAAyBsB,OAAO,EAAEA;EAAlC,CAAjB;EACA,KAAKhB,IAAL,GAAa,aAAYN,UAAW,4BAA2BsB,OAAQ,EAAvE;AACD,CAPD;AASA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;;;AACAxB,6BAA6B,CAACmE,SAA9B,CAAwCyB,MAAxC,GAAiD,SAASA,MAAT,CAAgBlF,IAAhB,EAAsBC,QAAtB,EAC7C;EACF,IAAInB,CAAC,CAACoB,WAAF,CAAcF,IAAd,CAAJ,EAAyB;IACvB,MAAM,IAAIG,KAAJ,CAAU,oCAAV,CAAN;EACD;;EACD,IAAIrB,CAAC,CAACoB,WAAF,CAAcF,IAAI,CAAC,qBAAD,CAAlB,CAAJ,EAAgD;IAC9C,MAAM,IAAIG,KAAJ,CAAU,6DAAV,CAAN;EACD;;EAED,IAAIC,QAAQ,GAAGxB,CAAC,CAACyB,KAAF,EAAf;EACA,IAAIC,IAAI,GAAGpB,MAAM,CAACqB,EAAP,CAAU;IAAC,uBAAuBzB,CAAC,CAACa,GAAF,CAAMK,IAAN,EAAY,qBAAZ;EAAxB,CAAV,CAAX;;EAEA,IAAIQ,OAAO,GAAG,KAAKZ,QAAL,CAAcsF,MAAd,CAAqB;IAACzE,GAAG,EAAE,KAAKX,IAAX;IAAiBY,MAAM,EAAE,MAAzB;IAAiCJ,IAAI,EAAEA;EAAvC,CAArB,CAAd;;EAEAE,OAAO,GAAGA,OAAO,CAACG,IAAR,CAAa,UAASC,OAAT,EAAkB;IACvCR,QAAQ,CAACS,OAAT,CAAiB,IAAIxB,8BAAJ,CACf,KAAKO,QADU,EAEfgB,OAFe,EAGf,KAAKf,SAAL,CAAeL,UAHA,EAIf,KAAKK,SAAL,CAAeiB,OAJA,CAAjB;EAMD,CAPsB,CAOrBC,IAPqB,CAOhB,IAPgB,CAAb,CAAV;EASAP,OAAO,CAACQ,KAAR,CAAc,UAASC,KAAT,EAAgB;IAC5Bb,QAAQ,CAACc,MAAT,CAAgBD,KAAhB;EACD,CAFD;;EAIA,IAAInC,CAAC,CAACqC,UAAF,CAAalB,QAAb,CAAJ,EAA4B;IAC1BG,QAAQ,CAACI,OAAT,CAAiBY,OAAjB,CAAyBnB,QAAzB;EACD;;EAED,OAAOG,QAAQ,CAACI,OAAhB;AACD,CAhCD;AAkCA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;;;AACAlB,6BAA6B,CAACmE,SAA9B,CAAwC2B,KAAxC,GAAgD,SAASA,KAAT,CAAenF,QAAf,EAAyB;EACvE,IAAIG,QAAQ,GAAGxB,CAAC,CAACyB,KAAF,EAAf;;EACA,IAAIG,OAAO,GAAG,KAAKZ,QAAL,CAAcwF,KAAd,CAAoB;IAAC3E,GAAG,EAAE,KAAKX,IAAX;IAAiBY,MAAM,EAAE;EAAzB,CAApB,CAAd;;EAEAF,OAAO,GAAGA,OAAO,CAACG,IAAR,CAAa,UAASC,OAAT,EAAkB;IACvCR,QAAQ,CAACS,OAAT,CAAiB,IAAIxB,8BAAJ,CACf,KAAKO,QADU,EAEfgB,OAFe,EAGf,KAAKf,SAAL,CAAeL,UAHA,EAIf,KAAKK,SAAL,CAAeiB,OAJA,CAAjB;EAMD,CAPsB,CAOrBC,IAPqB,CAOhB,IAPgB,CAAb,CAAV;EASAP,OAAO,CAACQ,KAAR,CAAc,UAASC,KAAT,EAAgB;IAC5Bb,QAAQ,CAACc,MAAT,CAAgBD,KAAhB;EACD,CAFD;;EAIA,IAAInC,CAAC,CAACqC,UAAF,CAAalB,QAAb,CAAJ,EAA4B;IAC1BG,QAAQ,CAACI,OAAT,CAAiBY,OAAjB,CAAyBnB,QAAzB;EACD;;EAED,OAAOG,QAAQ,CAACI,OAAhB;AACD,CAtBD;AAwBA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;;;AACAlB,6BAA6B,CAACmE,SAA9B,CAAwC4B,MAAxC,GAAiD,SAASA,MAAT,CAAgBpF,QAAhB,EAA0B;EACzE,IAAIG,QAAQ,GAAGxB,CAAC,CAACyB,KAAF,EAAf;;EACA,IAAIG,OAAO,GAAG,KAAKZ,QAAL,CAAcyF,MAAd,CAAqB;IAAC5E,GAAG,EAAE,KAAKX,IAAX;IAAiBY,MAAM,EAAE;EAAzB,CAArB,CAAd;;EAEAF,OAAO,GAAGA,OAAO,CAACG,IAAR,CAAa,UAASC,OAAT,EAAkB;IACvCR,QAAQ,CAACS,OAAT,CAAiBD,OAAjB;EACD,CAFsB,CAErBG,IAFqB,CAEhB,IAFgB,CAAb,CAAV;EAIAP,OAAO,CAACQ,KAAR,CAAc,UAASC,KAAT,EAAgB;IAC5Bb,QAAQ,CAACc,MAAT,CAAgBD,KAAhB;EACD,CAFD;;EAIA,IAAInC,CAAC,CAACqC,UAAF,CAAalB,QAAb,CAAJ,EAA4B;IAC1BG,QAAQ,CAACI,OAAT,CAAiBY,OAAjB,CAAyBnB,QAAzB;EACD;;EAED,OAAOG,QAAQ,CAACI,OAAhB;AACD,CAjBD;AAmBA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;;;AACAlB,6BAA6B,CAACmE,SAA9B,CAAwCP,MAAxC,GAAiD,SAASA,MAAT,GAAkB;EACjE,OAAO,KAAKrD,SAAZ;AACD,CAFD;;AAIAP,6BAA6B,CAACmE,SAA9B,CAAwC1E,IAAI,CAACoE,OAAL,CAAaC,MAArD,IAA+D,SAC3DD,OAD2D,CACnDE,KADmD,EAC5CC,OAD4C,EACnC;EAC1B,OAAOvE,IAAI,CAACoE,OAAL,CAAa,KAAKD,MAAL,EAAb,EAA4BI,OAA5B,CAAP;AACD,CAHD;;AAKAgC,MAAM,CAACC,OAAP,GAAiB;EACfpG,0BAA0B,EAAEA,0BADb;EAEfC,0BAA0B,EAAEA,0BAFb;EAGfC,8BAA8B,EAAEA,8BAHjB;EAIfC,6BAA6B,EAAEA;AAJhB,CAAjB"},"metadata":{},"sourceType":"script"}