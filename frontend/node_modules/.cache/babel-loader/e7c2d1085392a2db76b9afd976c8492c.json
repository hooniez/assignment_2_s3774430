{"ast":null,"code":"'use strict';\n/* jshint ignore:start */\n\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n\n/* jshint ignore:end */\n\nvar Q = require('q');\n/* jshint ignore:line */\n\n\nvar _ = require('lodash');\n/* jshint ignore:line */\n\n\nvar util = require('util');\n/* jshint ignore:line */\n\n\nvar InstalledAddOnExtensionList = require('./installedAddOn/installedAddOnExtension').InstalledAddOnExtensionList;\n\nvar Page = require('../../../base/Page');\n/* jshint ignore:line */\n\n\nvar deserialize = require('../../../base/deserialize');\n/* jshint ignore:line */\n\n\nvar serialize = require('../../../base/serialize');\n/* jshint ignore:line */\n\n\nvar values = require('../../../base/values');\n/* jshint ignore:line */\n\n\nvar InstalledAddOnList;\nvar InstalledAddOnPage;\nvar InstalledAddOnInstance;\nvar InstalledAddOnContext;\n/* jshint ignore:start */\n\n/**\n * Initialize the InstalledAddOnList\n *\n * PLEASE NOTE that this class contains preview products that are subject to\n * change. Use them with caution. If you currently do not have developer preview\n * access, please contact help@twilio.com.\n *\n * @constructor Twilio.Preview.Marketplace.InstalledAddOnList\n *\n * @param {Twilio.Preview.Marketplace} version - Version of the resource\n */\n\n/* jshint ignore:end */\n\nInstalledAddOnList = function InstalledAddOnList(version) {\n  /* jshint ignore:start */\n\n  /**\n   * @function installedAddOns\n   * @memberof Twilio.Preview.Marketplace#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Preview.Marketplace.InstalledAddOnContext}\n   */\n\n  /* jshint ignore:end */\n  function InstalledAddOnListInstance(sid) {\n    return InstalledAddOnListInstance.get(sid);\n  }\n\n  InstalledAddOnListInstance._version = version; // Path Solution\n\n  InstalledAddOnListInstance._solution = {};\n  InstalledAddOnListInstance._uri = `/InstalledAddOns`;\n  /* jshint ignore:start */\n\n  /**\n   * create a InstalledAddOnInstance\n   *\n   * @function create\n   * @memberof Twilio.Preview.Marketplace.InstalledAddOnList#\n   *\n   * @param {object} opts - Options for request\n   * @param {string} opts.availableAddOnSid -\n   *          The SID of the AvaliableAddOn to install\n   * @param {boolean} opts.acceptTermsOfService -\n   *          Whether the Terms of Service were accepted\n   * @param {object} [opts.configuration] -\n   *          The JSON object representing the configuration\n   * @param {string} [opts.uniqueName] -\n   *          An application-defined string that uniquely identifies the resource\n   * @param {function} [callback] - Callback to handle processed record\n   *\n   * @returns {Promise} Resolves to processed InstalledAddOnInstance\n   */\n\n  /* jshint ignore:end */\n\n  InstalledAddOnListInstance.create = function create(opts, callback) {\n    if (_.isUndefined(opts)) {\n      throw new Error('Required parameter \"opts\" missing.');\n    }\n\n    if (_.isUndefined(opts['availableAddOnSid'])) {\n      throw new Error('Required parameter \"opts[\\'availableAddOnSid\\']\" missing.');\n    }\n\n    if (_.isUndefined(opts['acceptTermsOfService'])) {\n      throw new Error('Required parameter \"opts[\\'acceptTermsOfService\\']\" missing.');\n    }\n\n    var deferred = Q.defer();\n    var data = values.of({\n      'AvailableAddOnSid': _.get(opts, 'availableAddOnSid'),\n      'AcceptTermsOfService': serialize.bool(_.get(opts, 'acceptTermsOfService')),\n      'Configuration': serialize.object(_.get(opts, 'configuration')),\n      'UniqueName': _.get(opts, 'uniqueName')\n    });\n\n    var promise = this._version.create({\n      uri: this._uri,\n      method: 'POST',\n      data: data\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new InstalledAddOnInstance(this._version, payload, this._solution.sid));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Streams InstalledAddOnInstance records from the API.\n   *\n   * This operation lazily loads records as efficiently as possible until the limit\n   * is reached.\n   *\n   * The results are passed into the callback function, so this operation is memory\n   * efficient.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function each\n   * @memberof Twilio.Preview.Marketplace.InstalledAddOnList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         each() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no pageSize is defined but a limit is defined,\n   *         each() will attempt to read the limit with the most efficient\n   *         page size, i.e. min(limit, 1000)\n   * @param {Function} [opts.callback] -\n   *         Function to process each record. If this and a positional\n   *         callback are passed, this one will be used\n   * @param {Function} [opts.done] -\n   *          Function to be called upon completion of streaming\n   * @param {Function} [callback] - Function to process each record\n   */\n\n  /* jshint ignore:end */\n\n\n  InstalledAddOnListInstance.each = function each(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n\n    if (opts.callback) {\n      callback = opts.callback;\n    }\n\n    if (_.isUndefined(callback)) {\n      throw new Error('Callback function must be provided');\n    }\n\n    var done = false;\n    var currentPage = 1;\n    var currentResource = 0;\n\n    var limits = this._version.readLimits({\n      limit: opts.limit,\n      pageSize: opts.pageSize\n    });\n\n    function onComplete(error) {\n      done = true;\n\n      if (_.isFunction(opts.done)) {\n        opts.done(error);\n      }\n    }\n\n    function fetchNextPage(fn) {\n      var promise = fn();\n\n      if (_.isUndefined(promise)) {\n        onComplete();\n        return;\n      }\n\n      promise.then(function (page) {\n        _.each(page.instances, function (instance) {\n          if (done || !_.isUndefined(opts.limit) && currentResource >= opts.limit) {\n            done = true;\n            return false;\n          }\n\n          currentResource++;\n          callback(instance, onComplete);\n        });\n\n        if (!done) {\n          currentPage++;\n          fetchNextPage(_.bind(page.nextPage, page));\n        } else {\n          onComplete();\n        }\n      });\n      promise.catch(onComplete);\n    }\n\n    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Lists InstalledAddOnInstance records from the API as a list.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function list\n   * @memberof Twilio.Preview.Marketplace.InstalledAddOnList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         list() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no page_size is defined but a limit is defined,\n   *         list() will attempt to read the limit with the most\n   *         efficient page size, i.e. min(limit, 1000)\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  InstalledAddOnListInstance.list = function list(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n    var deferred = Q.defer();\n    var allResources = [];\n\n    opts.callback = function (resource, done) {\n      allResources.push(resource);\n\n      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {\n        done();\n      }\n    };\n\n    opts.done = function (error) {\n      if (_.isUndefined(error)) {\n        deferred.resolve(allResources);\n      } else {\n        deferred.reject(error);\n      }\n    };\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    this.each(opts);\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Retrieve a single page of InstalledAddOnInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function page\n   * @memberof Twilio.Preview.Marketplace.InstalledAddOnList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.pageToken] - PageToken provided by the API\n   * @param {number} [opts.pageNumber] -\n   *          Page Number, this value is simply for client state\n   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  InstalledAddOnListInstance.page = function page(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n    var deferred = Q.defer();\n    var data = values.of({\n      'PageToken': opts.pageToken,\n      'Page': opts.pageNumber,\n      'PageSize': opts.pageSize\n    });\n\n    var promise = this._version.page({\n      uri: this._uri,\n      method: 'GET',\n      params: data\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new InstalledAddOnPage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Retrieve a single target page of InstalledAddOnInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function getPage\n   * @memberof Twilio.Preview.Marketplace.InstalledAddOnList#\n   *\n   * @param {string} [targetUrl] - API-generated URL for the requested results page\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  InstalledAddOnListInstance.getPage = function getPage(targetUrl, callback) {\n    var deferred = Q.defer();\n\n    var promise = this._version._domain.twilio.request({\n      method: 'GET',\n      uri: targetUrl\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new InstalledAddOnPage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Constructs a installed_add_on\n   *\n   * @function get\n   * @memberof Twilio.Preview.Marketplace.InstalledAddOnList#\n   *\n   * @param {string} sid - The SID of the InstalledAddOn resource to fetch\n   *\n   * @returns {Twilio.Preview.Marketplace.InstalledAddOnContext}\n   */\n\n  /* jshint ignore:end */\n\n\n  InstalledAddOnListInstance.get = function get(sid) {\n    return new InstalledAddOnContext(this._version, sid);\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Preview.Marketplace.InstalledAddOnList#\n   *\n   * @returns Object\n   */\n\n  /* jshint ignore:end */\n\n\n  InstalledAddOnListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n\n  InstalledAddOnListInstance[util.inspect.custom] = function inspect(depth, options) {\n    return util.inspect(this.toJSON(), options);\n  };\n\n  return InstalledAddOnListInstance;\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the InstalledAddOnPage\n *\n * PLEASE NOTE that this class contains preview products that are subject to\n * change. Use them with caution. If you currently do not have developer preview\n * access, please contact help@twilio.com.\n *\n * @constructor Twilio.Preview.Marketplace.InstalledAddOnPage\n *\n * @param {Marketplace} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {InstalledAddOnSolution} solution - Path solution\n *\n * @returns InstalledAddOnPage\n */\n\n/* jshint ignore:end */\n\n\nInstalledAddOnPage = function InstalledAddOnPage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n\n_.extend(InstalledAddOnPage.prototype, Page.prototype);\n\nInstalledAddOnPage.prototype.constructor = InstalledAddOnPage;\n/* jshint ignore:start */\n\n/**\n * Build an instance of InstalledAddOnInstance\n *\n * @function getInstance\n * @memberof Twilio.Preview.Marketplace.InstalledAddOnPage#\n *\n * @param {InstalledAddOnPayload} payload - Payload response from the API\n *\n * @returns InstalledAddOnInstance\n */\n\n/* jshint ignore:end */\n\nInstalledAddOnPage.prototype.getInstance = function getInstance(payload) {\n  return new InstalledAddOnInstance(this._version, payload);\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Preview.Marketplace.InstalledAddOnPage#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nInstalledAddOnPage.prototype.toJSON = function toJSON() {\n  let clone = {};\n\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n\n  return clone;\n};\n\nInstalledAddOnPage.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the InstalledAddOnContext\n *\n * PLEASE NOTE that this class contains preview products that are subject to\n * change. Use them with caution. If you currently do not have developer preview\n * access, please contact help@twilio.com.\n *\n * @constructor Twilio.Preview.Marketplace.InstalledAddOnInstance\n *\n * @property {string} sid - The unique string that identifies the resource\n * @property {string} accountSid - The SID of the Account that created the resource\n * @property {string} friendlyName -\n *          The string that you assigned to describe the resource\n * @property {string} description -\n *          A short description of the Add-on's functionality\n * @property {object} configuration -\n *          The JSON object that represents the current configuration of installed Add-on\n * @property {string} uniqueName -\n *          An application-defined string that uniquely identifies the resource\n * @property {Date} dateCreated -\n *          The ISO 8601 date and time in GMT when the resource was created\n * @property {Date} dateUpdated -\n *          The ISO 8601 date and time in GMT when the resource was last updated\n * @property {string} url - The absolute URL of the resource\n * @property {string} links - The URLs of related resources\n *\n * @param {Marketplace} version - Version of the resource\n * @param {InstalledAddOnPayload} payload - The instance payload\n * @param {sid} sid - The SID of the InstalledAddOn resource to fetch\n */\n\n/* jshint ignore:end */\n\n\nInstalledAddOnInstance = function InstalledAddOnInstance(version, payload, sid) {\n  this._version = version; // Marshaled Properties\n\n  this.sid = payload.sid; // jshint ignore:line\n\n  this.accountSid = payload.account_sid; // jshint ignore:line\n\n  this.friendlyName = payload.friendly_name; // jshint ignore:line\n\n  this.description = payload.description; // jshint ignore:line\n\n  this.configuration = payload.configuration; // jshint ignore:line\n\n  this.uniqueName = payload.unique_name; // jshint ignore:line\n\n  this.dateCreated = deserialize.iso8601DateTime(payload.date_created); // jshint ignore:line\n\n  this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated); // jshint ignore:line\n\n  this.url = payload.url; // jshint ignore:line\n\n  this.links = payload.links; // jshint ignore:line\n  // Context\n\n  this._context = undefined;\n  this._solution = {\n    sid: sid || this.sid\n  };\n};\n\nObject.defineProperty(InstalledAddOnInstance.prototype, '_proxy', {\n  get: function () {\n    if (!this._context) {\n      this._context = new InstalledAddOnContext(this._version, this._solution.sid);\n    }\n\n    return this._context;\n  }\n});\n/* jshint ignore:start */\n\n/**\n * remove a InstalledAddOnInstance\n *\n * @function remove\n * @memberof Twilio.Preview.Marketplace.InstalledAddOnInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed InstalledAddOnInstance\n */\n\n/* jshint ignore:end */\n\nInstalledAddOnInstance.prototype.remove = function remove(callback) {\n  return this._proxy.remove(callback);\n};\n/* jshint ignore:start */\n\n/**\n * fetch a InstalledAddOnInstance\n *\n * @function fetch\n * @memberof Twilio.Preview.Marketplace.InstalledAddOnInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed InstalledAddOnInstance\n */\n\n/* jshint ignore:end */\n\n\nInstalledAddOnInstance.prototype.fetch = function fetch(callback) {\n  return this._proxy.fetch(callback);\n};\n/* jshint ignore:start */\n\n/**\n * update a InstalledAddOnInstance\n *\n * @function update\n * @memberof Twilio.Preview.Marketplace.InstalledAddOnInstance#\n *\n * @param {object} [opts] - Options for request\n * @param {object} [opts.configuration] -\n *          The JSON object representing the configuration\n * @param {string} [opts.uniqueName] -\n *          An application-defined string that uniquely identifies the resource\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed InstalledAddOnInstance\n */\n\n/* jshint ignore:end */\n\n\nInstalledAddOnInstance.prototype.update = function update(opts, callback) {\n  return this._proxy.update(opts, callback);\n};\n/* jshint ignore:start */\n\n/**\n * Access the extensions\n *\n * @function extensions\n * @memberof Twilio.Preview.Marketplace.InstalledAddOnInstance#\n *\n * @returns {Twilio.Preview.Marketplace.InstalledAddOnContext.InstalledAddOnExtensionList}\n */\n\n/* jshint ignore:end */\n\n\nInstalledAddOnInstance.prototype.extensions = function extensions() {\n  return this._proxy.extensions;\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Preview.Marketplace.InstalledAddOnInstance#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nInstalledAddOnInstance.prototype.toJSON = function toJSON() {\n  let clone = {};\n\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n\n  return clone;\n};\n\nInstalledAddOnInstance.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the InstalledAddOnContext\n *\n * PLEASE NOTE that this class contains preview products that are subject to\n * change. Use them with caution. If you currently do not have developer preview\n * access, please contact help@twilio.com.\n *\n * @constructor Twilio.Preview.Marketplace.InstalledAddOnContext\n *\n * @property {Twilio.Preview.Marketplace.InstalledAddOnContext.InstalledAddOnExtensionList} extensions -\n *          extensions resource\n *\n * @param {Marketplace} version - Version of the resource\n * @param {sid} sid - The SID of the InstalledAddOn resource to fetch\n */\n\n/* jshint ignore:end */\n\n\nInstalledAddOnContext = function InstalledAddOnContext(version, sid) {\n  this._version = version; // Path Solution\n\n  this._solution = {\n    sid: sid\n  };\n  this._uri = `/InstalledAddOns/${sid}`; // Dependents\n\n  this._extensions = undefined;\n};\n/* jshint ignore:start */\n\n/**\n * remove a InstalledAddOnInstance\n *\n * @function remove\n * @memberof Twilio.Preview.Marketplace.InstalledAddOnContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed InstalledAddOnInstance\n */\n\n/* jshint ignore:end */\n\n\nInstalledAddOnContext.prototype.remove = function remove(callback) {\n  var deferred = Q.defer();\n\n  var promise = this._version.remove({\n    uri: this._uri,\n    method: 'DELETE'\n  });\n\n  promise = promise.then(function (payload) {\n    deferred.resolve(payload);\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n/* jshint ignore:start */\n\n/**\n * fetch a InstalledAddOnInstance\n *\n * @function fetch\n * @memberof Twilio.Preview.Marketplace.InstalledAddOnContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed InstalledAddOnInstance\n */\n\n/* jshint ignore:end */\n\n\nInstalledAddOnContext.prototype.fetch = function fetch(callback) {\n  var deferred = Q.defer();\n\n  var promise = this._version.fetch({\n    uri: this._uri,\n    method: 'GET'\n  });\n\n  promise = promise.then(function (payload) {\n    deferred.resolve(new InstalledAddOnInstance(this._version, payload, this._solution.sid));\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n/* jshint ignore:start */\n\n/**\n * update a InstalledAddOnInstance\n *\n * @function update\n * @memberof Twilio.Preview.Marketplace.InstalledAddOnContext#\n *\n * @param {object} [opts] - Options for request\n * @param {object} [opts.configuration] -\n *          The JSON object representing the configuration\n * @param {string} [opts.uniqueName] -\n *          An application-defined string that uniquely identifies the resource\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed InstalledAddOnInstance\n */\n\n/* jshint ignore:end */\n\n\nInstalledAddOnContext.prototype.update = function update(opts, callback) {\n  if (_.isFunction(opts)) {\n    callback = opts;\n    opts = {};\n  }\n\n  opts = opts || {};\n  var deferred = Q.defer();\n  var data = values.of({\n    'Configuration': serialize.object(_.get(opts, 'configuration')),\n    'UniqueName': _.get(opts, 'uniqueName')\n  });\n\n  var promise = this._version.update({\n    uri: this._uri,\n    method: 'POST',\n    data: data\n  });\n\n  promise = promise.then(function (payload) {\n    deferred.resolve(new InstalledAddOnInstance(this._version, payload, this._solution.sid));\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\nObject.defineProperty(InstalledAddOnContext.prototype, 'extensions', {\n  get: function () {\n    if (!this._extensions) {\n      this._extensions = new InstalledAddOnExtensionList(this._version, this._solution.sid);\n    }\n\n    return this._extensions;\n  }\n});\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Preview.Marketplace.InstalledAddOnContext#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\nInstalledAddOnContext.prototype.toJSON = function toJSON() {\n  return this._solution;\n};\n\nInstalledAddOnContext.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\nmodule.exports = {\n  InstalledAddOnList: InstalledAddOnList,\n  InstalledAddOnPage: InstalledAddOnPage,\n  InstalledAddOnInstance: InstalledAddOnInstance,\n  InstalledAddOnContext: InstalledAddOnContext\n};","map":{"version":3,"names":["Q","require","_","util","InstalledAddOnExtensionList","Page","deserialize","serialize","values","InstalledAddOnList","InstalledAddOnPage","InstalledAddOnInstance","InstalledAddOnContext","version","InstalledAddOnListInstance","sid","get","_version","_solution","_uri","create","opts","callback","isUndefined","Error","deferred","defer","data","of","bool","object","promise","uri","method","then","payload","resolve","bind","catch","error","reject","isFunction","nodeify","each","done","currentPage","currentResource","limits","readLimits","limit","pageSize","onComplete","fetchNextPage","fn","page","instances","instance","nextPage","merge","list","allResources","resource","push","length","pageToken","pageNumber","params","getPage","targetUrl","_domain","twilio","request","toJSON","inspect","custom","depth","options","response","solution","prototype","constructor","call","extend","getInstance","clone","forOwn","value","key","startsWith","accountSid","account_sid","friendlyName","friendly_name","description","configuration","uniqueName","unique_name","dateCreated","iso8601DateTime","date_created","dateUpdated","date_updated","url","links","_context","undefined","Object","defineProperty","remove","_proxy","fetch","update","extensions","_extensions","module","exports"],"sources":["/Users/hooniesun/rmit/fwp/assessment1/lan/node_modules/twilio/lib/rest/preview/marketplace/installedAddOn.js"],"sourcesContent":["'use strict';\n\n/* jshint ignore:start */\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n/* jshint ignore:end */\n\nvar Q = require('q');  /* jshint ignore:line */\nvar _ = require('lodash');  /* jshint ignore:line */\nvar util = require('util');  /* jshint ignore:line */\nvar InstalledAddOnExtensionList = require(\n    './installedAddOn/installedAddOnExtension').InstalledAddOnExtensionList;\nvar Page = require('../../../base/Page');  /* jshint ignore:line */\nvar deserialize = require(\n    '../../../base/deserialize');  /* jshint ignore:line */\nvar serialize = require('../../../base/serialize');  /* jshint ignore:line */\nvar values = require('../../../base/values');  /* jshint ignore:line */\n\nvar InstalledAddOnList;\nvar InstalledAddOnPage;\nvar InstalledAddOnInstance;\nvar InstalledAddOnContext;\n\n/* jshint ignore:start */\n/**\n * Initialize the InstalledAddOnList\n *\n * PLEASE NOTE that this class contains preview products that are subject to\n * change. Use them with caution. If you currently do not have developer preview\n * access, please contact help@twilio.com.\n *\n * @constructor Twilio.Preview.Marketplace.InstalledAddOnList\n *\n * @param {Twilio.Preview.Marketplace} version - Version of the resource\n */\n/* jshint ignore:end */\nInstalledAddOnList = function InstalledAddOnList(version) {\n  /* jshint ignore:start */\n  /**\n   * @function installedAddOns\n   * @memberof Twilio.Preview.Marketplace#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Preview.Marketplace.InstalledAddOnContext}\n   */\n  /* jshint ignore:end */\n  function InstalledAddOnListInstance(sid) {\n    return InstalledAddOnListInstance.get(sid);\n  }\n\n  InstalledAddOnListInstance._version = version;\n  // Path Solution\n  InstalledAddOnListInstance._solution = {};\n  InstalledAddOnListInstance._uri = `/InstalledAddOns`;\n  /* jshint ignore:start */\n  /**\n   * create a InstalledAddOnInstance\n   *\n   * @function create\n   * @memberof Twilio.Preview.Marketplace.InstalledAddOnList#\n   *\n   * @param {object} opts - Options for request\n   * @param {string} opts.availableAddOnSid -\n   *          The SID of the AvaliableAddOn to install\n   * @param {boolean} opts.acceptTermsOfService -\n   *          Whether the Terms of Service were accepted\n   * @param {object} [opts.configuration] -\n   *          The JSON object representing the configuration\n   * @param {string} [opts.uniqueName] -\n   *          An application-defined string that uniquely identifies the resource\n   * @param {function} [callback] - Callback to handle processed record\n   *\n   * @returns {Promise} Resolves to processed InstalledAddOnInstance\n   */\n  /* jshint ignore:end */\n  InstalledAddOnListInstance.create = function create(opts, callback) {\n    if (_.isUndefined(opts)) {\n      throw new Error('Required parameter \"opts\" missing.');\n    }\n    if (_.isUndefined(opts['availableAddOnSid'])) {\n      throw new Error('Required parameter \"opts[\\'availableAddOnSid\\']\" missing.');\n    }\n    if (_.isUndefined(opts['acceptTermsOfService'])) {\n      throw new Error('Required parameter \"opts[\\'acceptTermsOfService\\']\" missing.');\n    }\n\n    var deferred = Q.defer();\n    var data = values.of({\n      'AvailableAddOnSid': _.get(opts, 'availableAddOnSid'),\n      'AcceptTermsOfService': serialize.bool(_.get(opts, 'acceptTermsOfService')),\n      'Configuration': serialize.object(_.get(opts, 'configuration')),\n      'UniqueName': _.get(opts, 'uniqueName')\n    });\n\n    var promise = this._version.create({uri: this._uri, method: 'POST', data: data});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new InstalledAddOnInstance(this._version, payload, this._solution.sid));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Streams InstalledAddOnInstance records from the API.\n   *\n   * This operation lazily loads records as efficiently as possible until the limit\n   * is reached.\n   *\n   * The results are passed into the callback function, so this operation is memory\n   * efficient.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function each\n   * @memberof Twilio.Preview.Marketplace.InstalledAddOnList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         each() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no pageSize is defined but a limit is defined,\n   *         each() will attempt to read the limit with the most efficient\n   *         page size, i.e. min(limit, 1000)\n   * @param {Function} [opts.callback] -\n   *         Function to process each record. If this and a positional\n   *         callback are passed, this one will be used\n   * @param {Function} [opts.done] -\n   *          Function to be called upon completion of streaming\n   * @param {Function} [callback] - Function to process each record\n   */\n  /* jshint ignore:end */\n  InstalledAddOnListInstance.each = function each(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    if (opts.callback) {\n      callback = opts.callback;\n    }\n    if (_.isUndefined(callback)) {\n      throw new Error('Callback function must be provided');\n    }\n\n    var done = false;\n    var currentPage = 1;\n    var currentResource = 0;\n    var limits = this._version.readLimits({\n      limit: opts.limit,\n      pageSize: opts.pageSize\n    });\n\n    function onComplete(error) {\n      done = true;\n      if (_.isFunction(opts.done)) {\n        opts.done(error);\n      }\n    }\n\n    function fetchNextPage(fn) {\n      var promise = fn();\n      if (_.isUndefined(promise)) {\n        onComplete();\n        return;\n      }\n\n      promise.then(function(page) {\n        _.each(page.instances, function(instance) {\n          if (done || (!_.isUndefined(opts.limit) && currentResource >= opts.limit)) {\n            done = true;\n            return false;\n          }\n\n          currentResource++;\n          callback(instance, onComplete);\n        });\n\n        if (!done) {\n          currentPage++;\n          fetchNextPage(_.bind(page.nextPage, page));\n        } else {\n          onComplete();\n        }\n      });\n\n      promise.catch(onComplete);\n    }\n\n    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Lists InstalledAddOnInstance records from the API as a list.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function list\n   * @memberof Twilio.Preview.Marketplace.InstalledAddOnList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         list() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no page_size is defined but a limit is defined,\n   *         list() will attempt to read the limit with the most\n   *         efficient page size, i.e. min(limit, 1000)\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  InstalledAddOnListInstance.list = function list(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    var deferred = Q.defer();\n    var allResources = [];\n    opts.callback = function(resource, done) {\n      allResources.push(resource);\n\n      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {\n        done();\n      }\n    };\n\n    opts.done = function(error) {\n      if (_.isUndefined(error)) {\n        deferred.resolve(allResources);\n      } else {\n        deferred.reject(error);\n      }\n    };\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    this.each(opts);\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single page of InstalledAddOnInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function page\n   * @memberof Twilio.Preview.Marketplace.InstalledAddOnList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.pageToken] - PageToken provided by the API\n   * @param {number} [opts.pageNumber] -\n   *          Page Number, this value is simply for client state\n   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  InstalledAddOnListInstance.page = function page(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n\n    var deferred = Q.defer();\n    var data = values.of({\n      'PageToken': opts.pageToken,\n      'Page': opts.pageNumber,\n      'PageSize': opts.pageSize\n    });\n\n    var promise = this._version.page({uri: this._uri, method: 'GET', params: data});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new InstalledAddOnPage(this._version, payload, this._solution));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single target page of InstalledAddOnInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function getPage\n   * @memberof Twilio.Preview.Marketplace.InstalledAddOnList#\n   *\n   * @param {string} [targetUrl] - API-generated URL for the requested results page\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  InstalledAddOnListInstance.getPage = function getPage(targetUrl, callback) {\n    var deferred = Q.defer();\n\n    var promise = this._version._domain.twilio.request({method: 'GET', uri: targetUrl});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new InstalledAddOnPage(this._version, payload, this._solution));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Constructs a installed_add_on\n   *\n   * @function get\n   * @memberof Twilio.Preview.Marketplace.InstalledAddOnList#\n   *\n   * @param {string} sid - The SID of the InstalledAddOn resource to fetch\n   *\n   * @returns {Twilio.Preview.Marketplace.InstalledAddOnContext}\n   */\n  /* jshint ignore:end */\n  InstalledAddOnListInstance.get = function get(sid) {\n    return new InstalledAddOnContext(this._version, sid);\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Preview.Marketplace.InstalledAddOnList#\n   *\n   * @returns Object\n   */\n  /* jshint ignore:end */\n  InstalledAddOnListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n\n  InstalledAddOnListInstance[util.inspect.custom] = function inspect(depth,\n      options) {\n    return util.inspect(this.toJSON(), options);\n  };\n\n  return InstalledAddOnListInstance;\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the InstalledAddOnPage\n *\n * PLEASE NOTE that this class contains preview products that are subject to\n * change. Use them with caution. If you currently do not have developer preview\n * access, please contact help@twilio.com.\n *\n * @constructor Twilio.Preview.Marketplace.InstalledAddOnPage\n *\n * @param {Marketplace} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {InstalledAddOnSolution} solution - Path solution\n *\n * @returns InstalledAddOnPage\n */\n/* jshint ignore:end */\nInstalledAddOnPage = function InstalledAddOnPage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n\n_.extend(InstalledAddOnPage.prototype, Page.prototype);\nInstalledAddOnPage.prototype.constructor = InstalledAddOnPage;\n\n/* jshint ignore:start */\n/**\n * Build an instance of InstalledAddOnInstance\n *\n * @function getInstance\n * @memberof Twilio.Preview.Marketplace.InstalledAddOnPage#\n *\n * @param {InstalledAddOnPayload} payload - Payload response from the API\n *\n * @returns InstalledAddOnInstance\n */\n/* jshint ignore:end */\nInstalledAddOnPage.prototype.getInstance = function getInstance(payload) {\n  return new InstalledAddOnInstance(this._version, payload);\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Preview.Marketplace.InstalledAddOnPage#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nInstalledAddOnPage.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function(value, key) {\n    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\n\nInstalledAddOnPage.prototype[util.inspect.custom] = function inspect(depth,\n    options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the InstalledAddOnContext\n *\n * PLEASE NOTE that this class contains preview products that are subject to\n * change. Use them with caution. If you currently do not have developer preview\n * access, please contact help@twilio.com.\n *\n * @constructor Twilio.Preview.Marketplace.InstalledAddOnInstance\n *\n * @property {string} sid - The unique string that identifies the resource\n * @property {string} accountSid - The SID of the Account that created the resource\n * @property {string} friendlyName -\n *          The string that you assigned to describe the resource\n * @property {string} description -\n *          A short description of the Add-on's functionality\n * @property {object} configuration -\n *          The JSON object that represents the current configuration of installed Add-on\n * @property {string} uniqueName -\n *          An application-defined string that uniquely identifies the resource\n * @property {Date} dateCreated -\n *          The ISO 8601 date and time in GMT when the resource was created\n * @property {Date} dateUpdated -\n *          The ISO 8601 date and time in GMT when the resource was last updated\n * @property {string} url - The absolute URL of the resource\n * @property {string} links - The URLs of related resources\n *\n * @param {Marketplace} version - Version of the resource\n * @param {InstalledAddOnPayload} payload - The instance payload\n * @param {sid} sid - The SID of the InstalledAddOn resource to fetch\n */\n/* jshint ignore:end */\nInstalledAddOnInstance = function InstalledAddOnInstance(version, payload, sid)\n                                                          {\n  this._version = version;\n\n  // Marshaled Properties\n  this.sid = payload.sid; // jshint ignore:line\n  this.accountSid = payload.account_sid; // jshint ignore:line\n  this.friendlyName = payload.friendly_name; // jshint ignore:line\n  this.description = payload.description; // jshint ignore:line\n  this.configuration = payload.configuration; // jshint ignore:line\n  this.uniqueName = payload.unique_name; // jshint ignore:line\n  this.dateCreated = deserialize.iso8601DateTime(payload.date_created); // jshint ignore:line\n  this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated); // jshint ignore:line\n  this.url = payload.url; // jshint ignore:line\n  this.links = payload.links; // jshint ignore:line\n\n  // Context\n  this._context = undefined;\n  this._solution = {sid: sid || this.sid, };\n};\n\nObject.defineProperty(InstalledAddOnInstance.prototype,\n  '_proxy', {\n    get: function() {\n      if (!this._context) {\n        this._context = new InstalledAddOnContext(this._version, this._solution.sid);\n      }\n\n      return this._context;\n    }\n});\n\n/* jshint ignore:start */\n/**\n * remove a InstalledAddOnInstance\n *\n * @function remove\n * @memberof Twilio.Preview.Marketplace.InstalledAddOnInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed InstalledAddOnInstance\n */\n/* jshint ignore:end */\nInstalledAddOnInstance.prototype.remove = function remove(callback) {\n  return this._proxy.remove(callback);\n};\n\n/* jshint ignore:start */\n/**\n * fetch a InstalledAddOnInstance\n *\n * @function fetch\n * @memberof Twilio.Preview.Marketplace.InstalledAddOnInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed InstalledAddOnInstance\n */\n/* jshint ignore:end */\nInstalledAddOnInstance.prototype.fetch = function fetch(callback) {\n  return this._proxy.fetch(callback);\n};\n\n/* jshint ignore:start */\n/**\n * update a InstalledAddOnInstance\n *\n * @function update\n * @memberof Twilio.Preview.Marketplace.InstalledAddOnInstance#\n *\n * @param {object} [opts] - Options for request\n * @param {object} [opts.configuration] -\n *          The JSON object representing the configuration\n * @param {string} [opts.uniqueName] -\n *          An application-defined string that uniquely identifies the resource\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed InstalledAddOnInstance\n */\n/* jshint ignore:end */\nInstalledAddOnInstance.prototype.update = function update(opts, callback) {\n  return this._proxy.update(opts, callback);\n};\n\n/* jshint ignore:start */\n/**\n * Access the extensions\n *\n * @function extensions\n * @memberof Twilio.Preview.Marketplace.InstalledAddOnInstance#\n *\n * @returns {Twilio.Preview.Marketplace.InstalledAddOnContext.InstalledAddOnExtensionList}\n */\n/* jshint ignore:end */\nInstalledAddOnInstance.prototype.extensions = function extensions() {\n  return this._proxy.extensions;\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Preview.Marketplace.InstalledAddOnInstance#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nInstalledAddOnInstance.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function(value, key) {\n    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\n\nInstalledAddOnInstance.prototype[util.inspect.custom] = function inspect(depth,\n    options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the InstalledAddOnContext\n *\n * PLEASE NOTE that this class contains preview products that are subject to\n * change. Use them with caution. If you currently do not have developer preview\n * access, please contact help@twilio.com.\n *\n * @constructor Twilio.Preview.Marketplace.InstalledAddOnContext\n *\n * @property {Twilio.Preview.Marketplace.InstalledAddOnContext.InstalledAddOnExtensionList} extensions -\n *          extensions resource\n *\n * @param {Marketplace} version - Version of the resource\n * @param {sid} sid - The SID of the InstalledAddOn resource to fetch\n */\n/* jshint ignore:end */\nInstalledAddOnContext = function InstalledAddOnContext(version, sid) {\n  this._version = version;\n\n  // Path Solution\n  this._solution = {sid: sid, };\n  this._uri = `/InstalledAddOns/${sid}`;\n\n  // Dependents\n  this._extensions = undefined;\n};\n\n/* jshint ignore:start */\n/**\n * remove a InstalledAddOnInstance\n *\n * @function remove\n * @memberof Twilio.Preview.Marketplace.InstalledAddOnContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed InstalledAddOnInstance\n */\n/* jshint ignore:end */\nInstalledAddOnContext.prototype.remove = function remove(callback) {\n  var deferred = Q.defer();\n  var promise = this._version.remove({uri: this._uri, method: 'DELETE'});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(payload);\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * fetch a InstalledAddOnInstance\n *\n * @function fetch\n * @memberof Twilio.Preview.Marketplace.InstalledAddOnContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed InstalledAddOnInstance\n */\n/* jshint ignore:end */\nInstalledAddOnContext.prototype.fetch = function fetch(callback) {\n  var deferred = Q.defer();\n  var promise = this._version.fetch({uri: this._uri, method: 'GET'});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(new InstalledAddOnInstance(this._version, payload, this._solution.sid));\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * update a InstalledAddOnInstance\n *\n * @function update\n * @memberof Twilio.Preview.Marketplace.InstalledAddOnContext#\n *\n * @param {object} [opts] - Options for request\n * @param {object} [opts.configuration] -\n *          The JSON object representing the configuration\n * @param {string} [opts.uniqueName] -\n *          An application-defined string that uniquely identifies the resource\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed InstalledAddOnInstance\n */\n/* jshint ignore:end */\nInstalledAddOnContext.prototype.update = function update(opts, callback) {\n  if (_.isFunction(opts)) {\n    callback = opts;\n    opts = {};\n  }\n  opts = opts || {};\n\n  var deferred = Q.defer();\n  var data = values.of({\n    'Configuration': serialize.object(_.get(opts, 'configuration')),\n    'UniqueName': _.get(opts, 'uniqueName')\n  });\n\n  var promise = this._version.update({uri: this._uri, method: 'POST', data: data});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(new InstalledAddOnInstance(this._version, payload, this._solution.sid));\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\nObject.defineProperty(InstalledAddOnContext.prototype,\n  'extensions', {\n    get: function() {\n      if (!this._extensions) {\n        this._extensions = new InstalledAddOnExtensionList(this._version, this._solution.sid);\n      }\n      return this._extensions;\n    }\n});\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Preview.Marketplace.InstalledAddOnContext#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nInstalledAddOnContext.prototype.toJSON = function toJSON() {\n  return this._solution;\n};\n\nInstalledAddOnContext.prototype[util.inspect.custom] = function inspect(depth,\n    options) {\n  return util.inspect(this.toJSON(), options);\n};\n\nmodule.exports = {\n  InstalledAddOnList: InstalledAddOnList,\n  InstalledAddOnPage: InstalledAddOnPage,\n  InstalledAddOnInstance: InstalledAddOnInstance,\n  InstalledAddOnContext: InstalledAddOnContext\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}