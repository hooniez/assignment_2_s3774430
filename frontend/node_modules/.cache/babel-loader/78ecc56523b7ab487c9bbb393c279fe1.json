{"ast":null,"code":"'use strict';\n/* jshint ignore:start */\n\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n\n/* jshint ignore:end */\n\nvar Q = require('q');\n/* jshint ignore:line */\n\n\nvar _ = require('lodash');\n/* jshint ignore:line */\n\n\nvar util = require('util');\n/* jshint ignore:line */\n\n\nvar Page = require('../../../base/Page');\n/* jshint ignore:line */\n\n\nvar deserialize = require('../../../base/deserialize');\n/* jshint ignore:line */\n\n\nvar serialize = require('../../../base/serialize');\n/* jshint ignore:line */\n\n\nvar values = require('../../../base/values');\n/* jshint ignore:line */\n\n\nvar VerificationAttemptList;\nvar VerificationAttemptPage;\nvar VerificationAttemptInstance;\nvar VerificationAttemptContext;\n/* jshint ignore:start */\n\n/**\n * Initialize the VerificationAttemptList\n *\n * @constructor Twilio.Verify.V2.VerificationAttemptList\n *\n * @param {Twilio.Verify.V2} version - Version of the resource\n */\n\n/* jshint ignore:end */\n\nVerificationAttemptList = function VerificationAttemptList(version) {\n  /* jshint ignore:start */\n\n  /**\n   * @function verificationAttempts\n   * @memberof Twilio.Verify.V2#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Verify.V2.VerificationAttemptContext}\n   */\n\n  /* jshint ignore:end */\n  function VerificationAttemptListInstance(sid) {\n    return VerificationAttemptListInstance.get(sid);\n  }\n\n  VerificationAttemptListInstance._version = version; // Path Solution\n\n  VerificationAttemptListInstance._solution = {};\n  VerificationAttemptListInstance._uri = `/Attempts`;\n  /* jshint ignore:start */\n\n  /**\n   * Streams VerificationAttemptInstance records from the API.\n   *\n   * This operation lazily loads records as efficiently as possible until the limit\n   * is reached.\n   *\n   * The results are passed into the callback function, so this operation is memory\n   * efficient.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function each\n   * @memberof Twilio.Verify.V2.VerificationAttemptList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {Date} [opts.dateCreatedAfter] -\n   *          Filter verification attempts after this date.\n   * @param {Date} [opts.dateCreatedBefore] -\n   *          Filter verification attempts before this date.\n   * @param {string} [opts.channelData.to] -\n   *          Filters by destination of the verification attempt.\n   * @param {string} [opts.country] -\n   *          Filter verification attempts by destination country.\n   * @param {verification_attempt.channels} [opts.channel] -\n   *          Filter verification attempts by communication channel.\n   * @param {string} [opts.verifyServiceSid] -\n   *          Filter verification attempts by verify service.\n   * @param {string} [opts.verificationSid] - Filter attempts by verification.\n   * @param {verification_attempt.conversion_status} [opts.status] -\n   *          Filter verification attempts by conversion status.\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         each() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no pageSize is defined but a limit is defined,\n   *         each() will attempt to read the limit with the most efficient\n   *         page size, i.e. min(limit, 1000)\n   * @param {Function} [opts.callback] -\n   *         Function to process each record. If this and a positional\n   *         callback are passed, this one will be used\n   * @param {Function} [opts.done] -\n   *          Function to be called upon completion of streaming\n   * @param {Function} [callback] - Function to process each record\n   */\n\n  /* jshint ignore:end */\n\n  VerificationAttemptListInstance.each = function each(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n\n    if (opts.callback) {\n      callback = opts.callback;\n    }\n\n    if (_.isUndefined(callback)) {\n      throw new Error('Callback function must be provided');\n    }\n\n    var done = false;\n    var currentPage = 1;\n    var currentResource = 0;\n\n    var limits = this._version.readLimits({\n      limit: opts.limit,\n      pageSize: opts.pageSize\n    });\n\n    function onComplete(error) {\n      done = true;\n\n      if (_.isFunction(opts.done)) {\n        opts.done(error);\n      }\n    }\n\n    function fetchNextPage(fn) {\n      var promise = fn();\n\n      if (_.isUndefined(promise)) {\n        onComplete();\n        return;\n      }\n\n      promise.then(function (page) {\n        _.each(page.instances, function (instance) {\n          if (done || !_.isUndefined(opts.limit) && currentResource >= opts.limit) {\n            done = true;\n            return false;\n          }\n\n          currentResource++;\n          callback(instance, onComplete);\n        });\n\n        if (!done) {\n          currentPage++;\n          fetchNextPage(_.bind(page.nextPage, page));\n        } else {\n          onComplete();\n        }\n      });\n      promise.catch(onComplete);\n    }\n\n    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Lists VerificationAttemptInstance records from the API as a list.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function list\n   * @memberof Twilio.Verify.V2.VerificationAttemptList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {Date} [opts.dateCreatedAfter] -\n   *          Filter verification attempts after this date.\n   * @param {Date} [opts.dateCreatedBefore] -\n   *          Filter verification attempts before this date.\n   * @param {string} [opts.channelData.to] -\n   *          Filters by destination of the verification attempt.\n   * @param {string} [opts.country] -\n   *          Filter verification attempts by destination country.\n   * @param {verification_attempt.channels} [opts.channel] -\n   *          Filter verification attempts by communication channel.\n   * @param {string} [opts.verifyServiceSid] -\n   *          Filter verification attempts by verify service.\n   * @param {string} [opts.verificationSid] - Filter attempts by verification.\n   * @param {verification_attempt.conversion_status} [opts.status] -\n   *          Filter verification attempts by conversion status.\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         list() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no page_size is defined but a limit is defined,\n   *         list() will attempt to read the limit with the most\n   *         efficient page size, i.e. min(limit, 1000)\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  VerificationAttemptListInstance.list = function list(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n    var deferred = Q.defer();\n    var allResources = [];\n\n    opts.callback = function (resource, done) {\n      allResources.push(resource);\n\n      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {\n        done();\n      }\n    };\n\n    opts.done = function (error) {\n      if (_.isUndefined(error)) {\n        deferred.resolve(allResources);\n      } else {\n        deferred.reject(error);\n      }\n    };\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    this.each(opts);\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Retrieve a single page of VerificationAttemptInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function page\n   * @memberof Twilio.Verify.V2.VerificationAttemptList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {Date} [opts.dateCreatedAfter] -\n   *          Filter verification attempts after this date.\n   * @param {Date} [opts.dateCreatedBefore] -\n   *          Filter verification attempts before this date.\n   * @param {string} [opts.channelData.to] -\n   *          Filters by destination of the verification attempt.\n   * @param {string} [opts.country] -\n   *          Filter verification attempts by destination country.\n   * @param {verification_attempt.channels} [opts.channel] -\n   *          Filter verification attempts by communication channel.\n   * @param {string} [opts.verifyServiceSid] -\n   *          Filter verification attempts by verify service.\n   * @param {string} [opts.verificationSid] - Filter attempts by verification.\n   * @param {verification_attempt.conversion_status} [opts.status] -\n   *          Filter verification attempts by conversion status.\n   * @param {string} [opts.pageToken] - PageToken provided by the API\n   * @param {number} [opts.pageNumber] -\n   *          Page Number, this value is simply for client state\n   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  VerificationAttemptListInstance.page = function page(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n    var deferred = Q.defer();\n    var data = values.of({\n      'DateCreatedAfter': serialize.iso8601DateTime(_.get(opts, 'dateCreatedAfter')),\n      'DateCreatedBefore': serialize.iso8601DateTime(_.get(opts, 'dateCreatedBefore')),\n      'ChannelData.To': _.get(opts, 'channelData.to'),\n      'Country': _.get(opts, 'country'),\n      'Channel': _.get(opts, 'channel'),\n      'VerifyServiceSid': _.get(opts, 'verifyServiceSid'),\n      'VerificationSid': _.get(opts, 'verificationSid'),\n      'Status': _.get(opts, 'status'),\n      'PageToken': opts.pageToken,\n      'Page': opts.pageNumber,\n      'PageSize': opts.pageSize\n    });\n\n    var promise = this._version.page({\n      uri: this._uri,\n      method: 'GET',\n      params: data\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new VerificationAttemptPage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Retrieve a single target page of VerificationAttemptInstance records from the\n   * API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function getPage\n   * @memberof Twilio.Verify.V2.VerificationAttemptList#\n   *\n   * @param {string} [targetUrl] - API-generated URL for the requested results page\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  VerificationAttemptListInstance.getPage = function getPage(targetUrl, callback) {\n    var deferred = Q.defer();\n\n    var promise = this._version._domain.twilio.request({\n      method: 'GET',\n      uri: targetUrl\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new VerificationAttemptPage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Constructs a verification_attempt\n   *\n   * @function get\n   * @memberof Twilio.Verify.V2.VerificationAttemptList#\n   *\n   * @param {string} sid - Verification Attempt Sid.\n   *\n   * @returns {Twilio.Verify.V2.VerificationAttemptContext}\n   */\n\n  /* jshint ignore:end */\n\n\n  VerificationAttemptListInstance.get = function get(sid) {\n    return new VerificationAttemptContext(this._version, sid);\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Verify.V2.VerificationAttemptList#\n   *\n   * @returns Object\n   */\n\n  /* jshint ignore:end */\n\n\n  VerificationAttemptListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n\n  VerificationAttemptListInstance[util.inspect.custom] = function inspect(depth, options) {\n    return util.inspect(this.toJSON(), options);\n  };\n\n  return VerificationAttemptListInstance;\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the VerificationAttemptPage\n *\n * @constructor Twilio.Verify.V2.VerificationAttemptPage\n *\n * @param {V2} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {VerificationAttemptSolution} solution - Path solution\n *\n * @returns VerificationAttemptPage\n */\n\n/* jshint ignore:end */\n\n\nVerificationAttemptPage = function VerificationAttemptPage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n\n_.extend(VerificationAttemptPage.prototype, Page.prototype);\n\nVerificationAttemptPage.prototype.constructor = VerificationAttemptPage;\n/* jshint ignore:start */\n\n/**\n * Build an instance of VerificationAttemptInstance\n *\n * @function getInstance\n * @memberof Twilio.Verify.V2.VerificationAttemptPage#\n *\n * @param {VerificationAttemptPayload} payload - Payload response from the API\n *\n * @returns VerificationAttemptInstance\n */\n\n/* jshint ignore:end */\n\nVerificationAttemptPage.prototype.getInstance = function getInstance(payload) {\n  return new VerificationAttemptInstance(this._version, payload);\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Verify.V2.VerificationAttemptPage#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nVerificationAttemptPage.prototype.toJSON = function toJSON() {\n  let clone = {};\n\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n\n  return clone;\n};\n\nVerificationAttemptPage.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the VerificationAttemptContext\n *\n * @constructor Twilio.Verify.V2.VerificationAttemptInstance\n *\n * @property {string} sid -\n *          The SID that uniquely identifies the verification attempt.\n * @property {string} accountSid -\n *          The SID of the Account that created the verification.\n * @property {string} serviceSid -\n *          The SID of the verify service that generated this attempt.\n * @property {string} verificationSid -\n *          The SID of the verification that generated this attempt.\n * @property {Date} dateCreated - The date this Attempt was created\n * @property {Date} dateUpdated - The date this Attempt was updated\n * @property {verification_attempt.conversion_status} conversionStatus -\n *          Status of the conversion for the verification.\n * @property {verification_attempt.channels} channel -\n *          Communication channel used for the attempt.\n * @property {object} price -\n *          An object containing the charge for this verification attempt.\n * @property {object} channelData -\n *          An object containing the channel specific information for an attempt.\n * @property {string} url - The url\n *\n * @param {V2} version - Version of the resource\n * @param {VerificationAttemptPayload} payload - The instance payload\n * @param {sid} sid - Verification Attempt Sid.\n */\n\n/* jshint ignore:end */\n\n\nVerificationAttemptInstance = function VerificationAttemptInstance(version, payload, sid) {\n  this._version = version; // Marshaled Properties\n\n  this.sid = payload.sid; // jshint ignore:line\n\n  this.accountSid = payload.account_sid; // jshint ignore:line\n\n  this.serviceSid = payload.service_sid; // jshint ignore:line\n\n  this.verificationSid = payload.verification_sid; // jshint ignore:line\n\n  this.dateCreated = deserialize.iso8601DateTime(payload.date_created); // jshint ignore:line\n\n  this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated); // jshint ignore:line\n\n  this.conversionStatus = payload.conversion_status; // jshint ignore:line\n\n  this.channel = payload.channel; // jshint ignore:line\n\n  this.price = payload.price; // jshint ignore:line\n\n  this.channelData = payload.channel_data; // jshint ignore:line\n\n  this.url = payload.url; // jshint ignore:line\n  // Context\n\n  this._context = undefined;\n  this._solution = {\n    sid: sid || this.sid\n  };\n};\n\nObject.defineProperty(VerificationAttemptInstance.prototype, '_proxy', {\n  get: function () {\n    if (!this._context) {\n      this._context = new VerificationAttemptContext(this._version, this._solution.sid);\n    }\n\n    return this._context;\n  }\n});\n/* jshint ignore:start */\n\n/**\n * fetch a VerificationAttemptInstance\n *\n * @function fetch\n * @memberof Twilio.Verify.V2.VerificationAttemptInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed VerificationAttemptInstance\n */\n\n/* jshint ignore:end */\n\nVerificationAttemptInstance.prototype.fetch = function fetch(callback) {\n  return this._proxy.fetch(callback);\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Verify.V2.VerificationAttemptInstance#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nVerificationAttemptInstance.prototype.toJSON = function toJSON() {\n  let clone = {};\n\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n\n  return clone;\n};\n\nVerificationAttemptInstance.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the VerificationAttemptContext\n *\n * @constructor Twilio.Verify.V2.VerificationAttemptContext\n *\n * @param {V2} version - Version of the resource\n * @param {sid} sid - Verification Attempt Sid.\n */\n\n/* jshint ignore:end */\n\n\nVerificationAttemptContext = function VerificationAttemptContext(version, sid) {\n  this._version = version; // Path Solution\n\n  this._solution = {\n    sid: sid\n  };\n  this._uri = `/Attempts/${sid}`;\n};\n/* jshint ignore:start */\n\n/**\n * fetch a VerificationAttemptInstance\n *\n * @function fetch\n * @memberof Twilio.Verify.V2.VerificationAttemptContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed VerificationAttemptInstance\n */\n\n/* jshint ignore:end */\n\n\nVerificationAttemptContext.prototype.fetch = function fetch(callback) {\n  var deferred = Q.defer();\n\n  var promise = this._version.fetch({\n    uri: this._uri,\n    method: 'GET'\n  });\n\n  promise = promise.then(function (payload) {\n    deferred.resolve(new VerificationAttemptInstance(this._version, payload, this._solution.sid));\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Verify.V2.VerificationAttemptContext#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nVerificationAttemptContext.prototype.toJSON = function toJSON() {\n  return this._solution;\n};\n\nVerificationAttemptContext.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\nmodule.exports = {\n  VerificationAttemptList: VerificationAttemptList,\n  VerificationAttemptPage: VerificationAttemptPage,\n  VerificationAttemptInstance: VerificationAttemptInstance,\n  VerificationAttemptContext: VerificationAttemptContext\n};","map":{"version":3,"names":["Q","require","_","util","Page","deserialize","serialize","values","VerificationAttemptList","VerificationAttemptPage","VerificationAttemptInstance","VerificationAttemptContext","version","VerificationAttemptListInstance","sid","get","_version","_solution","_uri","each","opts","callback","isFunction","isUndefined","Error","done","currentPage","currentResource","limits","readLimits","limit","pageSize","onComplete","error","fetchNextPage","fn","promise","then","page","instances","instance","bind","nextPage","catch","merge","list","deferred","defer","allResources","resource","push","length","resolve","reject","nodeify","data","of","iso8601DateTime","pageToken","pageNumber","uri","method","params","payload","getPage","targetUrl","_domain","twilio","request","toJSON","inspect","custom","depth","options","response","solution","prototype","constructor","call","extend","getInstance","clone","forOwn","value","key","startsWith","accountSid","account_sid","serviceSid","service_sid","verificationSid","verification_sid","dateCreated","date_created","dateUpdated","date_updated","conversionStatus","conversion_status","channel","price","channelData","channel_data","url","_context","undefined","Object","defineProperty","fetch","_proxy","module","exports"],"sources":["/Users/hooniesun/rmit/fwp/assessment1/lan/node_modules/twilio/lib/rest/verify/v2/verificationAttempt.js"],"sourcesContent":["'use strict';\n\n/* jshint ignore:start */\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n/* jshint ignore:end */\n\nvar Q = require('q');  /* jshint ignore:line */\nvar _ = require('lodash');  /* jshint ignore:line */\nvar util = require('util');  /* jshint ignore:line */\nvar Page = require('../../../base/Page');  /* jshint ignore:line */\nvar deserialize = require(\n    '../../../base/deserialize');  /* jshint ignore:line */\nvar serialize = require('../../../base/serialize');  /* jshint ignore:line */\nvar values = require('../../../base/values');  /* jshint ignore:line */\n\nvar VerificationAttemptList;\nvar VerificationAttemptPage;\nvar VerificationAttemptInstance;\nvar VerificationAttemptContext;\n\n/* jshint ignore:start */\n/**\n * Initialize the VerificationAttemptList\n *\n * @constructor Twilio.Verify.V2.VerificationAttemptList\n *\n * @param {Twilio.Verify.V2} version - Version of the resource\n */\n/* jshint ignore:end */\nVerificationAttemptList = function VerificationAttemptList(version) {\n  /* jshint ignore:start */\n  /**\n   * @function verificationAttempts\n   * @memberof Twilio.Verify.V2#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Verify.V2.VerificationAttemptContext}\n   */\n  /* jshint ignore:end */\n  function VerificationAttemptListInstance(sid) {\n    return VerificationAttemptListInstance.get(sid);\n  }\n\n  VerificationAttemptListInstance._version = version;\n  // Path Solution\n  VerificationAttemptListInstance._solution = {};\n  VerificationAttemptListInstance._uri = `/Attempts`;\n  /* jshint ignore:start */\n  /**\n   * Streams VerificationAttemptInstance records from the API.\n   *\n   * This operation lazily loads records as efficiently as possible until the limit\n   * is reached.\n   *\n   * The results are passed into the callback function, so this operation is memory\n   * efficient.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function each\n   * @memberof Twilio.Verify.V2.VerificationAttemptList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {Date} [opts.dateCreatedAfter] -\n   *          Filter verification attempts after this date.\n   * @param {Date} [opts.dateCreatedBefore] -\n   *          Filter verification attempts before this date.\n   * @param {string} [opts.channelData.to] -\n   *          Filters by destination of the verification attempt.\n   * @param {string} [opts.country] -\n   *          Filter verification attempts by destination country.\n   * @param {verification_attempt.channels} [opts.channel] -\n   *          Filter verification attempts by communication channel.\n   * @param {string} [opts.verifyServiceSid] -\n   *          Filter verification attempts by verify service.\n   * @param {string} [opts.verificationSid] - Filter attempts by verification.\n   * @param {verification_attempt.conversion_status} [opts.status] -\n   *          Filter verification attempts by conversion status.\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         each() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no pageSize is defined but a limit is defined,\n   *         each() will attempt to read the limit with the most efficient\n   *         page size, i.e. min(limit, 1000)\n   * @param {Function} [opts.callback] -\n   *         Function to process each record. If this and a positional\n   *         callback are passed, this one will be used\n   * @param {Function} [opts.done] -\n   *          Function to be called upon completion of streaming\n   * @param {Function} [callback] - Function to process each record\n   */\n  /* jshint ignore:end */\n  VerificationAttemptListInstance.each = function each(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    if (opts.callback) {\n      callback = opts.callback;\n    }\n    if (_.isUndefined(callback)) {\n      throw new Error('Callback function must be provided');\n    }\n\n    var done = false;\n    var currentPage = 1;\n    var currentResource = 0;\n    var limits = this._version.readLimits({\n      limit: opts.limit,\n      pageSize: opts.pageSize\n    });\n\n    function onComplete(error) {\n      done = true;\n      if (_.isFunction(opts.done)) {\n        opts.done(error);\n      }\n    }\n\n    function fetchNextPage(fn) {\n      var promise = fn();\n      if (_.isUndefined(promise)) {\n        onComplete();\n        return;\n      }\n\n      promise.then(function(page) {\n        _.each(page.instances, function(instance) {\n          if (done || (!_.isUndefined(opts.limit) && currentResource >= opts.limit)) {\n            done = true;\n            return false;\n          }\n\n          currentResource++;\n          callback(instance, onComplete);\n        });\n\n        if (!done) {\n          currentPage++;\n          fetchNextPage(_.bind(page.nextPage, page));\n        } else {\n          onComplete();\n        }\n      });\n\n      promise.catch(onComplete);\n    }\n\n    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Lists VerificationAttemptInstance records from the API as a list.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function list\n   * @memberof Twilio.Verify.V2.VerificationAttemptList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {Date} [opts.dateCreatedAfter] -\n   *          Filter verification attempts after this date.\n   * @param {Date} [opts.dateCreatedBefore] -\n   *          Filter verification attempts before this date.\n   * @param {string} [opts.channelData.to] -\n   *          Filters by destination of the verification attempt.\n   * @param {string} [opts.country] -\n   *          Filter verification attempts by destination country.\n   * @param {verification_attempt.channels} [opts.channel] -\n   *          Filter verification attempts by communication channel.\n   * @param {string} [opts.verifyServiceSid] -\n   *          Filter verification attempts by verify service.\n   * @param {string} [opts.verificationSid] - Filter attempts by verification.\n   * @param {verification_attempt.conversion_status} [opts.status] -\n   *          Filter verification attempts by conversion status.\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         list() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no page_size is defined but a limit is defined,\n   *         list() will attempt to read the limit with the most\n   *         efficient page size, i.e. min(limit, 1000)\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  VerificationAttemptListInstance.list = function list(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    var deferred = Q.defer();\n    var allResources = [];\n    opts.callback = function(resource, done) {\n      allResources.push(resource);\n\n      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {\n        done();\n      }\n    };\n\n    opts.done = function(error) {\n      if (_.isUndefined(error)) {\n        deferred.resolve(allResources);\n      } else {\n        deferred.reject(error);\n      }\n    };\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    this.each(opts);\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single page of VerificationAttemptInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function page\n   * @memberof Twilio.Verify.V2.VerificationAttemptList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {Date} [opts.dateCreatedAfter] -\n   *          Filter verification attempts after this date.\n   * @param {Date} [opts.dateCreatedBefore] -\n   *          Filter verification attempts before this date.\n   * @param {string} [opts.channelData.to] -\n   *          Filters by destination of the verification attempt.\n   * @param {string} [opts.country] -\n   *          Filter verification attempts by destination country.\n   * @param {verification_attempt.channels} [opts.channel] -\n   *          Filter verification attempts by communication channel.\n   * @param {string} [opts.verifyServiceSid] -\n   *          Filter verification attempts by verify service.\n   * @param {string} [opts.verificationSid] - Filter attempts by verification.\n   * @param {verification_attempt.conversion_status} [opts.status] -\n   *          Filter verification attempts by conversion status.\n   * @param {string} [opts.pageToken] - PageToken provided by the API\n   * @param {number} [opts.pageNumber] -\n   *          Page Number, this value is simply for client state\n   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  VerificationAttemptListInstance.page = function page(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n\n    var deferred = Q.defer();\n    var data = values.of({\n      'DateCreatedAfter': serialize.iso8601DateTime(_.get(opts, 'dateCreatedAfter')),\n      'DateCreatedBefore': serialize.iso8601DateTime(_.get(opts, 'dateCreatedBefore')),\n      'ChannelData.To': _.get(opts, 'channelData.to'),\n      'Country': _.get(opts, 'country'),\n      'Channel': _.get(opts, 'channel'),\n      'VerifyServiceSid': _.get(opts, 'verifyServiceSid'),\n      'VerificationSid': _.get(opts, 'verificationSid'),\n      'Status': _.get(opts, 'status'),\n      'PageToken': opts.pageToken,\n      'Page': opts.pageNumber,\n      'PageSize': opts.pageSize\n    });\n\n    var promise = this._version.page({uri: this._uri, method: 'GET', params: data});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new VerificationAttemptPage(this._version, payload, this._solution));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single target page of VerificationAttemptInstance records from the\n   * API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function getPage\n   * @memberof Twilio.Verify.V2.VerificationAttemptList#\n   *\n   * @param {string} [targetUrl] - API-generated URL for the requested results page\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  VerificationAttemptListInstance.getPage = function getPage(targetUrl, callback)\n                                                              {\n    var deferred = Q.defer();\n\n    var promise = this._version._domain.twilio.request({method: 'GET', uri: targetUrl});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new VerificationAttemptPage(this._version, payload, this._solution));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Constructs a verification_attempt\n   *\n   * @function get\n   * @memberof Twilio.Verify.V2.VerificationAttemptList#\n   *\n   * @param {string} sid - Verification Attempt Sid.\n   *\n   * @returns {Twilio.Verify.V2.VerificationAttemptContext}\n   */\n  /* jshint ignore:end */\n  VerificationAttemptListInstance.get = function get(sid) {\n    return new VerificationAttemptContext(this._version, sid);\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Verify.V2.VerificationAttemptList#\n   *\n   * @returns Object\n   */\n  /* jshint ignore:end */\n  VerificationAttemptListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n\n  VerificationAttemptListInstance[util.inspect.custom] = function inspect(depth,\n      options) {\n    return util.inspect(this.toJSON(), options);\n  };\n\n  return VerificationAttemptListInstance;\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the VerificationAttemptPage\n *\n * @constructor Twilio.Verify.V2.VerificationAttemptPage\n *\n * @param {V2} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {VerificationAttemptSolution} solution - Path solution\n *\n * @returns VerificationAttemptPage\n */\n/* jshint ignore:end */\nVerificationAttemptPage = function VerificationAttemptPage(version, response,\n                                                            solution) {\n  // Path Solution\n  this._solution = solution;\n\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n\n_.extend(VerificationAttemptPage.prototype, Page.prototype);\nVerificationAttemptPage.prototype.constructor = VerificationAttemptPage;\n\n/* jshint ignore:start */\n/**\n * Build an instance of VerificationAttemptInstance\n *\n * @function getInstance\n * @memberof Twilio.Verify.V2.VerificationAttemptPage#\n *\n * @param {VerificationAttemptPayload} payload - Payload response from the API\n *\n * @returns VerificationAttemptInstance\n */\n/* jshint ignore:end */\nVerificationAttemptPage.prototype.getInstance = function getInstance(payload) {\n  return new VerificationAttemptInstance(this._version, payload);\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Verify.V2.VerificationAttemptPage#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nVerificationAttemptPage.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function(value, key) {\n    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\n\nVerificationAttemptPage.prototype[util.inspect.custom] = function inspect(depth,\n    options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the VerificationAttemptContext\n *\n * @constructor Twilio.Verify.V2.VerificationAttemptInstance\n *\n * @property {string} sid -\n *          The SID that uniquely identifies the verification attempt.\n * @property {string} accountSid -\n *          The SID of the Account that created the verification.\n * @property {string} serviceSid -\n *          The SID of the verify service that generated this attempt.\n * @property {string} verificationSid -\n *          The SID of the verification that generated this attempt.\n * @property {Date} dateCreated - The date this Attempt was created\n * @property {Date} dateUpdated - The date this Attempt was updated\n * @property {verification_attempt.conversion_status} conversionStatus -\n *          Status of the conversion for the verification.\n * @property {verification_attempt.channels} channel -\n *          Communication channel used for the attempt.\n * @property {object} price -\n *          An object containing the charge for this verification attempt.\n * @property {object} channelData -\n *          An object containing the channel specific information for an attempt.\n * @property {string} url - The url\n *\n * @param {V2} version - Version of the resource\n * @param {VerificationAttemptPayload} payload - The instance payload\n * @param {sid} sid - Verification Attempt Sid.\n */\n/* jshint ignore:end */\nVerificationAttemptInstance = function VerificationAttemptInstance(version,\n    payload, sid) {\n  this._version = version;\n\n  // Marshaled Properties\n  this.sid = payload.sid; // jshint ignore:line\n  this.accountSid = payload.account_sid; // jshint ignore:line\n  this.serviceSid = payload.service_sid; // jshint ignore:line\n  this.verificationSid = payload.verification_sid; // jshint ignore:line\n  this.dateCreated = deserialize.iso8601DateTime(payload.date_created); // jshint ignore:line\n  this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated); // jshint ignore:line\n  this.conversionStatus = payload.conversion_status; // jshint ignore:line\n  this.channel = payload.channel; // jshint ignore:line\n  this.price = payload.price; // jshint ignore:line\n  this.channelData = payload.channel_data; // jshint ignore:line\n  this.url = payload.url; // jshint ignore:line\n\n  // Context\n  this._context = undefined;\n  this._solution = {sid: sid || this.sid, };\n};\n\nObject.defineProperty(VerificationAttemptInstance.prototype,\n  '_proxy', {\n    get: function() {\n      if (!this._context) {\n        this._context = new VerificationAttemptContext(this._version, this._solution.sid);\n      }\n\n      return this._context;\n    }\n});\n\n/* jshint ignore:start */\n/**\n * fetch a VerificationAttemptInstance\n *\n * @function fetch\n * @memberof Twilio.Verify.V2.VerificationAttemptInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed VerificationAttemptInstance\n */\n/* jshint ignore:end */\nVerificationAttemptInstance.prototype.fetch = function fetch(callback) {\n  return this._proxy.fetch(callback);\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Verify.V2.VerificationAttemptInstance#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nVerificationAttemptInstance.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function(value, key) {\n    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\n\nVerificationAttemptInstance.prototype[util.inspect.custom] = function\n    inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the VerificationAttemptContext\n *\n * @constructor Twilio.Verify.V2.VerificationAttemptContext\n *\n * @param {V2} version - Version of the resource\n * @param {sid} sid - Verification Attempt Sid.\n */\n/* jshint ignore:end */\nVerificationAttemptContext = function VerificationAttemptContext(version, sid) {\n  this._version = version;\n\n  // Path Solution\n  this._solution = {sid: sid, };\n  this._uri = `/Attempts/${sid}`;\n};\n\n/* jshint ignore:start */\n/**\n * fetch a VerificationAttemptInstance\n *\n * @function fetch\n * @memberof Twilio.Verify.V2.VerificationAttemptContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed VerificationAttemptInstance\n */\n/* jshint ignore:end */\nVerificationAttemptContext.prototype.fetch = function fetch(callback) {\n  var deferred = Q.defer();\n  var promise = this._version.fetch({uri: this._uri, method: 'GET'});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(new VerificationAttemptInstance(this._version, payload, this._solution.sid));\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Verify.V2.VerificationAttemptContext#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nVerificationAttemptContext.prototype.toJSON = function toJSON() {\n  return this._solution;\n};\n\nVerificationAttemptContext.prototype[util.inspect.custom] = function\n    inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\nmodule.exports = {\n  VerificationAttemptList: VerificationAttemptList,\n  VerificationAttemptPage: VerificationAttemptPage,\n  VerificationAttemptInstance: VerificationAttemptInstance,\n  VerificationAttemptContext: VerificationAttemptContext\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}