{"ast":null,"code":"// Generated by CoffeeScript 2.4.1\n(function () {\n  var NodeType, XMLCData, XMLCharacterData;\n  NodeType = require('./NodeType');\n  XMLCharacterData = require('./XMLCharacterData'); // Represents a  CDATA node\n\n  module.exports = XMLCData = class XMLCData extends XMLCharacterData {\n    // Initializes a new instance of `XMLCData`\n    // `text` CDATA text\n    constructor(parent, text) {\n      super(parent);\n\n      if (text == null) {\n        throw new Error(\"Missing CDATA text. \" + this.debugInfo());\n      }\n\n      this.name = \"#cdata-section\";\n      this.type = NodeType.CData;\n      this.value = this.stringify.cdata(text);\n    } // Creates and returns a deep clone of `this`\n\n\n    clone() {\n      return Object.create(this);\n    } // Converts the XML fragment to string\n    // `options.pretty` pretty prints the result\n    // `options.indent` indentation for pretty print\n    // `options.offset` how many indentations to add to every line for pretty print\n    // `options.newline` newline sequence for pretty print\n\n\n    toString(options) {\n      return this.options.writer.cdata(this, this.options.writer.filterOptions(options));\n    }\n\n  };\n}).call(this);","map":{"version":3,"names":["NodeType","XMLCData","XMLCharacterData","require","module","exports","constructor","parent","text","Error","debugInfo","name","type","CData","value","stringify","cdata","clone","Object","create","toString","options","writer","filterOptions","call"],"sources":["/Users/hooniesun/rmit/fwp/assessment1/lan/node_modules/xmlbuilder/lib/XMLCData.js"],"sourcesContent":["// Generated by CoffeeScript 2.4.1\n(function() {\n  var NodeType, XMLCData, XMLCharacterData;\n\n  NodeType = require('./NodeType');\n\n  XMLCharacterData = require('./XMLCharacterData');\n\n  // Represents a  CDATA node\n  module.exports = XMLCData = class XMLCData extends XMLCharacterData {\n    // Initializes a new instance of `XMLCData`\n\n    // `text` CDATA text\n    constructor(parent, text) {\n      super(parent);\n      if (text == null) {\n        throw new Error(\"Missing CDATA text. \" + this.debugInfo());\n      }\n      this.name = \"#cdata-section\";\n      this.type = NodeType.CData;\n      this.value = this.stringify.cdata(text);\n    }\n\n    // Creates and returns a deep clone of `this`\n    clone() {\n      return Object.create(this);\n    }\n\n    // Converts the XML fragment to string\n\n    // `options.pretty` pretty prints the result\n    // `options.indent` indentation for pretty print\n    // `options.offset` how many indentations to add to every line for pretty print\n    // `options.newline` newline sequence for pretty print\n    toString(options) {\n      return this.options.writer.cdata(this, this.options.writer.filterOptions(options));\n    }\n\n  };\n\n}).call(this);\n"],"mappings":"AAAA;AACA,CAAC,YAAW;EACV,IAAIA,QAAJ,EAAcC,QAAd,EAAwBC,gBAAxB;EAEAF,QAAQ,GAAGG,OAAO,CAAC,YAAD,CAAlB;EAEAD,gBAAgB,GAAGC,OAAO,CAAC,oBAAD,CAA1B,CALU,CAOV;;EACAC,MAAM,CAACC,OAAP,GAAiBJ,QAAQ,GAAG,MAAMA,QAAN,SAAuBC,gBAAvB,CAAwC;IAClE;IAEA;IACAI,WAAW,CAACC,MAAD,EAASC,IAAT,EAAe;MACxB,MAAMD,MAAN;;MACA,IAAIC,IAAI,IAAI,IAAZ,EAAkB;QAChB,MAAM,IAAIC,KAAJ,CAAU,yBAAyB,KAAKC,SAAL,EAAnC,CAAN;MACD;;MACD,KAAKC,IAAL,GAAY,gBAAZ;MACA,KAAKC,IAAL,GAAYZ,QAAQ,CAACa,KAArB;MACA,KAAKC,KAAL,GAAa,KAAKC,SAAL,CAAeC,KAAf,CAAqBR,IAArB,CAAb;IACD,CAZiE,CAclE;;;IACAS,KAAK,GAAG;MACN,OAAOC,MAAM,CAACC,MAAP,CAAc,IAAd,CAAP;IACD,CAjBiE,CAmBlE;IAEA;IACA;IACA;IACA;;;IACAC,QAAQ,CAACC,OAAD,EAAU;MAChB,OAAO,KAAKA,OAAL,CAAaC,MAAb,CAAoBN,KAApB,CAA0B,IAA1B,EAAgC,KAAKK,OAAL,CAAaC,MAAb,CAAoBC,aAApB,CAAkCF,OAAlC,CAAhC,CAAP;IACD;;EA3BiE,CAApE;AA+BD,CAvCD,EAuCGG,IAvCH,CAuCQ,IAvCR"},"metadata":{},"sourceType":"script"}