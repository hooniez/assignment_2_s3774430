{"ast":null,"code":"'use strict';\n/* jshint ignore:start */\n\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n\n/* jshint ignore:end */\n\nvar Q = require('q');\n/* jshint ignore:line */\n\n\nvar _ = require('lodash');\n/* jshint ignore:line */\n\n\nvar util = require('util');\n/* jshint ignore:line */\n\n\nvar Page = require('../../../base/Page');\n/* jshint ignore:line */\n\n\nvar deserialize = require('../../../base/deserialize');\n/* jshint ignore:line */\n\n\nvar serialize = require('../../../base/serialize');\n/* jshint ignore:line */\n\n\nvar values = require('../../../base/values');\n/* jshint ignore:line */\n\n\nvar CompositionList;\nvar CompositionPage;\nvar CompositionInstance;\nvar CompositionContext;\n/* jshint ignore:start */\n\n/**\n * Initialize the CompositionList\n *\n * @constructor Twilio.Video.V1.CompositionList\n *\n * @param {Twilio.Video.V1} version - Version of the resource\n */\n\n/* jshint ignore:end */\n\nCompositionList = function CompositionList(version) {\n  /* jshint ignore:start */\n\n  /**\n   * @function compositions\n   * @memberof Twilio.Video.V1#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Video.V1.CompositionContext}\n   */\n\n  /* jshint ignore:end */\n  function CompositionListInstance(sid) {\n    return CompositionListInstance.get(sid);\n  }\n\n  CompositionListInstance._version = version; // Path Solution\n\n  CompositionListInstance._solution = {};\n  CompositionListInstance._uri = `/Compositions`;\n  /* jshint ignore:start */\n\n  /**\n   * Streams CompositionInstance records from the API.\n   *\n   * This operation lazily loads records as efficiently as possible until the limit\n   * is reached.\n   *\n   * The results are passed into the callback function, so this operation is memory\n   * efficient.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function each\n   * @memberof Twilio.Video.V1.CompositionList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {composition.status} [opts.status] -\n   *          Read only Composition resources with this status\n   * @param {Date} [opts.dateCreatedAfter] -\n   *          Read only Composition resources created on or after this {@link https://en.wikipedia.org/wiki/ISO_8601|ISO 8601} date-time with time zone\n   * @param {Date} [opts.dateCreatedBefore] -\n   *          Read only Composition resources created before this ISO 8601 date-time with time zone\n   * @param {string} [opts.roomSid] -\n   *          Read only Composition resources with this Room SID\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         each() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no pageSize is defined but a limit is defined,\n   *         each() will attempt to read the limit with the most efficient\n   *         page size, i.e. min(limit, 1000)\n   * @param {Function} [opts.callback] -\n   *         Function to process each record. If this and a positional\n   *         callback are passed, this one will be used\n   * @param {Function} [opts.done] -\n   *          Function to be called upon completion of streaming\n   * @param {Function} [callback] - Function to process each record\n   */\n\n  /* jshint ignore:end */\n\n  CompositionListInstance.each = function each(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n\n    if (opts.callback) {\n      callback = opts.callback;\n    }\n\n    if (_.isUndefined(callback)) {\n      throw new Error('Callback function must be provided');\n    }\n\n    var done = false;\n    var currentPage = 1;\n    var currentResource = 0;\n\n    var limits = this._version.readLimits({\n      limit: opts.limit,\n      pageSize: opts.pageSize\n    });\n\n    function onComplete(error) {\n      done = true;\n\n      if (_.isFunction(opts.done)) {\n        opts.done(error);\n      }\n    }\n\n    function fetchNextPage(fn) {\n      var promise = fn();\n\n      if (_.isUndefined(promise)) {\n        onComplete();\n        return;\n      }\n\n      promise.then(function (page) {\n        _.each(page.instances, function (instance) {\n          if (done || !_.isUndefined(opts.limit) && currentResource >= opts.limit) {\n            done = true;\n            return false;\n          }\n\n          currentResource++;\n          callback(instance, onComplete);\n        });\n\n        if (!done) {\n          currentPage++;\n          fetchNextPage(_.bind(page.nextPage, page));\n        } else {\n          onComplete();\n        }\n      });\n      promise.catch(onComplete);\n    }\n\n    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Lists CompositionInstance records from the API as a list.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function list\n   * @memberof Twilio.Video.V1.CompositionList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {composition.status} [opts.status] -\n   *          Read only Composition resources with this status\n   * @param {Date} [opts.dateCreatedAfter] -\n   *          Read only Composition resources created on or after this {@link https://en.wikipedia.org/wiki/ISO_8601|ISO 8601} date-time with time zone\n   * @param {Date} [opts.dateCreatedBefore] -\n   *          Read only Composition resources created before this ISO 8601 date-time with time zone\n   * @param {string} [opts.roomSid] -\n   *          Read only Composition resources with this Room SID\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         list() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no page_size is defined but a limit is defined,\n   *         list() will attempt to read the limit with the most\n   *         efficient page size, i.e. min(limit, 1000)\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  CompositionListInstance.list = function list(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n    var deferred = Q.defer();\n    var allResources = [];\n\n    opts.callback = function (resource, done) {\n      allResources.push(resource);\n\n      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {\n        done();\n      }\n    };\n\n    opts.done = function (error) {\n      if (_.isUndefined(error)) {\n        deferred.resolve(allResources);\n      } else {\n        deferred.reject(error);\n      }\n    };\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    this.each(opts);\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Retrieve a single page of CompositionInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function page\n   * @memberof Twilio.Video.V1.CompositionList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {composition.status} [opts.status] -\n   *          Read only Composition resources with this status\n   * @param {Date} [opts.dateCreatedAfter] -\n   *          Read only Composition resources created on or after this {@link https://en.wikipedia.org/wiki/ISO_8601|ISO 8601} date-time with time zone\n   * @param {Date} [opts.dateCreatedBefore] -\n   *          Read only Composition resources created before this ISO 8601 date-time with time zone\n   * @param {string} [opts.roomSid] -\n   *          Read only Composition resources with this Room SID\n   * @param {string} [opts.pageToken] - PageToken provided by the API\n   * @param {number} [opts.pageNumber] -\n   *          Page Number, this value is simply for client state\n   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  CompositionListInstance.page = function page(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n    var deferred = Q.defer();\n    var data = values.of({\n      'Status': _.get(opts, 'status'),\n      'DateCreatedAfter': serialize.iso8601DateTime(_.get(opts, 'dateCreatedAfter')),\n      'DateCreatedBefore': serialize.iso8601DateTime(_.get(opts, 'dateCreatedBefore')),\n      'RoomSid': _.get(opts, 'roomSid'),\n      'PageToken': opts.pageToken,\n      'Page': opts.pageNumber,\n      'PageSize': opts.pageSize\n    });\n\n    var promise = this._version.page({\n      uri: this._uri,\n      method: 'GET',\n      params: data\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new CompositionPage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Retrieve a single target page of CompositionInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function getPage\n   * @memberof Twilio.Video.V1.CompositionList#\n   *\n   * @param {string} [targetUrl] - API-generated URL for the requested results page\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  CompositionListInstance.getPage = function getPage(targetUrl, callback) {\n    var deferred = Q.defer();\n\n    var promise = this._version._domain.twilio.request({\n      method: 'GET',\n      uri: targetUrl\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new CompositionPage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * create a CompositionInstance\n   *\n   * @function create\n   * @memberof Twilio.Video.V1.CompositionList#\n   *\n   * @param {object} opts - Options for request\n   * @param {string} opts.roomSid -\n   *          The SID of the Group Room with the media tracks to be used as composition sources\n   * @param {object} [opts.videoLayout] -\n   *          An object that describes the video layout of the composition\n   * @param {string|list} [opts.audioSources] -\n   *          An array of track names from the same group room to merge\n   * @param {string|list} [opts.audioSourcesExcluded] -\n   *          An array of track names to exclude\n   * @param {string} [opts.resolution] -\n   *          A string that describes the columns (width) and rows (height) of the generated composed video in pixels\n   * @param {composition.format} [opts.format] -\n   *          The container format of the composition's media files\n   * @param {string} [opts.statusCallback] -\n   *          The URL we should call to send status information to your application\n   * @param {string} [opts.statusCallbackMethod] -\n   *          The HTTP method we should use to call status_callback\n   * @param {boolean} [opts.trim] -\n   *          Whether to clip the intervals where there is no active media in the composition\n   * @param {function} [callback] - Callback to handle processed record\n   *\n   * @returns {Promise} Resolves to processed CompositionInstance\n   */\n\n  /* jshint ignore:end */\n\n\n  CompositionListInstance.create = function create(opts, callback) {\n    if (_.isUndefined(opts)) {\n      throw new Error('Required parameter \"opts\" missing.');\n    }\n\n    if (_.isUndefined(opts['roomSid'])) {\n      throw new Error('Required parameter \"opts[\\'roomSid\\']\" missing.');\n    }\n\n    var deferred = Q.defer();\n    var data = values.of({\n      'RoomSid': _.get(opts, 'roomSid'),\n      'VideoLayout': serialize.object(_.get(opts, 'videoLayout')),\n      'AudioSources': serialize.map(_.get(opts, 'audioSources'), function (e) {\n        return e;\n      }),\n      'AudioSourcesExcluded': serialize.map(_.get(opts, 'audioSourcesExcluded'), function (e) {\n        return e;\n      }),\n      'Resolution': _.get(opts, 'resolution'),\n      'Format': _.get(opts, 'format'),\n      'StatusCallback': _.get(opts, 'statusCallback'),\n      'StatusCallbackMethod': _.get(opts, 'statusCallbackMethod'),\n      'Trim': serialize.bool(_.get(opts, 'trim'))\n    });\n\n    var promise = this._version.create({\n      uri: this._uri,\n      method: 'POST',\n      data: data\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new CompositionInstance(this._version, payload, this._solution.sid));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Constructs a composition\n   *\n   * @function get\n   * @memberof Twilio.Video.V1.CompositionList#\n   *\n   * @param {string} sid - The SID that identifies the resource to fetch\n   *\n   * @returns {Twilio.Video.V1.CompositionContext}\n   */\n\n  /* jshint ignore:end */\n\n\n  CompositionListInstance.get = function get(sid) {\n    return new CompositionContext(this._version, sid);\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Video.V1.CompositionList#\n   *\n   * @returns Object\n   */\n\n  /* jshint ignore:end */\n\n\n  CompositionListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n\n  CompositionListInstance[util.inspect.custom] = function inspect(depth, options) {\n    return util.inspect(this.toJSON(), options);\n  };\n\n  return CompositionListInstance;\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the CompositionPage\n *\n * @constructor Twilio.Video.V1.CompositionPage\n *\n * @param {V1} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {CompositionSolution} solution - Path solution\n *\n * @returns CompositionPage\n */\n\n/* jshint ignore:end */\n\n\nCompositionPage = function CompositionPage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n\n_.extend(CompositionPage.prototype, Page.prototype);\n\nCompositionPage.prototype.constructor = CompositionPage;\n/* jshint ignore:start */\n\n/**\n * Build an instance of CompositionInstance\n *\n * @function getInstance\n * @memberof Twilio.Video.V1.CompositionPage#\n *\n * @param {CompositionPayload} payload - Payload response from the API\n *\n * @returns CompositionInstance\n */\n\n/* jshint ignore:end */\n\nCompositionPage.prototype.getInstance = function getInstance(payload) {\n  return new CompositionInstance(this._version, payload);\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Video.V1.CompositionPage#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nCompositionPage.prototype.toJSON = function toJSON() {\n  let clone = {};\n\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n\n  return clone;\n};\n\nCompositionPage.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the CompositionContext\n *\n * @constructor Twilio.Video.V1.CompositionInstance\n *\n * @property {string} accountSid - The SID of the Account that created the resource\n * @property {composition.status} status - The status of the composition\n * @property {Date} dateCreated -\n *          The ISO 8601 date and time in GMT when the resource was created\n * @property {Date} dateCompleted - Date when the media processing task finished\n * @property {Date} dateDeleted -\n *          The ISO 8601 date and time in GMT when the composition generated media was deleted\n * @property {string} sid - The unique string that identifies the resource\n * @property {string} roomSid -\n *          The SID of the Group Room that generated the audio and video tracks used in the composition\n * @property {string} audioSources -\n *          The array of track names to include in the composition\n * @property {string} audioSourcesExcluded -\n *          The array of track names to exclude from the composition\n * @property {object} videoLayout -\n *          An object that describes the video layout of the composition\n * @property {string} resolution -\n *          The dimensions of the video image in pixels expressed as columns (width) and rows (height)\n * @property {boolean} trim - Whether to remove intervals with no media\n * @property {composition.format} format -\n *          The container format of the composition's media files as specified in the POST request that created the Composition resource\n * @property {number} bitrate - The average bit rate of the composition's media\n * @property {number} size - The size of the composed media file in bytes\n * @property {number} duration -\n *          The duration of the composition's media file in seconds\n * @property {string} mediaExternalLocation -\n *          The URL of the media file associated with the composition when stored externally\n * @property {string} statusCallback -\n *          The URL called to send status information on every composition event.\n * @property {string} statusCallbackMethod -\n *          The HTTP method used to call `status_callback`\n * @property {string} url - The absolute URL of the resource\n * @property {string} links -\n *          The URL of the media file associated with the composition\n *\n * @param {V1} version - Version of the resource\n * @param {CompositionPayload} payload - The instance payload\n * @param {sid} sid - The SID that identifies the resource to fetch\n */\n\n/* jshint ignore:end */\n\n\nCompositionInstance = function CompositionInstance(version, payload, sid) {\n  this._version = version; // Marshaled Properties\n\n  this.accountSid = payload.account_sid; // jshint ignore:line\n\n  this.status = payload.status; // jshint ignore:line\n\n  this.dateCreated = deserialize.iso8601DateTime(payload.date_created); // jshint ignore:line\n\n  this.dateCompleted = deserialize.iso8601DateTime(payload.date_completed); // jshint ignore:line\n\n  this.dateDeleted = deserialize.iso8601DateTime(payload.date_deleted); // jshint ignore:line\n\n  this.sid = payload.sid; // jshint ignore:line\n\n  this.roomSid = payload.room_sid; // jshint ignore:line\n\n  this.audioSources = payload.audio_sources; // jshint ignore:line\n\n  this.audioSourcesExcluded = payload.audio_sources_excluded; // jshint ignore:line\n\n  this.videoLayout = payload.video_layout; // jshint ignore:line\n\n  this.resolution = payload.resolution; // jshint ignore:line\n\n  this.trim = payload.trim; // jshint ignore:line\n\n  this.format = payload.format; // jshint ignore:line\n\n  this.bitrate = deserialize.integer(payload.bitrate); // jshint ignore:line\n\n  this.size = deserialize.integer(payload.size); // jshint ignore:line\n\n  this.duration = deserialize.integer(payload.duration); // jshint ignore:line\n\n  this.mediaExternalLocation = payload.media_external_location; // jshint ignore:line\n\n  this.statusCallback = payload.status_callback; // jshint ignore:line\n\n  this.statusCallbackMethod = payload.status_callback_method; // jshint ignore:line\n\n  this.url = payload.url; // jshint ignore:line\n\n  this.links = payload.links; // jshint ignore:line\n  // Context\n\n  this._context = undefined;\n  this._solution = {\n    sid: sid || this.sid\n  };\n};\n\nObject.defineProperty(CompositionInstance.prototype, '_proxy', {\n  get: function () {\n    if (!this._context) {\n      this._context = new CompositionContext(this._version, this._solution.sid);\n    }\n\n    return this._context;\n  }\n});\n/* jshint ignore:start */\n\n/**\n * fetch a CompositionInstance\n *\n * @function fetch\n * @memberof Twilio.Video.V1.CompositionInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed CompositionInstance\n */\n\n/* jshint ignore:end */\n\nCompositionInstance.prototype.fetch = function fetch(callback) {\n  return this._proxy.fetch(callback);\n};\n/* jshint ignore:start */\n\n/**\n * remove a CompositionInstance\n *\n * @function remove\n * @memberof Twilio.Video.V1.CompositionInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed CompositionInstance\n */\n\n/* jshint ignore:end */\n\n\nCompositionInstance.prototype.remove = function remove(callback) {\n  return this._proxy.remove(callback);\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Video.V1.CompositionInstance#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nCompositionInstance.prototype.toJSON = function toJSON() {\n  let clone = {};\n\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n\n  return clone;\n};\n\nCompositionInstance.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the CompositionContext\n *\n * @constructor Twilio.Video.V1.CompositionContext\n *\n * @param {V1} version - Version of the resource\n * @param {sid} sid - The SID that identifies the resource to fetch\n */\n\n/* jshint ignore:end */\n\n\nCompositionContext = function CompositionContext(version, sid) {\n  this._version = version; // Path Solution\n\n  this._solution = {\n    sid: sid\n  };\n  this._uri = `/Compositions/${sid}`;\n};\n/* jshint ignore:start */\n\n/**\n * fetch a CompositionInstance\n *\n * @function fetch\n * @memberof Twilio.Video.V1.CompositionContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed CompositionInstance\n */\n\n/* jshint ignore:end */\n\n\nCompositionContext.prototype.fetch = function fetch(callback) {\n  var deferred = Q.defer();\n\n  var promise = this._version.fetch({\n    uri: this._uri,\n    method: 'GET'\n  });\n\n  promise = promise.then(function (payload) {\n    deferred.resolve(new CompositionInstance(this._version, payload, this._solution.sid));\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n/* jshint ignore:start */\n\n/**\n * remove a CompositionInstance\n *\n * @function remove\n * @memberof Twilio.Video.V1.CompositionContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed CompositionInstance\n */\n\n/* jshint ignore:end */\n\n\nCompositionContext.prototype.remove = function remove(callback) {\n  var deferred = Q.defer();\n\n  var promise = this._version.remove({\n    uri: this._uri,\n    method: 'DELETE'\n  });\n\n  promise = promise.then(function (payload) {\n    deferred.resolve(payload);\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Video.V1.CompositionContext#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nCompositionContext.prototype.toJSON = function toJSON() {\n  return this._solution;\n};\n\nCompositionContext.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\nmodule.exports = {\n  CompositionList: CompositionList,\n  CompositionPage: CompositionPage,\n  CompositionInstance: CompositionInstance,\n  CompositionContext: CompositionContext\n};","map":{"version":3,"names":["Q","require","_","util","Page","deserialize","serialize","values","CompositionList","CompositionPage","CompositionInstance","CompositionContext","version","CompositionListInstance","sid","get","_version","_solution","_uri","each","opts","callback","isFunction","isUndefined","Error","done","currentPage","currentResource","limits","readLimits","limit","pageSize","onComplete","error","fetchNextPage","fn","promise","then","page","instances","instance","bind","nextPage","catch","merge","list","deferred","defer","allResources","resource","push","length","resolve","reject","nodeify","data","of","iso8601DateTime","pageToken","pageNumber","uri","method","params","payload","getPage","targetUrl","_domain","twilio","request","create","object","map","e","bool","toJSON","inspect","custom","depth","options","response","solution","prototype","constructor","call","extend","getInstance","clone","forOwn","value","key","startsWith","accountSid","account_sid","status","dateCreated","date_created","dateCompleted","date_completed","dateDeleted","date_deleted","roomSid","room_sid","audioSources","audio_sources","audioSourcesExcluded","audio_sources_excluded","videoLayout","video_layout","resolution","trim","format","bitrate","integer","size","duration","mediaExternalLocation","media_external_location","statusCallback","status_callback","statusCallbackMethod","status_callback_method","url","links","_context","undefined","Object","defineProperty","fetch","_proxy","remove","module","exports"],"sources":["/Users/hooniesun/rmit/fwp/assessment1/lan/node_modules/twilio/lib/rest/video/v1/composition.js"],"sourcesContent":["'use strict';\n\n/* jshint ignore:start */\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n/* jshint ignore:end */\n\nvar Q = require('q');  /* jshint ignore:line */\nvar _ = require('lodash');  /* jshint ignore:line */\nvar util = require('util');  /* jshint ignore:line */\nvar Page = require('../../../base/Page');  /* jshint ignore:line */\nvar deserialize = require(\n    '../../../base/deserialize');  /* jshint ignore:line */\nvar serialize = require('../../../base/serialize');  /* jshint ignore:line */\nvar values = require('../../../base/values');  /* jshint ignore:line */\n\nvar CompositionList;\nvar CompositionPage;\nvar CompositionInstance;\nvar CompositionContext;\n\n/* jshint ignore:start */\n/**\n * Initialize the CompositionList\n *\n * @constructor Twilio.Video.V1.CompositionList\n *\n * @param {Twilio.Video.V1} version - Version of the resource\n */\n/* jshint ignore:end */\nCompositionList = function CompositionList(version) {\n  /* jshint ignore:start */\n  /**\n   * @function compositions\n   * @memberof Twilio.Video.V1#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Video.V1.CompositionContext}\n   */\n  /* jshint ignore:end */\n  function CompositionListInstance(sid) {\n    return CompositionListInstance.get(sid);\n  }\n\n  CompositionListInstance._version = version;\n  // Path Solution\n  CompositionListInstance._solution = {};\n  CompositionListInstance._uri = `/Compositions`;\n  /* jshint ignore:start */\n  /**\n   * Streams CompositionInstance records from the API.\n   *\n   * This operation lazily loads records as efficiently as possible until the limit\n   * is reached.\n   *\n   * The results are passed into the callback function, so this operation is memory\n   * efficient.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function each\n   * @memberof Twilio.Video.V1.CompositionList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {composition.status} [opts.status] -\n   *          Read only Composition resources with this status\n   * @param {Date} [opts.dateCreatedAfter] -\n   *          Read only Composition resources created on or after this {@link https://en.wikipedia.org/wiki/ISO_8601|ISO 8601} date-time with time zone\n   * @param {Date} [opts.dateCreatedBefore] -\n   *          Read only Composition resources created before this ISO 8601 date-time with time zone\n   * @param {string} [opts.roomSid] -\n   *          Read only Composition resources with this Room SID\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         each() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no pageSize is defined but a limit is defined,\n   *         each() will attempt to read the limit with the most efficient\n   *         page size, i.e. min(limit, 1000)\n   * @param {Function} [opts.callback] -\n   *         Function to process each record. If this and a positional\n   *         callback are passed, this one will be used\n   * @param {Function} [opts.done] -\n   *          Function to be called upon completion of streaming\n   * @param {Function} [callback] - Function to process each record\n   */\n  /* jshint ignore:end */\n  CompositionListInstance.each = function each(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    if (opts.callback) {\n      callback = opts.callback;\n    }\n    if (_.isUndefined(callback)) {\n      throw new Error('Callback function must be provided');\n    }\n\n    var done = false;\n    var currentPage = 1;\n    var currentResource = 0;\n    var limits = this._version.readLimits({\n      limit: opts.limit,\n      pageSize: opts.pageSize\n    });\n\n    function onComplete(error) {\n      done = true;\n      if (_.isFunction(opts.done)) {\n        opts.done(error);\n      }\n    }\n\n    function fetchNextPage(fn) {\n      var promise = fn();\n      if (_.isUndefined(promise)) {\n        onComplete();\n        return;\n      }\n\n      promise.then(function(page) {\n        _.each(page.instances, function(instance) {\n          if (done || (!_.isUndefined(opts.limit) && currentResource >= opts.limit)) {\n            done = true;\n            return false;\n          }\n\n          currentResource++;\n          callback(instance, onComplete);\n        });\n\n        if (!done) {\n          currentPage++;\n          fetchNextPage(_.bind(page.nextPage, page));\n        } else {\n          onComplete();\n        }\n      });\n\n      promise.catch(onComplete);\n    }\n\n    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Lists CompositionInstance records from the API as a list.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function list\n   * @memberof Twilio.Video.V1.CompositionList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {composition.status} [opts.status] -\n   *          Read only Composition resources with this status\n   * @param {Date} [opts.dateCreatedAfter] -\n   *          Read only Composition resources created on or after this {@link https://en.wikipedia.org/wiki/ISO_8601|ISO 8601} date-time with time zone\n   * @param {Date} [opts.dateCreatedBefore] -\n   *          Read only Composition resources created before this ISO 8601 date-time with time zone\n   * @param {string} [opts.roomSid] -\n   *          Read only Composition resources with this Room SID\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         list() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no page_size is defined but a limit is defined,\n   *         list() will attempt to read the limit with the most\n   *         efficient page size, i.e. min(limit, 1000)\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  CompositionListInstance.list = function list(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    var deferred = Q.defer();\n    var allResources = [];\n    opts.callback = function(resource, done) {\n      allResources.push(resource);\n\n      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {\n        done();\n      }\n    };\n\n    opts.done = function(error) {\n      if (_.isUndefined(error)) {\n        deferred.resolve(allResources);\n      } else {\n        deferred.reject(error);\n      }\n    };\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    this.each(opts);\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single page of CompositionInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function page\n   * @memberof Twilio.Video.V1.CompositionList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {composition.status} [opts.status] -\n   *          Read only Composition resources with this status\n   * @param {Date} [opts.dateCreatedAfter] -\n   *          Read only Composition resources created on or after this {@link https://en.wikipedia.org/wiki/ISO_8601|ISO 8601} date-time with time zone\n   * @param {Date} [opts.dateCreatedBefore] -\n   *          Read only Composition resources created before this ISO 8601 date-time with time zone\n   * @param {string} [opts.roomSid] -\n   *          Read only Composition resources with this Room SID\n   * @param {string} [opts.pageToken] - PageToken provided by the API\n   * @param {number} [opts.pageNumber] -\n   *          Page Number, this value is simply for client state\n   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  CompositionListInstance.page = function page(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n\n    var deferred = Q.defer();\n    var data = values.of({\n      'Status': _.get(opts, 'status'),\n      'DateCreatedAfter': serialize.iso8601DateTime(_.get(opts, 'dateCreatedAfter')),\n      'DateCreatedBefore': serialize.iso8601DateTime(_.get(opts, 'dateCreatedBefore')),\n      'RoomSid': _.get(opts, 'roomSid'),\n      'PageToken': opts.pageToken,\n      'Page': opts.pageNumber,\n      'PageSize': opts.pageSize\n    });\n\n    var promise = this._version.page({uri: this._uri, method: 'GET', params: data});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new CompositionPage(this._version, payload, this._solution));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single target page of CompositionInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function getPage\n   * @memberof Twilio.Video.V1.CompositionList#\n   *\n   * @param {string} [targetUrl] - API-generated URL for the requested results page\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  CompositionListInstance.getPage = function getPage(targetUrl, callback) {\n    var deferred = Q.defer();\n\n    var promise = this._version._domain.twilio.request({method: 'GET', uri: targetUrl});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new CompositionPage(this._version, payload, this._solution));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * create a CompositionInstance\n   *\n   * @function create\n   * @memberof Twilio.Video.V1.CompositionList#\n   *\n   * @param {object} opts - Options for request\n   * @param {string} opts.roomSid -\n   *          The SID of the Group Room with the media tracks to be used as composition sources\n   * @param {object} [opts.videoLayout] -\n   *          An object that describes the video layout of the composition\n   * @param {string|list} [opts.audioSources] -\n   *          An array of track names from the same group room to merge\n   * @param {string|list} [opts.audioSourcesExcluded] -\n   *          An array of track names to exclude\n   * @param {string} [opts.resolution] -\n   *          A string that describes the columns (width) and rows (height) of the generated composed video in pixels\n   * @param {composition.format} [opts.format] -\n   *          The container format of the composition's media files\n   * @param {string} [opts.statusCallback] -\n   *          The URL we should call to send status information to your application\n   * @param {string} [opts.statusCallbackMethod] -\n   *          The HTTP method we should use to call status_callback\n   * @param {boolean} [opts.trim] -\n   *          Whether to clip the intervals where there is no active media in the composition\n   * @param {function} [callback] - Callback to handle processed record\n   *\n   * @returns {Promise} Resolves to processed CompositionInstance\n   */\n  /* jshint ignore:end */\n  CompositionListInstance.create = function create(opts, callback) {\n    if (_.isUndefined(opts)) {\n      throw new Error('Required parameter \"opts\" missing.');\n    }\n    if (_.isUndefined(opts['roomSid'])) {\n      throw new Error('Required parameter \"opts[\\'roomSid\\']\" missing.');\n    }\n\n    var deferred = Q.defer();\n    var data = values.of({\n      'RoomSid': _.get(opts, 'roomSid'),\n      'VideoLayout': serialize.object(_.get(opts, 'videoLayout')),\n      'AudioSources': serialize.map(_.get(opts, 'audioSources'), function(e) { return e; }),\n      'AudioSourcesExcluded': serialize.map(_.get(opts, 'audioSourcesExcluded'), function(e) { return e; }),\n      'Resolution': _.get(opts, 'resolution'),\n      'Format': _.get(opts, 'format'),\n      'StatusCallback': _.get(opts, 'statusCallback'),\n      'StatusCallbackMethod': _.get(opts, 'statusCallbackMethod'),\n      'Trim': serialize.bool(_.get(opts, 'trim'))\n    });\n\n    var promise = this._version.create({uri: this._uri, method: 'POST', data: data});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new CompositionInstance(this._version, payload, this._solution.sid));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Constructs a composition\n   *\n   * @function get\n   * @memberof Twilio.Video.V1.CompositionList#\n   *\n   * @param {string} sid - The SID that identifies the resource to fetch\n   *\n   * @returns {Twilio.Video.V1.CompositionContext}\n   */\n  /* jshint ignore:end */\n  CompositionListInstance.get = function get(sid) {\n    return new CompositionContext(this._version, sid);\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Video.V1.CompositionList#\n   *\n   * @returns Object\n   */\n  /* jshint ignore:end */\n  CompositionListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n\n  CompositionListInstance[util.inspect.custom] = function inspect(depth, options)\n      {\n    return util.inspect(this.toJSON(), options);\n  };\n\n  return CompositionListInstance;\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the CompositionPage\n *\n * @constructor Twilio.Video.V1.CompositionPage\n *\n * @param {V1} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {CompositionSolution} solution - Path solution\n *\n * @returns CompositionPage\n */\n/* jshint ignore:end */\nCompositionPage = function CompositionPage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n\n_.extend(CompositionPage.prototype, Page.prototype);\nCompositionPage.prototype.constructor = CompositionPage;\n\n/* jshint ignore:start */\n/**\n * Build an instance of CompositionInstance\n *\n * @function getInstance\n * @memberof Twilio.Video.V1.CompositionPage#\n *\n * @param {CompositionPayload} payload - Payload response from the API\n *\n * @returns CompositionInstance\n */\n/* jshint ignore:end */\nCompositionPage.prototype.getInstance = function getInstance(payload) {\n  return new CompositionInstance(this._version, payload);\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Video.V1.CompositionPage#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nCompositionPage.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function(value, key) {\n    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\n\nCompositionPage.prototype[util.inspect.custom] = function inspect(depth,\n    options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the CompositionContext\n *\n * @constructor Twilio.Video.V1.CompositionInstance\n *\n * @property {string} accountSid - The SID of the Account that created the resource\n * @property {composition.status} status - The status of the composition\n * @property {Date} dateCreated -\n *          The ISO 8601 date and time in GMT when the resource was created\n * @property {Date} dateCompleted - Date when the media processing task finished\n * @property {Date} dateDeleted -\n *          The ISO 8601 date and time in GMT when the composition generated media was deleted\n * @property {string} sid - The unique string that identifies the resource\n * @property {string} roomSid -\n *          The SID of the Group Room that generated the audio and video tracks used in the composition\n * @property {string} audioSources -\n *          The array of track names to include in the composition\n * @property {string} audioSourcesExcluded -\n *          The array of track names to exclude from the composition\n * @property {object} videoLayout -\n *          An object that describes the video layout of the composition\n * @property {string} resolution -\n *          The dimensions of the video image in pixels expressed as columns (width) and rows (height)\n * @property {boolean} trim - Whether to remove intervals with no media\n * @property {composition.format} format -\n *          The container format of the composition's media files as specified in the POST request that created the Composition resource\n * @property {number} bitrate - The average bit rate of the composition's media\n * @property {number} size - The size of the composed media file in bytes\n * @property {number} duration -\n *          The duration of the composition's media file in seconds\n * @property {string} mediaExternalLocation -\n *          The URL of the media file associated with the composition when stored externally\n * @property {string} statusCallback -\n *          The URL called to send status information on every composition event.\n * @property {string} statusCallbackMethod -\n *          The HTTP method used to call `status_callback`\n * @property {string} url - The absolute URL of the resource\n * @property {string} links -\n *          The URL of the media file associated with the composition\n *\n * @param {V1} version - Version of the resource\n * @param {CompositionPayload} payload - The instance payload\n * @param {sid} sid - The SID that identifies the resource to fetch\n */\n/* jshint ignore:end */\nCompositionInstance = function CompositionInstance(version, payload, sid) {\n  this._version = version;\n\n  // Marshaled Properties\n  this.accountSid = payload.account_sid; // jshint ignore:line\n  this.status = payload.status; // jshint ignore:line\n  this.dateCreated = deserialize.iso8601DateTime(payload.date_created); // jshint ignore:line\n  this.dateCompleted = deserialize.iso8601DateTime(payload.date_completed); // jshint ignore:line\n  this.dateDeleted = deserialize.iso8601DateTime(payload.date_deleted); // jshint ignore:line\n  this.sid = payload.sid; // jshint ignore:line\n  this.roomSid = payload.room_sid; // jshint ignore:line\n  this.audioSources = payload.audio_sources; // jshint ignore:line\n  this.audioSourcesExcluded = payload.audio_sources_excluded; // jshint ignore:line\n  this.videoLayout = payload.video_layout; // jshint ignore:line\n  this.resolution = payload.resolution; // jshint ignore:line\n  this.trim = payload.trim; // jshint ignore:line\n  this.format = payload.format; // jshint ignore:line\n  this.bitrate = deserialize.integer(payload.bitrate); // jshint ignore:line\n  this.size = deserialize.integer(payload.size); // jshint ignore:line\n  this.duration = deserialize.integer(payload.duration); // jshint ignore:line\n  this.mediaExternalLocation = payload.media_external_location; // jshint ignore:line\n  this.statusCallback = payload.status_callback; // jshint ignore:line\n  this.statusCallbackMethod = payload.status_callback_method; // jshint ignore:line\n  this.url = payload.url; // jshint ignore:line\n  this.links = payload.links; // jshint ignore:line\n\n  // Context\n  this._context = undefined;\n  this._solution = {sid: sid || this.sid, };\n};\n\nObject.defineProperty(CompositionInstance.prototype,\n  '_proxy', {\n    get: function() {\n      if (!this._context) {\n        this._context = new CompositionContext(this._version, this._solution.sid);\n      }\n\n      return this._context;\n    }\n});\n\n/* jshint ignore:start */\n/**\n * fetch a CompositionInstance\n *\n * @function fetch\n * @memberof Twilio.Video.V1.CompositionInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed CompositionInstance\n */\n/* jshint ignore:end */\nCompositionInstance.prototype.fetch = function fetch(callback) {\n  return this._proxy.fetch(callback);\n};\n\n/* jshint ignore:start */\n/**\n * remove a CompositionInstance\n *\n * @function remove\n * @memberof Twilio.Video.V1.CompositionInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed CompositionInstance\n */\n/* jshint ignore:end */\nCompositionInstance.prototype.remove = function remove(callback) {\n  return this._proxy.remove(callback);\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Video.V1.CompositionInstance#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nCompositionInstance.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function(value, key) {\n    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\n\nCompositionInstance.prototype[util.inspect.custom] = function inspect(depth,\n    options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the CompositionContext\n *\n * @constructor Twilio.Video.V1.CompositionContext\n *\n * @param {V1} version - Version of the resource\n * @param {sid} sid - The SID that identifies the resource to fetch\n */\n/* jshint ignore:end */\nCompositionContext = function CompositionContext(version, sid) {\n  this._version = version;\n\n  // Path Solution\n  this._solution = {sid: sid, };\n  this._uri = `/Compositions/${sid}`;\n};\n\n/* jshint ignore:start */\n/**\n * fetch a CompositionInstance\n *\n * @function fetch\n * @memberof Twilio.Video.V1.CompositionContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed CompositionInstance\n */\n/* jshint ignore:end */\nCompositionContext.prototype.fetch = function fetch(callback) {\n  var deferred = Q.defer();\n  var promise = this._version.fetch({uri: this._uri, method: 'GET'});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(new CompositionInstance(this._version, payload, this._solution.sid));\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * remove a CompositionInstance\n *\n * @function remove\n * @memberof Twilio.Video.V1.CompositionContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed CompositionInstance\n */\n/* jshint ignore:end */\nCompositionContext.prototype.remove = function remove(callback) {\n  var deferred = Q.defer();\n  var promise = this._version.remove({uri: this._uri, method: 'DELETE'});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(payload);\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Video.V1.CompositionContext#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nCompositionContext.prototype.toJSON = function toJSON() {\n  return this._solution;\n};\n\nCompositionContext.prototype[util.inspect.custom] = function inspect(depth,\n    options) {\n  return util.inspect(this.toJSON(), options);\n};\n\nmodule.exports = {\n  CompositionList: CompositionList,\n  CompositionPage: CompositionPage,\n  CompositionInstance: CompositionInstance,\n  CompositionContext: CompositionContext\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}