{"ast":null,"code":"// Generated by CoffeeScript 2.4.1\n(function () {\n  var NodeType, XMLDTDAttList, XMLNode;\n  XMLNode = require('./XMLNode');\n  NodeType = require('./NodeType'); // Represents an attribute list\n\n  module.exports = XMLDTDAttList = class XMLDTDAttList extends XMLNode {\n    // Initializes a new instance of `XMLDTDAttList`\n    // `parent` the parent `XMLDocType` element\n    // `elementName` the name of the element containing this attribute\n    // `attributeName` attribute name\n    // `attributeType` type of the attribute\n    // `defaultValueType` default value type (either #REQUIRED, #IMPLIED,\n    //                    #FIXED or #DEFAULT)\n    // `defaultValue` default value of the attribute\n    //                (only used for #FIXED or #DEFAULT)\n    constructor(parent, elementName, attributeName, attributeType, defaultValueType, defaultValue) {\n      super(parent);\n\n      if (elementName == null) {\n        throw new Error(\"Missing DTD element name. \" + this.debugInfo());\n      }\n\n      if (attributeName == null) {\n        throw new Error(\"Missing DTD attribute name. \" + this.debugInfo(elementName));\n      }\n\n      if (!attributeType) {\n        throw new Error(\"Missing DTD attribute type. \" + this.debugInfo(elementName));\n      }\n\n      if (!defaultValueType) {\n        throw new Error(\"Missing DTD attribute default. \" + this.debugInfo(elementName));\n      }\n\n      if (defaultValueType.indexOf('#') !== 0) {\n        defaultValueType = '#' + defaultValueType;\n      }\n\n      if (!defaultValueType.match(/^(#REQUIRED|#IMPLIED|#FIXED|#DEFAULT)$/)) {\n        throw new Error(\"Invalid default value type; expected: #REQUIRED, #IMPLIED, #FIXED or #DEFAULT. \" + this.debugInfo(elementName));\n      }\n\n      if (defaultValue && !defaultValueType.match(/^(#FIXED|#DEFAULT)$/)) {\n        throw new Error(\"Default value only applies to #FIXED or #DEFAULT. \" + this.debugInfo(elementName));\n      }\n\n      this.elementName = this.stringify.name(elementName);\n      this.type = NodeType.AttributeDeclaration;\n      this.attributeName = this.stringify.name(attributeName);\n      this.attributeType = this.stringify.dtdAttType(attributeType);\n\n      if (defaultValue) {\n        this.defaultValue = this.stringify.dtdAttDefault(defaultValue);\n      }\n\n      this.defaultValueType = defaultValueType;\n    } // Converts the XML fragment to string\n    // `options.pretty` pretty prints the result\n    // `options.indent` indentation for pretty print\n    // `options.offset` how many indentations to add to every line for pretty print\n    // `options.newline` newline sequence for pretty print\n\n\n    toString(options) {\n      return this.options.writer.dtdAttList(this, this.options.writer.filterOptions(options));\n    }\n\n  };\n}).call(this);","map":{"version":3,"names":["NodeType","XMLDTDAttList","XMLNode","require","module","exports","constructor","parent","elementName","attributeName","attributeType","defaultValueType","defaultValue","Error","debugInfo","indexOf","match","stringify","name","type","AttributeDeclaration","dtdAttType","dtdAttDefault","toString","options","writer","dtdAttList","filterOptions","call"],"sources":["/Users/hooniesun/rmit/fwp/assessment1/lan/node_modules/xmlbuilder/lib/XMLDTDAttList.js"],"sourcesContent":["// Generated by CoffeeScript 2.4.1\n(function() {\n  var NodeType, XMLDTDAttList, XMLNode;\n\n  XMLNode = require('./XMLNode');\n\n  NodeType = require('./NodeType');\n\n  // Represents an attribute list\n  module.exports = XMLDTDAttList = class XMLDTDAttList extends XMLNode {\n    // Initializes a new instance of `XMLDTDAttList`\n\n    // `parent` the parent `XMLDocType` element\n    // `elementName` the name of the element containing this attribute\n    // `attributeName` attribute name\n    // `attributeType` type of the attribute\n    // `defaultValueType` default value type (either #REQUIRED, #IMPLIED,\n    //                    #FIXED or #DEFAULT)\n    // `defaultValue` default value of the attribute\n    //                (only used for #FIXED or #DEFAULT)\n    constructor(parent, elementName, attributeName, attributeType, defaultValueType, defaultValue) {\n      super(parent);\n      if (elementName == null) {\n        throw new Error(\"Missing DTD element name. \" + this.debugInfo());\n      }\n      if (attributeName == null) {\n        throw new Error(\"Missing DTD attribute name. \" + this.debugInfo(elementName));\n      }\n      if (!attributeType) {\n        throw new Error(\"Missing DTD attribute type. \" + this.debugInfo(elementName));\n      }\n      if (!defaultValueType) {\n        throw new Error(\"Missing DTD attribute default. \" + this.debugInfo(elementName));\n      }\n      if (defaultValueType.indexOf('#') !== 0) {\n        defaultValueType = '#' + defaultValueType;\n      }\n      if (!defaultValueType.match(/^(#REQUIRED|#IMPLIED|#FIXED|#DEFAULT)$/)) {\n        throw new Error(\"Invalid default value type; expected: #REQUIRED, #IMPLIED, #FIXED or #DEFAULT. \" + this.debugInfo(elementName));\n      }\n      if (defaultValue && !defaultValueType.match(/^(#FIXED|#DEFAULT)$/)) {\n        throw new Error(\"Default value only applies to #FIXED or #DEFAULT. \" + this.debugInfo(elementName));\n      }\n      this.elementName = this.stringify.name(elementName);\n      this.type = NodeType.AttributeDeclaration;\n      this.attributeName = this.stringify.name(attributeName);\n      this.attributeType = this.stringify.dtdAttType(attributeType);\n      if (defaultValue) {\n        this.defaultValue = this.stringify.dtdAttDefault(defaultValue);\n      }\n      this.defaultValueType = defaultValueType;\n    }\n\n    // Converts the XML fragment to string\n\n    // `options.pretty` pretty prints the result\n    // `options.indent` indentation for pretty print\n    // `options.offset` how many indentations to add to every line for pretty print\n    // `options.newline` newline sequence for pretty print\n    toString(options) {\n      return this.options.writer.dtdAttList(this, this.options.writer.filterOptions(options));\n    }\n\n  };\n\n}).call(this);\n"],"mappings":"AAAA;AACA,CAAC,YAAW;EACV,IAAIA,QAAJ,EAAcC,aAAd,EAA6BC,OAA7B;EAEAA,OAAO,GAAGC,OAAO,CAAC,WAAD,CAAjB;EAEAH,QAAQ,GAAGG,OAAO,CAAC,YAAD,CAAlB,CALU,CAOV;;EACAC,MAAM,CAACC,OAAP,GAAiBJ,aAAa,GAAG,MAAMA,aAAN,SAA4BC,OAA5B,CAAoC;IACnE;IAEA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACAI,WAAW,CAACC,MAAD,EAASC,WAAT,EAAsBC,aAAtB,EAAqCC,aAArC,EAAoDC,gBAApD,EAAsEC,YAAtE,EAAoF;MAC7F,MAAML,MAAN;;MACA,IAAIC,WAAW,IAAI,IAAnB,EAAyB;QACvB,MAAM,IAAIK,KAAJ,CAAU,+BAA+B,KAAKC,SAAL,EAAzC,CAAN;MACD;;MACD,IAAIL,aAAa,IAAI,IAArB,EAA2B;QACzB,MAAM,IAAII,KAAJ,CAAU,iCAAiC,KAAKC,SAAL,CAAeN,WAAf,CAA3C,CAAN;MACD;;MACD,IAAI,CAACE,aAAL,EAAoB;QAClB,MAAM,IAAIG,KAAJ,CAAU,iCAAiC,KAAKC,SAAL,CAAeN,WAAf,CAA3C,CAAN;MACD;;MACD,IAAI,CAACG,gBAAL,EAAuB;QACrB,MAAM,IAAIE,KAAJ,CAAU,oCAAoC,KAAKC,SAAL,CAAeN,WAAf,CAA9C,CAAN;MACD;;MACD,IAAIG,gBAAgB,CAACI,OAAjB,CAAyB,GAAzB,MAAkC,CAAtC,EAAyC;QACvCJ,gBAAgB,GAAG,MAAMA,gBAAzB;MACD;;MACD,IAAI,CAACA,gBAAgB,CAACK,KAAjB,CAAuB,wCAAvB,CAAL,EAAuE;QACrE,MAAM,IAAIH,KAAJ,CAAU,oFAAoF,KAAKC,SAAL,CAAeN,WAAf,CAA9F,CAAN;MACD;;MACD,IAAII,YAAY,IAAI,CAACD,gBAAgB,CAACK,KAAjB,CAAuB,qBAAvB,CAArB,EAAoE;QAClE,MAAM,IAAIH,KAAJ,CAAU,uDAAuD,KAAKC,SAAL,CAAeN,WAAf,CAAjE,CAAN;MACD;;MACD,KAAKA,WAAL,GAAmB,KAAKS,SAAL,CAAeC,IAAf,CAAoBV,WAApB,CAAnB;MACA,KAAKW,IAAL,GAAYnB,QAAQ,CAACoB,oBAArB;MACA,KAAKX,aAAL,GAAqB,KAAKQ,SAAL,CAAeC,IAAf,CAAoBT,aAApB,CAArB;MACA,KAAKC,aAAL,GAAqB,KAAKO,SAAL,CAAeI,UAAf,CAA0BX,aAA1B,CAArB;;MACA,IAAIE,YAAJ,EAAkB;QAChB,KAAKA,YAAL,GAAoB,KAAKK,SAAL,CAAeK,aAAf,CAA6BV,YAA7B,CAApB;MACD;;MACD,KAAKD,gBAAL,GAAwBA,gBAAxB;IACD,CA1CkE,CA4CnE;IAEA;IACA;IACA;IACA;;;IACAY,QAAQ,CAACC,OAAD,EAAU;MAChB,OAAO,KAAKA,OAAL,CAAaC,MAAb,CAAoBC,UAApB,CAA+B,IAA/B,EAAqC,KAAKF,OAAL,CAAaC,MAAb,CAAoBE,aAApB,CAAkCH,OAAlC,CAArC,CAAP;IACD;;EApDkE,CAArE;AAwDD,CAhED,EAgEGI,IAhEH,CAgEQ,IAhER"},"metadata":{},"sourceType":"script"}