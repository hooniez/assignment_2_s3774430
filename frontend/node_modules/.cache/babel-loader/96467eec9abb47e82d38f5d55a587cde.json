{"ast":null,"code":"'use strict';\n/* jshint ignore:start */\n\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n\n/* jshint ignore:end */\n\nvar Q = require('q');\n/* jshint ignore:line */\n\n\nvar _ = require('lodash');\n/* jshint ignore:line */\n\n\nvar util = require('util');\n/* jshint ignore:line */\n\n\nvar AddOnResultList = require('./recording/addOnResult').AddOnResultList;\n\nvar Page = require('../../../../base/Page');\n/* jshint ignore:line */\n\n\nvar TranscriptionList = require('./recording/transcription').TranscriptionList;\n\nvar deserialize = require('../../../../base/deserialize');\n/* jshint ignore:line */\n\n\nvar serialize = require('../../../../base/serialize');\n/* jshint ignore:line */\n\n\nvar values = require('../../../../base/values');\n/* jshint ignore:line */\n\n\nvar RecordingList;\nvar RecordingPage;\nvar RecordingInstance;\nvar RecordingContext;\n/* jshint ignore:start */\n\n/**\n * Initialize the RecordingList\n *\n * @constructor Twilio.Api.V2010.AccountContext.RecordingList\n *\n * @param {Twilio.Api.V2010} version - Version of the resource\n * @param {string} accountSid - The SID of the Account that created the resource\n */\n\n/* jshint ignore:end */\n\nRecordingList = function RecordingList(version, accountSid) {\n  /* jshint ignore:start */\n\n  /**\n   * @function recordings\n   * @memberof Twilio.Api.V2010.AccountContext#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Api.V2010.AccountContext.RecordingContext}\n   */\n\n  /* jshint ignore:end */\n  function RecordingListInstance(sid) {\n    return RecordingListInstance.get(sid);\n  }\n\n  RecordingListInstance._version = version; // Path Solution\n\n  RecordingListInstance._solution = {\n    accountSid: accountSid\n  };\n  RecordingListInstance._uri = `/Accounts/${accountSid}/Recordings.json`;\n  /* jshint ignore:start */\n\n  /**\n   * Streams RecordingInstance records from the API.\n   *\n   * This operation lazily loads records as efficiently as possible until the limit\n   * is reached.\n   *\n   * The results are passed into the callback function, so this operation is memory\n   * efficient.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function each\n   * @memberof Twilio.Api.V2010.AccountContext.RecordingList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {Date} [opts.dateCreatedBefore] -\n   *          Only include recordings that were created on this date\n   * @param {Date} [opts.dateCreated] -\n   *          Only include recordings that were created on this date\n   * @param {Date} [opts.dateCreatedAfter] -\n   *          Only include recordings that were created on this date\n   * @param {string} [opts.callSid] - The Call SID of the resources to read\n   * @param {string} [opts.conferenceSid] -\n   *          Read by unique Conference SID for the recording\n   * @param {boolean} [opts.includeSoftDeleted] -\n   *          A boolean parameter indicating whether to retrieve soft deleted recordings or not.\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         each() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no pageSize is defined but a limit is defined,\n   *         each() will attempt to read the limit with the most efficient\n   *         page size, i.e. min(limit, 1000)\n   * @param {Function} [opts.callback] -\n   *         Function to process each record. If this and a positional\n   *         callback are passed, this one will be used\n   * @param {Function} [opts.done] -\n   *          Function to be called upon completion of streaming\n   * @param {Function} [callback] - Function to process each record\n   */\n\n  /* jshint ignore:end */\n\n  RecordingListInstance.each = function each(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n\n    if (opts.callback) {\n      callback = opts.callback;\n    }\n\n    if (_.isUndefined(callback)) {\n      throw new Error('Callback function must be provided');\n    }\n\n    var done = false;\n    var currentPage = 1;\n    var currentResource = 0;\n\n    var limits = this._version.readLimits({\n      limit: opts.limit,\n      pageSize: opts.pageSize\n    });\n\n    function onComplete(error) {\n      done = true;\n\n      if (_.isFunction(opts.done)) {\n        opts.done(error);\n      }\n    }\n\n    function fetchNextPage(fn) {\n      var promise = fn();\n\n      if (_.isUndefined(promise)) {\n        onComplete();\n        return;\n      }\n\n      promise.then(function (page) {\n        _.each(page.instances, function (instance) {\n          if (done || !_.isUndefined(opts.limit) && currentResource >= opts.limit) {\n            done = true;\n            return false;\n          }\n\n          currentResource++;\n          callback(instance, onComplete);\n        });\n\n        if (!done) {\n          currentPage++;\n          fetchNextPage(_.bind(page.nextPage, page));\n        } else {\n          onComplete();\n        }\n      });\n      promise.catch(onComplete);\n    }\n\n    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Lists RecordingInstance records from the API as a list.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function list\n   * @memberof Twilio.Api.V2010.AccountContext.RecordingList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {Date} [opts.dateCreatedBefore] -\n   *          Only include recordings that were created on this date\n   * @param {Date} [opts.dateCreated] -\n   *          Only include recordings that were created on this date\n   * @param {Date} [opts.dateCreatedAfter] -\n   *          Only include recordings that were created on this date\n   * @param {string} [opts.callSid] - The Call SID of the resources to read\n   * @param {string} [opts.conferenceSid] -\n   *          Read by unique Conference SID for the recording\n   * @param {boolean} [opts.includeSoftDeleted] -\n   *          A boolean parameter indicating whether to retrieve soft deleted recordings or not.\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         list() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no page_size is defined but a limit is defined,\n   *         list() will attempt to read the limit with the most\n   *         efficient page size, i.e. min(limit, 1000)\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  RecordingListInstance.list = function list(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n    var deferred = Q.defer();\n    var allResources = [];\n\n    opts.callback = function (resource, done) {\n      allResources.push(resource);\n\n      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {\n        done();\n      }\n    };\n\n    opts.done = function (error) {\n      if (_.isUndefined(error)) {\n        deferred.resolve(allResources);\n      } else {\n        deferred.reject(error);\n      }\n    };\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    this.each(opts);\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Retrieve a single page of RecordingInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function page\n   * @memberof Twilio.Api.V2010.AccountContext.RecordingList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {Date} [opts.dateCreatedBefore] -\n   *          Only include recordings that were created on this date\n   * @param {Date} [opts.dateCreated] -\n   *          Only include recordings that were created on this date\n   * @param {Date} [opts.dateCreatedAfter] -\n   *          Only include recordings that were created on this date\n   * @param {string} [opts.callSid] - The Call SID of the resources to read\n   * @param {string} [opts.conferenceSid] -\n   *          Read by unique Conference SID for the recording\n   * @param {boolean} [opts.includeSoftDeleted] -\n   *          A boolean parameter indicating whether to retrieve soft deleted recordings or not.\n   * @param {string} [opts.pageToken] - PageToken provided by the API\n   * @param {number} [opts.pageNumber] -\n   *          Page Number, this value is simply for client state\n   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  RecordingListInstance.page = function page(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n    var deferred = Q.defer();\n    var data = values.of({\n      'DateCreated<': serialize.iso8601DateTime(_.get(opts, 'dateCreatedBefore')),\n      'DateCreated': serialize.iso8601DateTime(_.get(opts, 'dateCreated')),\n      'DateCreated>': serialize.iso8601DateTime(_.get(opts, 'dateCreatedAfter')),\n      'CallSid': _.get(opts, 'callSid'),\n      'ConferenceSid': _.get(opts, 'conferenceSid'),\n      'IncludeSoftDeleted': serialize.bool(_.get(opts, 'includeSoftDeleted')),\n      'PageToken': opts.pageToken,\n      'Page': opts.pageNumber,\n      'PageSize': opts.pageSize\n    });\n\n    var promise = this._version.page({\n      uri: this._uri,\n      method: 'GET',\n      params: data\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new RecordingPage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Retrieve a single target page of RecordingInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function getPage\n   * @memberof Twilio.Api.V2010.AccountContext.RecordingList#\n   *\n   * @param {string} [targetUrl] - API-generated URL for the requested results page\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  RecordingListInstance.getPage = function getPage(targetUrl, callback) {\n    var deferred = Q.defer();\n\n    var promise = this._version._domain.twilio.request({\n      method: 'GET',\n      uri: targetUrl\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new RecordingPage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Constructs a recording\n   *\n   * @function get\n   * @memberof Twilio.Api.V2010.AccountContext.RecordingList#\n   *\n   * @param {string} sid - The unique string that identifies the resource\n   *\n   * @returns {Twilio.Api.V2010.AccountContext.RecordingContext}\n   */\n\n  /* jshint ignore:end */\n\n\n  RecordingListInstance.get = function get(sid) {\n    return new RecordingContext(this._version, this._solution.accountSid, sid);\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Api.V2010.AccountContext.RecordingList#\n   *\n   * @returns Object\n   */\n\n  /* jshint ignore:end */\n\n\n  RecordingListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n\n  RecordingListInstance[util.inspect.custom] = function inspect(depth, options) {\n    return util.inspect(this.toJSON(), options);\n  };\n\n  return RecordingListInstance;\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the RecordingPage\n *\n * @constructor Twilio.Api.V2010.AccountContext.RecordingPage\n *\n * @param {V2010} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {RecordingSolution} solution - Path solution\n *\n * @returns RecordingPage\n */\n\n/* jshint ignore:end */\n\n\nRecordingPage = function RecordingPage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n\n_.extend(RecordingPage.prototype, Page.prototype);\n\nRecordingPage.prototype.constructor = RecordingPage;\n/* jshint ignore:start */\n\n/**\n * Build an instance of RecordingInstance\n *\n * @function getInstance\n * @memberof Twilio.Api.V2010.AccountContext.RecordingPage#\n *\n * @param {RecordingPayload} payload - Payload response from the API\n *\n * @returns RecordingInstance\n */\n\n/* jshint ignore:end */\n\nRecordingPage.prototype.getInstance = function getInstance(payload) {\n  return new RecordingInstance(this._version, payload, this._solution.accountSid);\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Api.V2010.AccountContext.RecordingPage#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nRecordingPage.prototype.toJSON = function toJSON() {\n  let clone = {};\n\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n\n  return clone;\n};\n\nRecordingPage.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the RecordingContext\n *\n * @constructor Twilio.Api.V2010.AccountContext.RecordingInstance\n *\n * @property {string} accountSid - The SID of the Account that created the resource\n * @property {string} apiVersion - The API version used during the recording.\n * @property {string} callSid - The SID of the Call the resource is associated with\n * @property {string} conferenceSid -\n *          The unique ID for the conference associated with the recording.\n * @property {Date} dateCreated -\n *          The RFC 2822 date and time in GMT that the resource was created\n * @property {Date} dateUpdated -\n *          The RFC 2822 date and time in GMT that the resource was last updated\n * @property {Date} startTime -\n *          The start time of the recording, given in RFC 2822 format\n * @property {string} duration - The length of the recording in seconds.\n * @property {string} sid - The unique string that identifies the resource\n * @property {string} price - The one-time cost of creating the recording.\n * @property {string} priceUnit - The currency used in the price property.\n * @property {recording.status} status - The status of the recording.\n * @property {number} channels -\n *          The number of channels in the final recording file as an integer.\n * @property {recording.source} source - How the recording was created\n * @property {number} errorCode -\n *          More information about why the recording is missing, if status is `absent`.\n * @property {string} uri -\n *          The URI of the resource, relative to `https://api.twilio.com`\n * @property {object} encryptionDetails - How to decrypt the recording.\n * @property {string} subresourceUris -\n *          A list of related resources identified by their relative URIs\n * @property {string} mediaUrl - The URL of the media file.\n *\n * @param {V2010} version - Version of the resource\n * @param {RecordingPayload} payload - The instance payload\n * @param {sid} accountSid - The SID of the Account that created the resource\n * @param {sid} sid - The unique string that identifies the resource\n */\n\n/* jshint ignore:end */\n\n\nRecordingInstance = function RecordingInstance(version, payload, accountSid, sid) {\n  this._version = version; // Marshaled Properties\n\n  this.accountSid = payload.account_sid; // jshint ignore:line\n\n  this.apiVersion = payload.api_version; // jshint ignore:line\n\n  this.callSid = payload.call_sid; // jshint ignore:line\n\n  this.conferenceSid = payload.conference_sid; // jshint ignore:line\n\n  this.dateCreated = deserialize.rfc2822DateTime(payload.date_created); // jshint ignore:line\n\n  this.dateUpdated = deserialize.rfc2822DateTime(payload.date_updated); // jshint ignore:line\n\n  this.startTime = deserialize.rfc2822DateTime(payload.start_time); // jshint ignore:line\n\n  this.duration = payload.duration; // jshint ignore:line\n\n  this.sid = payload.sid; // jshint ignore:line\n\n  this.price = payload.price; // jshint ignore:line\n\n  this.priceUnit = payload.price_unit; // jshint ignore:line\n\n  this.status = payload.status; // jshint ignore:line\n\n  this.channels = deserialize.integer(payload.channels); // jshint ignore:line\n\n  this.source = payload.source; // jshint ignore:line\n\n  this.errorCode = deserialize.integer(payload.error_code); // jshint ignore:line\n\n  this.uri = payload.uri; // jshint ignore:line\n\n  this.encryptionDetails = payload.encryption_details; // jshint ignore:line\n\n  this.subresourceUris = payload.subresource_uris; // jshint ignore:line\n\n  this.mediaUrl = payload.media_url; // jshint ignore:line\n  // Context\n\n  this._context = undefined;\n  this._solution = {\n    accountSid: accountSid,\n    sid: sid || this.sid\n  };\n};\n\nObject.defineProperty(RecordingInstance.prototype, '_proxy', {\n  get: function () {\n    if (!this._context) {\n      this._context = new RecordingContext(this._version, this._solution.accountSid, this._solution.sid);\n    }\n\n    return this._context;\n  }\n});\n/* jshint ignore:start */\n\n/**\n * fetch a RecordingInstance\n *\n * @function fetch\n * @memberof Twilio.Api.V2010.AccountContext.RecordingInstance#\n *\n * @param {object} [opts] - Options for request\n * @param {boolean} [opts.includeSoftDeleted] -\n *          A boolean parameter indicating whether to retrieve soft deleted recordings or not.\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed RecordingInstance\n */\n\n/* jshint ignore:end */\n\nRecordingInstance.prototype.fetch = function fetch(opts, callback) {\n  return this._proxy.fetch(opts, callback);\n};\n/* jshint ignore:start */\n\n/**\n * remove a RecordingInstance\n *\n * @function remove\n * @memberof Twilio.Api.V2010.AccountContext.RecordingInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed RecordingInstance\n */\n\n/* jshint ignore:end */\n\n\nRecordingInstance.prototype.remove = function remove(callback) {\n  return this._proxy.remove(callback);\n};\n/* jshint ignore:start */\n\n/**\n * Access the transcriptions\n *\n * @function transcriptions\n * @memberof Twilio.Api.V2010.AccountContext.RecordingInstance#\n *\n * @returns {Twilio.Api.V2010.AccountContext.RecordingContext.TranscriptionList}\n */\n\n/* jshint ignore:end */\n\n\nRecordingInstance.prototype.transcriptions = function transcriptions() {\n  return this._proxy.transcriptions;\n};\n/* jshint ignore:start */\n\n/**\n * Access the addOnResults\n *\n * @function addOnResults\n * @memberof Twilio.Api.V2010.AccountContext.RecordingInstance#\n *\n * @returns {Twilio.Api.V2010.AccountContext.RecordingContext.AddOnResultList}\n */\n\n/* jshint ignore:end */\n\n\nRecordingInstance.prototype.addOnResults = function addOnResults() {\n  return this._proxy.addOnResults;\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Api.V2010.AccountContext.RecordingInstance#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nRecordingInstance.prototype.toJSON = function toJSON() {\n  let clone = {};\n\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n\n  return clone;\n};\n\nRecordingInstance.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the RecordingContext\n *\n * @constructor Twilio.Api.V2010.AccountContext.RecordingContext\n *\n * @property {Twilio.Api.V2010.AccountContext.RecordingContext.TranscriptionList} transcriptions -\n *          transcriptions resource\n * @property {Twilio.Api.V2010.AccountContext.RecordingContext.AddOnResultList} addOnResults -\n *          addOnResults resource\n *\n * @param {V2010} version - Version of the resource\n * @param {sid} accountSid -\n *          The SID of the Account that created the resource to fetch\n * @param {sid} sid - The unique string that identifies the resource\n */\n\n/* jshint ignore:end */\n\n\nRecordingContext = function RecordingContext(version, accountSid, sid) {\n  this._version = version; // Path Solution\n\n  this._solution = {\n    accountSid: accountSid,\n    sid: sid\n  };\n  this._uri = `/Accounts/${accountSid}/Recordings/${sid}.json`; // Dependents\n\n  this._transcriptions = undefined;\n  this._addOnResults = undefined;\n};\n/* jshint ignore:start */\n\n/**\n * fetch a RecordingInstance\n *\n * @function fetch\n * @memberof Twilio.Api.V2010.AccountContext.RecordingContext#\n *\n * @param {object} [opts] - Options for request\n * @param {boolean} [opts.includeSoftDeleted] -\n *          A boolean parameter indicating whether to retrieve soft deleted recordings or not.\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed RecordingInstance\n */\n\n/* jshint ignore:end */\n\n\nRecordingContext.prototype.fetch = function fetch(opts, callback) {\n  if (_.isFunction(opts)) {\n    callback = opts;\n    opts = {};\n  }\n\n  opts = opts || {};\n  var deferred = Q.defer();\n  var data = values.of({\n    'IncludeSoftDeleted': serialize.bool(_.get(opts, 'includeSoftDeleted'))\n  });\n\n  var promise = this._version.fetch({\n    uri: this._uri,\n    method: 'GET',\n    params: data\n  });\n\n  promise = promise.then(function (payload) {\n    deferred.resolve(new RecordingInstance(this._version, payload, this._solution.accountSid, this._solution.sid));\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n/* jshint ignore:start */\n\n/**\n * remove a RecordingInstance\n *\n * @function remove\n * @memberof Twilio.Api.V2010.AccountContext.RecordingContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed RecordingInstance\n */\n\n/* jshint ignore:end */\n\n\nRecordingContext.prototype.remove = function remove(callback) {\n  var deferred = Q.defer();\n\n  var promise = this._version.remove({\n    uri: this._uri,\n    method: 'DELETE'\n  });\n\n  promise = promise.then(function (payload) {\n    deferred.resolve(payload);\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\nObject.defineProperty(RecordingContext.prototype, 'transcriptions', {\n  get: function () {\n    if (!this._transcriptions) {\n      this._transcriptions = new TranscriptionList(this._version, this._solution.accountSid, this._solution.sid);\n    }\n\n    return this._transcriptions;\n  }\n});\nObject.defineProperty(RecordingContext.prototype, 'addOnResults', {\n  get: function () {\n    if (!this._addOnResults) {\n      this._addOnResults = new AddOnResultList(this._version, this._solution.accountSid, this._solution.sid);\n    }\n\n    return this._addOnResults;\n  }\n});\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Api.V2010.AccountContext.RecordingContext#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\nRecordingContext.prototype.toJSON = function toJSON() {\n  return this._solution;\n};\n\nRecordingContext.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\nmodule.exports = {\n  RecordingList: RecordingList,\n  RecordingPage: RecordingPage,\n  RecordingInstance: RecordingInstance,\n  RecordingContext: RecordingContext\n};","map":{"version":3,"names":["Q","require","_","util","AddOnResultList","Page","TranscriptionList","deserialize","serialize","values","RecordingList","RecordingPage","RecordingInstance","RecordingContext","version","accountSid","RecordingListInstance","sid","get","_version","_solution","_uri","each","opts","callback","isFunction","isUndefined","Error","done","currentPage","currentResource","limits","readLimits","limit","pageSize","onComplete","error","fetchNextPage","fn","promise","then","page","instances","instance","bind","nextPage","catch","merge","list","deferred","defer","allResources","resource","push","length","resolve","reject","nodeify","data","of","iso8601DateTime","bool","pageToken","pageNumber","uri","method","params","payload","getPage","targetUrl","_domain","twilio","request","toJSON","inspect","custom","depth","options","response","solution","prototype","constructor","call","extend","getInstance","clone","forOwn","value","key","startsWith","account_sid","apiVersion","api_version","callSid","call_sid","conferenceSid","conference_sid","dateCreated","rfc2822DateTime","date_created","dateUpdated","date_updated","startTime","start_time","duration","price","priceUnit","price_unit","status","channels","integer","source","errorCode","error_code","encryptionDetails","encryption_details","subresourceUris","subresource_uris","mediaUrl","media_url","_context","undefined","Object","defineProperty","fetch","_proxy","remove","transcriptions","addOnResults","_transcriptions","_addOnResults","module","exports"],"sources":["/Users/hooniesun/rmit/fwp/assessment1/lan/node_modules/twilio/lib/rest/api/v2010/account/recording.js"],"sourcesContent":["'use strict';\n\n/* jshint ignore:start */\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n/* jshint ignore:end */\n\nvar Q = require('q');  /* jshint ignore:line */\nvar _ = require('lodash');  /* jshint ignore:line */\nvar util = require('util');  /* jshint ignore:line */\nvar AddOnResultList = require('./recording/addOnResult').AddOnResultList;\nvar Page = require('../../../../base/Page');  /* jshint ignore:line */\nvar TranscriptionList = require('./recording/transcription').TranscriptionList;\nvar deserialize = require(\n    '../../../../base/deserialize');  /* jshint ignore:line */\nvar serialize = require('../../../../base/serialize');  /* jshint ignore:line */\nvar values = require('../../../../base/values');  /* jshint ignore:line */\n\nvar RecordingList;\nvar RecordingPage;\nvar RecordingInstance;\nvar RecordingContext;\n\n/* jshint ignore:start */\n/**\n * Initialize the RecordingList\n *\n * @constructor Twilio.Api.V2010.AccountContext.RecordingList\n *\n * @param {Twilio.Api.V2010} version - Version of the resource\n * @param {string} accountSid - The SID of the Account that created the resource\n */\n/* jshint ignore:end */\nRecordingList = function RecordingList(version, accountSid) {\n  /* jshint ignore:start */\n  /**\n   * @function recordings\n   * @memberof Twilio.Api.V2010.AccountContext#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Api.V2010.AccountContext.RecordingContext}\n   */\n  /* jshint ignore:end */\n  function RecordingListInstance(sid) {\n    return RecordingListInstance.get(sid);\n  }\n\n  RecordingListInstance._version = version;\n  // Path Solution\n  RecordingListInstance._solution = {accountSid: accountSid};\n  RecordingListInstance._uri = `/Accounts/${accountSid}/Recordings.json`;\n  /* jshint ignore:start */\n  /**\n   * Streams RecordingInstance records from the API.\n   *\n   * This operation lazily loads records as efficiently as possible until the limit\n   * is reached.\n   *\n   * The results are passed into the callback function, so this operation is memory\n   * efficient.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function each\n   * @memberof Twilio.Api.V2010.AccountContext.RecordingList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {Date} [opts.dateCreatedBefore] -\n   *          Only include recordings that were created on this date\n   * @param {Date} [opts.dateCreated] -\n   *          Only include recordings that were created on this date\n   * @param {Date} [opts.dateCreatedAfter] -\n   *          Only include recordings that were created on this date\n   * @param {string} [opts.callSid] - The Call SID of the resources to read\n   * @param {string} [opts.conferenceSid] -\n   *          Read by unique Conference SID for the recording\n   * @param {boolean} [opts.includeSoftDeleted] -\n   *          A boolean parameter indicating whether to retrieve soft deleted recordings or not.\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         each() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no pageSize is defined but a limit is defined,\n   *         each() will attempt to read the limit with the most efficient\n   *         page size, i.e. min(limit, 1000)\n   * @param {Function} [opts.callback] -\n   *         Function to process each record. If this and a positional\n   *         callback are passed, this one will be used\n   * @param {Function} [opts.done] -\n   *          Function to be called upon completion of streaming\n   * @param {Function} [callback] - Function to process each record\n   */\n  /* jshint ignore:end */\n  RecordingListInstance.each = function each(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    if (opts.callback) {\n      callback = opts.callback;\n    }\n    if (_.isUndefined(callback)) {\n      throw new Error('Callback function must be provided');\n    }\n\n    var done = false;\n    var currentPage = 1;\n    var currentResource = 0;\n    var limits = this._version.readLimits({\n      limit: opts.limit,\n      pageSize: opts.pageSize\n    });\n\n    function onComplete(error) {\n      done = true;\n      if (_.isFunction(opts.done)) {\n        opts.done(error);\n      }\n    }\n\n    function fetchNextPage(fn) {\n      var promise = fn();\n      if (_.isUndefined(promise)) {\n        onComplete();\n        return;\n      }\n\n      promise.then(function(page) {\n        _.each(page.instances, function(instance) {\n          if (done || (!_.isUndefined(opts.limit) && currentResource >= opts.limit)) {\n            done = true;\n            return false;\n          }\n\n          currentResource++;\n          callback(instance, onComplete);\n        });\n\n        if (!done) {\n          currentPage++;\n          fetchNextPage(_.bind(page.nextPage, page));\n        } else {\n          onComplete();\n        }\n      });\n\n      promise.catch(onComplete);\n    }\n\n    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Lists RecordingInstance records from the API as a list.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function list\n   * @memberof Twilio.Api.V2010.AccountContext.RecordingList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {Date} [opts.dateCreatedBefore] -\n   *          Only include recordings that were created on this date\n   * @param {Date} [opts.dateCreated] -\n   *          Only include recordings that were created on this date\n   * @param {Date} [opts.dateCreatedAfter] -\n   *          Only include recordings that were created on this date\n   * @param {string} [opts.callSid] - The Call SID of the resources to read\n   * @param {string} [opts.conferenceSid] -\n   *          Read by unique Conference SID for the recording\n   * @param {boolean} [opts.includeSoftDeleted] -\n   *          A boolean parameter indicating whether to retrieve soft deleted recordings or not.\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         list() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no page_size is defined but a limit is defined,\n   *         list() will attempt to read the limit with the most\n   *         efficient page size, i.e. min(limit, 1000)\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  RecordingListInstance.list = function list(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    var deferred = Q.defer();\n    var allResources = [];\n    opts.callback = function(resource, done) {\n      allResources.push(resource);\n\n      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {\n        done();\n      }\n    };\n\n    opts.done = function(error) {\n      if (_.isUndefined(error)) {\n        deferred.resolve(allResources);\n      } else {\n        deferred.reject(error);\n      }\n    };\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    this.each(opts);\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single page of RecordingInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function page\n   * @memberof Twilio.Api.V2010.AccountContext.RecordingList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {Date} [opts.dateCreatedBefore] -\n   *          Only include recordings that were created on this date\n   * @param {Date} [opts.dateCreated] -\n   *          Only include recordings that were created on this date\n   * @param {Date} [opts.dateCreatedAfter] -\n   *          Only include recordings that were created on this date\n   * @param {string} [opts.callSid] - The Call SID of the resources to read\n   * @param {string} [opts.conferenceSid] -\n   *          Read by unique Conference SID for the recording\n   * @param {boolean} [opts.includeSoftDeleted] -\n   *          A boolean parameter indicating whether to retrieve soft deleted recordings or not.\n   * @param {string} [opts.pageToken] - PageToken provided by the API\n   * @param {number} [opts.pageNumber] -\n   *          Page Number, this value is simply for client state\n   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  RecordingListInstance.page = function page(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n\n    var deferred = Q.defer();\n    var data = values.of({\n      'DateCreated<': serialize.iso8601DateTime(_.get(opts, 'dateCreatedBefore')),\n      'DateCreated': serialize.iso8601DateTime(_.get(opts, 'dateCreated')),\n      'DateCreated>': serialize.iso8601DateTime(_.get(opts, 'dateCreatedAfter')),\n      'CallSid': _.get(opts, 'callSid'),\n      'ConferenceSid': _.get(opts, 'conferenceSid'),\n      'IncludeSoftDeleted': serialize.bool(_.get(opts, 'includeSoftDeleted')),\n      'PageToken': opts.pageToken,\n      'Page': opts.pageNumber,\n      'PageSize': opts.pageSize\n    });\n\n    var promise = this._version.page({uri: this._uri, method: 'GET', params: data});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new RecordingPage(this._version, payload, this._solution));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single target page of RecordingInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function getPage\n   * @memberof Twilio.Api.V2010.AccountContext.RecordingList#\n   *\n   * @param {string} [targetUrl] - API-generated URL for the requested results page\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  RecordingListInstance.getPage = function getPage(targetUrl, callback) {\n    var deferred = Q.defer();\n\n    var promise = this._version._domain.twilio.request({method: 'GET', uri: targetUrl});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new RecordingPage(this._version, payload, this._solution));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Constructs a recording\n   *\n   * @function get\n   * @memberof Twilio.Api.V2010.AccountContext.RecordingList#\n   *\n   * @param {string} sid - The unique string that identifies the resource\n   *\n   * @returns {Twilio.Api.V2010.AccountContext.RecordingContext}\n   */\n  /* jshint ignore:end */\n  RecordingListInstance.get = function get(sid) {\n    return new RecordingContext(this._version, this._solution.accountSid, sid);\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Api.V2010.AccountContext.RecordingList#\n   *\n   * @returns Object\n   */\n  /* jshint ignore:end */\n  RecordingListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n\n  RecordingListInstance[util.inspect.custom] = function inspect(depth, options) {\n    return util.inspect(this.toJSON(), options);\n  };\n\n  return RecordingListInstance;\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the RecordingPage\n *\n * @constructor Twilio.Api.V2010.AccountContext.RecordingPage\n *\n * @param {V2010} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {RecordingSolution} solution - Path solution\n *\n * @returns RecordingPage\n */\n/* jshint ignore:end */\nRecordingPage = function RecordingPage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n\n_.extend(RecordingPage.prototype, Page.prototype);\nRecordingPage.prototype.constructor = RecordingPage;\n\n/* jshint ignore:start */\n/**\n * Build an instance of RecordingInstance\n *\n * @function getInstance\n * @memberof Twilio.Api.V2010.AccountContext.RecordingPage#\n *\n * @param {RecordingPayload} payload - Payload response from the API\n *\n * @returns RecordingInstance\n */\n/* jshint ignore:end */\nRecordingPage.prototype.getInstance = function getInstance(payload) {\n  return new RecordingInstance(this._version, payload, this._solution.accountSid);\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Api.V2010.AccountContext.RecordingPage#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nRecordingPage.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function(value, key) {\n    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\n\nRecordingPage.prototype[util.inspect.custom] = function inspect(depth, options)\n    {\n  return util.inspect(this.toJSON(), options);\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the RecordingContext\n *\n * @constructor Twilio.Api.V2010.AccountContext.RecordingInstance\n *\n * @property {string} accountSid - The SID of the Account that created the resource\n * @property {string} apiVersion - The API version used during the recording.\n * @property {string} callSid - The SID of the Call the resource is associated with\n * @property {string} conferenceSid -\n *          The unique ID for the conference associated with the recording.\n * @property {Date} dateCreated -\n *          The RFC 2822 date and time in GMT that the resource was created\n * @property {Date} dateUpdated -\n *          The RFC 2822 date and time in GMT that the resource was last updated\n * @property {Date} startTime -\n *          The start time of the recording, given in RFC 2822 format\n * @property {string} duration - The length of the recording in seconds.\n * @property {string} sid - The unique string that identifies the resource\n * @property {string} price - The one-time cost of creating the recording.\n * @property {string} priceUnit - The currency used in the price property.\n * @property {recording.status} status - The status of the recording.\n * @property {number} channels -\n *          The number of channels in the final recording file as an integer.\n * @property {recording.source} source - How the recording was created\n * @property {number} errorCode -\n *          More information about why the recording is missing, if status is `absent`.\n * @property {string} uri -\n *          The URI of the resource, relative to `https://api.twilio.com`\n * @property {object} encryptionDetails - How to decrypt the recording.\n * @property {string} subresourceUris -\n *          A list of related resources identified by their relative URIs\n * @property {string} mediaUrl - The URL of the media file.\n *\n * @param {V2010} version - Version of the resource\n * @param {RecordingPayload} payload - The instance payload\n * @param {sid} accountSid - The SID of the Account that created the resource\n * @param {sid} sid - The unique string that identifies the resource\n */\n/* jshint ignore:end */\nRecordingInstance = function RecordingInstance(version, payload, accountSid,\n                                                sid) {\n  this._version = version;\n\n  // Marshaled Properties\n  this.accountSid = payload.account_sid; // jshint ignore:line\n  this.apiVersion = payload.api_version; // jshint ignore:line\n  this.callSid = payload.call_sid; // jshint ignore:line\n  this.conferenceSid = payload.conference_sid; // jshint ignore:line\n  this.dateCreated = deserialize.rfc2822DateTime(payload.date_created); // jshint ignore:line\n  this.dateUpdated = deserialize.rfc2822DateTime(payload.date_updated); // jshint ignore:line\n  this.startTime = deserialize.rfc2822DateTime(payload.start_time); // jshint ignore:line\n  this.duration = payload.duration; // jshint ignore:line\n  this.sid = payload.sid; // jshint ignore:line\n  this.price = payload.price; // jshint ignore:line\n  this.priceUnit = payload.price_unit; // jshint ignore:line\n  this.status = payload.status; // jshint ignore:line\n  this.channels = deserialize.integer(payload.channels); // jshint ignore:line\n  this.source = payload.source; // jshint ignore:line\n  this.errorCode = deserialize.integer(payload.error_code); // jshint ignore:line\n  this.uri = payload.uri; // jshint ignore:line\n  this.encryptionDetails = payload.encryption_details; // jshint ignore:line\n  this.subresourceUris = payload.subresource_uris; // jshint ignore:line\n  this.mediaUrl = payload.media_url; // jshint ignore:line\n\n  // Context\n  this._context = undefined;\n  this._solution = {accountSid: accountSid, sid: sid || this.sid, };\n};\n\nObject.defineProperty(RecordingInstance.prototype,\n  '_proxy', {\n    get: function() {\n      if (!this._context) {\n        this._context = new RecordingContext(this._version, this._solution.accountSid, this._solution.sid);\n      }\n\n      return this._context;\n    }\n});\n\n/* jshint ignore:start */\n/**\n * fetch a RecordingInstance\n *\n * @function fetch\n * @memberof Twilio.Api.V2010.AccountContext.RecordingInstance#\n *\n * @param {object} [opts] - Options for request\n * @param {boolean} [opts.includeSoftDeleted] -\n *          A boolean parameter indicating whether to retrieve soft deleted recordings or not.\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed RecordingInstance\n */\n/* jshint ignore:end */\nRecordingInstance.prototype.fetch = function fetch(opts, callback) {\n  return this._proxy.fetch(opts, callback);\n};\n\n/* jshint ignore:start */\n/**\n * remove a RecordingInstance\n *\n * @function remove\n * @memberof Twilio.Api.V2010.AccountContext.RecordingInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed RecordingInstance\n */\n/* jshint ignore:end */\nRecordingInstance.prototype.remove = function remove(callback) {\n  return this._proxy.remove(callback);\n};\n\n/* jshint ignore:start */\n/**\n * Access the transcriptions\n *\n * @function transcriptions\n * @memberof Twilio.Api.V2010.AccountContext.RecordingInstance#\n *\n * @returns {Twilio.Api.V2010.AccountContext.RecordingContext.TranscriptionList}\n */\n/* jshint ignore:end */\nRecordingInstance.prototype.transcriptions = function transcriptions() {\n  return this._proxy.transcriptions;\n};\n\n/* jshint ignore:start */\n/**\n * Access the addOnResults\n *\n * @function addOnResults\n * @memberof Twilio.Api.V2010.AccountContext.RecordingInstance#\n *\n * @returns {Twilio.Api.V2010.AccountContext.RecordingContext.AddOnResultList}\n */\n/* jshint ignore:end */\nRecordingInstance.prototype.addOnResults = function addOnResults() {\n  return this._proxy.addOnResults;\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Api.V2010.AccountContext.RecordingInstance#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nRecordingInstance.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function(value, key) {\n    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\n\nRecordingInstance.prototype[util.inspect.custom] = function inspect(depth,\n    options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the RecordingContext\n *\n * @constructor Twilio.Api.V2010.AccountContext.RecordingContext\n *\n * @property {Twilio.Api.V2010.AccountContext.RecordingContext.TranscriptionList} transcriptions -\n *          transcriptions resource\n * @property {Twilio.Api.V2010.AccountContext.RecordingContext.AddOnResultList} addOnResults -\n *          addOnResults resource\n *\n * @param {V2010} version - Version of the resource\n * @param {sid} accountSid -\n *          The SID of the Account that created the resource to fetch\n * @param {sid} sid - The unique string that identifies the resource\n */\n/* jshint ignore:end */\nRecordingContext = function RecordingContext(version, accountSid, sid) {\n  this._version = version;\n\n  // Path Solution\n  this._solution = {accountSid: accountSid, sid: sid, };\n  this._uri = `/Accounts/${accountSid}/Recordings/${sid}.json`;\n\n  // Dependents\n  this._transcriptions = undefined;\n  this._addOnResults = undefined;\n};\n\n/* jshint ignore:start */\n/**\n * fetch a RecordingInstance\n *\n * @function fetch\n * @memberof Twilio.Api.V2010.AccountContext.RecordingContext#\n *\n * @param {object} [opts] - Options for request\n * @param {boolean} [opts.includeSoftDeleted] -\n *          A boolean parameter indicating whether to retrieve soft deleted recordings or not.\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed RecordingInstance\n */\n/* jshint ignore:end */\nRecordingContext.prototype.fetch = function fetch(opts, callback) {\n  if (_.isFunction(opts)) {\n    callback = opts;\n    opts = {};\n  }\n  opts = opts || {};\n\n  var deferred = Q.defer();\n  var data = values.of({'IncludeSoftDeleted': serialize.bool(_.get(opts, 'includeSoftDeleted'))});\n\n  var promise = this._version.fetch({uri: this._uri, method: 'GET', params: data});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(new RecordingInstance(\n      this._version,\n      payload,\n      this._solution.accountSid,\n      this._solution.sid\n    ));\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * remove a RecordingInstance\n *\n * @function remove\n * @memberof Twilio.Api.V2010.AccountContext.RecordingContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed RecordingInstance\n */\n/* jshint ignore:end */\nRecordingContext.prototype.remove = function remove(callback) {\n  var deferred = Q.defer();\n  var promise = this._version.remove({uri: this._uri, method: 'DELETE'});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(payload);\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\nObject.defineProperty(RecordingContext.prototype,\n  'transcriptions', {\n    get: function() {\n      if (!this._transcriptions) {\n        this._transcriptions = new TranscriptionList(\n          this._version,\n          this._solution.accountSid,\n          this._solution.sid\n        );\n      }\n      return this._transcriptions;\n    }\n});\n\nObject.defineProperty(RecordingContext.prototype,\n  'addOnResults', {\n    get: function() {\n      if (!this._addOnResults) {\n        this._addOnResults = new AddOnResultList(\n          this._version,\n          this._solution.accountSid,\n          this._solution.sid\n        );\n      }\n      return this._addOnResults;\n    }\n});\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Api.V2010.AccountContext.RecordingContext#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nRecordingContext.prototype.toJSON = function toJSON() {\n  return this._solution;\n};\n\nRecordingContext.prototype[util.inspect.custom] = function inspect(depth,\n    options) {\n  return util.inspect(this.toJSON(), options);\n};\n\nmodule.exports = {\n  RecordingList: RecordingList,\n  RecordingPage: RecordingPage,\n  RecordingInstance: RecordingInstance,\n  RecordingContext: RecordingContext\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}