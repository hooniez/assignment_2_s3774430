{"ast":null,"code":"'use strict';\n/* jshint ignore:start */\n\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n\n/* jshint ignore:end */\n\nvar Q = require('q');\n/* jshint ignore:line */\n\n\nvar _ = require('lodash');\n/* jshint ignore:line */\n\n\nvar util = require('util');\n/* jshint ignore:line */\n\n\nvar Page = require('../../../../../base/Page');\n/* jshint ignore:line */\n\n\nvar deserialize = require('../../../../../base/deserialize');\n/* jshint ignore:line */\n\n\nvar serialize = require('../../../../../base/serialize');\n/* jshint ignore:line */\n\n\nvar values = require('../../../../../base/values');\n/* jshint ignore:line */\n\n\nvar ReservationList;\nvar ReservationPage;\nvar ReservationInstance;\nvar ReservationContext;\n/* jshint ignore:start */\n\n/**\n * Initialize the ReservationList\n *\n * @constructor Twilio.Taskrouter.V1.WorkspaceContext.TaskContext.ReservationList\n *\n * @param {Twilio.Taskrouter.V1} version - Version of the resource\n * @param {string} workspaceSid -\n *          The SID of the Workspace that this task is contained within.\n * @param {string} taskSid - The SID of the reserved Task resource\n */\n\n/* jshint ignore:end */\n\nReservationList = function ReservationList(version, workspaceSid, taskSid) {\n  /* jshint ignore:start */\n\n  /**\n   * @function reservations\n   * @memberof Twilio.Taskrouter.V1.WorkspaceContext.TaskContext#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Taskrouter.V1.WorkspaceContext.TaskContext.ReservationContext}\n   */\n\n  /* jshint ignore:end */\n  function ReservationListInstance(sid) {\n    return ReservationListInstance.get(sid);\n  }\n\n  ReservationListInstance._version = version; // Path Solution\n\n  ReservationListInstance._solution = {\n    workspaceSid: workspaceSid,\n    taskSid: taskSid\n  };\n  ReservationListInstance._uri = `/Workspaces/${workspaceSid}/Tasks/${taskSid}/Reservations`;\n  /* jshint ignore:start */\n\n  /**\n   * Streams ReservationInstance records from the API.\n   *\n   * This operation lazily loads records as efficiently as possible until the limit\n   * is reached.\n   *\n   * The results are passed into the callback function, so this operation is memory\n   * efficient.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function each\n   * @memberof Twilio.Taskrouter.V1.WorkspaceContext.TaskContext.ReservationList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {reservation.status} [opts.reservationStatus] -\n   *          Returns the list of reservations for a task with a specified ReservationStatus\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         each() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no pageSize is defined but a limit is defined,\n   *         each() will attempt to read the limit with the most efficient\n   *         page size, i.e. min(limit, 1000)\n   * @param {Function} [opts.callback] -\n   *         Function to process each record. If this and a positional\n   *         callback are passed, this one will be used\n   * @param {Function} [opts.done] -\n   *          Function to be called upon completion of streaming\n   * @param {Function} [callback] - Function to process each record\n   */\n\n  /* jshint ignore:end */\n\n  ReservationListInstance.each = function each(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n\n    if (opts.callback) {\n      callback = opts.callback;\n    }\n\n    if (_.isUndefined(callback)) {\n      throw new Error('Callback function must be provided');\n    }\n\n    var done = false;\n    var currentPage = 1;\n    var currentResource = 0;\n\n    var limits = this._version.readLimits({\n      limit: opts.limit,\n      pageSize: opts.pageSize\n    });\n\n    function onComplete(error) {\n      done = true;\n\n      if (_.isFunction(opts.done)) {\n        opts.done(error);\n      }\n    }\n\n    function fetchNextPage(fn) {\n      var promise = fn();\n\n      if (_.isUndefined(promise)) {\n        onComplete();\n        return;\n      }\n\n      promise.then(function (page) {\n        _.each(page.instances, function (instance) {\n          if (done || !_.isUndefined(opts.limit) && currentResource >= opts.limit) {\n            done = true;\n            return false;\n          }\n\n          currentResource++;\n          callback(instance, onComplete);\n        });\n\n        if (!done) {\n          currentPage++;\n          fetchNextPage(_.bind(page.nextPage, page));\n        } else {\n          onComplete();\n        }\n      });\n      promise.catch(onComplete);\n    }\n\n    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Lists ReservationInstance records from the API as a list.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function list\n   * @memberof Twilio.Taskrouter.V1.WorkspaceContext.TaskContext.ReservationList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {reservation.status} [opts.reservationStatus] -\n   *          Returns the list of reservations for a task with a specified ReservationStatus\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         list() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no page_size is defined but a limit is defined,\n   *         list() will attempt to read the limit with the most\n   *         efficient page size, i.e. min(limit, 1000)\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  ReservationListInstance.list = function list(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n    var deferred = Q.defer();\n    var allResources = [];\n\n    opts.callback = function (resource, done) {\n      allResources.push(resource);\n\n      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {\n        done();\n      }\n    };\n\n    opts.done = function (error) {\n      if (_.isUndefined(error)) {\n        deferred.resolve(allResources);\n      } else {\n        deferred.reject(error);\n      }\n    };\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    this.each(opts);\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Retrieve a single page of ReservationInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function page\n   * @memberof Twilio.Taskrouter.V1.WorkspaceContext.TaskContext.ReservationList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {reservation.status} [opts.reservationStatus] -\n   *          Returns the list of reservations for a task with a specified ReservationStatus\n   * @param {string} [opts.pageToken] - PageToken provided by the API\n   * @param {number} [opts.pageNumber] -\n   *          Page Number, this value is simply for client state\n   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  ReservationListInstance.page = function page(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n    var deferred = Q.defer();\n    var data = values.of({\n      'ReservationStatus': _.get(opts, 'reservationStatus'),\n      'PageToken': opts.pageToken,\n      'Page': opts.pageNumber,\n      'PageSize': opts.pageSize\n    });\n\n    var promise = this._version.page({\n      uri: this._uri,\n      method: 'GET',\n      params: data\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new ReservationPage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Retrieve a single target page of ReservationInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function getPage\n   * @memberof Twilio.Taskrouter.V1.WorkspaceContext.TaskContext.ReservationList#\n   *\n   * @param {string} [targetUrl] - API-generated URL for the requested results page\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  ReservationListInstance.getPage = function getPage(targetUrl, callback) {\n    var deferred = Q.defer();\n\n    var promise = this._version._domain.twilio.request({\n      method: 'GET',\n      uri: targetUrl\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new ReservationPage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Constructs a reservation\n   *\n   * @function get\n   * @memberof Twilio.Taskrouter.V1.WorkspaceContext.TaskContext.ReservationList#\n   *\n   * @param {string} sid - The SID of the TaskReservation resource to fetch\n   *\n   * @returns {Twilio.Taskrouter.V1.WorkspaceContext.TaskContext.ReservationContext}\n   */\n\n  /* jshint ignore:end */\n\n\n  ReservationListInstance.get = function get(sid) {\n    return new ReservationContext(this._version, this._solution.workspaceSid, this._solution.taskSid, sid);\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Taskrouter.V1.WorkspaceContext.TaskContext.ReservationList#\n   *\n   * @returns Object\n   */\n\n  /* jshint ignore:end */\n\n\n  ReservationListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n\n  ReservationListInstance[util.inspect.custom] = function inspect(depth, options) {\n    return util.inspect(this.toJSON(), options);\n  };\n\n  return ReservationListInstance;\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the ReservationPage\n *\n * @constructor Twilio.Taskrouter.V1.WorkspaceContext.TaskContext.ReservationPage\n *\n * @param {V1} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {ReservationSolution} solution - Path solution\n *\n * @returns ReservationPage\n */\n\n/* jshint ignore:end */\n\n\nReservationPage = function ReservationPage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n\n_.extend(ReservationPage.prototype, Page.prototype);\n\nReservationPage.prototype.constructor = ReservationPage;\n/* jshint ignore:start */\n\n/**\n * Build an instance of ReservationInstance\n *\n * @function getInstance\n * @memberof Twilio.Taskrouter.V1.WorkspaceContext.TaskContext.ReservationPage#\n *\n * @param {ReservationPayload} payload - Payload response from the API\n *\n * @returns ReservationInstance\n */\n\n/* jshint ignore:end */\n\nReservationPage.prototype.getInstance = function getInstance(payload) {\n  return new ReservationInstance(this._version, payload, this._solution.workspaceSid, this._solution.taskSid);\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Taskrouter.V1.WorkspaceContext.TaskContext.ReservationPage#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nReservationPage.prototype.toJSON = function toJSON() {\n  let clone = {};\n\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n\n  return clone;\n};\n\nReservationPage.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the ReservationContext\n *\n * @constructor Twilio.Taskrouter.V1.WorkspaceContext.TaskContext.ReservationInstance\n *\n * @property {string} accountSid - The SID of the Account that created the resource\n * @property {Date} dateCreated -\n *          The ISO 8601 date and time in GMT when the resource was created\n * @property {Date} dateUpdated -\n *          The ISO 8601 date and time in GMT when the resource was last updated\n * @property {reservation.status} reservationStatus -\n *          The current status of the reservation\n * @property {string} sid - The unique string that identifies the resource\n * @property {string} taskSid - The SID of the reserved Task resource\n * @property {string} workerName - The friendly_name of the Worker that is reserved\n * @property {string} workerSid - The SID of the reserved Worker resource\n * @property {string} workspaceSid -\n *          The SID of the Workspace that this task is contained within.\n * @property {string} url - The absolute URL of the TaskReservation reservation\n * @property {string} links - The URLs of related resources\n *\n * @param {V1} version - Version of the resource\n * @param {ReservationPayload} payload - The instance payload\n * @param {sid} workspaceSid -\n *          The SID of the Workspace that this task is contained within.\n * @param {sid} taskSid - The SID of the reserved Task resource\n * @param {sid} sid - The SID of the TaskReservation resource to fetch\n */\n\n/* jshint ignore:end */\n\n\nReservationInstance = function ReservationInstance(version, payload, workspaceSid, taskSid, sid) {\n  this._version = version; // Marshaled Properties\n\n  this.accountSid = payload.account_sid; // jshint ignore:line\n\n  this.dateCreated = deserialize.iso8601DateTime(payload.date_created); // jshint ignore:line\n\n  this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated); // jshint ignore:line\n\n  this.reservationStatus = payload.reservation_status; // jshint ignore:line\n\n  this.sid = payload.sid; // jshint ignore:line\n\n  this.taskSid = payload.task_sid; // jshint ignore:line\n\n  this.workerName = payload.worker_name; // jshint ignore:line\n\n  this.workerSid = payload.worker_sid; // jshint ignore:line\n\n  this.workspaceSid = payload.workspace_sid; // jshint ignore:line\n\n  this.url = payload.url; // jshint ignore:line\n\n  this.links = payload.links; // jshint ignore:line\n  // Context\n\n  this._context = undefined;\n  this._solution = {\n    workspaceSid: workspaceSid,\n    taskSid: taskSid,\n    sid: sid || this.sid\n  };\n};\n\nObject.defineProperty(ReservationInstance.prototype, '_proxy', {\n  get: function () {\n    if (!this._context) {\n      this._context = new ReservationContext(this._version, this._solution.workspaceSid, this._solution.taskSid, this._solution.sid);\n    }\n\n    return this._context;\n  }\n});\n/* jshint ignore:start */\n\n/**\n * fetch a ReservationInstance\n *\n * @function fetch\n * @memberof Twilio.Taskrouter.V1.WorkspaceContext.TaskContext.ReservationInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed ReservationInstance\n */\n\n/* jshint ignore:end */\n\nReservationInstance.prototype.fetch = function fetch(callback) {\n  return this._proxy.fetch(callback);\n};\n/* jshint ignore:start */\n\n/**\n * update a ReservationInstance\n *\n * @function update\n * @memberof Twilio.Taskrouter.V1.WorkspaceContext.TaskContext.ReservationInstance#\n *\n * @param {object} [opts] - Options for request\n * @param {reservation.status} [opts.reservationStatus] -\n *          The new status of the reservation\n * @param {string} [opts.workerActivitySid] -\n *          The new worker activity SID if rejecting a reservation\n * @param {string} [opts.instruction] - The assignment instruction for reservation\n * @param {string} [opts.dequeuePostWorkActivitySid] -\n *          The SID of the Activity resource to start after executing a Dequeue instruction\n * @param {string} [opts.dequeueFrom] -\n *          The Caller ID of the call to the worker when executing a Dequeue instruction\n * @param {string} [opts.dequeueRecord] -\n *          Whether to record both legs of a call when executing a Dequeue instruction\n * @param {number} [opts.dequeueTimeout] -\n *          Timeout for call when executing a Dequeue instruction\n * @param {string} [opts.dequeueTo] -\n *          The Contact URI of the worker when executing a Dequeue instruction\n * @param {string} [opts.dequeueStatusCallbackUrl] -\n *          The Callback URL for completed call event when executing a Dequeue instruction\n * @param {string} [opts.callFrom] -\n *          The Caller ID of the outbound call when executing a Call instruction\n * @param {string} [opts.callRecord] -\n *          Whether to record both legs of a call when executing a Call instruction\n * @param {number} [opts.callTimeout] -\n *          Timeout for call when executing a Call instruction\n * @param {string} [opts.callTo] -\n *          The Contact URI of the worker when executing a Call instruction\n * @param {string} [opts.callUrl] -\n *          TwiML URI executed on answering the worker's leg as a result of the Call instruction\n * @param {string} [opts.callStatusCallbackUrl] -\n *          The URL to call  for the completed call event when executing a Call instruction\n * @param {boolean} [opts.callAccept] -\n *          Whether to accept a reservation when executing a Call instruction\n * @param {string} [opts.redirectCallSid] -\n *          The Call SID of the call parked in the queue when executing a Redirect instruction\n * @param {boolean} [opts.redirectAccept] -\n *          Whether the reservation should be accepted when executing a Redirect instruction\n * @param {string} [opts.redirectUrl] -\n *          TwiML URI to redirect the call to when executing the Redirect instruction\n * @param {string} [opts.to] -\n *          The Contact URI of the worker when executing a Conference instruction\n * @param {string} [opts.from] -\n *          The Caller ID of the call to the worker when executing a Conference instruction\n * @param {string} [opts.statusCallback] -\n *          The URL we should call to send status information to your application\n * @param {string} [opts.statusCallbackMethod] -\n *          The HTTP method we should use to call status_callback\n * @param {reservation.call_status|list} [opts.statusCallbackEvent] -\n *          The call progress events that we will send to status_callback\n * @param {number} [opts.timeout] -\n *          Timeout for call when executing a Conference instruction\n * @param {boolean} [opts.record] -\n *          Whether to record the participant and their conferences\n * @param {boolean} [opts.muted] - Whether to mute the agent\n * @param {string} [opts.beep] -\n *          Whether to play a notification beep when the participant joins\n * @param {boolean} [opts.startConferenceOnEnter] -\n *          Whether the conference starts when the participant joins the conference\n * @param {boolean} [opts.endConferenceOnExit] -\n *          Whether to end the conference when the agent leaves\n * @param {string} [opts.waitUrl] - URL that hosts pre-conference hold music\n * @param {string} [opts.waitMethod] -\n *          The HTTP method we should use to call `wait_url`\n * @param {boolean} [opts.earlyMedia] -\n *          Whether agents can hear the state of the outbound call\n * @param {number} [opts.maxParticipants] -\n *          The maximum number of agent conference participants\n * @param {string} [opts.conferenceStatusCallback] -\n *          The callback URL for conference events\n * @param {string} [opts.conferenceStatusCallbackMethod] -\n *          HTTP method for requesting `conference_status_callback` URL\n * @param {reservation.conference_event|list} [opts.conferenceStatusCallbackEvent] -\n *          The conference status events that we will send to conference_status_callback\n * @param {string} [opts.conferenceRecord] -\n *          Whether to record the conference the participant is joining\n * @param {string} [opts.conferenceTrim] -\n *          How to trim leading and trailing silence from your recorded conference audio files\n * @param {string} [opts.recordingChannels] -\n *          Specify `mono` or `dual` recording channels\n * @param {string} [opts.recordingStatusCallback] -\n *          The URL that we should call using the `recording_status_callback_method` when the recording status changes\n * @param {string} [opts.recordingStatusCallbackMethod] -\n *          The HTTP method we should use when we call `recording_status_callback`\n * @param {string} [opts.conferenceRecordingStatusCallback] -\n *          The URL we should call using the `conference_recording_status_callback_method` when the conference recording is available\n * @param {string} [opts.conferenceRecordingStatusCallbackMethod] -\n *          The HTTP method we should use to call `conference_recording_status_callback`\n * @param {string} [opts.region] -\n *          The region where we should mix the conference audio\n * @param {string} [opts.sipAuthUsername] -\n *          The SIP username used for authentication\n * @param {string} [opts.sipAuthPassword] - The SIP password for authentication\n * @param {string|list} [opts.dequeueStatusCallbackEvent] -\n *          The Call progress events sent via webhooks as a result of a Dequeue instruction\n * @param {string} [opts.postWorkActivitySid] -\n *          The new worker activity SID after executing a Conference instruction\n * @param {reservation.supervisor_mode} [opts.supervisorMode] -\n *          The Supervisor mode when executing the Supervise instruction\n * @param {string} [opts.supervisor] -\n *          The Supervisor SID/URI when executing the Supervise instruction\n * @param {boolean} [opts.endConferenceOnCustomerExit] -\n *          Whether to end the conference when the customer leaves\n * @param {boolean} [opts.beepOnCustomerEntrance] -\n *          Whether to play a notification beep when the customer joins\n * @param {string} [opts.ifMatch] - The If-Match HTTP request header\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed ReservationInstance\n */\n\n/* jshint ignore:end */\n\n\nReservationInstance.prototype.update = function update(opts, callback) {\n  return this._proxy.update(opts, callback);\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Taskrouter.V1.WorkspaceContext.TaskContext.ReservationInstance#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nReservationInstance.prototype.toJSON = function toJSON() {\n  let clone = {};\n\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n\n  return clone;\n};\n\nReservationInstance.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the ReservationContext\n *\n * @constructor Twilio.Taskrouter.V1.WorkspaceContext.TaskContext.ReservationContext\n *\n * @param {V1} version - Version of the resource\n * @param {sid} workspaceSid -\n *          The SID of the Workspace with the TaskReservation resource to fetch\n * @param {sid} taskSid -\n *          The SID of the reserved Task resource with the TaskReservation resource to fetch\n * @param {sid} sid - The SID of the TaskReservation resource to fetch\n */\n\n/* jshint ignore:end */\n\n\nReservationContext = function ReservationContext(version, workspaceSid, taskSid, sid) {\n  this._version = version; // Path Solution\n\n  this._solution = {\n    workspaceSid: workspaceSid,\n    taskSid: taskSid,\n    sid: sid\n  };\n  this._uri = `/Workspaces/${workspaceSid}/Tasks/${taskSid}/Reservations/${sid}`;\n};\n/* jshint ignore:start */\n\n/**\n * fetch a ReservationInstance\n *\n * @function fetch\n * @memberof Twilio.Taskrouter.V1.WorkspaceContext.TaskContext.ReservationContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed ReservationInstance\n */\n\n/* jshint ignore:end */\n\n\nReservationContext.prototype.fetch = function fetch(callback) {\n  var deferred = Q.defer();\n\n  var promise = this._version.fetch({\n    uri: this._uri,\n    method: 'GET'\n  });\n\n  promise = promise.then(function (payload) {\n    deferred.resolve(new ReservationInstance(this._version, payload, this._solution.workspaceSid, this._solution.taskSid, this._solution.sid));\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n/* jshint ignore:start */\n\n/**\n * update a ReservationInstance\n *\n * @function update\n * @memberof Twilio.Taskrouter.V1.WorkspaceContext.TaskContext.ReservationContext#\n *\n * @param {object} [opts] - Options for request\n * @param {reservation.status} [opts.reservationStatus] -\n *          The new status of the reservation\n * @param {string} [opts.workerActivitySid] -\n *          The new worker activity SID if rejecting a reservation\n * @param {string} [opts.instruction] - The assignment instruction for reservation\n * @param {string} [opts.dequeuePostWorkActivitySid] -\n *          The SID of the Activity resource to start after executing a Dequeue instruction\n * @param {string} [opts.dequeueFrom] -\n *          The Caller ID of the call to the worker when executing a Dequeue instruction\n * @param {string} [opts.dequeueRecord] -\n *          Whether to record both legs of a call when executing a Dequeue instruction\n * @param {number} [opts.dequeueTimeout] -\n *          Timeout for call when executing a Dequeue instruction\n * @param {string} [opts.dequeueTo] -\n *          The Contact URI of the worker when executing a Dequeue instruction\n * @param {string} [opts.dequeueStatusCallbackUrl] -\n *          The Callback URL for completed call event when executing a Dequeue instruction\n * @param {string} [opts.callFrom] -\n *          The Caller ID of the outbound call when executing a Call instruction\n * @param {string} [opts.callRecord] -\n *          Whether to record both legs of a call when executing a Call instruction\n * @param {number} [opts.callTimeout] -\n *          Timeout for call when executing a Call instruction\n * @param {string} [opts.callTo] -\n *          The Contact URI of the worker when executing a Call instruction\n * @param {string} [opts.callUrl] -\n *          TwiML URI executed on answering the worker's leg as a result of the Call instruction\n * @param {string} [opts.callStatusCallbackUrl] -\n *          The URL to call  for the completed call event when executing a Call instruction\n * @param {boolean} [opts.callAccept] -\n *          Whether to accept a reservation when executing a Call instruction\n * @param {string} [opts.redirectCallSid] -\n *          The Call SID of the call parked in the queue when executing a Redirect instruction\n * @param {boolean} [opts.redirectAccept] -\n *          Whether the reservation should be accepted when executing a Redirect instruction\n * @param {string} [opts.redirectUrl] -\n *          TwiML URI to redirect the call to when executing the Redirect instruction\n * @param {string} [opts.to] -\n *          The Contact URI of the worker when executing a Conference instruction\n * @param {string} [opts.from] -\n *          The Caller ID of the call to the worker when executing a Conference instruction\n * @param {string} [opts.statusCallback] -\n *          The URL we should call to send status information to your application\n * @param {string} [opts.statusCallbackMethod] -\n *          The HTTP method we should use to call status_callback\n * @param {reservation.call_status|list} [opts.statusCallbackEvent] -\n *          The call progress events that we will send to status_callback\n * @param {number} [opts.timeout] -\n *          Timeout for call when executing a Conference instruction\n * @param {boolean} [opts.record] -\n *          Whether to record the participant and their conferences\n * @param {boolean} [opts.muted] - Whether to mute the agent\n * @param {string} [opts.beep] -\n *          Whether to play a notification beep when the participant joins\n * @param {boolean} [opts.startConferenceOnEnter] -\n *          Whether the conference starts when the participant joins the conference\n * @param {boolean} [opts.endConferenceOnExit] -\n *          Whether to end the conference when the agent leaves\n * @param {string} [opts.waitUrl] - URL that hosts pre-conference hold music\n * @param {string} [opts.waitMethod] -\n *          The HTTP method we should use to call `wait_url`\n * @param {boolean} [opts.earlyMedia] -\n *          Whether agents can hear the state of the outbound call\n * @param {number} [opts.maxParticipants] -\n *          The maximum number of agent conference participants\n * @param {string} [opts.conferenceStatusCallback] -\n *          The callback URL for conference events\n * @param {string} [opts.conferenceStatusCallbackMethod] -\n *          HTTP method for requesting `conference_status_callback` URL\n * @param {reservation.conference_event|list} [opts.conferenceStatusCallbackEvent] -\n *          The conference status events that we will send to conference_status_callback\n * @param {string} [opts.conferenceRecord] -\n *          Whether to record the conference the participant is joining\n * @param {string} [opts.conferenceTrim] -\n *          How to trim leading and trailing silence from your recorded conference audio files\n * @param {string} [opts.recordingChannels] -\n *          Specify `mono` or `dual` recording channels\n * @param {string} [opts.recordingStatusCallback] -\n *          The URL that we should call using the `recording_status_callback_method` when the recording status changes\n * @param {string} [opts.recordingStatusCallbackMethod] -\n *          The HTTP method we should use when we call `recording_status_callback`\n * @param {string} [opts.conferenceRecordingStatusCallback] -\n *          The URL we should call using the `conference_recording_status_callback_method` when the conference recording is available\n * @param {string} [opts.conferenceRecordingStatusCallbackMethod] -\n *          The HTTP method we should use to call `conference_recording_status_callback`\n * @param {string} [opts.region] -\n *          The region where we should mix the conference audio\n * @param {string} [opts.sipAuthUsername] -\n *          The SIP username used for authentication\n * @param {string} [opts.sipAuthPassword] - The SIP password for authentication\n * @param {string|list} [opts.dequeueStatusCallbackEvent] -\n *          The Call progress events sent via webhooks as a result of a Dequeue instruction\n * @param {string} [opts.postWorkActivitySid] -\n *          The new worker activity SID after executing a Conference instruction\n * @param {reservation.supervisor_mode} [opts.supervisorMode] -\n *          The Supervisor mode when executing the Supervise instruction\n * @param {string} [opts.supervisor] -\n *          The Supervisor SID/URI when executing the Supervise instruction\n * @param {boolean} [opts.endConferenceOnCustomerExit] -\n *          Whether to end the conference when the customer leaves\n * @param {boolean} [opts.beepOnCustomerEntrance] -\n *          Whether to play a notification beep when the customer joins\n * @param {string} [opts.ifMatch] - The If-Match HTTP request header\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed ReservationInstance\n */\n\n/* jshint ignore:end */\n\n\nReservationContext.prototype.update = function update(opts, callback) {\n  if (_.isFunction(opts)) {\n    callback = opts;\n    opts = {};\n  }\n\n  opts = opts || {};\n  var deferred = Q.defer();\n  var data = values.of({\n    'ReservationStatus': _.get(opts, 'reservationStatus'),\n    'WorkerActivitySid': _.get(opts, 'workerActivitySid'),\n    'Instruction': _.get(opts, 'instruction'),\n    'DequeuePostWorkActivitySid': _.get(opts, 'dequeuePostWorkActivitySid'),\n    'DequeueFrom': _.get(opts, 'dequeueFrom'),\n    'DequeueRecord': _.get(opts, 'dequeueRecord'),\n    'DequeueTimeout': _.get(opts, 'dequeueTimeout'),\n    'DequeueTo': _.get(opts, 'dequeueTo'),\n    'DequeueStatusCallbackUrl': _.get(opts, 'dequeueStatusCallbackUrl'),\n    'CallFrom': _.get(opts, 'callFrom'),\n    'CallRecord': _.get(opts, 'callRecord'),\n    'CallTimeout': _.get(opts, 'callTimeout'),\n    'CallTo': _.get(opts, 'callTo'),\n    'CallUrl': _.get(opts, 'callUrl'),\n    'CallStatusCallbackUrl': _.get(opts, 'callStatusCallbackUrl'),\n    'CallAccept': serialize.bool(_.get(opts, 'callAccept')),\n    'RedirectCallSid': _.get(opts, 'redirectCallSid'),\n    'RedirectAccept': serialize.bool(_.get(opts, 'redirectAccept')),\n    'RedirectUrl': _.get(opts, 'redirectUrl'),\n    'To': _.get(opts, 'to'),\n    'From': _.get(opts, 'from'),\n    'StatusCallback': _.get(opts, 'statusCallback'),\n    'StatusCallbackMethod': _.get(opts, 'statusCallbackMethod'),\n    'StatusCallbackEvent': serialize.map(_.get(opts, 'statusCallbackEvent'), function (e) {\n      return e;\n    }),\n    'Timeout': _.get(opts, 'timeout'),\n    'Record': serialize.bool(_.get(opts, 'record')),\n    'Muted': serialize.bool(_.get(opts, 'muted')),\n    'Beep': _.get(opts, 'beep'),\n    'StartConferenceOnEnter': serialize.bool(_.get(opts, 'startConferenceOnEnter')),\n    'EndConferenceOnExit': serialize.bool(_.get(opts, 'endConferenceOnExit')),\n    'WaitUrl': _.get(opts, 'waitUrl'),\n    'WaitMethod': _.get(opts, 'waitMethod'),\n    'EarlyMedia': serialize.bool(_.get(opts, 'earlyMedia')),\n    'MaxParticipants': _.get(opts, 'maxParticipants'),\n    'ConferenceStatusCallback': _.get(opts, 'conferenceStatusCallback'),\n    'ConferenceStatusCallbackMethod': _.get(opts, 'conferenceStatusCallbackMethod'),\n    'ConferenceStatusCallbackEvent': serialize.map(_.get(opts, 'conferenceStatusCallbackEvent'), function (e) {\n      return e;\n    }),\n    'ConferenceRecord': _.get(opts, 'conferenceRecord'),\n    'ConferenceTrim': _.get(opts, 'conferenceTrim'),\n    'RecordingChannels': _.get(opts, 'recordingChannels'),\n    'RecordingStatusCallback': _.get(opts, 'recordingStatusCallback'),\n    'RecordingStatusCallbackMethod': _.get(opts, 'recordingStatusCallbackMethod'),\n    'ConferenceRecordingStatusCallback': _.get(opts, 'conferenceRecordingStatusCallback'),\n    'ConferenceRecordingStatusCallbackMethod': _.get(opts, 'conferenceRecordingStatusCallbackMethod'),\n    'Region': _.get(opts, 'region'),\n    'SipAuthUsername': _.get(opts, 'sipAuthUsername'),\n    'SipAuthPassword': _.get(opts, 'sipAuthPassword'),\n    'DequeueStatusCallbackEvent': serialize.map(_.get(opts, 'dequeueStatusCallbackEvent'), function (e) {\n      return e;\n    }),\n    'PostWorkActivitySid': _.get(opts, 'postWorkActivitySid'),\n    'SupervisorMode': _.get(opts, 'supervisorMode'),\n    'Supervisor': _.get(opts, 'supervisor'),\n    'EndConferenceOnCustomerExit': serialize.bool(_.get(opts, 'endConferenceOnCustomerExit')),\n    'BeepOnCustomerEntrance': serialize.bool(_.get(opts, 'beepOnCustomerEntrance'))\n  });\n  var headers = values.of({\n    'If-Match': _.get(opts, 'ifMatch')\n  });\n\n  var promise = this._version.update({\n    uri: this._uri,\n    method: 'POST',\n    data: data,\n    headers: headers\n  });\n\n  promise = promise.then(function (payload) {\n    deferred.resolve(new ReservationInstance(this._version, payload, this._solution.workspaceSid, this._solution.taskSid, this._solution.sid));\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Taskrouter.V1.WorkspaceContext.TaskContext.ReservationContext#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nReservationContext.prototype.toJSON = function toJSON() {\n  return this._solution;\n};\n\nReservationContext.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\nmodule.exports = {\n  ReservationList: ReservationList,\n  ReservationPage: ReservationPage,\n  ReservationInstance: ReservationInstance,\n  ReservationContext: ReservationContext\n};","map":{"version":3,"names":["Q","require","_","util","Page","deserialize","serialize","values","ReservationList","ReservationPage","ReservationInstance","ReservationContext","version","workspaceSid","taskSid","ReservationListInstance","sid","get","_version","_solution","_uri","each","opts","callback","isFunction","isUndefined","Error","done","currentPage","currentResource","limits","readLimits","limit","pageSize","onComplete","error","fetchNextPage","fn","promise","then","page","instances","instance","bind","nextPage","catch","merge","list","deferred","defer","allResources","resource","push","length","resolve","reject","nodeify","data","of","pageToken","pageNumber","uri","method","params","payload","getPage","targetUrl","_domain","twilio","request","toJSON","inspect","custom","depth","options","response","solution","prototype","constructor","call","extend","getInstance","clone","forOwn","value","key","startsWith","accountSid","account_sid","dateCreated","iso8601DateTime","date_created","dateUpdated","date_updated","reservationStatus","reservation_status","task_sid","workerName","worker_name","workerSid","worker_sid","workspace_sid","url","links","_context","undefined","Object","defineProperty","fetch","_proxy","update","bool","map","e","headers","module","exports"],"sources":["/Users/hooniesun/rmit/fwp/assessment1/lan/node_modules/twilio/lib/rest/taskrouter/v1/workspace/task/reservation.js"],"sourcesContent":["'use strict';\n\n/* jshint ignore:start */\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n/* jshint ignore:end */\n\nvar Q = require('q');  /* jshint ignore:line */\nvar _ = require('lodash');  /* jshint ignore:line */\nvar util = require('util');  /* jshint ignore:line */\nvar Page = require('../../../../../base/Page');  /* jshint ignore:line */\nvar deserialize = require(\n    '../../../../../base/deserialize');  /* jshint ignore:line */\nvar serialize = require(\n    '../../../../../base/serialize');  /* jshint ignore:line */\nvar values = require('../../../../../base/values');  /* jshint ignore:line */\n\nvar ReservationList;\nvar ReservationPage;\nvar ReservationInstance;\nvar ReservationContext;\n\n/* jshint ignore:start */\n/**\n * Initialize the ReservationList\n *\n * @constructor Twilio.Taskrouter.V1.WorkspaceContext.TaskContext.ReservationList\n *\n * @param {Twilio.Taskrouter.V1} version - Version of the resource\n * @param {string} workspaceSid -\n *          The SID of the Workspace that this task is contained within.\n * @param {string} taskSid - The SID of the reserved Task resource\n */\n/* jshint ignore:end */\nReservationList = function ReservationList(version, workspaceSid, taskSid) {\n  /* jshint ignore:start */\n  /**\n   * @function reservations\n   * @memberof Twilio.Taskrouter.V1.WorkspaceContext.TaskContext#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Taskrouter.V1.WorkspaceContext.TaskContext.ReservationContext}\n   */\n  /* jshint ignore:end */\n  function ReservationListInstance(sid) {\n    return ReservationListInstance.get(sid);\n  }\n\n  ReservationListInstance._version = version;\n  // Path Solution\n  ReservationListInstance._solution = {workspaceSid: workspaceSid, taskSid: taskSid};\n  ReservationListInstance._uri = `/Workspaces/${workspaceSid}/Tasks/${taskSid}/Reservations`;\n  /* jshint ignore:start */\n  /**\n   * Streams ReservationInstance records from the API.\n   *\n   * This operation lazily loads records as efficiently as possible until the limit\n   * is reached.\n   *\n   * The results are passed into the callback function, so this operation is memory\n   * efficient.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function each\n   * @memberof Twilio.Taskrouter.V1.WorkspaceContext.TaskContext.ReservationList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {reservation.status} [opts.reservationStatus] -\n   *          Returns the list of reservations for a task with a specified ReservationStatus\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         each() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no pageSize is defined but a limit is defined,\n   *         each() will attempt to read the limit with the most efficient\n   *         page size, i.e. min(limit, 1000)\n   * @param {Function} [opts.callback] -\n   *         Function to process each record. If this and a positional\n   *         callback are passed, this one will be used\n   * @param {Function} [opts.done] -\n   *          Function to be called upon completion of streaming\n   * @param {Function} [callback] - Function to process each record\n   */\n  /* jshint ignore:end */\n  ReservationListInstance.each = function each(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    if (opts.callback) {\n      callback = opts.callback;\n    }\n    if (_.isUndefined(callback)) {\n      throw new Error('Callback function must be provided');\n    }\n\n    var done = false;\n    var currentPage = 1;\n    var currentResource = 0;\n    var limits = this._version.readLimits({\n      limit: opts.limit,\n      pageSize: opts.pageSize\n    });\n\n    function onComplete(error) {\n      done = true;\n      if (_.isFunction(opts.done)) {\n        opts.done(error);\n      }\n    }\n\n    function fetchNextPage(fn) {\n      var promise = fn();\n      if (_.isUndefined(promise)) {\n        onComplete();\n        return;\n      }\n\n      promise.then(function(page) {\n        _.each(page.instances, function(instance) {\n          if (done || (!_.isUndefined(opts.limit) && currentResource >= opts.limit)) {\n            done = true;\n            return false;\n          }\n\n          currentResource++;\n          callback(instance, onComplete);\n        });\n\n        if (!done) {\n          currentPage++;\n          fetchNextPage(_.bind(page.nextPage, page));\n        } else {\n          onComplete();\n        }\n      });\n\n      promise.catch(onComplete);\n    }\n\n    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Lists ReservationInstance records from the API as a list.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function list\n   * @memberof Twilio.Taskrouter.V1.WorkspaceContext.TaskContext.ReservationList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {reservation.status} [opts.reservationStatus] -\n   *          Returns the list of reservations for a task with a specified ReservationStatus\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         list() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no page_size is defined but a limit is defined,\n   *         list() will attempt to read the limit with the most\n   *         efficient page size, i.e. min(limit, 1000)\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  ReservationListInstance.list = function list(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    var deferred = Q.defer();\n    var allResources = [];\n    opts.callback = function(resource, done) {\n      allResources.push(resource);\n\n      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {\n        done();\n      }\n    };\n\n    opts.done = function(error) {\n      if (_.isUndefined(error)) {\n        deferred.resolve(allResources);\n      } else {\n        deferred.reject(error);\n      }\n    };\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    this.each(opts);\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single page of ReservationInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function page\n   * @memberof Twilio.Taskrouter.V1.WorkspaceContext.TaskContext.ReservationList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {reservation.status} [opts.reservationStatus] -\n   *          Returns the list of reservations for a task with a specified ReservationStatus\n   * @param {string} [opts.pageToken] - PageToken provided by the API\n   * @param {number} [opts.pageNumber] -\n   *          Page Number, this value is simply for client state\n   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  ReservationListInstance.page = function page(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n\n    var deferred = Q.defer();\n    var data = values.of({\n      'ReservationStatus': _.get(opts, 'reservationStatus'),\n      'PageToken': opts.pageToken,\n      'Page': opts.pageNumber,\n      'PageSize': opts.pageSize\n    });\n\n    var promise = this._version.page({uri: this._uri, method: 'GET', params: data});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new ReservationPage(this._version, payload, this._solution));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single target page of ReservationInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function getPage\n   * @memberof Twilio.Taskrouter.V1.WorkspaceContext.TaskContext.ReservationList#\n   *\n   * @param {string} [targetUrl] - API-generated URL for the requested results page\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  ReservationListInstance.getPage = function getPage(targetUrl, callback) {\n    var deferred = Q.defer();\n\n    var promise = this._version._domain.twilio.request({method: 'GET', uri: targetUrl});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new ReservationPage(this._version, payload, this._solution));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Constructs a reservation\n   *\n   * @function get\n   * @memberof Twilio.Taskrouter.V1.WorkspaceContext.TaskContext.ReservationList#\n   *\n   * @param {string} sid - The SID of the TaskReservation resource to fetch\n   *\n   * @returns {Twilio.Taskrouter.V1.WorkspaceContext.TaskContext.ReservationContext}\n   */\n  /* jshint ignore:end */\n  ReservationListInstance.get = function get(sid) {\n    return new ReservationContext(\n      this._version,\n      this._solution.workspaceSid,\n      this._solution.taskSid,\n      sid\n    );\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Taskrouter.V1.WorkspaceContext.TaskContext.ReservationList#\n   *\n   * @returns Object\n   */\n  /* jshint ignore:end */\n  ReservationListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n\n  ReservationListInstance[util.inspect.custom] = function inspect(depth, options)\n      {\n    return util.inspect(this.toJSON(), options);\n  };\n\n  return ReservationListInstance;\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the ReservationPage\n *\n * @constructor Twilio.Taskrouter.V1.WorkspaceContext.TaskContext.ReservationPage\n *\n * @param {V1} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {ReservationSolution} solution - Path solution\n *\n * @returns ReservationPage\n */\n/* jshint ignore:end */\nReservationPage = function ReservationPage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n\n_.extend(ReservationPage.prototype, Page.prototype);\nReservationPage.prototype.constructor = ReservationPage;\n\n/* jshint ignore:start */\n/**\n * Build an instance of ReservationInstance\n *\n * @function getInstance\n * @memberof Twilio.Taskrouter.V1.WorkspaceContext.TaskContext.ReservationPage#\n *\n * @param {ReservationPayload} payload - Payload response from the API\n *\n * @returns ReservationInstance\n */\n/* jshint ignore:end */\nReservationPage.prototype.getInstance = function getInstance(payload) {\n  return new ReservationInstance(\n    this._version,\n    payload,\n    this._solution.workspaceSid,\n    this._solution.taskSid\n  );\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Taskrouter.V1.WorkspaceContext.TaskContext.ReservationPage#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nReservationPage.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function(value, key) {\n    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\n\nReservationPage.prototype[util.inspect.custom] = function inspect(depth,\n    options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the ReservationContext\n *\n * @constructor Twilio.Taskrouter.V1.WorkspaceContext.TaskContext.ReservationInstance\n *\n * @property {string} accountSid - The SID of the Account that created the resource\n * @property {Date} dateCreated -\n *          The ISO 8601 date and time in GMT when the resource was created\n * @property {Date} dateUpdated -\n *          The ISO 8601 date and time in GMT when the resource was last updated\n * @property {reservation.status} reservationStatus -\n *          The current status of the reservation\n * @property {string} sid - The unique string that identifies the resource\n * @property {string} taskSid - The SID of the reserved Task resource\n * @property {string} workerName - The friendly_name of the Worker that is reserved\n * @property {string} workerSid - The SID of the reserved Worker resource\n * @property {string} workspaceSid -\n *          The SID of the Workspace that this task is contained within.\n * @property {string} url - The absolute URL of the TaskReservation reservation\n * @property {string} links - The URLs of related resources\n *\n * @param {V1} version - Version of the resource\n * @param {ReservationPayload} payload - The instance payload\n * @param {sid} workspaceSid -\n *          The SID of the Workspace that this task is contained within.\n * @param {sid} taskSid - The SID of the reserved Task resource\n * @param {sid} sid - The SID of the TaskReservation resource to fetch\n */\n/* jshint ignore:end */\nReservationInstance = function ReservationInstance(version, payload,\n                                                    workspaceSid, taskSid, sid)\n                                                    {\n  this._version = version;\n\n  // Marshaled Properties\n  this.accountSid = payload.account_sid; // jshint ignore:line\n  this.dateCreated = deserialize.iso8601DateTime(payload.date_created); // jshint ignore:line\n  this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated); // jshint ignore:line\n  this.reservationStatus = payload.reservation_status; // jshint ignore:line\n  this.sid = payload.sid; // jshint ignore:line\n  this.taskSid = payload.task_sid; // jshint ignore:line\n  this.workerName = payload.worker_name; // jshint ignore:line\n  this.workerSid = payload.worker_sid; // jshint ignore:line\n  this.workspaceSid = payload.workspace_sid; // jshint ignore:line\n  this.url = payload.url; // jshint ignore:line\n  this.links = payload.links; // jshint ignore:line\n\n  // Context\n  this._context = undefined;\n  this._solution = {workspaceSid: workspaceSid, taskSid: taskSid, sid: sid || this.sid, };\n};\n\nObject.defineProperty(ReservationInstance.prototype,\n  '_proxy', {\n    get: function() {\n      if (!this._context) {\n        this._context = new ReservationContext(\n          this._version,\n          this._solution.workspaceSid,\n          this._solution.taskSid,\n          this._solution.sid\n        );\n      }\n\n      return this._context;\n    }\n});\n\n/* jshint ignore:start */\n/**\n * fetch a ReservationInstance\n *\n * @function fetch\n * @memberof Twilio.Taskrouter.V1.WorkspaceContext.TaskContext.ReservationInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed ReservationInstance\n */\n/* jshint ignore:end */\nReservationInstance.prototype.fetch = function fetch(callback) {\n  return this._proxy.fetch(callback);\n};\n\n/* jshint ignore:start */\n/**\n * update a ReservationInstance\n *\n * @function update\n * @memberof Twilio.Taskrouter.V1.WorkspaceContext.TaskContext.ReservationInstance#\n *\n * @param {object} [opts] - Options for request\n * @param {reservation.status} [opts.reservationStatus] -\n *          The new status of the reservation\n * @param {string} [opts.workerActivitySid] -\n *          The new worker activity SID if rejecting a reservation\n * @param {string} [opts.instruction] - The assignment instruction for reservation\n * @param {string} [opts.dequeuePostWorkActivitySid] -\n *          The SID of the Activity resource to start after executing a Dequeue instruction\n * @param {string} [opts.dequeueFrom] -\n *          The Caller ID of the call to the worker when executing a Dequeue instruction\n * @param {string} [opts.dequeueRecord] -\n *          Whether to record both legs of a call when executing a Dequeue instruction\n * @param {number} [opts.dequeueTimeout] -\n *          Timeout for call when executing a Dequeue instruction\n * @param {string} [opts.dequeueTo] -\n *          The Contact URI of the worker when executing a Dequeue instruction\n * @param {string} [opts.dequeueStatusCallbackUrl] -\n *          The Callback URL for completed call event when executing a Dequeue instruction\n * @param {string} [opts.callFrom] -\n *          The Caller ID of the outbound call when executing a Call instruction\n * @param {string} [opts.callRecord] -\n *          Whether to record both legs of a call when executing a Call instruction\n * @param {number} [opts.callTimeout] -\n *          Timeout for call when executing a Call instruction\n * @param {string} [opts.callTo] -\n *          The Contact URI of the worker when executing a Call instruction\n * @param {string} [opts.callUrl] -\n *          TwiML URI executed on answering the worker's leg as a result of the Call instruction\n * @param {string} [opts.callStatusCallbackUrl] -\n *          The URL to call  for the completed call event when executing a Call instruction\n * @param {boolean} [opts.callAccept] -\n *          Whether to accept a reservation when executing a Call instruction\n * @param {string} [opts.redirectCallSid] -\n *          The Call SID of the call parked in the queue when executing a Redirect instruction\n * @param {boolean} [opts.redirectAccept] -\n *          Whether the reservation should be accepted when executing a Redirect instruction\n * @param {string} [opts.redirectUrl] -\n *          TwiML URI to redirect the call to when executing the Redirect instruction\n * @param {string} [opts.to] -\n *          The Contact URI of the worker when executing a Conference instruction\n * @param {string} [opts.from] -\n *          The Caller ID of the call to the worker when executing a Conference instruction\n * @param {string} [opts.statusCallback] -\n *          The URL we should call to send status information to your application\n * @param {string} [opts.statusCallbackMethod] -\n *          The HTTP method we should use to call status_callback\n * @param {reservation.call_status|list} [opts.statusCallbackEvent] -\n *          The call progress events that we will send to status_callback\n * @param {number} [opts.timeout] -\n *          Timeout for call when executing a Conference instruction\n * @param {boolean} [opts.record] -\n *          Whether to record the participant and their conferences\n * @param {boolean} [opts.muted] - Whether to mute the agent\n * @param {string} [opts.beep] -\n *          Whether to play a notification beep when the participant joins\n * @param {boolean} [opts.startConferenceOnEnter] -\n *          Whether the conference starts when the participant joins the conference\n * @param {boolean} [opts.endConferenceOnExit] -\n *          Whether to end the conference when the agent leaves\n * @param {string} [opts.waitUrl] - URL that hosts pre-conference hold music\n * @param {string} [opts.waitMethod] -\n *          The HTTP method we should use to call `wait_url`\n * @param {boolean} [opts.earlyMedia] -\n *          Whether agents can hear the state of the outbound call\n * @param {number} [opts.maxParticipants] -\n *          The maximum number of agent conference participants\n * @param {string} [opts.conferenceStatusCallback] -\n *          The callback URL for conference events\n * @param {string} [opts.conferenceStatusCallbackMethod] -\n *          HTTP method for requesting `conference_status_callback` URL\n * @param {reservation.conference_event|list} [opts.conferenceStatusCallbackEvent] -\n *          The conference status events that we will send to conference_status_callback\n * @param {string} [opts.conferenceRecord] -\n *          Whether to record the conference the participant is joining\n * @param {string} [opts.conferenceTrim] -\n *          How to trim leading and trailing silence from your recorded conference audio files\n * @param {string} [opts.recordingChannels] -\n *          Specify `mono` or `dual` recording channels\n * @param {string} [opts.recordingStatusCallback] -\n *          The URL that we should call using the `recording_status_callback_method` when the recording status changes\n * @param {string} [opts.recordingStatusCallbackMethod] -\n *          The HTTP method we should use when we call `recording_status_callback`\n * @param {string} [opts.conferenceRecordingStatusCallback] -\n *          The URL we should call using the `conference_recording_status_callback_method` when the conference recording is available\n * @param {string} [opts.conferenceRecordingStatusCallbackMethod] -\n *          The HTTP method we should use to call `conference_recording_status_callback`\n * @param {string} [opts.region] -\n *          The region where we should mix the conference audio\n * @param {string} [opts.sipAuthUsername] -\n *          The SIP username used for authentication\n * @param {string} [opts.sipAuthPassword] - The SIP password for authentication\n * @param {string|list} [opts.dequeueStatusCallbackEvent] -\n *          The Call progress events sent via webhooks as a result of a Dequeue instruction\n * @param {string} [opts.postWorkActivitySid] -\n *          The new worker activity SID after executing a Conference instruction\n * @param {reservation.supervisor_mode} [opts.supervisorMode] -\n *          The Supervisor mode when executing the Supervise instruction\n * @param {string} [opts.supervisor] -\n *          The Supervisor SID/URI when executing the Supervise instruction\n * @param {boolean} [opts.endConferenceOnCustomerExit] -\n *          Whether to end the conference when the customer leaves\n * @param {boolean} [opts.beepOnCustomerEntrance] -\n *          Whether to play a notification beep when the customer joins\n * @param {string} [opts.ifMatch] - The If-Match HTTP request header\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed ReservationInstance\n */\n/* jshint ignore:end */\nReservationInstance.prototype.update = function update(opts, callback) {\n  return this._proxy.update(opts, callback);\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Taskrouter.V1.WorkspaceContext.TaskContext.ReservationInstance#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nReservationInstance.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function(value, key) {\n    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\n\nReservationInstance.prototype[util.inspect.custom] = function inspect(depth,\n    options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the ReservationContext\n *\n * @constructor Twilio.Taskrouter.V1.WorkspaceContext.TaskContext.ReservationContext\n *\n * @param {V1} version - Version of the resource\n * @param {sid} workspaceSid -\n *          The SID of the Workspace with the TaskReservation resource to fetch\n * @param {sid} taskSid -\n *          The SID of the reserved Task resource with the TaskReservation resource to fetch\n * @param {sid} sid - The SID of the TaskReservation resource to fetch\n */\n/* jshint ignore:end */\nReservationContext = function ReservationContext(version, workspaceSid, taskSid,\n                                                  sid) {\n  this._version = version;\n\n  // Path Solution\n  this._solution = {workspaceSid: workspaceSid, taskSid: taskSid, sid: sid, };\n  this._uri = `/Workspaces/${workspaceSid}/Tasks/${taskSid}/Reservations/${sid}`;\n};\n\n/* jshint ignore:start */\n/**\n * fetch a ReservationInstance\n *\n * @function fetch\n * @memberof Twilio.Taskrouter.V1.WorkspaceContext.TaskContext.ReservationContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed ReservationInstance\n */\n/* jshint ignore:end */\nReservationContext.prototype.fetch = function fetch(callback) {\n  var deferred = Q.defer();\n  var promise = this._version.fetch({uri: this._uri, method: 'GET'});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(new ReservationInstance(\n      this._version,\n      payload,\n      this._solution.workspaceSid,\n      this._solution.taskSid,\n      this._solution.sid\n    ));\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * update a ReservationInstance\n *\n * @function update\n * @memberof Twilio.Taskrouter.V1.WorkspaceContext.TaskContext.ReservationContext#\n *\n * @param {object} [opts] - Options for request\n * @param {reservation.status} [opts.reservationStatus] -\n *          The new status of the reservation\n * @param {string} [opts.workerActivitySid] -\n *          The new worker activity SID if rejecting a reservation\n * @param {string} [opts.instruction] - The assignment instruction for reservation\n * @param {string} [opts.dequeuePostWorkActivitySid] -\n *          The SID of the Activity resource to start after executing a Dequeue instruction\n * @param {string} [opts.dequeueFrom] -\n *          The Caller ID of the call to the worker when executing a Dequeue instruction\n * @param {string} [opts.dequeueRecord] -\n *          Whether to record both legs of a call when executing a Dequeue instruction\n * @param {number} [opts.dequeueTimeout] -\n *          Timeout for call when executing a Dequeue instruction\n * @param {string} [opts.dequeueTo] -\n *          The Contact URI of the worker when executing a Dequeue instruction\n * @param {string} [opts.dequeueStatusCallbackUrl] -\n *          The Callback URL for completed call event when executing a Dequeue instruction\n * @param {string} [opts.callFrom] -\n *          The Caller ID of the outbound call when executing a Call instruction\n * @param {string} [opts.callRecord] -\n *          Whether to record both legs of a call when executing a Call instruction\n * @param {number} [opts.callTimeout] -\n *          Timeout for call when executing a Call instruction\n * @param {string} [opts.callTo] -\n *          The Contact URI of the worker when executing a Call instruction\n * @param {string} [opts.callUrl] -\n *          TwiML URI executed on answering the worker's leg as a result of the Call instruction\n * @param {string} [opts.callStatusCallbackUrl] -\n *          The URL to call  for the completed call event when executing a Call instruction\n * @param {boolean} [opts.callAccept] -\n *          Whether to accept a reservation when executing a Call instruction\n * @param {string} [opts.redirectCallSid] -\n *          The Call SID of the call parked in the queue when executing a Redirect instruction\n * @param {boolean} [opts.redirectAccept] -\n *          Whether the reservation should be accepted when executing a Redirect instruction\n * @param {string} [opts.redirectUrl] -\n *          TwiML URI to redirect the call to when executing the Redirect instruction\n * @param {string} [opts.to] -\n *          The Contact URI of the worker when executing a Conference instruction\n * @param {string} [opts.from] -\n *          The Caller ID of the call to the worker when executing a Conference instruction\n * @param {string} [opts.statusCallback] -\n *          The URL we should call to send status information to your application\n * @param {string} [opts.statusCallbackMethod] -\n *          The HTTP method we should use to call status_callback\n * @param {reservation.call_status|list} [opts.statusCallbackEvent] -\n *          The call progress events that we will send to status_callback\n * @param {number} [opts.timeout] -\n *          Timeout for call when executing a Conference instruction\n * @param {boolean} [opts.record] -\n *          Whether to record the participant and their conferences\n * @param {boolean} [opts.muted] - Whether to mute the agent\n * @param {string} [opts.beep] -\n *          Whether to play a notification beep when the participant joins\n * @param {boolean} [opts.startConferenceOnEnter] -\n *          Whether the conference starts when the participant joins the conference\n * @param {boolean} [opts.endConferenceOnExit] -\n *          Whether to end the conference when the agent leaves\n * @param {string} [opts.waitUrl] - URL that hosts pre-conference hold music\n * @param {string} [opts.waitMethod] -\n *          The HTTP method we should use to call `wait_url`\n * @param {boolean} [opts.earlyMedia] -\n *          Whether agents can hear the state of the outbound call\n * @param {number} [opts.maxParticipants] -\n *          The maximum number of agent conference participants\n * @param {string} [opts.conferenceStatusCallback] -\n *          The callback URL for conference events\n * @param {string} [opts.conferenceStatusCallbackMethod] -\n *          HTTP method for requesting `conference_status_callback` URL\n * @param {reservation.conference_event|list} [opts.conferenceStatusCallbackEvent] -\n *          The conference status events that we will send to conference_status_callback\n * @param {string} [opts.conferenceRecord] -\n *          Whether to record the conference the participant is joining\n * @param {string} [opts.conferenceTrim] -\n *          How to trim leading and trailing silence from your recorded conference audio files\n * @param {string} [opts.recordingChannels] -\n *          Specify `mono` or `dual` recording channels\n * @param {string} [opts.recordingStatusCallback] -\n *          The URL that we should call using the `recording_status_callback_method` when the recording status changes\n * @param {string} [opts.recordingStatusCallbackMethod] -\n *          The HTTP method we should use when we call `recording_status_callback`\n * @param {string} [opts.conferenceRecordingStatusCallback] -\n *          The URL we should call using the `conference_recording_status_callback_method` when the conference recording is available\n * @param {string} [opts.conferenceRecordingStatusCallbackMethod] -\n *          The HTTP method we should use to call `conference_recording_status_callback`\n * @param {string} [opts.region] -\n *          The region where we should mix the conference audio\n * @param {string} [opts.sipAuthUsername] -\n *          The SIP username used for authentication\n * @param {string} [opts.sipAuthPassword] - The SIP password for authentication\n * @param {string|list} [opts.dequeueStatusCallbackEvent] -\n *          The Call progress events sent via webhooks as a result of a Dequeue instruction\n * @param {string} [opts.postWorkActivitySid] -\n *          The new worker activity SID after executing a Conference instruction\n * @param {reservation.supervisor_mode} [opts.supervisorMode] -\n *          The Supervisor mode when executing the Supervise instruction\n * @param {string} [opts.supervisor] -\n *          The Supervisor SID/URI when executing the Supervise instruction\n * @param {boolean} [opts.endConferenceOnCustomerExit] -\n *          Whether to end the conference when the customer leaves\n * @param {boolean} [opts.beepOnCustomerEntrance] -\n *          Whether to play a notification beep when the customer joins\n * @param {string} [opts.ifMatch] - The If-Match HTTP request header\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed ReservationInstance\n */\n/* jshint ignore:end */\nReservationContext.prototype.update = function update(opts, callback) {\n  if (_.isFunction(opts)) {\n    callback = opts;\n    opts = {};\n  }\n  opts = opts || {};\n\n  var deferred = Q.defer();\n  var data = values.of({\n    'ReservationStatus': _.get(opts, 'reservationStatus'),\n    'WorkerActivitySid': _.get(opts, 'workerActivitySid'),\n    'Instruction': _.get(opts, 'instruction'),\n    'DequeuePostWorkActivitySid': _.get(opts, 'dequeuePostWorkActivitySid'),\n    'DequeueFrom': _.get(opts, 'dequeueFrom'),\n    'DequeueRecord': _.get(opts, 'dequeueRecord'),\n    'DequeueTimeout': _.get(opts, 'dequeueTimeout'),\n    'DequeueTo': _.get(opts, 'dequeueTo'),\n    'DequeueStatusCallbackUrl': _.get(opts, 'dequeueStatusCallbackUrl'),\n    'CallFrom': _.get(opts, 'callFrom'),\n    'CallRecord': _.get(opts, 'callRecord'),\n    'CallTimeout': _.get(opts, 'callTimeout'),\n    'CallTo': _.get(opts, 'callTo'),\n    'CallUrl': _.get(opts, 'callUrl'),\n    'CallStatusCallbackUrl': _.get(opts, 'callStatusCallbackUrl'),\n    'CallAccept': serialize.bool(_.get(opts, 'callAccept')),\n    'RedirectCallSid': _.get(opts, 'redirectCallSid'),\n    'RedirectAccept': serialize.bool(_.get(opts, 'redirectAccept')),\n    'RedirectUrl': _.get(opts, 'redirectUrl'),\n    'To': _.get(opts, 'to'),\n    'From': _.get(opts, 'from'),\n    'StatusCallback': _.get(opts, 'statusCallback'),\n    'StatusCallbackMethod': _.get(opts, 'statusCallbackMethod'),\n    'StatusCallbackEvent': serialize.map(_.get(opts, 'statusCallbackEvent'), function(e) { return e; }),\n    'Timeout': _.get(opts, 'timeout'),\n    'Record': serialize.bool(_.get(opts, 'record')),\n    'Muted': serialize.bool(_.get(opts, 'muted')),\n    'Beep': _.get(opts, 'beep'),\n    'StartConferenceOnEnter': serialize.bool(_.get(opts, 'startConferenceOnEnter')),\n    'EndConferenceOnExit': serialize.bool(_.get(opts, 'endConferenceOnExit')),\n    'WaitUrl': _.get(opts, 'waitUrl'),\n    'WaitMethod': _.get(opts, 'waitMethod'),\n    'EarlyMedia': serialize.bool(_.get(opts, 'earlyMedia')),\n    'MaxParticipants': _.get(opts, 'maxParticipants'),\n    'ConferenceStatusCallback': _.get(opts, 'conferenceStatusCallback'),\n    'ConferenceStatusCallbackMethod': _.get(opts, 'conferenceStatusCallbackMethod'),\n    'ConferenceStatusCallbackEvent': serialize.map(_.get(opts, 'conferenceStatusCallbackEvent'), function(e) { return e; }),\n    'ConferenceRecord': _.get(opts, 'conferenceRecord'),\n    'ConferenceTrim': _.get(opts, 'conferenceTrim'),\n    'RecordingChannels': _.get(opts, 'recordingChannels'),\n    'RecordingStatusCallback': _.get(opts, 'recordingStatusCallback'),\n    'RecordingStatusCallbackMethod': _.get(opts, 'recordingStatusCallbackMethod'),\n    'ConferenceRecordingStatusCallback': _.get(opts, 'conferenceRecordingStatusCallback'),\n    'ConferenceRecordingStatusCallbackMethod': _.get(opts, 'conferenceRecordingStatusCallbackMethod'),\n    'Region': _.get(opts, 'region'),\n    'SipAuthUsername': _.get(opts, 'sipAuthUsername'),\n    'SipAuthPassword': _.get(opts, 'sipAuthPassword'),\n    'DequeueStatusCallbackEvent': serialize.map(_.get(opts, 'dequeueStatusCallbackEvent'), function(e) { return e; }),\n    'PostWorkActivitySid': _.get(opts, 'postWorkActivitySid'),\n    'SupervisorMode': _.get(opts, 'supervisorMode'),\n    'Supervisor': _.get(opts, 'supervisor'),\n    'EndConferenceOnCustomerExit': serialize.bool(_.get(opts, 'endConferenceOnCustomerExit')),\n    'BeepOnCustomerEntrance': serialize.bool(_.get(opts, 'beepOnCustomerEntrance'))\n  });\n  var headers = values.of({'If-Match': _.get(opts, 'ifMatch')});\n\n  var promise = this._version.update({uri: this._uri, method: 'POST', data: data, headers: headers});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(new ReservationInstance(\n      this._version,\n      payload,\n      this._solution.workspaceSid,\n      this._solution.taskSid,\n      this._solution.sid\n    ));\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Taskrouter.V1.WorkspaceContext.TaskContext.ReservationContext#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nReservationContext.prototype.toJSON = function toJSON() {\n  return this._solution;\n};\n\nReservationContext.prototype[util.inspect.custom] = function inspect(depth,\n    options) {\n  return util.inspect(this.toJSON(), options);\n};\n\nmodule.exports = {\n  ReservationList: ReservationList,\n  ReservationPage: ReservationPage,\n  ReservationInstance: ReservationInstance,\n  ReservationContext: ReservationContext\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}