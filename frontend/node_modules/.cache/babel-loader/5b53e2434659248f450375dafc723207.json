{"ast":null,"code":"var _jsxFileName = \"/Users/hooniesun/rmit/fwp/assessment1/lan/src/UI/SignUpForm.js\",\n    _s = $RefreshSig$();\n\nimport { useState } from \"react\";\nimport { Container, Button, Form, Row, Col } from \"react-bootstrap\";\nimport { useOutletContext, useNavigate } from \"react-router-dom\";\nimport formatDate from \"../formatDate\";\nimport Loading from \"./Loading\";\nimport MFA from \"./MFA\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function SignUpForm() {\n  _s();\n\n  const [isPasswordValid, setIsPasswordValid] = useState(true);\n  const [isPasswordIdentical, setIsPasswordIdentical] = useState(true);\n  const [isEmailValid, setIsEmailValid] = useState(true);\n  const [isPasswordVisible, setIsPasswordVisble] = useState(false);\n  const [isLoadingVisible, setIsLoadingVisible] = useState(false);\n  const [isMFAVisible, setIsMFAVisible] = useState(false);\n  const [user, setUser] = useState(null);\n  const [, dispatchUser, users] = useOutletContext();\n  const navigate = useNavigate(); // a list of avatars from whcih to assign to a user\n\n  const avatars = [\"male\", \"female\", \"human\", \"identicon\", \"initials\", \"bottts\", \"avataaars\", \"jdenticon\", \"gridy\", \"micah\"];\n  /* validation logic */\n\n  function validateEmail(email) {\n    return !(email in users);\n  }\n\n  function validatePassword(password) {\n    /* A regex pattern that matches invalid passwords\n        - Anything with less than eight characters OR\n        - Anything with no numbers OR\n        - Anything with no uppercase letter OR\n        - Anything with no lowercase letter OR\n        - Anything with no special characters\n    */\n    const regex = \"^(.{0,7}|[^0-9]*|[^A-Z]*|[^a-z]*|[a-zA-Z0-9]*)$\"; // If there are any matches, the password is invalid\n\n    return password.match(regex) ? false : true;\n  }\n\n  function confirmPassword(password) {\n    return password === document.querySelector(\"#formSignupPassword\").value;\n  }\n  /* validation logic */\n\n  /* real time validation handler */\n\n\n  let validatePasswordTimeoutId;\n  let confirmPasswordTimeoutId;\n  let validateEmailTimeoutId;\n  const timeDelayed = 1000; // The 3 handlers below only validate after timeDelayed microseconds\n\n  const validateEmailHandler = event => {\n    clearTimeout(validateEmailTimeoutId);\n    validateEmailTimeoutId = setTimeout(() => {\n      setIsEmailValid(validateEmail(event.target.value));\n    }, timeDelayed);\n  };\n\n  const validatePasswordHandler = event => {\n    clearTimeout(validatePasswordTimeoutId);\n    validatePasswordTimeoutId = setTimeout(() => {\n      setIsPasswordValid(validatePassword(event.target.value));\n    }, timeDelayed);\n  };\n\n  const confirmPasswordHandler = event => {\n    clearTimeout(confirmPasswordTimeoutId);\n    confirmPasswordTimeoutId = setTimeout(() => {\n      setIsPasswordIdentical(confirmPassword(event.target.value));\n    }, timeDelayed);\n  };\n  /* real time validation handler */\n\n\n  const togglePasswordVisability = () => {\n    setIsPasswordVisble(!isPasswordVisible);\n  };\n\n  const submitHandler = event => {\n    event.preventDefault();\n    let email = event.target[2].value;\n    let password = event.target[3].value;\n    let confirmedPassword = event.target[4].value; // Make sure to check whether all the entries are valid once more\n\n    if (validateEmail(email) && validatePassword(password) && confirmPassword(confirmedPassword)) {\n      // Before storing the user data, ensure the user has scanned a QR code in Google Authenticator\n      setIsMFAVisible(true);\n      setUser({\n        firstName: event.target[0].value,\n        lastName: event.target[1].value,\n        email: email,\n        password: confirmedPassword,\n        joinedDate: formatDate(),\n        avatarsrc: `https://avatars.dicebear.com/api/${avatars[Math.floor(Math.random() * avatars.length)]}/${email}.svg`,\n        posts: []\n      });\n    } else {\n      // If not valid, indicate to the user that what inputs are not yet validated.\n      setIsEmailValid(validateEmail(email));\n      setIsPasswordValid(validatePassword(password));\n      setIsPasswordIdentical(confirmPassword(confirmedPassword));\n    }\n  }; // The function gets called within MFA if the user has successfully scanned the QR code and typed in the OTP\n\n\n  const signUpAuthenticatedUser = secret => {\n    dispatchUser({\n      type: \"SIGNUP_USER\",\n      payload: { ...user,\n        secret: secret\n      }\n    });\n    setIsLoadingVisible(true);\n    clearTimeout(validateEmailTimeoutId);\n    clearTimeout(confirmPasswordTimeoutId);\n    clearTimeout(validatePasswordTimeoutId);\n    setTimeout(() => {\n      setIsLoadingVisible(false);\n      navigate(\"/profile\");\n    }, timeDelayed);\n  };\n\n  return /*#__PURE__*/_jsxDEV(Container, {\n    children: [/*#__PURE__*/_jsxDEV(Loading, {\n      show: isLoadingVisible,\n      children: \"Logging in\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(MFA, {\n      show: isMFAVisible,\n      setShow: setIsMFAVisible,\n      hideQRcode: false,\n      signUpAuthenticatedUser: signUpAuthenticatedUser,\n      user: null\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Row, {\n      children: /*#__PURE__*/_jsxDEV(Col, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 146,\n    columnNumber: 5\n  }, this);\n}\n\n_s(SignUpForm, \"rq+UVGMxwzWaYyR1b7iy+ZDQtis=\", false, function () {\n  return [useOutletContext, useNavigate];\n});\n\n_c = SignUpForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"SignUpForm\");","map":{"version":3,"names":["useState","Container","Button","Form","Row","Col","useOutletContext","useNavigate","formatDate","Loading","MFA","SignUpForm","isPasswordValid","setIsPasswordValid","isPasswordIdentical","setIsPasswordIdentical","isEmailValid","setIsEmailValid","isPasswordVisible","setIsPasswordVisble","isLoadingVisible","setIsLoadingVisible","isMFAVisible","setIsMFAVisible","user","setUser","dispatchUser","users","navigate","avatars","validateEmail","email","validatePassword","password","regex","match","confirmPassword","document","querySelector","value","validatePasswordTimeoutId","confirmPasswordTimeoutId","validateEmailTimeoutId","timeDelayed","validateEmailHandler","event","clearTimeout","setTimeout","target","validatePasswordHandler","confirmPasswordHandler","togglePasswordVisability","submitHandler","preventDefault","confirmedPassword","firstName","lastName","joinedDate","avatarsrc","Math","floor","random","length","posts","signUpAuthenticatedUser","secret","type","payload"],"sources":["/Users/hooniesun/rmit/fwp/assessment1/lan/src/UI/SignUpForm.js"],"sourcesContent":["import { useState } from \"react\";\nimport { Container, Button, Form, Row, Col } from \"react-bootstrap\";\nimport { useOutletContext, useNavigate } from \"react-router-dom\";\nimport formatDate from \"../formatDate\";\nimport Loading from \"./Loading\";\nimport MFA from \"./MFA\";\n\nexport default function SignUpForm() {\n  const [isPasswordValid, setIsPasswordValid] = useState(true);\n  const [isPasswordIdentical, setIsPasswordIdentical] = useState(true);\n  const [isEmailValid, setIsEmailValid] = useState(true);\n\n  const [isPasswordVisible, setIsPasswordVisble] = useState(false);\n  const [isLoadingVisible, setIsLoadingVisible] = useState(false);\n  const [isMFAVisible, setIsMFAVisible] = useState(false);\n\n  const [user, setUser] = useState(null);\n\n  const [, dispatchUser, users] = useOutletContext();\n  const navigate = useNavigate();\n\n  // a list of avatars from whcih to assign to a user\n  const avatars = [\n    \"male\",\n    \"female\",\n    \"human\",\n    \"identicon\",\n    \"initials\",\n    \"bottts\",\n    \"avataaars\",\n    \"jdenticon\",\n    \"gridy\",\n    \"micah\",\n  ];\n\n  /* validation logic */\n  function validateEmail(email) {\n    return !(email in users);\n  }\n\n  function validatePassword(password) {\n    /* A regex pattern that matches invalid passwords\n        - Anything with less than eight characters OR\n        - Anything with no numbers OR\n        - Anything with no uppercase letter OR\n        - Anything with no lowercase letter OR\n        - Anything with no special characters\n    */\n    const regex = \"^(.{0,7}|[^0-9]*|[^A-Z]*|[^a-z]*|[a-zA-Z0-9]*)$\";\n    // If there are any matches, the password is invalid\n    return password.match(regex) ? false : true;\n  }\n\n  function confirmPassword(password) {\n    return password === document.querySelector(\"#formSignupPassword\").value;\n  }\n  /* validation logic */\n\n  /* real time validation handler */\n  let validatePasswordTimeoutId;\n  let confirmPasswordTimeoutId;\n  let validateEmailTimeoutId;\n  const timeDelayed = 1000;\n  // The 3 handlers below only validate after timeDelayed microseconds\n\n  const validateEmailHandler = (event) => {\n    clearTimeout(validateEmailTimeoutId);\n    validateEmailTimeoutId = setTimeout(() => {\n      setIsEmailValid(validateEmail(event.target.value));\n    }, timeDelayed);\n  };\n\n  const validatePasswordHandler = (event) => {\n    clearTimeout(validatePasswordTimeoutId);\n    validatePasswordTimeoutId = setTimeout(() => {\n      setIsPasswordValid(validatePassword(event.target.value));\n    }, timeDelayed);\n  };\n\n  const confirmPasswordHandler = (event) => {\n    clearTimeout(confirmPasswordTimeoutId);\n    confirmPasswordTimeoutId = setTimeout(() => {\n      setIsPasswordIdentical(confirmPassword(event.target.value));\n    }, timeDelayed);\n  };\n  /* real time validation handler */\n\n  const togglePasswordVisability = () => {\n    setIsPasswordVisble(!isPasswordVisible);\n  };\n\n  const submitHandler = (event) => {\n    event.preventDefault();\n\n    let email = event.target[2].value;\n    let password = event.target[3].value;\n    let confirmedPassword = event.target[4].value;\n\n    // Make sure to check whether all the entries are valid once more\n    if (\n      validateEmail(email) &&\n      validatePassword(password) &&\n      confirmPassword(confirmedPassword)\n    ) {\n      // Before storing the user data, ensure the user has scanned a QR code in Google Authenticator\n      setIsMFAVisible(true);\n\n      setUser({\n        firstName: event.target[0].value,\n        lastName: event.target[1].value,\n        email: email,\n        password: confirmedPassword,\n        joinedDate: formatDate(),\n        avatarsrc: `https://avatars.dicebear.com/api/${\n          avatars[Math.floor(Math.random() * avatars.length)]\n        }/${email}.svg`,\n        posts: [],\n      });\n    } else {\n      // If not valid, indicate to the user that what inputs are not yet validated.\n      setIsEmailValid(validateEmail(email));\n      setIsPasswordValid(validatePassword(password));\n      setIsPasswordIdentical(confirmPassword(confirmedPassword));\n    }\n  };\n\n  // The function gets called within MFA if the user has successfully scanned the QR code and typed in the OTP\n  const signUpAuthenticatedUser = (secret) => {\n    dispatchUser({\n      type: \"SIGNUP_USER\",\n      payload: { ...user, secret: secret },\n    });\n    setIsLoadingVisible(true);\n\n    clearTimeout(validateEmailTimeoutId);\n    clearTimeout(confirmPasswordTimeoutId);\n    clearTimeout(validatePasswordTimeoutId);\n\n    setTimeout(() => {\n      setIsLoadingVisible(false);\n      navigate(\"/profile\");\n    }, timeDelayed);\n  };\n\n  return (\n    <Container>\n      <Loading show={isLoadingVisible}>Logging in</Loading>\n      <MFA\n        show={isMFAVisible}\n        setShow={setIsMFAVisible}\n        hideQRcode={false}\n        signUpAuthenticatedUser={signUpAuthenticatedUser}\n        user={null}\n      ></MFA>\n      <Row>\n        <Col>\n\n        </Col>\n      </Row>\n      \n    </Container>\n  );\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}