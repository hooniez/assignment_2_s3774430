{"ast":null,"code":"// Generated by CoffeeScript 2.4.1\n(function () {\n  var NodeType, XMLNode, XMLRaw;\n  NodeType = require('./NodeType');\n  XMLNode = require('./XMLNode'); // Represents a  raw node\n\n  module.exports = XMLRaw = class XMLRaw extends XMLNode {\n    // Initializes a new instance of `XMLRaw`\n    // `text` raw text\n    constructor(parent, text) {\n      super(parent);\n\n      if (text == null) {\n        throw new Error(\"Missing raw text. \" + this.debugInfo());\n      }\n\n      this.type = NodeType.Raw;\n      this.value = this.stringify.raw(text);\n    } // Creates and returns a deep clone of `this`\n\n\n    clone() {\n      return Object.create(this);\n    } // Converts the XML fragment to string\n    // `options.pretty` pretty prints the result\n    // `options.indent` indentation for pretty print\n    // `options.offset` how many indentations to add to every line for pretty print\n    // `options.newline` newline sequence for pretty print\n\n\n    toString(options) {\n      return this.options.writer.raw(this, this.options.writer.filterOptions(options));\n    }\n\n  };\n}).call(this);","map":{"version":3,"names":["NodeType","XMLNode","XMLRaw","require","module","exports","constructor","parent","text","Error","debugInfo","type","Raw","value","stringify","raw","clone","Object","create","toString","options","writer","filterOptions","call"],"sources":["/Users/hooniesun/rmit/fwp/assessment1/lan/node_modules/xmlbuilder/lib/XMLRaw.js"],"sourcesContent":["// Generated by CoffeeScript 2.4.1\n(function() {\n  var NodeType, XMLNode, XMLRaw;\n\n  NodeType = require('./NodeType');\n\n  XMLNode = require('./XMLNode');\n\n  // Represents a  raw node\n  module.exports = XMLRaw = class XMLRaw extends XMLNode {\n    // Initializes a new instance of `XMLRaw`\n\n    // `text` raw text\n    constructor(parent, text) {\n      super(parent);\n      if (text == null) {\n        throw new Error(\"Missing raw text. \" + this.debugInfo());\n      }\n      this.type = NodeType.Raw;\n      this.value = this.stringify.raw(text);\n    }\n\n    // Creates and returns a deep clone of `this`\n    clone() {\n      return Object.create(this);\n    }\n\n    // Converts the XML fragment to string\n\n    // `options.pretty` pretty prints the result\n    // `options.indent` indentation for pretty print\n    // `options.offset` how many indentations to add to every line for pretty print\n    // `options.newline` newline sequence for pretty print\n    toString(options) {\n      return this.options.writer.raw(this, this.options.writer.filterOptions(options));\n    }\n\n  };\n\n}).call(this);\n"],"mappings":"AAAA;AACA,CAAC,YAAW;EACV,IAAIA,QAAJ,EAAcC,OAAd,EAAuBC,MAAvB;EAEAF,QAAQ,GAAGG,OAAO,CAAC,YAAD,CAAlB;EAEAF,OAAO,GAAGE,OAAO,CAAC,WAAD,CAAjB,CALU,CAOV;;EACAC,MAAM,CAACC,OAAP,GAAiBH,MAAM,GAAG,MAAMA,MAAN,SAAqBD,OAArB,CAA6B;IACrD;IAEA;IACAK,WAAW,CAACC,MAAD,EAASC,IAAT,EAAe;MACxB,MAAMD,MAAN;;MACA,IAAIC,IAAI,IAAI,IAAZ,EAAkB;QAChB,MAAM,IAAIC,KAAJ,CAAU,uBAAuB,KAAKC,SAAL,EAAjC,CAAN;MACD;;MACD,KAAKC,IAAL,GAAYX,QAAQ,CAACY,GAArB;MACA,KAAKC,KAAL,GAAa,KAAKC,SAAL,CAAeC,GAAf,CAAmBP,IAAnB,CAAb;IACD,CAXoD,CAarD;;;IACAQ,KAAK,GAAG;MACN,OAAOC,MAAM,CAACC,MAAP,CAAc,IAAd,CAAP;IACD,CAhBoD,CAkBrD;IAEA;IACA;IACA;IACA;;;IACAC,QAAQ,CAACC,OAAD,EAAU;MAChB,OAAO,KAAKA,OAAL,CAAaC,MAAb,CAAoBN,GAApB,CAAwB,IAAxB,EAA8B,KAAKK,OAAL,CAAaC,MAAb,CAAoBC,aAApB,CAAkCF,OAAlC,CAA9B,CAAP;IACD;;EA1BoD,CAAvD;AA8BD,CAtCD,EAsCGG,IAtCH,CAsCQ,IAtCR"},"metadata":{},"sourceType":"script"}