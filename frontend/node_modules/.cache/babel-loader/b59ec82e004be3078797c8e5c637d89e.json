{"ast":null,"code":"'use strict';\n/* jshint ignore:start */\n\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n\n/* jshint ignore:end */\n\nvar Q = require('q');\n/* jshint ignore:line */\n\n\nvar _ = require('lodash');\n/* jshint ignore:line */\n\n\nvar util = require('util');\n/* jshint ignore:line */\n\n\nvar Page = require('../../../../base/Page');\n/* jshint ignore:line */\n\n\nvar ParticipantList = require('./conference/participant').ParticipantList;\n\nvar RecordingList = require('./conference/recording').RecordingList;\n\nvar deserialize = require('../../../../base/deserialize');\n/* jshint ignore:line */\n\n\nvar serialize = require('../../../../base/serialize');\n/* jshint ignore:line */\n\n\nvar values = require('../../../../base/values');\n/* jshint ignore:line */\n\n\nvar ConferenceList;\nvar ConferencePage;\nvar ConferenceInstance;\nvar ConferenceContext;\n/* jshint ignore:start */\n\n/**\n * Initialize the ConferenceList\n *\n * @constructor Twilio.Api.V2010.AccountContext.ConferenceList\n *\n * @param {Twilio.Api.V2010} version - Version of the resource\n * @param {string} accountSid - The SID of the Account that created this resource\n */\n\n/* jshint ignore:end */\n\nConferenceList = function ConferenceList(version, accountSid) {\n  /* jshint ignore:start */\n\n  /**\n   * @function conferences\n   * @memberof Twilio.Api.V2010.AccountContext#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Api.V2010.AccountContext.ConferenceContext}\n   */\n\n  /* jshint ignore:end */\n  function ConferenceListInstance(sid) {\n    return ConferenceListInstance.get(sid);\n  }\n\n  ConferenceListInstance._version = version; // Path Solution\n\n  ConferenceListInstance._solution = {\n    accountSid: accountSid\n  };\n  ConferenceListInstance._uri = `/Accounts/${accountSid}/Conferences.json`;\n  /* jshint ignore:start */\n\n  /**\n   * Streams ConferenceInstance records from the API.\n   *\n   * This operation lazily loads records as efficiently as possible until the limit\n   * is reached.\n   *\n   * The results are passed into the callback function, so this operation is memory\n   * efficient.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function each\n   * @memberof Twilio.Api.V2010.AccountContext.ConferenceList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {Date} [opts.dateCreatedBefore] -\n   *          The `YYYY-MM-DD` value of the resources to read\n   * @param {Date} [opts.dateCreated] -\n   *          The `YYYY-MM-DD` value of the resources to read\n   * @param {Date} [opts.dateCreatedAfter] -\n   *          The `YYYY-MM-DD` value of the resources to read\n   * @param {Date} [opts.dateUpdatedBefore] -\n   *          The `YYYY-MM-DD` value of the resources to read\n   * @param {Date} [opts.dateUpdated] -\n   *          The `YYYY-MM-DD` value of the resources to read\n   * @param {Date} [opts.dateUpdatedAfter] -\n   *          The `YYYY-MM-DD` value of the resources to read\n   * @param {string} [opts.friendlyName] -\n   *          The string that identifies the Conference resources to read\n   * @param {conference.status} [opts.status] - The status of the resources to read\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         each() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no pageSize is defined but a limit is defined,\n   *         each() will attempt to read the limit with the most efficient\n   *         page size, i.e. min(limit, 1000)\n   * @param {Function} [opts.callback] -\n   *         Function to process each record. If this and a positional\n   *         callback are passed, this one will be used\n   * @param {Function} [opts.done] -\n   *          Function to be called upon completion of streaming\n   * @param {Function} [callback] - Function to process each record\n   */\n\n  /* jshint ignore:end */\n\n  ConferenceListInstance.each = function each(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n\n    if (opts.callback) {\n      callback = opts.callback;\n    }\n\n    if (_.isUndefined(callback)) {\n      throw new Error('Callback function must be provided');\n    }\n\n    var done = false;\n    var currentPage = 1;\n    var currentResource = 0;\n\n    var limits = this._version.readLimits({\n      limit: opts.limit,\n      pageSize: opts.pageSize\n    });\n\n    function onComplete(error) {\n      done = true;\n\n      if (_.isFunction(opts.done)) {\n        opts.done(error);\n      }\n    }\n\n    function fetchNextPage(fn) {\n      var promise = fn();\n\n      if (_.isUndefined(promise)) {\n        onComplete();\n        return;\n      }\n\n      promise.then(function (page) {\n        _.each(page.instances, function (instance) {\n          if (done || !_.isUndefined(opts.limit) && currentResource >= opts.limit) {\n            done = true;\n            return false;\n          }\n\n          currentResource++;\n          callback(instance, onComplete);\n        });\n\n        if (!done) {\n          currentPage++;\n          fetchNextPage(_.bind(page.nextPage, page));\n        } else {\n          onComplete();\n        }\n      });\n      promise.catch(onComplete);\n    }\n\n    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Lists ConferenceInstance records from the API as a list.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function list\n   * @memberof Twilio.Api.V2010.AccountContext.ConferenceList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {Date} [opts.dateCreatedBefore] -\n   *          The `YYYY-MM-DD` value of the resources to read\n   * @param {Date} [opts.dateCreated] -\n   *          The `YYYY-MM-DD` value of the resources to read\n   * @param {Date} [opts.dateCreatedAfter] -\n   *          The `YYYY-MM-DD` value of the resources to read\n   * @param {Date} [opts.dateUpdatedBefore] -\n   *          The `YYYY-MM-DD` value of the resources to read\n   * @param {Date} [opts.dateUpdated] -\n   *          The `YYYY-MM-DD` value of the resources to read\n   * @param {Date} [opts.dateUpdatedAfter] -\n   *          The `YYYY-MM-DD` value of the resources to read\n   * @param {string} [opts.friendlyName] -\n   *          The string that identifies the Conference resources to read\n   * @param {conference.status} [opts.status] - The status of the resources to read\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         list() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no page_size is defined but a limit is defined,\n   *         list() will attempt to read the limit with the most\n   *         efficient page size, i.e. min(limit, 1000)\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  ConferenceListInstance.list = function list(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n    var deferred = Q.defer();\n    var allResources = [];\n\n    opts.callback = function (resource, done) {\n      allResources.push(resource);\n\n      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {\n        done();\n      }\n    };\n\n    opts.done = function (error) {\n      if (_.isUndefined(error)) {\n        deferred.resolve(allResources);\n      } else {\n        deferred.reject(error);\n      }\n    };\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    this.each(opts);\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Retrieve a single page of ConferenceInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function page\n   * @memberof Twilio.Api.V2010.AccountContext.ConferenceList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {Date} [opts.dateCreatedBefore] -\n   *          The `YYYY-MM-DD` value of the resources to read\n   * @param {Date} [opts.dateCreated] -\n   *          The `YYYY-MM-DD` value of the resources to read\n   * @param {Date} [opts.dateCreatedAfter] -\n   *          The `YYYY-MM-DD` value of the resources to read\n   * @param {Date} [opts.dateUpdatedBefore] -\n   *          The `YYYY-MM-DD` value of the resources to read\n   * @param {Date} [opts.dateUpdated] -\n   *          The `YYYY-MM-DD` value of the resources to read\n   * @param {Date} [opts.dateUpdatedAfter] -\n   *          The `YYYY-MM-DD` value of the resources to read\n   * @param {string} [opts.friendlyName] -\n   *          The string that identifies the Conference resources to read\n   * @param {conference.status} [opts.status] - The status of the resources to read\n   * @param {string} [opts.pageToken] - PageToken provided by the API\n   * @param {number} [opts.pageNumber] -\n   *          Page Number, this value is simply for client state\n   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  ConferenceListInstance.page = function page(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n    var deferred = Q.defer();\n    var data = values.of({\n      'DateCreated<': serialize.iso8601Date(_.get(opts, 'dateCreatedBefore')),\n      'DateCreated': serialize.iso8601Date(_.get(opts, 'dateCreated')),\n      'DateCreated>': serialize.iso8601Date(_.get(opts, 'dateCreatedAfter')),\n      'DateUpdated<': serialize.iso8601Date(_.get(opts, 'dateUpdatedBefore')),\n      'DateUpdated': serialize.iso8601Date(_.get(opts, 'dateUpdated')),\n      'DateUpdated>': serialize.iso8601Date(_.get(opts, 'dateUpdatedAfter')),\n      'FriendlyName': _.get(opts, 'friendlyName'),\n      'Status': _.get(opts, 'status'),\n      'PageToken': opts.pageToken,\n      'Page': opts.pageNumber,\n      'PageSize': opts.pageSize\n    });\n\n    var promise = this._version.page({\n      uri: this._uri,\n      method: 'GET',\n      params: data\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new ConferencePage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Retrieve a single target page of ConferenceInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function getPage\n   * @memberof Twilio.Api.V2010.AccountContext.ConferenceList#\n   *\n   * @param {string} [targetUrl] - API-generated URL for the requested results page\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  ConferenceListInstance.getPage = function getPage(targetUrl, callback) {\n    var deferred = Q.defer();\n\n    var promise = this._version._domain.twilio.request({\n      method: 'GET',\n      uri: targetUrl\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new ConferencePage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Constructs a conference\n   *\n   * @function get\n   * @memberof Twilio.Api.V2010.AccountContext.ConferenceList#\n   *\n   * @param {string} sid - The unique string that identifies this resource\n   *\n   * @returns {Twilio.Api.V2010.AccountContext.ConferenceContext}\n   */\n\n  /* jshint ignore:end */\n\n\n  ConferenceListInstance.get = function get(sid) {\n    return new ConferenceContext(this._version, this._solution.accountSid, sid);\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Api.V2010.AccountContext.ConferenceList#\n   *\n   * @returns Object\n   */\n\n  /* jshint ignore:end */\n\n\n  ConferenceListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n\n  ConferenceListInstance[util.inspect.custom] = function inspect(depth, options) {\n    return util.inspect(this.toJSON(), options);\n  };\n\n  return ConferenceListInstance;\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the ConferencePage\n *\n * @constructor Twilio.Api.V2010.AccountContext.ConferencePage\n *\n * @param {V2010} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {ConferenceSolution} solution - Path solution\n *\n * @returns ConferencePage\n */\n\n/* jshint ignore:end */\n\n\nConferencePage = function ConferencePage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n\n_.extend(ConferencePage.prototype, Page.prototype);\n\nConferencePage.prototype.constructor = ConferencePage;\n/* jshint ignore:start */\n\n/**\n * Build an instance of ConferenceInstance\n *\n * @function getInstance\n * @memberof Twilio.Api.V2010.AccountContext.ConferencePage#\n *\n * @param {ConferencePayload} payload - Payload response from the API\n *\n * @returns ConferenceInstance\n */\n\n/* jshint ignore:end */\n\nConferencePage.prototype.getInstance = function getInstance(payload) {\n  return new ConferenceInstance(this._version, payload, this._solution.accountSid);\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Api.V2010.AccountContext.ConferencePage#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nConferencePage.prototype.toJSON = function toJSON() {\n  let clone = {};\n\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n\n  return clone;\n};\n\nConferencePage.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the ConferenceContext\n *\n * @constructor Twilio.Api.V2010.AccountContext.ConferenceInstance\n *\n * @property {string} accountSid -\n *          The SID of the Account that created this resource\n * @property {Date} dateCreated -\n *          The RFC 2822 date and time in GMT that this resource was created\n * @property {Date} dateUpdated -\n *          The RFC 2822 date and time in GMT that this resource was last updated\n * @property {string} apiVersion - The API version used to create this conference\n * @property {string} friendlyName -\n *          A string that you assigned to describe this conference room\n * @property {string} region -\n *          A string that represents the Twilio Region where the conference was mixed\n * @property {string} sid - The unique string that identifies this resource\n * @property {conference.status} status - The status of this conference\n * @property {string} uri -\n *          The URI of this resource, relative to `https://api.twilio.com`\n * @property {string} subresourceUris -\n *          A list of related resources identified by their relative URIs\n * @property {conference.reason_conference_ended} reasonConferenceEnded -\n *          The reason why a conference ended.\n * @property {string} callSidEndingConference -\n *          The call SID that caused the conference to end\n *\n * @param {V2010} version - Version of the resource\n * @param {ConferencePayload} payload - The instance payload\n * @param {sid} accountSid - The SID of the Account that created this resource\n * @param {sid} sid - The unique string that identifies this resource\n */\n\n/* jshint ignore:end */\n\n\nConferenceInstance = function ConferenceInstance(version, payload, accountSid, sid) {\n  this._version = version; // Marshaled Properties\n\n  this.accountSid = payload.account_sid; // jshint ignore:line\n\n  this.dateCreated = deserialize.rfc2822DateTime(payload.date_created); // jshint ignore:line\n\n  this.dateUpdated = deserialize.rfc2822DateTime(payload.date_updated); // jshint ignore:line\n\n  this.apiVersion = payload.api_version; // jshint ignore:line\n\n  this.friendlyName = payload.friendly_name; // jshint ignore:line\n\n  this.region = payload.region; // jshint ignore:line\n\n  this.sid = payload.sid; // jshint ignore:line\n\n  this.status = payload.status; // jshint ignore:line\n\n  this.uri = payload.uri; // jshint ignore:line\n\n  this.subresourceUris = payload.subresource_uris; // jshint ignore:line\n\n  this.reasonConferenceEnded = payload.reason_conference_ended; // jshint ignore:line\n\n  this.callSidEndingConference = payload.call_sid_ending_conference; // jshint ignore:line\n  // Context\n\n  this._context = undefined;\n  this._solution = {\n    accountSid: accountSid,\n    sid: sid || this.sid\n  };\n};\n\nObject.defineProperty(ConferenceInstance.prototype, '_proxy', {\n  get: function () {\n    if (!this._context) {\n      this._context = new ConferenceContext(this._version, this._solution.accountSid, this._solution.sid);\n    }\n\n    return this._context;\n  }\n});\n/* jshint ignore:start */\n\n/**\n * fetch a ConferenceInstance\n *\n * @function fetch\n * @memberof Twilio.Api.V2010.AccountContext.ConferenceInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed ConferenceInstance\n */\n\n/* jshint ignore:end */\n\nConferenceInstance.prototype.fetch = function fetch(callback) {\n  return this._proxy.fetch(callback);\n};\n/* jshint ignore:start */\n\n/**\n * update a ConferenceInstance\n *\n * @function update\n * @memberof Twilio.Api.V2010.AccountContext.ConferenceInstance#\n *\n * @param {object} [opts] - Options for request\n * @param {conference.update_status} [opts.status] - The new status of the resource\n * @param {string} [opts.announceUrl] -\n *          The URL we should call to announce something into the conference\n * @param {string} [opts.announceMethod] - he HTTP method used to call announce_url\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed ConferenceInstance\n */\n\n/* jshint ignore:end */\n\n\nConferenceInstance.prototype.update = function update(opts, callback) {\n  return this._proxy.update(opts, callback);\n};\n/* jshint ignore:start */\n\n/**\n * Access the participants\n *\n * @function participants\n * @memberof Twilio.Api.V2010.AccountContext.ConferenceInstance#\n *\n * @returns {Twilio.Api.V2010.AccountContext.ConferenceContext.ParticipantList}\n */\n\n/* jshint ignore:end */\n\n\nConferenceInstance.prototype.participants = function participants() {\n  return this._proxy.participants;\n};\n/* jshint ignore:start */\n\n/**\n * Access the recordings\n *\n * @function recordings\n * @memberof Twilio.Api.V2010.AccountContext.ConferenceInstance#\n *\n * @returns {Twilio.Api.V2010.AccountContext.ConferenceContext.RecordingList}\n */\n\n/* jshint ignore:end */\n\n\nConferenceInstance.prototype.recordings = function recordings() {\n  return this._proxy.recordings;\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Api.V2010.AccountContext.ConferenceInstance#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nConferenceInstance.prototype.toJSON = function toJSON() {\n  let clone = {};\n\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n\n  return clone;\n};\n\nConferenceInstance.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the ConferenceContext\n *\n * @constructor Twilio.Api.V2010.AccountContext.ConferenceContext\n *\n * @property {Twilio.Api.V2010.AccountContext.ConferenceContext.ParticipantList} participants -\n *          participants resource\n * @property {Twilio.Api.V2010.AccountContext.ConferenceContext.RecordingList} recordings -\n *          recordings resource\n *\n * @param {V2010} version - Version of the resource\n * @param {sid} accountSid -\n *          The SID of the Account that created the resource(s) to fetch\n * @param {sid} sid - The unique string that identifies this resource\n */\n\n/* jshint ignore:end */\n\n\nConferenceContext = function ConferenceContext(version, accountSid, sid) {\n  this._version = version; // Path Solution\n\n  this._solution = {\n    accountSid: accountSid,\n    sid: sid\n  };\n  this._uri = `/Accounts/${accountSid}/Conferences/${sid}.json`; // Dependents\n\n  this._participants = undefined;\n  this._recordings = undefined;\n};\n/* jshint ignore:start */\n\n/**\n * fetch a ConferenceInstance\n *\n * @function fetch\n * @memberof Twilio.Api.V2010.AccountContext.ConferenceContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed ConferenceInstance\n */\n\n/* jshint ignore:end */\n\n\nConferenceContext.prototype.fetch = function fetch(callback) {\n  var deferred = Q.defer();\n\n  var promise = this._version.fetch({\n    uri: this._uri,\n    method: 'GET'\n  });\n\n  promise = promise.then(function (payload) {\n    deferred.resolve(new ConferenceInstance(this._version, payload, this._solution.accountSid, this._solution.sid));\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n/* jshint ignore:start */\n\n/**\n * update a ConferenceInstance\n *\n * @function update\n * @memberof Twilio.Api.V2010.AccountContext.ConferenceContext#\n *\n * @param {object} [opts] - Options for request\n * @param {conference.update_status} [opts.status] - The new status of the resource\n * @param {string} [opts.announceUrl] -\n *          The URL we should call to announce something into the conference\n * @param {string} [opts.announceMethod] - he HTTP method used to call announce_url\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed ConferenceInstance\n */\n\n/* jshint ignore:end */\n\n\nConferenceContext.prototype.update = function update(opts, callback) {\n  if (_.isFunction(opts)) {\n    callback = opts;\n    opts = {};\n  }\n\n  opts = opts || {};\n  var deferred = Q.defer();\n  var data = values.of({\n    'Status': _.get(opts, 'status'),\n    'AnnounceUrl': _.get(opts, 'announceUrl'),\n    'AnnounceMethod': _.get(opts, 'announceMethod')\n  });\n\n  var promise = this._version.update({\n    uri: this._uri,\n    method: 'POST',\n    data: data\n  });\n\n  promise = promise.then(function (payload) {\n    deferred.resolve(new ConferenceInstance(this._version, payload, this._solution.accountSid, this._solution.sid));\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\nObject.defineProperty(ConferenceContext.prototype, 'participants', {\n  get: function () {\n    if (!this._participants) {\n      this._participants = new ParticipantList(this._version, this._solution.accountSid, this._solution.sid);\n    }\n\n    return this._participants;\n  }\n});\nObject.defineProperty(ConferenceContext.prototype, 'recordings', {\n  get: function () {\n    if (!this._recordings) {\n      this._recordings = new RecordingList(this._version, this._solution.accountSid, this._solution.sid);\n    }\n\n    return this._recordings;\n  }\n});\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Api.V2010.AccountContext.ConferenceContext#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\nConferenceContext.prototype.toJSON = function toJSON() {\n  return this._solution;\n};\n\nConferenceContext.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\nmodule.exports = {\n  ConferenceList: ConferenceList,\n  ConferencePage: ConferencePage,\n  ConferenceInstance: ConferenceInstance,\n  ConferenceContext: ConferenceContext\n};","map":{"version":3,"names":["Q","require","_","util","Page","ParticipantList","RecordingList","deserialize","serialize","values","ConferenceList","ConferencePage","ConferenceInstance","ConferenceContext","version","accountSid","ConferenceListInstance","sid","get","_version","_solution","_uri","each","opts","callback","isFunction","isUndefined","Error","done","currentPage","currentResource","limits","readLimits","limit","pageSize","onComplete","error","fetchNextPage","fn","promise","then","page","instances","instance","bind","nextPage","catch","merge","list","deferred","defer","allResources","resource","push","length","resolve","reject","nodeify","data","of","iso8601Date","pageToken","pageNumber","uri","method","params","payload","getPage","targetUrl","_domain","twilio","request","toJSON","inspect","custom","depth","options","response","solution","prototype","constructor","call","extend","getInstance","clone","forOwn","value","key","startsWith","account_sid","dateCreated","rfc2822DateTime","date_created","dateUpdated","date_updated","apiVersion","api_version","friendlyName","friendly_name","region","status","subresourceUris","subresource_uris","reasonConferenceEnded","reason_conference_ended","callSidEndingConference","call_sid_ending_conference","_context","undefined","Object","defineProperty","fetch","_proxy","update","participants","recordings","_participants","_recordings","module","exports"],"sources":["/Users/hooniesun/rmit/fwp/assessment1/lan/node_modules/twilio/lib/rest/api/v2010/account/conference.js"],"sourcesContent":["'use strict';\n\n/* jshint ignore:start */\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n/* jshint ignore:end */\n\nvar Q = require('q');  /* jshint ignore:line */\nvar _ = require('lodash');  /* jshint ignore:line */\nvar util = require('util');  /* jshint ignore:line */\nvar Page = require('../../../../base/Page');  /* jshint ignore:line */\nvar ParticipantList = require('./conference/participant').ParticipantList;\nvar RecordingList = require('./conference/recording').RecordingList;\nvar deserialize = require(\n    '../../../../base/deserialize');  /* jshint ignore:line */\nvar serialize = require('../../../../base/serialize');  /* jshint ignore:line */\nvar values = require('../../../../base/values');  /* jshint ignore:line */\n\nvar ConferenceList;\nvar ConferencePage;\nvar ConferenceInstance;\nvar ConferenceContext;\n\n/* jshint ignore:start */\n/**\n * Initialize the ConferenceList\n *\n * @constructor Twilio.Api.V2010.AccountContext.ConferenceList\n *\n * @param {Twilio.Api.V2010} version - Version of the resource\n * @param {string} accountSid - The SID of the Account that created this resource\n */\n/* jshint ignore:end */\nConferenceList = function ConferenceList(version, accountSid) {\n  /* jshint ignore:start */\n  /**\n   * @function conferences\n   * @memberof Twilio.Api.V2010.AccountContext#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Api.V2010.AccountContext.ConferenceContext}\n   */\n  /* jshint ignore:end */\n  function ConferenceListInstance(sid) {\n    return ConferenceListInstance.get(sid);\n  }\n\n  ConferenceListInstance._version = version;\n  // Path Solution\n  ConferenceListInstance._solution = {accountSid: accountSid};\n  ConferenceListInstance._uri = `/Accounts/${accountSid}/Conferences.json`;\n  /* jshint ignore:start */\n  /**\n   * Streams ConferenceInstance records from the API.\n   *\n   * This operation lazily loads records as efficiently as possible until the limit\n   * is reached.\n   *\n   * The results are passed into the callback function, so this operation is memory\n   * efficient.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function each\n   * @memberof Twilio.Api.V2010.AccountContext.ConferenceList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {Date} [opts.dateCreatedBefore] -\n   *          The `YYYY-MM-DD` value of the resources to read\n   * @param {Date} [opts.dateCreated] -\n   *          The `YYYY-MM-DD` value of the resources to read\n   * @param {Date} [opts.dateCreatedAfter] -\n   *          The `YYYY-MM-DD` value of the resources to read\n   * @param {Date} [opts.dateUpdatedBefore] -\n   *          The `YYYY-MM-DD` value of the resources to read\n   * @param {Date} [opts.dateUpdated] -\n   *          The `YYYY-MM-DD` value of the resources to read\n   * @param {Date} [opts.dateUpdatedAfter] -\n   *          The `YYYY-MM-DD` value of the resources to read\n   * @param {string} [opts.friendlyName] -\n   *          The string that identifies the Conference resources to read\n   * @param {conference.status} [opts.status] - The status of the resources to read\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         each() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no pageSize is defined but a limit is defined,\n   *         each() will attempt to read the limit with the most efficient\n   *         page size, i.e. min(limit, 1000)\n   * @param {Function} [opts.callback] -\n   *         Function to process each record. If this and a positional\n   *         callback are passed, this one will be used\n   * @param {Function} [opts.done] -\n   *          Function to be called upon completion of streaming\n   * @param {Function} [callback] - Function to process each record\n   */\n  /* jshint ignore:end */\n  ConferenceListInstance.each = function each(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    if (opts.callback) {\n      callback = opts.callback;\n    }\n    if (_.isUndefined(callback)) {\n      throw new Error('Callback function must be provided');\n    }\n\n    var done = false;\n    var currentPage = 1;\n    var currentResource = 0;\n    var limits = this._version.readLimits({\n      limit: opts.limit,\n      pageSize: opts.pageSize\n    });\n\n    function onComplete(error) {\n      done = true;\n      if (_.isFunction(opts.done)) {\n        opts.done(error);\n      }\n    }\n\n    function fetchNextPage(fn) {\n      var promise = fn();\n      if (_.isUndefined(promise)) {\n        onComplete();\n        return;\n      }\n\n      promise.then(function(page) {\n        _.each(page.instances, function(instance) {\n          if (done || (!_.isUndefined(opts.limit) && currentResource >= opts.limit)) {\n            done = true;\n            return false;\n          }\n\n          currentResource++;\n          callback(instance, onComplete);\n        });\n\n        if (!done) {\n          currentPage++;\n          fetchNextPage(_.bind(page.nextPage, page));\n        } else {\n          onComplete();\n        }\n      });\n\n      promise.catch(onComplete);\n    }\n\n    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Lists ConferenceInstance records from the API as a list.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function list\n   * @memberof Twilio.Api.V2010.AccountContext.ConferenceList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {Date} [opts.dateCreatedBefore] -\n   *          The `YYYY-MM-DD` value of the resources to read\n   * @param {Date} [opts.dateCreated] -\n   *          The `YYYY-MM-DD` value of the resources to read\n   * @param {Date} [opts.dateCreatedAfter] -\n   *          The `YYYY-MM-DD` value of the resources to read\n   * @param {Date} [opts.dateUpdatedBefore] -\n   *          The `YYYY-MM-DD` value of the resources to read\n   * @param {Date} [opts.dateUpdated] -\n   *          The `YYYY-MM-DD` value of the resources to read\n   * @param {Date} [opts.dateUpdatedAfter] -\n   *          The `YYYY-MM-DD` value of the resources to read\n   * @param {string} [opts.friendlyName] -\n   *          The string that identifies the Conference resources to read\n   * @param {conference.status} [opts.status] - The status of the resources to read\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         list() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no page_size is defined but a limit is defined,\n   *         list() will attempt to read the limit with the most\n   *         efficient page size, i.e. min(limit, 1000)\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  ConferenceListInstance.list = function list(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    var deferred = Q.defer();\n    var allResources = [];\n    opts.callback = function(resource, done) {\n      allResources.push(resource);\n\n      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {\n        done();\n      }\n    };\n\n    opts.done = function(error) {\n      if (_.isUndefined(error)) {\n        deferred.resolve(allResources);\n      } else {\n        deferred.reject(error);\n      }\n    };\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    this.each(opts);\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single page of ConferenceInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function page\n   * @memberof Twilio.Api.V2010.AccountContext.ConferenceList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {Date} [opts.dateCreatedBefore] -\n   *          The `YYYY-MM-DD` value of the resources to read\n   * @param {Date} [opts.dateCreated] -\n   *          The `YYYY-MM-DD` value of the resources to read\n   * @param {Date} [opts.dateCreatedAfter] -\n   *          The `YYYY-MM-DD` value of the resources to read\n   * @param {Date} [opts.dateUpdatedBefore] -\n   *          The `YYYY-MM-DD` value of the resources to read\n   * @param {Date} [opts.dateUpdated] -\n   *          The `YYYY-MM-DD` value of the resources to read\n   * @param {Date} [opts.dateUpdatedAfter] -\n   *          The `YYYY-MM-DD` value of the resources to read\n   * @param {string} [opts.friendlyName] -\n   *          The string that identifies the Conference resources to read\n   * @param {conference.status} [opts.status] - The status of the resources to read\n   * @param {string} [opts.pageToken] - PageToken provided by the API\n   * @param {number} [opts.pageNumber] -\n   *          Page Number, this value is simply for client state\n   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  ConferenceListInstance.page = function page(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n\n    var deferred = Q.defer();\n    var data = values.of({\n      'DateCreated<': serialize.iso8601Date(_.get(opts, 'dateCreatedBefore')),\n      'DateCreated': serialize.iso8601Date(_.get(opts, 'dateCreated')),\n      'DateCreated>': serialize.iso8601Date(_.get(opts, 'dateCreatedAfter')),\n      'DateUpdated<': serialize.iso8601Date(_.get(opts, 'dateUpdatedBefore')),\n      'DateUpdated': serialize.iso8601Date(_.get(opts, 'dateUpdated')),\n      'DateUpdated>': serialize.iso8601Date(_.get(opts, 'dateUpdatedAfter')),\n      'FriendlyName': _.get(opts, 'friendlyName'),\n      'Status': _.get(opts, 'status'),\n      'PageToken': opts.pageToken,\n      'Page': opts.pageNumber,\n      'PageSize': opts.pageSize\n    });\n\n    var promise = this._version.page({uri: this._uri, method: 'GET', params: data});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new ConferencePage(this._version, payload, this._solution));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single target page of ConferenceInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function getPage\n   * @memberof Twilio.Api.V2010.AccountContext.ConferenceList#\n   *\n   * @param {string} [targetUrl] - API-generated URL for the requested results page\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  ConferenceListInstance.getPage = function getPage(targetUrl, callback) {\n    var deferred = Q.defer();\n\n    var promise = this._version._domain.twilio.request({method: 'GET', uri: targetUrl});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new ConferencePage(this._version, payload, this._solution));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Constructs a conference\n   *\n   * @function get\n   * @memberof Twilio.Api.V2010.AccountContext.ConferenceList#\n   *\n   * @param {string} sid - The unique string that identifies this resource\n   *\n   * @returns {Twilio.Api.V2010.AccountContext.ConferenceContext}\n   */\n  /* jshint ignore:end */\n  ConferenceListInstance.get = function get(sid) {\n    return new ConferenceContext(this._version, this._solution.accountSid, sid);\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Api.V2010.AccountContext.ConferenceList#\n   *\n   * @returns Object\n   */\n  /* jshint ignore:end */\n  ConferenceListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n\n  ConferenceListInstance[util.inspect.custom] = function inspect(depth, options) {\n    return util.inspect(this.toJSON(), options);\n  };\n\n  return ConferenceListInstance;\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the ConferencePage\n *\n * @constructor Twilio.Api.V2010.AccountContext.ConferencePage\n *\n * @param {V2010} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {ConferenceSolution} solution - Path solution\n *\n * @returns ConferencePage\n */\n/* jshint ignore:end */\nConferencePage = function ConferencePage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n\n_.extend(ConferencePage.prototype, Page.prototype);\nConferencePage.prototype.constructor = ConferencePage;\n\n/* jshint ignore:start */\n/**\n * Build an instance of ConferenceInstance\n *\n * @function getInstance\n * @memberof Twilio.Api.V2010.AccountContext.ConferencePage#\n *\n * @param {ConferencePayload} payload - Payload response from the API\n *\n * @returns ConferenceInstance\n */\n/* jshint ignore:end */\nConferencePage.prototype.getInstance = function getInstance(payload) {\n  return new ConferenceInstance(this._version, payload, this._solution.accountSid);\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Api.V2010.AccountContext.ConferencePage#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nConferencePage.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function(value, key) {\n    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\n\nConferencePage.prototype[util.inspect.custom] = function inspect(depth, options)\n    {\n  return util.inspect(this.toJSON(), options);\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the ConferenceContext\n *\n * @constructor Twilio.Api.V2010.AccountContext.ConferenceInstance\n *\n * @property {string} accountSid -\n *          The SID of the Account that created this resource\n * @property {Date} dateCreated -\n *          The RFC 2822 date and time in GMT that this resource was created\n * @property {Date} dateUpdated -\n *          The RFC 2822 date and time in GMT that this resource was last updated\n * @property {string} apiVersion - The API version used to create this conference\n * @property {string} friendlyName -\n *          A string that you assigned to describe this conference room\n * @property {string} region -\n *          A string that represents the Twilio Region where the conference was mixed\n * @property {string} sid - The unique string that identifies this resource\n * @property {conference.status} status - The status of this conference\n * @property {string} uri -\n *          The URI of this resource, relative to `https://api.twilio.com`\n * @property {string} subresourceUris -\n *          A list of related resources identified by their relative URIs\n * @property {conference.reason_conference_ended} reasonConferenceEnded -\n *          The reason why a conference ended.\n * @property {string} callSidEndingConference -\n *          The call SID that caused the conference to end\n *\n * @param {V2010} version - Version of the resource\n * @param {ConferencePayload} payload - The instance payload\n * @param {sid} accountSid - The SID of the Account that created this resource\n * @param {sid} sid - The unique string that identifies this resource\n */\n/* jshint ignore:end */\nConferenceInstance = function ConferenceInstance(version, payload, accountSid,\n                                                  sid) {\n  this._version = version;\n\n  // Marshaled Properties\n  this.accountSid = payload.account_sid; // jshint ignore:line\n  this.dateCreated = deserialize.rfc2822DateTime(payload.date_created); // jshint ignore:line\n  this.dateUpdated = deserialize.rfc2822DateTime(payload.date_updated); // jshint ignore:line\n  this.apiVersion = payload.api_version; // jshint ignore:line\n  this.friendlyName = payload.friendly_name; // jshint ignore:line\n  this.region = payload.region; // jshint ignore:line\n  this.sid = payload.sid; // jshint ignore:line\n  this.status = payload.status; // jshint ignore:line\n  this.uri = payload.uri; // jshint ignore:line\n  this.subresourceUris = payload.subresource_uris; // jshint ignore:line\n  this.reasonConferenceEnded = payload.reason_conference_ended; // jshint ignore:line\n  this.callSidEndingConference = payload.call_sid_ending_conference; // jshint ignore:line\n\n  // Context\n  this._context = undefined;\n  this._solution = {accountSid: accountSid, sid: sid || this.sid, };\n};\n\nObject.defineProperty(ConferenceInstance.prototype,\n  '_proxy', {\n    get: function() {\n      if (!this._context) {\n        this._context = new ConferenceContext(this._version, this._solution.accountSid, this._solution.sid);\n      }\n\n      return this._context;\n    }\n});\n\n/* jshint ignore:start */\n/**\n * fetch a ConferenceInstance\n *\n * @function fetch\n * @memberof Twilio.Api.V2010.AccountContext.ConferenceInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed ConferenceInstance\n */\n/* jshint ignore:end */\nConferenceInstance.prototype.fetch = function fetch(callback) {\n  return this._proxy.fetch(callback);\n};\n\n/* jshint ignore:start */\n/**\n * update a ConferenceInstance\n *\n * @function update\n * @memberof Twilio.Api.V2010.AccountContext.ConferenceInstance#\n *\n * @param {object} [opts] - Options for request\n * @param {conference.update_status} [opts.status] - The new status of the resource\n * @param {string} [opts.announceUrl] -\n *          The URL we should call to announce something into the conference\n * @param {string} [opts.announceMethod] - he HTTP method used to call announce_url\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed ConferenceInstance\n */\n/* jshint ignore:end */\nConferenceInstance.prototype.update = function update(opts, callback) {\n  return this._proxy.update(opts, callback);\n};\n\n/* jshint ignore:start */\n/**\n * Access the participants\n *\n * @function participants\n * @memberof Twilio.Api.V2010.AccountContext.ConferenceInstance#\n *\n * @returns {Twilio.Api.V2010.AccountContext.ConferenceContext.ParticipantList}\n */\n/* jshint ignore:end */\nConferenceInstance.prototype.participants = function participants() {\n  return this._proxy.participants;\n};\n\n/* jshint ignore:start */\n/**\n * Access the recordings\n *\n * @function recordings\n * @memberof Twilio.Api.V2010.AccountContext.ConferenceInstance#\n *\n * @returns {Twilio.Api.V2010.AccountContext.ConferenceContext.RecordingList}\n */\n/* jshint ignore:end */\nConferenceInstance.prototype.recordings = function recordings() {\n  return this._proxy.recordings;\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Api.V2010.AccountContext.ConferenceInstance#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nConferenceInstance.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function(value, key) {\n    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\n\nConferenceInstance.prototype[util.inspect.custom] = function inspect(depth,\n    options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the ConferenceContext\n *\n * @constructor Twilio.Api.V2010.AccountContext.ConferenceContext\n *\n * @property {Twilio.Api.V2010.AccountContext.ConferenceContext.ParticipantList} participants -\n *          participants resource\n * @property {Twilio.Api.V2010.AccountContext.ConferenceContext.RecordingList} recordings -\n *          recordings resource\n *\n * @param {V2010} version - Version of the resource\n * @param {sid} accountSid -\n *          The SID of the Account that created the resource(s) to fetch\n * @param {sid} sid - The unique string that identifies this resource\n */\n/* jshint ignore:end */\nConferenceContext = function ConferenceContext(version, accountSid, sid) {\n  this._version = version;\n\n  // Path Solution\n  this._solution = {accountSid: accountSid, sid: sid, };\n  this._uri = `/Accounts/${accountSid}/Conferences/${sid}.json`;\n\n  // Dependents\n  this._participants = undefined;\n  this._recordings = undefined;\n};\n\n/* jshint ignore:start */\n/**\n * fetch a ConferenceInstance\n *\n * @function fetch\n * @memberof Twilio.Api.V2010.AccountContext.ConferenceContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed ConferenceInstance\n */\n/* jshint ignore:end */\nConferenceContext.prototype.fetch = function fetch(callback) {\n  var deferred = Q.defer();\n  var promise = this._version.fetch({uri: this._uri, method: 'GET'});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(new ConferenceInstance(\n      this._version,\n      payload,\n      this._solution.accountSid,\n      this._solution.sid\n    ));\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * update a ConferenceInstance\n *\n * @function update\n * @memberof Twilio.Api.V2010.AccountContext.ConferenceContext#\n *\n * @param {object} [opts] - Options for request\n * @param {conference.update_status} [opts.status] - The new status of the resource\n * @param {string} [opts.announceUrl] -\n *          The URL we should call to announce something into the conference\n * @param {string} [opts.announceMethod] - he HTTP method used to call announce_url\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed ConferenceInstance\n */\n/* jshint ignore:end */\nConferenceContext.prototype.update = function update(opts, callback) {\n  if (_.isFunction(opts)) {\n    callback = opts;\n    opts = {};\n  }\n  opts = opts || {};\n\n  var deferred = Q.defer();\n  var data = values.of({\n    'Status': _.get(opts, 'status'),\n    'AnnounceUrl': _.get(opts, 'announceUrl'),\n    'AnnounceMethod': _.get(opts, 'announceMethod')\n  });\n\n  var promise = this._version.update({uri: this._uri, method: 'POST', data: data});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(new ConferenceInstance(\n      this._version,\n      payload,\n      this._solution.accountSid,\n      this._solution.sid\n    ));\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\nObject.defineProperty(ConferenceContext.prototype,\n  'participants', {\n    get: function() {\n      if (!this._participants) {\n        this._participants = new ParticipantList(\n          this._version,\n          this._solution.accountSid,\n          this._solution.sid\n        );\n      }\n      return this._participants;\n    }\n});\n\nObject.defineProperty(ConferenceContext.prototype,\n  'recordings', {\n    get: function() {\n      if (!this._recordings) {\n        this._recordings = new RecordingList(this._version, this._solution.accountSid, this._solution.sid);\n      }\n      return this._recordings;\n    }\n});\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Api.V2010.AccountContext.ConferenceContext#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nConferenceContext.prototype.toJSON = function toJSON() {\n  return this._solution;\n};\n\nConferenceContext.prototype[util.inspect.custom] = function inspect(depth,\n    options) {\n  return util.inspect(this.toJSON(), options);\n};\n\nmodule.exports = {\n  ConferenceList: ConferenceList,\n  ConferencePage: ConferencePage,\n  ConferenceInstance: ConferenceInstance,\n  ConferenceContext: ConferenceContext\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}