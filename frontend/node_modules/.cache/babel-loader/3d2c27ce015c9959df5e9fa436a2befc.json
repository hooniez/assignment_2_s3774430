{"ast":null,"code":"'use strict';\n/* jshint ignore:start */\n\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n\n/* jshint ignore:end */\n\nvar Q = require('q');\n/* jshint ignore:line */\n\n\nvar _ = require('lodash');\n/* jshint ignore:line */\n\n\nvar util = require('util');\n/* jshint ignore:line */\n\n\nvar Page = require('../../../../base/Page');\n/* jshint ignore:line */\n\n\nvar deserialize = require('../../../../base/deserialize');\n/* jshint ignore:line */\n\n\nvar values = require('../../../../base/values');\n/* jshint ignore:line */\n\n\nvar FlowRevisionList;\nvar FlowRevisionPage;\nvar FlowRevisionInstance;\nvar FlowRevisionContext;\n/* jshint ignore:start */\n\n/**\n * Initialize the FlowRevisionList\n *\n * @constructor Twilio.Studio.V2.FlowContext.FlowRevisionList\n *\n * @param {Twilio.Studio.V2} version - Version of the resource\n * @param {string} sid - The unique string that identifies the resource\n */\n\n/* jshint ignore:end */\n\nFlowRevisionList = function FlowRevisionList(version, sid) {\n  /* jshint ignore:start */\n\n  /**\n   * @function revisions\n   * @memberof Twilio.Studio.V2.FlowContext#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Studio.V2.FlowContext.FlowRevisionContext}\n   */\n\n  /* jshint ignore:end */\n  function FlowRevisionListInstance(sid) {\n    return FlowRevisionListInstance.get(sid);\n  }\n\n  FlowRevisionListInstance._version = version; // Path Solution\n\n  FlowRevisionListInstance._solution = {\n    sid: sid\n  };\n  FlowRevisionListInstance._uri = `/Flows/${sid}/Revisions`;\n  /* jshint ignore:start */\n\n  /**\n   * Streams FlowRevisionInstance records from the API.\n   *\n   * This operation lazily loads records as efficiently as possible until the limit\n   * is reached.\n   *\n   * The results are passed into the callback function, so this operation is memory\n   * efficient.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function each\n   * @memberof Twilio.Studio.V2.FlowContext.FlowRevisionList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         each() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no pageSize is defined but a limit is defined,\n   *         each() will attempt to read the limit with the most efficient\n   *         page size, i.e. min(limit, 1000)\n   * @param {Function} [opts.callback] -\n   *         Function to process each record. If this and a positional\n   *         callback are passed, this one will be used\n   * @param {Function} [opts.done] -\n   *          Function to be called upon completion of streaming\n   * @param {Function} [callback] - Function to process each record\n   */\n\n  /* jshint ignore:end */\n\n  FlowRevisionListInstance.each = function each(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n\n    if (opts.callback) {\n      callback = opts.callback;\n    }\n\n    if (_.isUndefined(callback)) {\n      throw new Error('Callback function must be provided');\n    }\n\n    var done = false;\n    var currentPage = 1;\n    var currentResource = 0;\n\n    var limits = this._version.readLimits({\n      limit: opts.limit,\n      pageSize: opts.pageSize\n    });\n\n    function onComplete(error) {\n      done = true;\n\n      if (_.isFunction(opts.done)) {\n        opts.done(error);\n      }\n    }\n\n    function fetchNextPage(fn) {\n      var promise = fn();\n\n      if (_.isUndefined(promise)) {\n        onComplete();\n        return;\n      }\n\n      promise.then(function (page) {\n        _.each(page.instances, function (instance) {\n          if (done || !_.isUndefined(opts.limit) && currentResource >= opts.limit) {\n            done = true;\n            return false;\n          }\n\n          currentResource++;\n          callback(instance, onComplete);\n        });\n\n        if (!done) {\n          currentPage++;\n          fetchNextPage(_.bind(page.nextPage, page));\n        } else {\n          onComplete();\n        }\n      });\n      promise.catch(onComplete);\n    }\n\n    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Lists FlowRevisionInstance records from the API as a list.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function list\n   * @memberof Twilio.Studio.V2.FlowContext.FlowRevisionList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         list() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no page_size is defined but a limit is defined,\n   *         list() will attempt to read the limit with the most\n   *         efficient page size, i.e. min(limit, 1000)\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  FlowRevisionListInstance.list = function list(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n    var deferred = Q.defer();\n    var allResources = [];\n\n    opts.callback = function (resource, done) {\n      allResources.push(resource);\n\n      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {\n        done();\n      }\n    };\n\n    opts.done = function (error) {\n      if (_.isUndefined(error)) {\n        deferred.resolve(allResources);\n      } else {\n        deferred.reject(error);\n      }\n    };\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    this.each(opts);\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Retrieve a single page of FlowRevisionInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function page\n   * @memberof Twilio.Studio.V2.FlowContext.FlowRevisionList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.pageToken] - PageToken provided by the API\n   * @param {number} [opts.pageNumber] -\n   *          Page Number, this value is simply for client state\n   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  FlowRevisionListInstance.page = function page(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n    var deferred = Q.defer();\n    var data = values.of({\n      'PageToken': opts.pageToken,\n      'Page': opts.pageNumber,\n      'PageSize': opts.pageSize\n    });\n\n    var promise = this._version.page({\n      uri: this._uri,\n      method: 'GET',\n      params: data\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new FlowRevisionPage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Retrieve a single target page of FlowRevisionInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function getPage\n   * @memberof Twilio.Studio.V2.FlowContext.FlowRevisionList#\n   *\n   * @param {string} [targetUrl] - API-generated URL for the requested results page\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  FlowRevisionListInstance.getPage = function getPage(targetUrl, callback) {\n    var deferred = Q.defer();\n\n    var promise = this._version._domain.twilio.request({\n      method: 'GET',\n      uri: targetUrl\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new FlowRevisionPage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Constructs a flow_revision\n   *\n   * @function get\n   * @memberof Twilio.Studio.V2.FlowContext.FlowRevisionList#\n   *\n   * @param {string} revision -\n   *          Specific Revision number or can be `LatestPublished` and `LatestRevision`\n   *\n   * @returns {Twilio.Studio.V2.FlowContext.FlowRevisionContext}\n   */\n\n  /* jshint ignore:end */\n\n\n  FlowRevisionListInstance.get = function get(revision) {\n    return new FlowRevisionContext(this._version, this._solution.sid, revision);\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Studio.V2.FlowContext.FlowRevisionList#\n   *\n   * @returns Object\n   */\n\n  /* jshint ignore:end */\n\n\n  FlowRevisionListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n\n  FlowRevisionListInstance[util.inspect.custom] = function inspect(depth, options) {\n    return util.inspect(this.toJSON(), options);\n  };\n\n  return FlowRevisionListInstance;\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the FlowRevisionPage\n *\n * @constructor Twilio.Studio.V2.FlowContext.FlowRevisionPage\n *\n * @param {V2} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {FlowRevisionSolution} solution - Path solution\n *\n * @returns FlowRevisionPage\n */\n\n/* jshint ignore:end */\n\n\nFlowRevisionPage = function FlowRevisionPage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n\n_.extend(FlowRevisionPage.prototype, Page.prototype);\n\nFlowRevisionPage.prototype.constructor = FlowRevisionPage;\n/* jshint ignore:start */\n\n/**\n * Build an instance of FlowRevisionInstance\n *\n * @function getInstance\n * @memberof Twilio.Studio.V2.FlowContext.FlowRevisionPage#\n *\n * @param {FlowRevisionPayload} payload - Payload response from the API\n *\n * @returns FlowRevisionInstance\n */\n\n/* jshint ignore:end */\n\nFlowRevisionPage.prototype.getInstance = function getInstance(payload) {\n  return new FlowRevisionInstance(this._version, payload, this._solution.sid);\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Studio.V2.FlowContext.FlowRevisionPage#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nFlowRevisionPage.prototype.toJSON = function toJSON() {\n  let clone = {};\n\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n\n  return clone;\n};\n\nFlowRevisionPage.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the FlowRevisionContext\n *\n * @constructor Twilio.Studio.V2.FlowContext.FlowRevisionInstance\n *\n * @property {string} sid - The unique string that identifies the resource\n * @property {string} accountSid - The SID of the Account that created the resource\n * @property {string} friendlyName -\n *          The string that you assigned to describe the Flow\n * @property {object} definition - JSON representation of flow definition\n * @property {flow_revision.status} status - The status of the Flow\n * @property {number} revision -\n *          The latest revision number of the Flow's definition\n * @property {string} commitMessage - Description of change made in the revision\n * @property {boolean} valid - Boolean if the flow definition is valid\n * @property {object} errors - List of error in the flow definition\n * @property {Date} dateCreated -\n *          The ISO 8601 date and time in GMT when the resource was created\n * @property {Date} dateUpdated -\n *          The ISO 8601 date and time in GMT when the resource was last updated\n * @property {string} url - The absolute URL of the resource\n *\n * @param {V2} version - Version of the resource\n * @param {FlowRevisionPayload} payload - The instance payload\n * @param {sid} sid - The unique string that identifies the resource\n * @param {string} revision -\n *          Specific Revision number or can be `LatestPublished` and `LatestRevision`\n */\n\n/* jshint ignore:end */\n\n\nFlowRevisionInstance = function FlowRevisionInstance(version, payload, sid, revision) {\n  this._version = version; // Marshaled Properties\n\n  this.sid = payload.sid; // jshint ignore:line\n\n  this.accountSid = payload.account_sid; // jshint ignore:line\n\n  this.friendlyName = payload.friendly_name; // jshint ignore:line\n\n  this.definition = payload.definition; // jshint ignore:line\n\n  this.status = payload.status; // jshint ignore:line\n\n  this.revision = deserialize.integer(payload.revision); // jshint ignore:line\n\n  this.commitMessage = payload.commit_message; // jshint ignore:line\n\n  this.valid = payload.valid; // jshint ignore:line\n\n  this.errors = payload.errors; // jshint ignore:line\n\n  this.dateCreated = deserialize.iso8601DateTime(payload.date_created); // jshint ignore:line\n\n  this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated); // jshint ignore:line\n\n  this.url = payload.url; // jshint ignore:line\n  // Context\n\n  this._context = undefined;\n  this._solution = {\n    sid: sid,\n    revision: revision || this.revision\n  };\n};\n\nObject.defineProperty(FlowRevisionInstance.prototype, '_proxy', {\n  get: function () {\n    if (!this._context) {\n      this._context = new FlowRevisionContext(this._version, this._solution.sid, this._solution.revision);\n    }\n\n    return this._context;\n  }\n});\n/* jshint ignore:start */\n\n/**\n * fetch a FlowRevisionInstance\n *\n * @function fetch\n * @memberof Twilio.Studio.V2.FlowContext.FlowRevisionInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed FlowRevisionInstance\n */\n\n/* jshint ignore:end */\n\nFlowRevisionInstance.prototype.fetch = function fetch(callback) {\n  return this._proxy.fetch(callback);\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Studio.V2.FlowContext.FlowRevisionInstance#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nFlowRevisionInstance.prototype.toJSON = function toJSON() {\n  let clone = {};\n\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n\n  return clone;\n};\n\nFlowRevisionInstance.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the FlowRevisionContext\n *\n * @constructor Twilio.Studio.V2.FlowContext.FlowRevisionContext\n *\n * @param {V2} version - Version of the resource\n * @param {sid} sid - The SID that identifies the resource to fetch\n * @param {string} revision -\n *          Specific Revision number or can be `LatestPublished` and `LatestRevision`\n */\n\n/* jshint ignore:end */\n\n\nFlowRevisionContext = function FlowRevisionContext(version, sid, revision) {\n  this._version = version; // Path Solution\n\n  this._solution = {\n    sid: sid,\n    revision: revision\n  };\n  this._uri = `/Flows/${sid}/Revisions/${revision}`;\n};\n/* jshint ignore:start */\n\n/**\n * fetch a FlowRevisionInstance\n *\n * @function fetch\n * @memberof Twilio.Studio.V2.FlowContext.FlowRevisionContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed FlowRevisionInstance\n */\n\n/* jshint ignore:end */\n\n\nFlowRevisionContext.prototype.fetch = function fetch(callback) {\n  var deferred = Q.defer();\n\n  var promise = this._version.fetch({\n    uri: this._uri,\n    method: 'GET'\n  });\n\n  promise = promise.then(function (payload) {\n    deferred.resolve(new FlowRevisionInstance(this._version, payload, this._solution.sid, this._solution.revision));\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Studio.V2.FlowContext.FlowRevisionContext#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nFlowRevisionContext.prototype.toJSON = function toJSON() {\n  return this._solution;\n};\n\nFlowRevisionContext.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\nmodule.exports = {\n  FlowRevisionList: FlowRevisionList,\n  FlowRevisionPage: FlowRevisionPage,\n  FlowRevisionInstance: FlowRevisionInstance,\n  FlowRevisionContext: FlowRevisionContext\n};","map":{"version":3,"names":["Q","require","_","util","Page","deserialize","values","FlowRevisionList","FlowRevisionPage","FlowRevisionInstance","FlowRevisionContext","version","sid","FlowRevisionListInstance","get","_version","_solution","_uri","each","opts","callback","isFunction","isUndefined","Error","done","currentPage","currentResource","limits","readLimits","limit","pageSize","onComplete","error","fetchNextPage","fn","promise","then","page","instances","instance","bind","nextPage","catch","merge","list","deferred","defer","allResources","resource","push","length","resolve","reject","nodeify","data","of","pageToken","pageNumber","uri","method","params","payload","getPage","targetUrl","_domain","twilio","request","revision","toJSON","inspect","custom","depth","options","response","solution","prototype","constructor","call","extend","getInstance","clone","forOwn","value","key","startsWith","accountSid","account_sid","friendlyName","friendly_name","definition","status","integer","commitMessage","commit_message","valid","errors","dateCreated","iso8601DateTime","date_created","dateUpdated","date_updated","url","_context","undefined","Object","defineProperty","fetch","_proxy","module","exports"],"sources":["/Users/hooniesun/rmit/fwp/assessment1/lan/node_modules/twilio/lib/rest/studio/v2/flow/flowRevision.js"],"sourcesContent":["'use strict';\n\n/* jshint ignore:start */\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n/* jshint ignore:end */\n\nvar Q = require('q');  /* jshint ignore:line */\nvar _ = require('lodash');  /* jshint ignore:line */\nvar util = require('util');  /* jshint ignore:line */\nvar Page = require('../../../../base/Page');  /* jshint ignore:line */\nvar deserialize = require(\n    '../../../../base/deserialize');  /* jshint ignore:line */\nvar values = require('../../../../base/values');  /* jshint ignore:line */\n\nvar FlowRevisionList;\nvar FlowRevisionPage;\nvar FlowRevisionInstance;\nvar FlowRevisionContext;\n\n/* jshint ignore:start */\n/**\n * Initialize the FlowRevisionList\n *\n * @constructor Twilio.Studio.V2.FlowContext.FlowRevisionList\n *\n * @param {Twilio.Studio.V2} version - Version of the resource\n * @param {string} sid - The unique string that identifies the resource\n */\n/* jshint ignore:end */\nFlowRevisionList = function FlowRevisionList(version, sid) {\n  /* jshint ignore:start */\n  /**\n   * @function revisions\n   * @memberof Twilio.Studio.V2.FlowContext#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Studio.V2.FlowContext.FlowRevisionContext}\n   */\n  /* jshint ignore:end */\n  function FlowRevisionListInstance(sid) {\n    return FlowRevisionListInstance.get(sid);\n  }\n\n  FlowRevisionListInstance._version = version;\n  // Path Solution\n  FlowRevisionListInstance._solution = {sid: sid};\n  FlowRevisionListInstance._uri = `/Flows/${sid}/Revisions`;\n  /* jshint ignore:start */\n  /**\n   * Streams FlowRevisionInstance records from the API.\n   *\n   * This operation lazily loads records as efficiently as possible until the limit\n   * is reached.\n   *\n   * The results are passed into the callback function, so this operation is memory\n   * efficient.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function each\n   * @memberof Twilio.Studio.V2.FlowContext.FlowRevisionList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         each() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no pageSize is defined but a limit is defined,\n   *         each() will attempt to read the limit with the most efficient\n   *         page size, i.e. min(limit, 1000)\n   * @param {Function} [opts.callback] -\n   *         Function to process each record. If this and a positional\n   *         callback are passed, this one will be used\n   * @param {Function} [opts.done] -\n   *          Function to be called upon completion of streaming\n   * @param {Function} [callback] - Function to process each record\n   */\n  /* jshint ignore:end */\n  FlowRevisionListInstance.each = function each(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    if (opts.callback) {\n      callback = opts.callback;\n    }\n    if (_.isUndefined(callback)) {\n      throw new Error('Callback function must be provided');\n    }\n\n    var done = false;\n    var currentPage = 1;\n    var currentResource = 0;\n    var limits = this._version.readLimits({\n      limit: opts.limit,\n      pageSize: opts.pageSize\n    });\n\n    function onComplete(error) {\n      done = true;\n      if (_.isFunction(opts.done)) {\n        opts.done(error);\n      }\n    }\n\n    function fetchNextPage(fn) {\n      var promise = fn();\n      if (_.isUndefined(promise)) {\n        onComplete();\n        return;\n      }\n\n      promise.then(function(page) {\n        _.each(page.instances, function(instance) {\n          if (done || (!_.isUndefined(opts.limit) && currentResource >= opts.limit)) {\n            done = true;\n            return false;\n          }\n\n          currentResource++;\n          callback(instance, onComplete);\n        });\n\n        if (!done) {\n          currentPage++;\n          fetchNextPage(_.bind(page.nextPage, page));\n        } else {\n          onComplete();\n        }\n      });\n\n      promise.catch(onComplete);\n    }\n\n    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Lists FlowRevisionInstance records from the API as a list.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function list\n   * @memberof Twilio.Studio.V2.FlowContext.FlowRevisionList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         list() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no page_size is defined but a limit is defined,\n   *         list() will attempt to read the limit with the most\n   *         efficient page size, i.e. min(limit, 1000)\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  FlowRevisionListInstance.list = function list(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    var deferred = Q.defer();\n    var allResources = [];\n    opts.callback = function(resource, done) {\n      allResources.push(resource);\n\n      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {\n        done();\n      }\n    };\n\n    opts.done = function(error) {\n      if (_.isUndefined(error)) {\n        deferred.resolve(allResources);\n      } else {\n        deferred.reject(error);\n      }\n    };\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    this.each(opts);\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single page of FlowRevisionInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function page\n   * @memberof Twilio.Studio.V2.FlowContext.FlowRevisionList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.pageToken] - PageToken provided by the API\n   * @param {number} [opts.pageNumber] -\n   *          Page Number, this value is simply for client state\n   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  FlowRevisionListInstance.page = function page(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n\n    var deferred = Q.defer();\n    var data = values.of({\n      'PageToken': opts.pageToken,\n      'Page': opts.pageNumber,\n      'PageSize': opts.pageSize\n    });\n\n    var promise = this._version.page({uri: this._uri, method: 'GET', params: data});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new FlowRevisionPage(this._version, payload, this._solution));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single target page of FlowRevisionInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function getPage\n   * @memberof Twilio.Studio.V2.FlowContext.FlowRevisionList#\n   *\n   * @param {string} [targetUrl] - API-generated URL for the requested results page\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  FlowRevisionListInstance.getPage = function getPage(targetUrl, callback) {\n    var deferred = Q.defer();\n\n    var promise = this._version._domain.twilio.request({method: 'GET', uri: targetUrl});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new FlowRevisionPage(this._version, payload, this._solution));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Constructs a flow_revision\n   *\n   * @function get\n   * @memberof Twilio.Studio.V2.FlowContext.FlowRevisionList#\n   *\n   * @param {string} revision -\n   *          Specific Revision number or can be `LatestPublished` and `LatestRevision`\n   *\n   * @returns {Twilio.Studio.V2.FlowContext.FlowRevisionContext}\n   */\n  /* jshint ignore:end */\n  FlowRevisionListInstance.get = function get(revision) {\n    return new FlowRevisionContext(this._version, this._solution.sid, revision);\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Studio.V2.FlowContext.FlowRevisionList#\n   *\n   * @returns Object\n   */\n  /* jshint ignore:end */\n  FlowRevisionListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n\n  FlowRevisionListInstance[util.inspect.custom] = function inspect(depth, options)\n      {\n    return util.inspect(this.toJSON(), options);\n  };\n\n  return FlowRevisionListInstance;\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the FlowRevisionPage\n *\n * @constructor Twilio.Studio.V2.FlowContext.FlowRevisionPage\n *\n * @param {V2} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {FlowRevisionSolution} solution - Path solution\n *\n * @returns FlowRevisionPage\n */\n/* jshint ignore:end */\nFlowRevisionPage = function FlowRevisionPage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n\n_.extend(FlowRevisionPage.prototype, Page.prototype);\nFlowRevisionPage.prototype.constructor = FlowRevisionPage;\n\n/* jshint ignore:start */\n/**\n * Build an instance of FlowRevisionInstance\n *\n * @function getInstance\n * @memberof Twilio.Studio.V2.FlowContext.FlowRevisionPage#\n *\n * @param {FlowRevisionPayload} payload - Payload response from the API\n *\n * @returns FlowRevisionInstance\n */\n/* jshint ignore:end */\nFlowRevisionPage.prototype.getInstance = function getInstance(payload) {\n  return new FlowRevisionInstance(this._version, payload, this._solution.sid);\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Studio.V2.FlowContext.FlowRevisionPage#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nFlowRevisionPage.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function(value, key) {\n    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\n\nFlowRevisionPage.prototype[util.inspect.custom] = function inspect(depth,\n    options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the FlowRevisionContext\n *\n * @constructor Twilio.Studio.V2.FlowContext.FlowRevisionInstance\n *\n * @property {string} sid - The unique string that identifies the resource\n * @property {string} accountSid - The SID of the Account that created the resource\n * @property {string} friendlyName -\n *          The string that you assigned to describe the Flow\n * @property {object} definition - JSON representation of flow definition\n * @property {flow_revision.status} status - The status of the Flow\n * @property {number} revision -\n *          The latest revision number of the Flow's definition\n * @property {string} commitMessage - Description of change made in the revision\n * @property {boolean} valid - Boolean if the flow definition is valid\n * @property {object} errors - List of error in the flow definition\n * @property {Date} dateCreated -\n *          The ISO 8601 date and time in GMT when the resource was created\n * @property {Date} dateUpdated -\n *          The ISO 8601 date and time in GMT when the resource was last updated\n * @property {string} url - The absolute URL of the resource\n *\n * @param {V2} version - Version of the resource\n * @param {FlowRevisionPayload} payload - The instance payload\n * @param {sid} sid - The unique string that identifies the resource\n * @param {string} revision -\n *          Specific Revision number or can be `LatestPublished` and `LatestRevision`\n */\n/* jshint ignore:end */\nFlowRevisionInstance = function FlowRevisionInstance(version, payload, sid,\n                                                      revision) {\n  this._version = version;\n\n  // Marshaled Properties\n  this.sid = payload.sid; // jshint ignore:line\n  this.accountSid = payload.account_sid; // jshint ignore:line\n  this.friendlyName = payload.friendly_name; // jshint ignore:line\n  this.definition = payload.definition; // jshint ignore:line\n  this.status = payload.status; // jshint ignore:line\n  this.revision = deserialize.integer(payload.revision); // jshint ignore:line\n  this.commitMessage = payload.commit_message; // jshint ignore:line\n  this.valid = payload.valid; // jshint ignore:line\n  this.errors = payload.errors; // jshint ignore:line\n  this.dateCreated = deserialize.iso8601DateTime(payload.date_created); // jshint ignore:line\n  this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated); // jshint ignore:line\n  this.url = payload.url; // jshint ignore:line\n\n  // Context\n  this._context = undefined;\n  this._solution = {sid: sid, revision: revision || this.revision, };\n};\n\nObject.defineProperty(FlowRevisionInstance.prototype,\n  '_proxy', {\n    get: function() {\n      if (!this._context) {\n        this._context = new FlowRevisionContext(this._version, this._solution.sid, this._solution.revision);\n      }\n\n      return this._context;\n    }\n});\n\n/* jshint ignore:start */\n/**\n * fetch a FlowRevisionInstance\n *\n * @function fetch\n * @memberof Twilio.Studio.V2.FlowContext.FlowRevisionInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed FlowRevisionInstance\n */\n/* jshint ignore:end */\nFlowRevisionInstance.prototype.fetch = function fetch(callback) {\n  return this._proxy.fetch(callback);\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Studio.V2.FlowContext.FlowRevisionInstance#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nFlowRevisionInstance.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function(value, key) {\n    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\n\nFlowRevisionInstance.prototype[util.inspect.custom] = function inspect(depth,\n    options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the FlowRevisionContext\n *\n * @constructor Twilio.Studio.V2.FlowContext.FlowRevisionContext\n *\n * @param {V2} version - Version of the resource\n * @param {sid} sid - The SID that identifies the resource to fetch\n * @param {string} revision -\n *          Specific Revision number or can be `LatestPublished` and `LatestRevision`\n */\n/* jshint ignore:end */\nFlowRevisionContext = function FlowRevisionContext(version, sid, revision) {\n  this._version = version;\n\n  // Path Solution\n  this._solution = {sid: sid, revision: revision, };\n  this._uri = `/Flows/${sid}/Revisions/${revision}`;\n};\n\n/* jshint ignore:start */\n/**\n * fetch a FlowRevisionInstance\n *\n * @function fetch\n * @memberof Twilio.Studio.V2.FlowContext.FlowRevisionContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed FlowRevisionInstance\n */\n/* jshint ignore:end */\nFlowRevisionContext.prototype.fetch = function fetch(callback) {\n  var deferred = Q.defer();\n  var promise = this._version.fetch({uri: this._uri, method: 'GET'});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(new FlowRevisionInstance(\n      this._version,\n      payload,\n      this._solution.sid,\n      this._solution.revision\n    ));\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Studio.V2.FlowContext.FlowRevisionContext#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nFlowRevisionContext.prototype.toJSON = function toJSON() {\n  return this._solution;\n};\n\nFlowRevisionContext.prototype[util.inspect.custom] = function inspect(depth,\n    options) {\n  return util.inspect(this.toJSON(), options);\n};\n\nmodule.exports = {\n  FlowRevisionList: FlowRevisionList,\n  FlowRevisionPage: FlowRevisionPage,\n  FlowRevisionInstance: FlowRevisionInstance,\n  FlowRevisionContext: FlowRevisionContext\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}