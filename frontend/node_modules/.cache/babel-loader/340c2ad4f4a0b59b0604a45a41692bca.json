{"ast":null,"code":"var _jsxFileName = \"/Users/hooniesun/rmit/fwp/assessment1/lan/src/UI/SignUpForm.js\",\n    _s = $RefreshSig$();\n\nimport { useState } from \"react\";\nimport { Container, Button, Form, Row, Col } from \"react-bootstrap\";\nimport { useOutletContext, useNavigate } from \"react-router-dom\";\nimport formatDate from \"../formatDate\";\nimport MFA from \"./MFA\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function SignUpForm() {\n  _s();\n\n  const [isPasswordValid, setIsPasswordValid] = useState(true);\n  const [isPasswordIdentical, setIsPasswordIdentical] = useState(true);\n  const [isEmailValid, setIsEmailValid] = useState(true);\n  const [isPasswordVisible, setIsPasswordVisble] = useState(false);\n  const [isMFAVisible, setIsMFAVisible] = useState(false);\n  const [user, setUser] = useState({});\n  const [, dispatchUser, users] = useOutletContext();\n  const navigate = useNavigate(); // a list of avatars from whcih to assign to a user\n\n  const avatars = [\"initials\", \"bottts\", \"avataaars\", \"jdenticon\", \"gridy\", \"micah\"];\n  /* validation logic */\n\n  function validateEmail(email) {\n    return !(email in users);\n  }\n\n  function validatePassword(password) {\n    /* A regex pattern that matches invalid passwords\n        - Anything with less than eight characters OR\n        - Anything with no numbers OR\n        - Anything with no uppercase letter OR\n        - Anything with no lowercase letter OR\n        - Anything with no special characters\n    */\n    const regex = \"^(.{0,7}|[^0-9]*|[^A-Z]*|[^a-z]*|[a-zA-Z0-9]*)$\"; // If there are any matches, the password is invalid\n\n    return password.match(regex) ? false : true;\n  }\n\n  function confirmPassword(password) {\n    return password === document.querySelector(\"#formSignupPassword\").value;\n  }\n  /* validation logic */\n  // timeoutIds for real-time (1s delay) validation handlers\n\n\n  let validatePasswordTimeoutId;\n  let confirmPasswordTimeoutId;\n  let validateEmailTimeoutId; // The 3 handlers below only validate after timeDelayed microseconds\n\n  const timeDelayed = 1000;\n\n  const validateEmailHandler = event => {\n    clearTimeout(validateEmailTimeoutId);\n    validateEmailTimeoutId = setTimeout(() => {\n      setIsEmailValid(validateEmail(event.target.value));\n    }, timeDelayed);\n  };\n\n  const validatePasswordHandler = event => {\n    clearTimeout(validatePasswordTimeoutId);\n    validatePasswordTimeoutId = setTimeout(() => {\n      setIsPasswordValid(validatePassword(event.target.value));\n    }, timeDelayed);\n  };\n\n  const confirmPasswordHandler = event => {\n    clearTimeout(confirmPasswordTimeoutId);\n    confirmPasswordTimeoutId = setTimeout(() => {\n      setIsPasswordIdentical(confirmPassword(event.target.value));\n    }, timeDelayed);\n  };\n\n  const togglePasswordVisability = () => {\n    setIsPasswordVisble(!isPasswordVisible);\n  };\n\n  const submitHandler = event => {\n    event.preventDefault();\n    let email = event.target[2].value;\n    let password = event.target[3].value;\n    let confirmedPassword = event.target[4].value; // Make sure to check whether all the entries are valid once more\n\n    if (validateEmail(email) && validatePassword(password) && confirmPassword(confirmedPassword)) {\n      setUser({ ...user,\n        firstName: event.target[0].value,\n        lastName: event.target[1].value,\n        email: email,\n        password: confirmedPassword,\n        joinedDate: formatDate(),\n        avatarsrc: `https://avatars.dicebear.com/api/${avatars[Math.floor(Math.random() * avatars.length)]}/${email}.svg`,\n        posts: []\n      });\n      setIsMFAVisible(true);\n    } else {\n      // If not valid, indicate to the user what inputs are not yet validated.\n      setIsEmailValid(validateEmail(email));\n      setIsPasswordValid(validatePassword(password));\n      setIsPasswordIdentical(confirmPassword(confirmedPassword));\n    }\n  }; // The function gets called within MFA if the user has successfully scanned the QR code and typed in the OTP\n\n\n  const signUpAuthenticatedUser = secret => {\n    dispatchUser({\n      type: \"SIGNUP_USER\",\n      payload: { ...user,\n        secret: secret\n      }\n    });\n    navigate(\"/profile\");\n  };\n\n  return /*#__PURE__*/_jsxDEV(Container, {\n    children: [/*#__PURE__*/_jsxDEV(MFA, {\n      show: isMFAVisible,\n      setShow: setIsMFAVisible,\n      hideQRcode: false,\n      onSuccess: signUpAuthenticatedUser,\n      user: user\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Row, {\n      children: /*#__PURE__*/_jsxDEV(Col, {\n        lg: {\n          span: 4,\n          offset: 4\n        },\n        children: /*#__PURE__*/_jsxDEV(Form, {\n          className: \"my-5\",\n          onSubmit: submitHandler,\n          children: [/*#__PURE__*/_jsxDEV(\"header\", {\n            className: \"mb-5\",\n            children: /*#__PURE__*/_jsxDEV(\"h1\", {\n              className: \"text-center\",\n              children: \"Sign up\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 141,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 140,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n            className: \"mb-4\",\n            controlId: \"formSignupFirstName\",\n            children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n              visuallyHidden: \"true\",\n              children: \"First name\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 144,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n              type: \"text\",\n              required: true,\n              placeholder: \"First name\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 145,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 143,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n            className: \"mb-4\",\n            controlId: \"formSignupLastName\",\n            children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n              visuallyHidden: \"true\",\n              children: \"Last name\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 152,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n              type: \"text\",\n              required: true,\n              placeholder: \"Last name\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 153,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 151,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n            className: \"mb-5\",\n            controlId: \"formSignupEmail\",\n            children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n              visuallyHidden: true,\n              children: \"Email\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 160,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n              type: \"email\",\n              required: true,\n              placeholder: \"Email\",\n              onChange: validateEmailHandler,\n              isInvalid: !isEmailValid\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 161,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Form.Control.Feedback, {\n              type: \"invalid\",\n              children: \"The email already exists\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 168,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 159,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n            className: \"mb-4\",\n            controlId: \"formSignupPassword\",\n            children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n              visuallyHidden: true,\n              children: \"Password\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 174,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n              type: isPasswordVisible ? \"text\" : \"password\",\n              required: true,\n              placeholder: \"Password\",\n              onChange: validatePasswordHandler,\n              isInvalid: !isPasswordValid\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 175,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Form.Control.Feedback, {\n              type: \"invalid\",\n              children: \"Use 8 or more character with a mix of lowercase and uppercase letters, numbers & symbols\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 182,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 173,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n            className: \"mb-2\",\n            controlId: \"formSignupPasswordConfirm\",\n            children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n              visuallyHidden: \"true\",\n              children: \"Confirm Password\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 189,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n              type: isPasswordVisible ? \"text\" : \"password\",\n              required: true,\n              placeholder: \"Confirm\",\n              isInvalid: !isPasswordIdentical,\n              onChange: confirmPasswordHandler\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 190,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Form.Control.Feedback, {\n              type: \"invalid\",\n              children: \"Passwords are not identical\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 197,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Form.Text, {\n              className: \"text-muted mt-1\",\n              children: \"Use 8 or more character with a mix of lowercase and uppercase letters, numbers & symbols\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 200,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 188,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"d-flex justify-content-between\",\n            children: [/*#__PURE__*/_jsxDEV(Form.Check, {\n              type: \"checkbox\",\n              label: \"Show password\",\n              onClick: togglePasswordVisability\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 206,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Button, {\n              variant: \"primary\",\n              type: \"submit\",\n              children: \"Sign Up\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 211,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 205,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 139,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 129,\n    columnNumber: 5\n  }, this);\n}\n\n_s(SignUpForm, \"X/ejM2W2vcUE87meWMm0L4kULwk=\", false, function () {\n  return [useOutletContext, useNavigate];\n});\n\n_c = SignUpForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"SignUpForm\");","map":{"version":3,"names":["useState","Container","Button","Form","Row","Col","useOutletContext","useNavigate","formatDate","MFA","SignUpForm","isPasswordValid","setIsPasswordValid","isPasswordIdentical","setIsPasswordIdentical","isEmailValid","setIsEmailValid","isPasswordVisible","setIsPasswordVisble","isMFAVisible","setIsMFAVisible","user","setUser","dispatchUser","users","navigate","avatars","validateEmail","email","validatePassword","password","regex","match","confirmPassword","document","querySelector","value","validatePasswordTimeoutId","confirmPasswordTimeoutId","validateEmailTimeoutId","timeDelayed","validateEmailHandler","event","clearTimeout","setTimeout","target","validatePasswordHandler","confirmPasswordHandler","togglePasswordVisability","submitHandler","preventDefault","confirmedPassword","firstName","lastName","joinedDate","avatarsrc","Math","floor","random","length","posts","signUpAuthenticatedUser","secret","type","payload","span","offset"],"sources":["/Users/hooniesun/rmit/fwp/assessment1/lan/src/UI/SignUpForm.js"],"sourcesContent":["import { useState } from \"react\";\nimport { Container, Button, Form, Row, Col } from \"react-bootstrap\";\nimport { useOutletContext, useNavigate } from \"react-router-dom\";\nimport formatDate from \"../formatDate\";\nimport MFA from \"./MFA\";\n\nexport default function SignUpForm() {\n  const [isPasswordValid, setIsPasswordValid] = useState(true);\n  const [isPasswordIdentical, setIsPasswordIdentical] = useState(true);\n  const [isEmailValid, setIsEmailValid] = useState(true);\n\n  const [isPasswordVisible, setIsPasswordVisble] = useState(false);\n  const [isMFAVisible, setIsMFAVisible] = useState(false);\n\n  const [user, setUser] = useState({});\n\n  const [, dispatchUser, users] = useOutletContext();\n  const navigate = useNavigate();\n\n  // a list of avatars from whcih to assign to a user\n  const avatars = [\n    \"initials\",\n    \"bottts\",\n    \"avataaars\",\n    \"jdenticon\",\n    \"gridy\",\n    \"micah\",\n  ];\n\n  /* validation logic */\n  function validateEmail(email) {\n    return !(email in users);\n  }\n\n  function validatePassword(password) {\n    /* A regex pattern that matches invalid passwords\n        - Anything with less than eight characters OR\n        - Anything with no numbers OR\n        - Anything with no uppercase letter OR\n        - Anything with no lowercase letter OR\n        - Anything with no special characters\n    */\n    const regex = \"^(.{0,7}|[^0-9]*|[^A-Z]*|[^a-z]*|[a-zA-Z0-9]*)$\";\n    // If there are any matches, the password is invalid\n    return password.match(regex) ? false : true;\n  }\n\n  function confirmPassword(password) {\n    return password === document.querySelector(\"#formSignupPassword\").value;\n  }\n  /* validation logic */\n\n  // timeoutIds for real-time (1s delay) validation handlers\n  let validatePasswordTimeoutId;\n  let confirmPasswordTimeoutId;\n  let validateEmailTimeoutId;\n\n  // The 3 handlers below only validate after timeDelayed microseconds\n  const timeDelayed = 1000;\n  const validateEmailHandler = (event) => {\n    clearTimeout(validateEmailTimeoutId);\n    validateEmailTimeoutId = setTimeout(() => {\n      setIsEmailValid(validateEmail(event.target.value));\n    }, timeDelayed);\n  };\n\n  const validatePasswordHandler = (event) => {\n    clearTimeout(validatePasswordTimeoutId);\n    validatePasswordTimeoutId = setTimeout(() => {\n      setIsPasswordValid(validatePassword(event.target.value));\n    }, timeDelayed);\n  };\n\n  const confirmPasswordHandler = (event) => {\n    clearTimeout(confirmPasswordTimeoutId);\n    confirmPasswordTimeoutId = setTimeout(() => {\n      setIsPasswordIdentical(confirmPassword(event.target.value));\n    }, timeDelayed);\n  };\n\n  const togglePasswordVisability = () => {\n    setIsPasswordVisble(!isPasswordVisible);\n  };\n\n  const submitHandler = (event) => {\n    event.preventDefault();\n\n    let email = event.target[2].value;\n    let password = event.target[3].value;\n    let confirmedPassword = event.target[4].value;\n\n    // Make sure to check whether all the entries are valid once more\n    if (\n      validateEmail(email) &&\n      validatePassword(password) &&\n      confirmPassword(confirmedPassword)\n    ) {\n      setUser({\n        ...user,\n        firstName: event.target[0].value,\n        lastName: event.target[1].value,\n        email: email,\n        password: confirmedPassword,\n        joinedDate: formatDate(),\n        avatarsrc: `https://avatars.dicebear.com/api/${\n          avatars[Math.floor(Math.random() * avatars.length)]\n        }/${email}.svg`,\n        posts: [],\n      });\n      setIsMFAVisible(true);\n    } else {\n      // If not valid, indicate to the user what inputs are not yet validated.\n      setIsEmailValid(validateEmail(email));\n      setIsPasswordValid(validatePassword(password));\n      setIsPasswordIdentical(confirmPassword(confirmedPassword));\n    }\n  };\n\n  // The function gets called within MFA if the user has successfully scanned the QR code and typed in the OTP\n  const signUpAuthenticatedUser = (secret) => {\n    dispatchUser({\n      type: \"SIGNUP_USER\",\n      payload: { ...user, secret: secret },\n    });\n    navigate(\"/profile\");\n  };\n\n  return (\n    <Container>\n      <MFA\n        show={isMFAVisible}\n        setShow={setIsMFAVisible}\n        hideQRcode={false}\n        onSuccess={signUpAuthenticatedUser}\n        user={user}\n      ></MFA>\n      <Row>\n        <Col lg={{ span: 4, offset: 4 }}>\n          <Form className=\"my-5\" onSubmit={submitHandler}>\n            <header className=\"mb-5\">\n              <h1 className=\"text-center\">Sign up</h1>\n            </header>\n            <Form.Group className=\"mb-4\" controlId=\"formSignupFirstName\">\n              <Form.Label visuallyHidden=\"true\">First name</Form.Label>\n              <Form.Control\n                type=\"text\"\n                required\n                placeholder=\"First name\"\n              ></Form.Control>\n            </Form.Group>\n            <Form.Group className=\"mb-4\" controlId=\"formSignupLastName\">\n              <Form.Label visuallyHidden=\"true\">Last name</Form.Label>\n              <Form.Control\n                type=\"text\"\n                required\n                placeholder=\"Last name\"\n              ></Form.Control>\n            </Form.Group>\n            <Form.Group className=\"mb-5\" controlId=\"formSignupEmail\">\n              <Form.Label visuallyHidden>Email</Form.Label>\n              <Form.Control\n                type=\"email\"\n                required\n                placeholder=\"Email\"\n                onChange={validateEmailHandler}\n                isInvalid={!isEmailValid}\n              />\n              <Form.Control.Feedback type=\"invalid\">\n                The email already exists\n              </Form.Control.Feedback>\n            </Form.Group>\n\n            <Form.Group className=\"mb-4\" controlId=\"formSignupPassword\">\n              <Form.Label visuallyHidden>Password</Form.Label>\n              <Form.Control\n                type={isPasswordVisible ? \"text\" : \"password\"}\n                required\n                placeholder=\"Password\"\n                onChange={validatePasswordHandler}\n                isInvalid={!isPasswordValid}\n              />\n              <Form.Control.Feedback type=\"invalid\">\n                Use 8 or more character with a mix of lowercase and uppercase\n                letters, numbers & symbols\n              </Form.Control.Feedback>\n            </Form.Group>\n\n            <Form.Group className=\"mb-2\" controlId=\"formSignupPasswordConfirm\">\n              <Form.Label visuallyHidden=\"true\">Confirm Password</Form.Label>\n              <Form.Control\n                type={isPasswordVisible ? \"text\" : \"password\"}\n                required\n                placeholder=\"Confirm\"\n                isInvalid={!isPasswordIdentical}\n                onChange={confirmPasswordHandler}\n              />\n              <Form.Control.Feedback type=\"invalid\">\n                Passwords are not identical\n              </Form.Control.Feedback>\n              <Form.Text className=\"text-muted mt-1\">\n                Use 8 or more character with a mix of lowercase and uppercase\n                letters, numbers & symbols\n              </Form.Text>\n            </Form.Group>\n            <div className=\"d-flex justify-content-between\">\n              <Form.Check\n                type=\"checkbox\"\n                label=\"Show password\"\n                onClick={togglePasswordVisability}\n              />\n              <Button variant=\"primary\" type=\"submit\">\n                Sign Up\n              </Button>\n            </div>\n          </Form>\n        </Col>\n      </Row>\n    </Container>\n  );\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}