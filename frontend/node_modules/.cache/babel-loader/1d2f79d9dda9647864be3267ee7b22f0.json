{"ast":null,"code":"'use strict';\n/* jshint ignore:start */\n\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n\n/* jshint ignore:end */\n\nvar Q = require('q');\n/* jshint ignore:line */\n\n\nvar _ = require('lodash');\n/* jshint ignore:line */\n\n\nvar util = require('util');\n/* jshint ignore:line */\n\n\nvar Page = require('../../../../../base/Page');\n/* jshint ignore:line */\n\n\nvar deserialize = require('../../../../../base/deserialize');\n/* jshint ignore:line */\n\n\nvar serialize = require('../../../../../base/serialize');\n/* jshint ignore:line */\n\n\nvar values = require('../../../../../base/values');\n/* jshint ignore:line */\n\n\nvar UserBindingList;\nvar UserBindingPage;\nvar UserBindingInstance;\nvar UserBindingContext;\n/* jshint ignore:start */\n\n/**\n * Initialize the UserBindingList\n *\n * @constructor Twilio.Chat.V2.ServiceContext.UserContext.UserBindingList\n *\n * @param {Twilio.Chat.V2} version - Version of the resource\n * @param {string} serviceSid -\n *          The SID of the Service that the resource is associated with\n * @param {string} userSid - The SID of the User with the binding\n */\n\n/* jshint ignore:end */\n\nUserBindingList = function UserBindingList(version, serviceSid, userSid) {\n  /* jshint ignore:start */\n\n  /**\n   * @function userBindings\n   * @memberof Twilio.Chat.V2.ServiceContext.UserContext#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Chat.V2.ServiceContext.UserContext.UserBindingContext}\n   */\n\n  /* jshint ignore:end */\n  function UserBindingListInstance(sid) {\n    return UserBindingListInstance.get(sid);\n  }\n\n  UserBindingListInstance._version = version; // Path Solution\n\n  UserBindingListInstance._solution = {\n    serviceSid: serviceSid,\n    userSid: userSid\n  };\n  UserBindingListInstance._uri = `/Services/${serviceSid}/Users/${userSid}/Bindings`;\n  /* jshint ignore:start */\n\n  /**\n   * Streams UserBindingInstance records from the API.\n   *\n   * This operation lazily loads records as efficiently as possible until the limit\n   * is reached.\n   *\n   * The results are passed into the callback function, so this operation is memory\n   * efficient.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function each\n   * @memberof Twilio.Chat.V2.ServiceContext.UserContext.UserBindingList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {user_binding.binding_type|list} [opts.bindingType] -\n   *          The push technology used by the User Binding resources to read\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         each() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no pageSize is defined but a limit is defined,\n   *         each() will attempt to read the limit with the most efficient\n   *         page size, i.e. min(limit, 1000)\n   * @param {Function} [opts.callback] -\n   *         Function to process each record. If this and a positional\n   *         callback are passed, this one will be used\n   * @param {Function} [opts.done] -\n   *          Function to be called upon completion of streaming\n   * @param {Function} [callback] - Function to process each record\n   */\n\n  /* jshint ignore:end */\n\n  UserBindingListInstance.each = function each(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n\n    if (opts.callback) {\n      callback = opts.callback;\n    }\n\n    if (_.isUndefined(callback)) {\n      throw new Error('Callback function must be provided');\n    }\n\n    var done = false;\n    var currentPage = 1;\n    var currentResource = 0;\n\n    var limits = this._version.readLimits({\n      limit: opts.limit,\n      pageSize: opts.pageSize\n    });\n\n    function onComplete(error) {\n      done = true;\n\n      if (_.isFunction(opts.done)) {\n        opts.done(error);\n      }\n    }\n\n    function fetchNextPage(fn) {\n      var promise = fn();\n\n      if (_.isUndefined(promise)) {\n        onComplete();\n        return;\n      }\n\n      promise.then(function (page) {\n        _.each(page.instances, function (instance) {\n          if (done || !_.isUndefined(opts.limit) && currentResource >= opts.limit) {\n            done = true;\n            return false;\n          }\n\n          currentResource++;\n          callback(instance, onComplete);\n        });\n\n        if (!done) {\n          currentPage++;\n          fetchNextPage(_.bind(page.nextPage, page));\n        } else {\n          onComplete();\n        }\n      });\n      promise.catch(onComplete);\n    }\n\n    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Lists UserBindingInstance records from the API as a list.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function list\n   * @memberof Twilio.Chat.V2.ServiceContext.UserContext.UserBindingList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {user_binding.binding_type|list} [opts.bindingType] -\n   *          The push technology used by the User Binding resources to read\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         list() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no page_size is defined but a limit is defined,\n   *         list() will attempt to read the limit with the most\n   *         efficient page size, i.e. min(limit, 1000)\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  UserBindingListInstance.list = function list(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n    var deferred = Q.defer();\n    var allResources = [];\n\n    opts.callback = function (resource, done) {\n      allResources.push(resource);\n\n      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {\n        done();\n      }\n    };\n\n    opts.done = function (error) {\n      if (_.isUndefined(error)) {\n        deferred.resolve(allResources);\n      } else {\n        deferred.reject(error);\n      }\n    };\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    this.each(opts);\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Retrieve a single page of UserBindingInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function page\n   * @memberof Twilio.Chat.V2.ServiceContext.UserContext.UserBindingList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {user_binding.binding_type|list} [opts.bindingType] -\n   *          The push technology used by the User Binding resources to read\n   * @param {string} [opts.pageToken] - PageToken provided by the API\n   * @param {number} [opts.pageNumber] -\n   *          Page Number, this value is simply for client state\n   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  UserBindingListInstance.page = function page(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n    var deferred = Q.defer();\n    var data = values.of({\n      'BindingType': serialize.map(_.get(opts, 'bindingType'), function (e) {\n        return e;\n      }),\n      'PageToken': opts.pageToken,\n      'Page': opts.pageNumber,\n      'PageSize': opts.pageSize\n    });\n\n    var promise = this._version.page({\n      uri: this._uri,\n      method: 'GET',\n      params: data\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new UserBindingPage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Retrieve a single target page of UserBindingInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function getPage\n   * @memberof Twilio.Chat.V2.ServiceContext.UserContext.UserBindingList#\n   *\n   * @param {string} [targetUrl] - API-generated URL for the requested results page\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  UserBindingListInstance.getPage = function getPage(targetUrl, callback) {\n    var deferred = Q.defer();\n\n    var promise = this._version._domain.twilio.request({\n      method: 'GET',\n      uri: targetUrl\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new UserBindingPage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Constructs a user_binding\n   *\n   * @function get\n   * @memberof Twilio.Chat.V2.ServiceContext.UserContext.UserBindingList#\n   *\n   * @param {string} sid - The SID of the User Binding resource to fetch\n   *\n   * @returns {Twilio.Chat.V2.ServiceContext.UserContext.UserBindingContext}\n   */\n\n  /* jshint ignore:end */\n\n\n  UserBindingListInstance.get = function get(sid) {\n    return new UserBindingContext(this._version, this._solution.serviceSid, this._solution.userSid, sid);\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Chat.V2.ServiceContext.UserContext.UserBindingList#\n   *\n   * @returns Object\n   */\n\n  /* jshint ignore:end */\n\n\n  UserBindingListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n\n  UserBindingListInstance[util.inspect.custom] = function inspect(depth, options) {\n    return util.inspect(this.toJSON(), options);\n  };\n\n  return UserBindingListInstance;\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the UserBindingPage\n *\n * @constructor Twilio.Chat.V2.ServiceContext.UserContext.UserBindingPage\n *\n * @param {V2} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {UserBindingSolution} solution - Path solution\n *\n * @returns UserBindingPage\n */\n\n/* jshint ignore:end */\n\n\nUserBindingPage = function UserBindingPage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n\n_.extend(UserBindingPage.prototype, Page.prototype);\n\nUserBindingPage.prototype.constructor = UserBindingPage;\n/* jshint ignore:start */\n\n/**\n * Build an instance of UserBindingInstance\n *\n * @function getInstance\n * @memberof Twilio.Chat.V2.ServiceContext.UserContext.UserBindingPage#\n *\n * @param {UserBindingPayload} payload - Payload response from the API\n *\n * @returns UserBindingInstance\n */\n\n/* jshint ignore:end */\n\nUserBindingPage.prototype.getInstance = function getInstance(payload) {\n  return new UserBindingInstance(this._version, payload, this._solution.serviceSid, this._solution.userSid);\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Chat.V2.ServiceContext.UserContext.UserBindingPage#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nUserBindingPage.prototype.toJSON = function toJSON() {\n  let clone = {};\n\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n\n  return clone;\n};\n\nUserBindingPage.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the UserBindingContext\n *\n * @constructor Twilio.Chat.V2.ServiceContext.UserContext.UserBindingInstance\n *\n * @property {string} sid - The unique string that identifies the resource\n * @property {string} accountSid - The SID of the Account that created the resource\n * @property {string} serviceSid -\n *          The SID of the Service that the resource is associated with\n * @property {Date} dateCreated -\n *          The ISO 8601 date and time in GMT when the resource was created\n * @property {Date} dateUpdated -\n *          The ISO 8601 date and time in GMT when the resource was last updated\n * @property {string} endpoint -\n *          The unique endpoint identifier for the User Binding\n * @property {string} identity - The string that identifies the resource's User\n * @property {string} userSid - The SID of the User with the binding\n * @property {string} credentialSid - The SID of the Credential for the binding\n * @property {user_binding.binding_type} bindingType -\n *          The push technology to use for the binding\n * @property {string} messageTypes -\n *          The Programmable Chat message types the binding is subscribed to\n * @property {string} url - The absolute URL of the User Binding resource\n *\n * @param {V2} version - Version of the resource\n * @param {UserBindingPayload} payload - The instance payload\n * @param {sid} serviceSid -\n *          The SID of the Service that the resource is associated with\n * @param {sid} userSid - The SID of the User with the binding\n * @param {sid} sid - The SID of the User Binding resource to fetch\n */\n\n/* jshint ignore:end */\n\n\nUserBindingInstance = function UserBindingInstance(version, payload, serviceSid, userSid, sid) {\n  this._version = version; // Marshaled Properties\n\n  this.sid = payload.sid; // jshint ignore:line\n\n  this.accountSid = payload.account_sid; // jshint ignore:line\n\n  this.serviceSid = payload.service_sid; // jshint ignore:line\n\n  this.dateCreated = deserialize.iso8601DateTime(payload.date_created); // jshint ignore:line\n\n  this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated); // jshint ignore:line\n\n  this.endpoint = payload.endpoint; // jshint ignore:line\n\n  this.identity = payload.identity; // jshint ignore:line\n\n  this.userSid = payload.user_sid; // jshint ignore:line\n\n  this.credentialSid = payload.credential_sid; // jshint ignore:line\n\n  this.bindingType = payload.binding_type; // jshint ignore:line\n\n  this.messageTypes = payload.message_types; // jshint ignore:line\n\n  this.url = payload.url; // jshint ignore:line\n  // Context\n\n  this._context = undefined;\n  this._solution = {\n    serviceSid: serviceSid,\n    userSid: userSid,\n    sid: sid || this.sid\n  };\n};\n\nObject.defineProperty(UserBindingInstance.prototype, '_proxy', {\n  get: function () {\n    if (!this._context) {\n      this._context = new UserBindingContext(this._version, this._solution.serviceSid, this._solution.userSid, this._solution.sid);\n    }\n\n    return this._context;\n  }\n});\n/* jshint ignore:start */\n\n/**\n * fetch a UserBindingInstance\n *\n * @function fetch\n * @memberof Twilio.Chat.V2.ServiceContext.UserContext.UserBindingInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed UserBindingInstance\n */\n\n/* jshint ignore:end */\n\nUserBindingInstance.prototype.fetch = function fetch(callback) {\n  return this._proxy.fetch(callback);\n};\n/* jshint ignore:start */\n\n/**\n * remove a UserBindingInstance\n *\n * @function remove\n * @memberof Twilio.Chat.V2.ServiceContext.UserContext.UserBindingInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed UserBindingInstance\n */\n\n/* jshint ignore:end */\n\n\nUserBindingInstance.prototype.remove = function remove(callback) {\n  return this._proxy.remove(callback);\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Chat.V2.ServiceContext.UserContext.UserBindingInstance#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nUserBindingInstance.prototype.toJSON = function toJSON() {\n  let clone = {};\n\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n\n  return clone;\n};\n\nUserBindingInstance.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the UserBindingContext\n *\n * @constructor Twilio.Chat.V2.ServiceContext.UserContext.UserBindingContext\n *\n * @param {V2} version - Version of the resource\n * @param {sid} serviceSid - The SID of the Service to fetch the resource from\n * @param {sid_like} userSid - The SID of the User with the binding\n * @param {sid} sid - The SID of the User Binding resource to fetch\n */\n\n/* jshint ignore:end */\n\n\nUserBindingContext = function UserBindingContext(version, serviceSid, userSid, sid) {\n  this._version = version; // Path Solution\n\n  this._solution = {\n    serviceSid: serviceSid,\n    userSid: userSid,\n    sid: sid\n  };\n  this._uri = `/Services/${serviceSid}/Users/${userSid}/Bindings/${sid}`;\n};\n/* jshint ignore:start */\n\n/**\n * fetch a UserBindingInstance\n *\n * @function fetch\n * @memberof Twilio.Chat.V2.ServiceContext.UserContext.UserBindingContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed UserBindingInstance\n */\n\n/* jshint ignore:end */\n\n\nUserBindingContext.prototype.fetch = function fetch(callback) {\n  var deferred = Q.defer();\n\n  var promise = this._version.fetch({\n    uri: this._uri,\n    method: 'GET'\n  });\n\n  promise = promise.then(function (payload) {\n    deferred.resolve(new UserBindingInstance(this._version, payload, this._solution.serviceSid, this._solution.userSid, this._solution.sid));\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n/* jshint ignore:start */\n\n/**\n * remove a UserBindingInstance\n *\n * @function remove\n * @memberof Twilio.Chat.V2.ServiceContext.UserContext.UserBindingContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed UserBindingInstance\n */\n\n/* jshint ignore:end */\n\n\nUserBindingContext.prototype.remove = function remove(callback) {\n  var deferred = Q.defer();\n\n  var promise = this._version.remove({\n    uri: this._uri,\n    method: 'DELETE'\n  });\n\n  promise = promise.then(function (payload) {\n    deferred.resolve(payload);\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Chat.V2.ServiceContext.UserContext.UserBindingContext#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nUserBindingContext.prototype.toJSON = function toJSON() {\n  return this._solution;\n};\n\nUserBindingContext.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\nmodule.exports = {\n  UserBindingList: UserBindingList,\n  UserBindingPage: UserBindingPage,\n  UserBindingInstance: UserBindingInstance,\n  UserBindingContext: UserBindingContext\n};","map":{"version":3,"names":["Q","require","_","util","Page","deserialize","serialize","values","UserBindingList","UserBindingPage","UserBindingInstance","UserBindingContext","version","serviceSid","userSid","UserBindingListInstance","sid","get","_version","_solution","_uri","each","opts","callback","isFunction","isUndefined","Error","done","currentPage","currentResource","limits","readLimits","limit","pageSize","onComplete","error","fetchNextPage","fn","promise","then","page","instances","instance","bind","nextPage","catch","merge","list","deferred","defer","allResources","resource","push","length","resolve","reject","nodeify","data","of","map","e","pageToken","pageNumber","uri","method","params","payload","getPage","targetUrl","_domain","twilio","request","toJSON","inspect","custom","depth","options","response","solution","prototype","constructor","call","extend","getInstance","clone","forOwn","value","key","startsWith","accountSid","account_sid","service_sid","dateCreated","iso8601DateTime","date_created","dateUpdated","date_updated","endpoint","identity","user_sid","credentialSid","credential_sid","bindingType","binding_type","messageTypes","message_types","url","_context","undefined","Object","defineProperty","fetch","_proxy","remove","module","exports"],"sources":["/Users/hooniesun/rmit/fwp/assessment1/lan/node_modules/twilio/lib/rest/chat/v2/service/user/userBinding.js"],"sourcesContent":["'use strict';\n\n/* jshint ignore:start */\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n/* jshint ignore:end */\n\nvar Q = require('q');  /* jshint ignore:line */\nvar _ = require('lodash');  /* jshint ignore:line */\nvar util = require('util');  /* jshint ignore:line */\nvar Page = require('../../../../../base/Page');  /* jshint ignore:line */\nvar deserialize = require(\n    '../../../../../base/deserialize');  /* jshint ignore:line */\nvar serialize = require(\n    '../../../../../base/serialize');  /* jshint ignore:line */\nvar values = require('../../../../../base/values');  /* jshint ignore:line */\n\nvar UserBindingList;\nvar UserBindingPage;\nvar UserBindingInstance;\nvar UserBindingContext;\n\n/* jshint ignore:start */\n/**\n * Initialize the UserBindingList\n *\n * @constructor Twilio.Chat.V2.ServiceContext.UserContext.UserBindingList\n *\n * @param {Twilio.Chat.V2} version - Version of the resource\n * @param {string} serviceSid -\n *          The SID of the Service that the resource is associated with\n * @param {string} userSid - The SID of the User with the binding\n */\n/* jshint ignore:end */\nUserBindingList = function UserBindingList(version, serviceSid, userSid) {\n  /* jshint ignore:start */\n  /**\n   * @function userBindings\n   * @memberof Twilio.Chat.V2.ServiceContext.UserContext#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Chat.V2.ServiceContext.UserContext.UserBindingContext}\n   */\n  /* jshint ignore:end */\n  function UserBindingListInstance(sid) {\n    return UserBindingListInstance.get(sid);\n  }\n\n  UserBindingListInstance._version = version;\n  // Path Solution\n  UserBindingListInstance._solution = {serviceSid: serviceSid, userSid: userSid};\n  UserBindingListInstance._uri = `/Services/${serviceSid}/Users/${userSid}/Bindings`;\n  /* jshint ignore:start */\n  /**\n   * Streams UserBindingInstance records from the API.\n   *\n   * This operation lazily loads records as efficiently as possible until the limit\n   * is reached.\n   *\n   * The results are passed into the callback function, so this operation is memory\n   * efficient.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function each\n   * @memberof Twilio.Chat.V2.ServiceContext.UserContext.UserBindingList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {user_binding.binding_type|list} [opts.bindingType] -\n   *          The push technology used by the User Binding resources to read\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         each() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no pageSize is defined but a limit is defined,\n   *         each() will attempt to read the limit with the most efficient\n   *         page size, i.e. min(limit, 1000)\n   * @param {Function} [opts.callback] -\n   *         Function to process each record. If this and a positional\n   *         callback are passed, this one will be used\n   * @param {Function} [opts.done] -\n   *          Function to be called upon completion of streaming\n   * @param {Function} [callback] - Function to process each record\n   */\n  /* jshint ignore:end */\n  UserBindingListInstance.each = function each(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    if (opts.callback) {\n      callback = opts.callback;\n    }\n    if (_.isUndefined(callback)) {\n      throw new Error('Callback function must be provided');\n    }\n\n    var done = false;\n    var currentPage = 1;\n    var currentResource = 0;\n    var limits = this._version.readLimits({\n      limit: opts.limit,\n      pageSize: opts.pageSize\n    });\n\n    function onComplete(error) {\n      done = true;\n      if (_.isFunction(opts.done)) {\n        opts.done(error);\n      }\n    }\n\n    function fetchNextPage(fn) {\n      var promise = fn();\n      if (_.isUndefined(promise)) {\n        onComplete();\n        return;\n      }\n\n      promise.then(function(page) {\n        _.each(page.instances, function(instance) {\n          if (done || (!_.isUndefined(opts.limit) && currentResource >= opts.limit)) {\n            done = true;\n            return false;\n          }\n\n          currentResource++;\n          callback(instance, onComplete);\n        });\n\n        if (!done) {\n          currentPage++;\n          fetchNextPage(_.bind(page.nextPage, page));\n        } else {\n          onComplete();\n        }\n      });\n\n      promise.catch(onComplete);\n    }\n\n    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Lists UserBindingInstance records from the API as a list.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function list\n   * @memberof Twilio.Chat.V2.ServiceContext.UserContext.UserBindingList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {user_binding.binding_type|list} [opts.bindingType] -\n   *          The push technology used by the User Binding resources to read\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         list() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no page_size is defined but a limit is defined,\n   *         list() will attempt to read the limit with the most\n   *         efficient page size, i.e. min(limit, 1000)\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  UserBindingListInstance.list = function list(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    var deferred = Q.defer();\n    var allResources = [];\n    opts.callback = function(resource, done) {\n      allResources.push(resource);\n\n      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {\n        done();\n      }\n    };\n\n    opts.done = function(error) {\n      if (_.isUndefined(error)) {\n        deferred.resolve(allResources);\n      } else {\n        deferred.reject(error);\n      }\n    };\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    this.each(opts);\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single page of UserBindingInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function page\n   * @memberof Twilio.Chat.V2.ServiceContext.UserContext.UserBindingList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {user_binding.binding_type|list} [opts.bindingType] -\n   *          The push technology used by the User Binding resources to read\n   * @param {string} [opts.pageToken] - PageToken provided by the API\n   * @param {number} [opts.pageNumber] -\n   *          Page Number, this value is simply for client state\n   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  UserBindingListInstance.page = function page(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n\n    var deferred = Q.defer();\n    var data = values.of({\n      'BindingType': serialize.map(_.get(opts, 'bindingType'), function(e) { return e; }),\n      'PageToken': opts.pageToken,\n      'Page': opts.pageNumber,\n      'PageSize': opts.pageSize\n    });\n\n    var promise = this._version.page({uri: this._uri, method: 'GET', params: data});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new UserBindingPage(this._version, payload, this._solution));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single target page of UserBindingInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function getPage\n   * @memberof Twilio.Chat.V2.ServiceContext.UserContext.UserBindingList#\n   *\n   * @param {string} [targetUrl] - API-generated URL for the requested results page\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  UserBindingListInstance.getPage = function getPage(targetUrl, callback) {\n    var deferred = Q.defer();\n\n    var promise = this._version._domain.twilio.request({method: 'GET', uri: targetUrl});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new UserBindingPage(this._version, payload, this._solution));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Constructs a user_binding\n   *\n   * @function get\n   * @memberof Twilio.Chat.V2.ServiceContext.UserContext.UserBindingList#\n   *\n   * @param {string} sid - The SID of the User Binding resource to fetch\n   *\n   * @returns {Twilio.Chat.V2.ServiceContext.UserContext.UserBindingContext}\n   */\n  /* jshint ignore:end */\n  UserBindingListInstance.get = function get(sid) {\n    return new UserBindingContext(\n      this._version,\n      this._solution.serviceSid,\n      this._solution.userSid,\n      sid\n    );\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Chat.V2.ServiceContext.UserContext.UserBindingList#\n   *\n   * @returns Object\n   */\n  /* jshint ignore:end */\n  UserBindingListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n\n  UserBindingListInstance[util.inspect.custom] = function inspect(depth, options)\n      {\n    return util.inspect(this.toJSON(), options);\n  };\n\n  return UserBindingListInstance;\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the UserBindingPage\n *\n * @constructor Twilio.Chat.V2.ServiceContext.UserContext.UserBindingPage\n *\n * @param {V2} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {UserBindingSolution} solution - Path solution\n *\n * @returns UserBindingPage\n */\n/* jshint ignore:end */\nUserBindingPage = function UserBindingPage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n\n_.extend(UserBindingPage.prototype, Page.prototype);\nUserBindingPage.prototype.constructor = UserBindingPage;\n\n/* jshint ignore:start */\n/**\n * Build an instance of UserBindingInstance\n *\n * @function getInstance\n * @memberof Twilio.Chat.V2.ServiceContext.UserContext.UserBindingPage#\n *\n * @param {UserBindingPayload} payload - Payload response from the API\n *\n * @returns UserBindingInstance\n */\n/* jshint ignore:end */\nUserBindingPage.prototype.getInstance = function getInstance(payload) {\n  return new UserBindingInstance(\n    this._version,\n    payload,\n    this._solution.serviceSid,\n    this._solution.userSid\n  );\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Chat.V2.ServiceContext.UserContext.UserBindingPage#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nUserBindingPage.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function(value, key) {\n    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\n\nUserBindingPage.prototype[util.inspect.custom] = function inspect(depth,\n    options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the UserBindingContext\n *\n * @constructor Twilio.Chat.V2.ServiceContext.UserContext.UserBindingInstance\n *\n * @property {string} sid - The unique string that identifies the resource\n * @property {string} accountSid - The SID of the Account that created the resource\n * @property {string} serviceSid -\n *          The SID of the Service that the resource is associated with\n * @property {Date} dateCreated -\n *          The ISO 8601 date and time in GMT when the resource was created\n * @property {Date} dateUpdated -\n *          The ISO 8601 date and time in GMT when the resource was last updated\n * @property {string} endpoint -\n *          The unique endpoint identifier for the User Binding\n * @property {string} identity - The string that identifies the resource's User\n * @property {string} userSid - The SID of the User with the binding\n * @property {string} credentialSid - The SID of the Credential for the binding\n * @property {user_binding.binding_type} bindingType -\n *          The push technology to use for the binding\n * @property {string} messageTypes -\n *          The Programmable Chat message types the binding is subscribed to\n * @property {string} url - The absolute URL of the User Binding resource\n *\n * @param {V2} version - Version of the resource\n * @param {UserBindingPayload} payload - The instance payload\n * @param {sid} serviceSid -\n *          The SID of the Service that the resource is associated with\n * @param {sid} userSid - The SID of the User with the binding\n * @param {sid} sid - The SID of the User Binding resource to fetch\n */\n/* jshint ignore:end */\nUserBindingInstance = function UserBindingInstance(version, payload, serviceSid,\n                                                    userSid, sid) {\n  this._version = version;\n\n  // Marshaled Properties\n  this.sid = payload.sid; // jshint ignore:line\n  this.accountSid = payload.account_sid; // jshint ignore:line\n  this.serviceSid = payload.service_sid; // jshint ignore:line\n  this.dateCreated = deserialize.iso8601DateTime(payload.date_created); // jshint ignore:line\n  this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated); // jshint ignore:line\n  this.endpoint = payload.endpoint; // jshint ignore:line\n  this.identity = payload.identity; // jshint ignore:line\n  this.userSid = payload.user_sid; // jshint ignore:line\n  this.credentialSid = payload.credential_sid; // jshint ignore:line\n  this.bindingType = payload.binding_type; // jshint ignore:line\n  this.messageTypes = payload.message_types; // jshint ignore:line\n  this.url = payload.url; // jshint ignore:line\n\n  // Context\n  this._context = undefined;\n  this._solution = {serviceSid: serviceSid, userSid: userSid, sid: sid || this.sid, };\n};\n\nObject.defineProperty(UserBindingInstance.prototype,\n  '_proxy', {\n    get: function() {\n      if (!this._context) {\n        this._context = new UserBindingContext(\n          this._version,\n          this._solution.serviceSid,\n          this._solution.userSid,\n          this._solution.sid\n        );\n      }\n\n      return this._context;\n    }\n});\n\n/* jshint ignore:start */\n/**\n * fetch a UserBindingInstance\n *\n * @function fetch\n * @memberof Twilio.Chat.V2.ServiceContext.UserContext.UserBindingInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed UserBindingInstance\n */\n/* jshint ignore:end */\nUserBindingInstance.prototype.fetch = function fetch(callback) {\n  return this._proxy.fetch(callback);\n};\n\n/* jshint ignore:start */\n/**\n * remove a UserBindingInstance\n *\n * @function remove\n * @memberof Twilio.Chat.V2.ServiceContext.UserContext.UserBindingInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed UserBindingInstance\n */\n/* jshint ignore:end */\nUserBindingInstance.prototype.remove = function remove(callback) {\n  return this._proxy.remove(callback);\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Chat.V2.ServiceContext.UserContext.UserBindingInstance#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nUserBindingInstance.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function(value, key) {\n    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\n\nUserBindingInstance.prototype[util.inspect.custom] = function inspect(depth,\n    options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the UserBindingContext\n *\n * @constructor Twilio.Chat.V2.ServiceContext.UserContext.UserBindingContext\n *\n * @param {V2} version - Version of the resource\n * @param {sid} serviceSid - The SID of the Service to fetch the resource from\n * @param {sid_like} userSid - The SID of the User with the binding\n * @param {sid} sid - The SID of the User Binding resource to fetch\n */\n/* jshint ignore:end */\nUserBindingContext = function UserBindingContext(version, serviceSid, userSid,\n                                                  sid) {\n  this._version = version;\n\n  // Path Solution\n  this._solution = {serviceSid: serviceSid, userSid: userSid, sid: sid, };\n  this._uri = `/Services/${serviceSid}/Users/${userSid}/Bindings/${sid}`;\n};\n\n/* jshint ignore:start */\n/**\n * fetch a UserBindingInstance\n *\n * @function fetch\n * @memberof Twilio.Chat.V2.ServiceContext.UserContext.UserBindingContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed UserBindingInstance\n */\n/* jshint ignore:end */\nUserBindingContext.prototype.fetch = function fetch(callback) {\n  var deferred = Q.defer();\n  var promise = this._version.fetch({uri: this._uri, method: 'GET'});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(new UserBindingInstance(\n      this._version,\n      payload,\n      this._solution.serviceSid,\n      this._solution.userSid,\n      this._solution.sid\n    ));\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * remove a UserBindingInstance\n *\n * @function remove\n * @memberof Twilio.Chat.V2.ServiceContext.UserContext.UserBindingContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed UserBindingInstance\n */\n/* jshint ignore:end */\nUserBindingContext.prototype.remove = function remove(callback) {\n  var deferred = Q.defer();\n  var promise = this._version.remove({uri: this._uri, method: 'DELETE'});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(payload);\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Chat.V2.ServiceContext.UserContext.UserBindingContext#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nUserBindingContext.prototype.toJSON = function toJSON() {\n  return this._solution;\n};\n\nUserBindingContext.prototype[util.inspect.custom] = function inspect(depth,\n    options) {\n  return util.inspect(this.toJSON(), options);\n};\n\nmodule.exports = {\n  UserBindingList: UserBindingList,\n  UserBindingPage: UserBindingPage,\n  UserBindingInstance: UserBindingInstance,\n  UserBindingContext: UserBindingContext\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}