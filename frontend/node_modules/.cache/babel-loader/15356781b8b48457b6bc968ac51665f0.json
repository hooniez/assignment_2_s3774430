{"ast":null,"code":"'use strict';\n/* jshint ignore:start */\n\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n\n/* jshint ignore:end */\n\nvar Q = require('q');\n/* jshint ignore:line */\n\n\nvar _ = require('lodash');\n/* jshint ignore:line */\n\n\nvar util = require('util');\n/* jshint ignore:line */\n\n\nvar Page = require('../../../base/Page');\n/* jshint ignore:line */\n\n\nvar ParticipantList = require('./room/roomParticipant').ParticipantList;\n\nvar RecordingRulesList = require('./room/roomRecordingRule').RecordingRulesList;\n\nvar RoomRecordingList = require('./room/recording').RoomRecordingList;\n\nvar deserialize = require('../../../base/deserialize');\n/* jshint ignore:line */\n\n\nvar serialize = require('../../../base/serialize');\n/* jshint ignore:line */\n\n\nvar values = require('../../../base/values');\n/* jshint ignore:line */\n\n\nvar RoomList;\nvar RoomPage;\nvar RoomInstance;\nvar RoomContext;\n/* jshint ignore:start */\n\n/**\n * Initialize the RoomList\n *\n * @constructor Twilio.Video.V1.RoomList\n *\n * @param {Twilio.Video.V1} version - Version of the resource\n */\n\n/* jshint ignore:end */\n\nRoomList = function RoomList(version) {\n  /* jshint ignore:start */\n\n  /**\n   * @function rooms\n   * @memberof Twilio.Video.V1#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Video.V1.RoomContext}\n   */\n\n  /* jshint ignore:end */\n  function RoomListInstance(sid) {\n    return RoomListInstance.get(sid);\n  }\n\n  RoomListInstance._version = version; // Path Solution\n\n  RoomListInstance._solution = {};\n  RoomListInstance._uri = `/Rooms`;\n  /* jshint ignore:start */\n\n  /**\n   * create a RoomInstance\n   *\n   * @function create\n   * @memberof Twilio.Video.V1.RoomList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {boolean} [opts.enableTurn] -\n   *          Enable Twilio's Network Traversal TURN service\n   * @param {room.room_type} [opts.type] - The type of room\n   * @param {string} [opts.uniqueName] -\n   *          An application-defined string that uniquely identifies the resource\n   * @param {string} [opts.statusCallback] -\n   *          The URL to send status information to your application\n   * @param {string} [opts.statusCallbackMethod] -\n   *          The HTTP method we should use to call status_callback\n   * @param {number} [opts.maxParticipants] -\n   *          The maximum number of concurrent Participants allowed in the room\n   * @param {boolean} [opts.recordParticipantsOnConnect] -\n   *          Whether to start recording when Participants connect\n   * @param {room.video_codec|list} [opts.videoCodecs] -\n   *          An array of the video codecs that are supported when publishing a track in the room\n   * @param {string} [opts.mediaRegion] -\n   *          The region for the media server in Group Rooms\n   * @param {object} [opts.recordingRules] - A collection of Recording Rules\n   * @param {boolean} [opts.audioOnly] -\n   *          Indicates whether the room will only contain audio track participants for group rooms.\n   * @param {number} [opts.maxParticipantDuration] -\n   *          The maximum number of seconds a Participant can be connected to the room\n   * @param {number} [opts.emptyRoomTimeout] -\n   *          Configures the time a room will remain active after last participant leaves.\n   * @param {number} [opts.unusedRoomTimeout] -\n   *          Configures the time a room will remain active when no one joins.\n   * @param {boolean} [opts.largeRoom] - Indicates whether this is a large room.\n   * @param {function} [callback] - Callback to handle processed record\n   *\n   * @returns {Promise} Resolves to processed RoomInstance\n   */\n\n  /* jshint ignore:end */\n\n  RoomListInstance.create = function create(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n    var deferred = Q.defer();\n    var data = values.of({\n      'EnableTurn': serialize.bool(_.get(opts, 'enableTurn')),\n      'Type': _.get(opts, 'type'),\n      'UniqueName': _.get(opts, 'uniqueName'),\n      'StatusCallback': _.get(opts, 'statusCallback'),\n      'StatusCallbackMethod': _.get(opts, 'statusCallbackMethod'),\n      'MaxParticipants': _.get(opts, 'maxParticipants'),\n      'RecordParticipantsOnConnect': serialize.bool(_.get(opts, 'recordParticipantsOnConnect')),\n      'VideoCodecs': serialize.map(_.get(opts, 'videoCodecs'), function (e) {\n        return e;\n      }),\n      'MediaRegion': _.get(opts, 'mediaRegion'),\n      'RecordingRules': serialize.object(_.get(opts, 'recordingRules')),\n      'AudioOnly': serialize.bool(_.get(opts, 'audioOnly')),\n      'MaxParticipantDuration': _.get(opts, 'maxParticipantDuration'),\n      'EmptyRoomTimeout': _.get(opts, 'emptyRoomTimeout'),\n      'UnusedRoomTimeout': _.get(opts, 'unusedRoomTimeout'),\n      'LargeRoom': serialize.bool(_.get(opts, 'largeRoom'))\n    });\n\n    var promise = this._version.create({\n      uri: this._uri,\n      method: 'POST',\n      data: data\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new RoomInstance(this._version, payload, this._solution.sid));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Streams RoomInstance records from the API.\n   *\n   * This operation lazily loads records as efficiently as possible until the limit\n   * is reached.\n   *\n   * The results are passed into the callback function, so this operation is memory\n   * efficient.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function each\n   * @memberof Twilio.Video.V1.RoomList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {room.room_status} [opts.status] - Read only the rooms with this status\n   * @param {string} [opts.uniqueName] - Read only rooms with this unique_name\n   * @param {Date} [opts.dateCreatedAfter] -\n   *          Read only rooms that started on or after this date, given as YYYY-MM-DD\n   * @param {Date} [opts.dateCreatedBefore] -\n   *          Read only rooms that started before this date, given as YYYY-MM-DD\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         each() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no pageSize is defined but a limit is defined,\n   *         each() will attempt to read the limit with the most efficient\n   *         page size, i.e. min(limit, 1000)\n   * @param {Function} [opts.callback] -\n   *         Function to process each record. If this and a positional\n   *         callback are passed, this one will be used\n   * @param {Function} [opts.done] -\n   *          Function to be called upon completion of streaming\n   * @param {Function} [callback] - Function to process each record\n   */\n\n  /* jshint ignore:end */\n\n\n  RoomListInstance.each = function each(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n\n    if (opts.callback) {\n      callback = opts.callback;\n    }\n\n    if (_.isUndefined(callback)) {\n      throw new Error('Callback function must be provided');\n    }\n\n    var done = false;\n    var currentPage = 1;\n    var currentResource = 0;\n\n    var limits = this._version.readLimits({\n      limit: opts.limit,\n      pageSize: opts.pageSize\n    });\n\n    function onComplete(error) {\n      done = true;\n\n      if (_.isFunction(opts.done)) {\n        opts.done(error);\n      }\n    }\n\n    function fetchNextPage(fn) {\n      var promise = fn();\n\n      if (_.isUndefined(promise)) {\n        onComplete();\n        return;\n      }\n\n      promise.then(function (page) {\n        _.each(page.instances, function (instance) {\n          if (done || !_.isUndefined(opts.limit) && currentResource >= opts.limit) {\n            done = true;\n            return false;\n          }\n\n          currentResource++;\n          callback(instance, onComplete);\n        });\n\n        if (!done) {\n          currentPage++;\n          fetchNextPage(_.bind(page.nextPage, page));\n        } else {\n          onComplete();\n        }\n      });\n      promise.catch(onComplete);\n    }\n\n    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Lists RoomInstance records from the API as a list.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function list\n   * @memberof Twilio.Video.V1.RoomList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {room.room_status} [opts.status] - Read only the rooms with this status\n   * @param {string} [opts.uniqueName] - Read only rooms with this unique_name\n   * @param {Date} [opts.dateCreatedAfter] -\n   *          Read only rooms that started on or after this date, given as YYYY-MM-DD\n   * @param {Date} [opts.dateCreatedBefore] -\n   *          Read only rooms that started before this date, given as YYYY-MM-DD\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         list() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no page_size is defined but a limit is defined,\n   *         list() will attempt to read the limit with the most\n   *         efficient page size, i.e. min(limit, 1000)\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  RoomListInstance.list = function list(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n    var deferred = Q.defer();\n    var allResources = [];\n\n    opts.callback = function (resource, done) {\n      allResources.push(resource);\n\n      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {\n        done();\n      }\n    };\n\n    opts.done = function (error) {\n      if (_.isUndefined(error)) {\n        deferred.resolve(allResources);\n      } else {\n        deferred.reject(error);\n      }\n    };\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    this.each(opts);\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Retrieve a single page of RoomInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function page\n   * @memberof Twilio.Video.V1.RoomList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {room.room_status} [opts.status] - Read only the rooms with this status\n   * @param {string} [opts.uniqueName] - Read only rooms with this unique_name\n   * @param {Date} [opts.dateCreatedAfter] -\n   *          Read only rooms that started on or after this date, given as YYYY-MM-DD\n   * @param {Date} [opts.dateCreatedBefore] -\n   *          Read only rooms that started before this date, given as YYYY-MM-DD\n   * @param {string} [opts.pageToken] - PageToken provided by the API\n   * @param {number} [opts.pageNumber] -\n   *          Page Number, this value is simply for client state\n   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  RoomListInstance.page = function page(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n    var deferred = Q.defer();\n    var data = values.of({\n      'Status': _.get(opts, 'status'),\n      'UniqueName': _.get(opts, 'uniqueName'),\n      'DateCreatedAfter': serialize.iso8601DateTime(_.get(opts, 'dateCreatedAfter')),\n      'DateCreatedBefore': serialize.iso8601DateTime(_.get(opts, 'dateCreatedBefore')),\n      'PageToken': opts.pageToken,\n      'Page': opts.pageNumber,\n      'PageSize': opts.pageSize\n    });\n\n    var promise = this._version.page({\n      uri: this._uri,\n      method: 'GET',\n      params: data\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new RoomPage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Retrieve a single target page of RoomInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function getPage\n   * @memberof Twilio.Video.V1.RoomList#\n   *\n   * @param {string} [targetUrl] - API-generated URL for the requested results page\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  RoomListInstance.getPage = function getPage(targetUrl, callback) {\n    var deferred = Q.defer();\n\n    var promise = this._version._domain.twilio.request({\n      method: 'GET',\n      uri: targetUrl\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new RoomPage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Constructs a room\n   *\n   * @function get\n   * @memberof Twilio.Video.V1.RoomList#\n   *\n   * @param {string} sid - The SID that identifies the resource to fetch\n   *\n   * @returns {Twilio.Video.V1.RoomContext}\n   */\n\n  /* jshint ignore:end */\n\n\n  RoomListInstance.get = function get(sid) {\n    return new RoomContext(this._version, sid);\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Video.V1.RoomList#\n   *\n   * @returns Object\n   */\n\n  /* jshint ignore:end */\n\n\n  RoomListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n\n  RoomListInstance[util.inspect.custom] = function inspect(depth, options) {\n    return util.inspect(this.toJSON(), options);\n  };\n\n  return RoomListInstance;\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the RoomPage\n *\n * @constructor Twilio.Video.V1.RoomPage\n *\n * @param {V1} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {RoomSolution} solution - Path solution\n *\n * @returns RoomPage\n */\n\n/* jshint ignore:end */\n\n\nRoomPage = function RoomPage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n\n_.extend(RoomPage.prototype, Page.prototype);\n\nRoomPage.prototype.constructor = RoomPage;\n/* jshint ignore:start */\n\n/**\n * Build an instance of RoomInstance\n *\n * @function getInstance\n * @memberof Twilio.Video.V1.RoomPage#\n *\n * @param {RoomPayload} payload - Payload response from the API\n *\n * @returns RoomInstance\n */\n\n/* jshint ignore:end */\n\nRoomPage.prototype.getInstance = function getInstance(payload) {\n  return new RoomInstance(this._version, payload);\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Video.V1.RoomPage#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nRoomPage.prototype.toJSON = function toJSON() {\n  let clone = {};\n\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n\n  return clone;\n};\n\nRoomPage.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the RoomContext\n *\n * @constructor Twilio.Video.V1.RoomInstance\n *\n * @property {string} sid - The unique string that identifies the resource\n * @property {room.room_status} status - The status of the room\n * @property {Date} dateCreated -\n *          The ISO 8601 date and time in GMT when the resource was created\n * @property {Date} dateUpdated -\n *          The ISO 8601 date and time in GMT when the resource was last updated\n * @property {string} accountSid - The SID of the Account that created the resource\n * @property {boolean} enableTurn - Enable Twilio's Network Traversal TURN service\n * @property {string} uniqueName -\n *          An application-defined string that uniquely identifies the resource\n * @property {string} statusCallback -\n *          The URL to send status information to your application\n * @property {string} statusCallbackMethod -\n *          The HTTP method we use to call status_callback\n * @property {Date} endTime - The UTC end time of the room in UTC ISO 8601 format\n * @property {number} duration - The duration of the room in seconds\n * @property {room.room_type} type - The type of room\n * @property {number} maxParticipants -\n *          The maximum number of concurrent Participants allowed in the room\n * @property {number} maxParticipantDuration -\n *          The maximum number of seconds a Participant can be connected to the room\n * @property {number} maxConcurrentPublishedTracks -\n *          The maximum number of published tracks allowed in the room at the same time\n * @property {boolean} recordParticipantsOnConnect -\n *          Whether to start recording when Participants connect\n * @property {room.video_codec} videoCodecs -\n *          An array of the video codecs that are supported when publishing a track in the room\n * @property {string} mediaRegion - The region for the media server in Group Rooms\n * @property {boolean} audioOnly -\n *          Indicates whether the room will only contain audio track participants for group rooms.\n * @property {number} emptyRoomTimeout -\n *          The time a room will remain active after last participant leaves.\n * @property {number} unusedRoomTimeout -\n *          The time a room will remain active when no one joins.\n * @property {boolean} largeRoom - Indicates if this is a large room.\n * @property {string} url - The absolute URL of the resource\n * @property {string} links - The URLs of related resources\n *\n * @param {V1} version - Version of the resource\n * @param {RoomPayload} payload - The instance payload\n * @param {sid_like} sid - The SID that identifies the resource to fetch\n */\n\n/* jshint ignore:end */\n\n\nRoomInstance = function RoomInstance(version, payload, sid) {\n  this._version = version; // Marshaled Properties\n\n  this.sid = payload.sid; // jshint ignore:line\n\n  this.status = payload.status; // jshint ignore:line\n\n  this.dateCreated = deserialize.iso8601DateTime(payload.date_created); // jshint ignore:line\n\n  this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated); // jshint ignore:line\n\n  this.accountSid = payload.account_sid; // jshint ignore:line\n\n  this.enableTurn = payload.enable_turn; // jshint ignore:line\n\n  this.uniqueName = payload.unique_name; // jshint ignore:line\n\n  this.statusCallback = payload.status_callback; // jshint ignore:line\n\n  this.statusCallbackMethod = payload.status_callback_method; // jshint ignore:line\n\n  this.endTime = deserialize.iso8601DateTime(payload.end_time); // jshint ignore:line\n\n  this.duration = deserialize.integer(payload.duration); // jshint ignore:line\n\n  this.type = payload.type; // jshint ignore:line\n\n  this.maxParticipants = deserialize.integer(payload.max_participants); // jshint ignore:line\n\n  this.maxParticipantDuration = deserialize.integer(payload.max_participant_duration); // jshint ignore:line\n\n  this.maxConcurrentPublishedTracks = deserialize.integer(payload.max_concurrent_published_tracks); // jshint ignore:line\n\n  this.recordParticipantsOnConnect = payload.record_participants_on_connect; // jshint ignore:line\n\n  this.videoCodecs = payload.video_codecs; // jshint ignore:line\n\n  this.mediaRegion = payload.media_region; // jshint ignore:line\n\n  this.audioOnly = payload.audio_only; // jshint ignore:line\n\n  this.emptyRoomTimeout = deserialize.integer(payload.empty_room_timeout); // jshint ignore:line\n\n  this.unusedRoomTimeout = deserialize.integer(payload.unused_room_timeout); // jshint ignore:line\n\n  this.largeRoom = payload.large_room; // jshint ignore:line\n\n  this.url = payload.url; // jshint ignore:line\n\n  this.links = payload.links; // jshint ignore:line\n  // Context\n\n  this._context = undefined;\n  this._solution = {\n    sid: sid || this.sid\n  };\n};\n\nObject.defineProperty(RoomInstance.prototype, '_proxy', {\n  get: function () {\n    if (!this._context) {\n      this._context = new RoomContext(this._version, this._solution.sid);\n    }\n\n    return this._context;\n  }\n});\n/* jshint ignore:start */\n\n/**\n * fetch a RoomInstance\n *\n * @function fetch\n * @memberof Twilio.Video.V1.RoomInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed RoomInstance\n */\n\n/* jshint ignore:end */\n\nRoomInstance.prototype.fetch = function fetch(callback) {\n  return this._proxy.fetch(callback);\n};\n/* jshint ignore:start */\n\n/**\n * update a RoomInstance\n *\n * @function update\n * @memberof Twilio.Video.V1.RoomInstance#\n *\n * @param {object} opts - Options for request\n * @param {room.room_status} opts.status - The new status of the resource\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed RoomInstance\n */\n\n/* jshint ignore:end */\n\n\nRoomInstance.prototype.update = function update(opts, callback) {\n  return this._proxy.update(opts, callback);\n};\n/* jshint ignore:start */\n\n/**\n * Access the recordings\n *\n * @function recordings\n * @memberof Twilio.Video.V1.RoomInstance#\n *\n * @returns {Twilio.Video.V1.RoomContext.RoomRecordingList}\n */\n\n/* jshint ignore:end */\n\n\nRoomInstance.prototype.recordings = function recordings() {\n  return this._proxy.recordings;\n};\n/* jshint ignore:start */\n\n/**\n * Access the participants\n *\n * @function participants\n * @memberof Twilio.Video.V1.RoomInstance#\n *\n * @returns {Twilio.Video.V1.RoomContext.ParticipantList}\n */\n\n/* jshint ignore:end */\n\n\nRoomInstance.prototype.participants = function participants() {\n  return this._proxy.participants;\n};\n/* jshint ignore:start */\n\n/**\n * Access the recordingRules\n *\n * @function recordingRules\n * @memberof Twilio.Video.V1.RoomInstance#\n *\n * @returns {Twilio.Video.V1.RoomContext.RecordingRulesList}\n */\n\n/* jshint ignore:end */\n\n\nRoomInstance.prototype.recordingRules = function recordingRules() {\n  return this._proxy.recordingRules;\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Video.V1.RoomInstance#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nRoomInstance.prototype.toJSON = function toJSON() {\n  let clone = {};\n\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n\n  return clone;\n};\n\nRoomInstance.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the RoomContext\n *\n * @constructor Twilio.Video.V1.RoomContext\n *\n * @property {Twilio.Video.V1.RoomContext.RoomRecordingList} recordings -\n *          recordings resource\n * @property {Twilio.Video.V1.RoomContext.ParticipantList} participants -\n *          participants resource\n * @property {Twilio.Video.V1.RoomContext.RecordingRulesList} recordingRules -\n *          recordingRules resource\n *\n * @param {V1} version - Version of the resource\n * @param {sid_like} sid - The SID that identifies the resource to fetch\n */\n\n/* jshint ignore:end */\n\n\nRoomContext = function RoomContext(version, sid) {\n  this._version = version; // Path Solution\n\n  this._solution = {\n    sid: sid\n  };\n  this._uri = `/Rooms/${sid}`; // Dependents\n\n  this._recordings = undefined;\n  this._participants = undefined;\n  this._recordingRules = undefined;\n};\n/* jshint ignore:start */\n\n/**\n * fetch a RoomInstance\n *\n * @function fetch\n * @memberof Twilio.Video.V1.RoomContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed RoomInstance\n */\n\n/* jshint ignore:end */\n\n\nRoomContext.prototype.fetch = function fetch(callback) {\n  var deferred = Q.defer();\n\n  var promise = this._version.fetch({\n    uri: this._uri,\n    method: 'GET'\n  });\n\n  promise = promise.then(function (payload) {\n    deferred.resolve(new RoomInstance(this._version, payload, this._solution.sid));\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n/* jshint ignore:start */\n\n/**\n * update a RoomInstance\n *\n * @function update\n * @memberof Twilio.Video.V1.RoomContext#\n *\n * @param {object} opts - Options for request\n * @param {room.room_status} opts.status - The new status of the resource\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed RoomInstance\n */\n\n/* jshint ignore:end */\n\n\nRoomContext.prototype.update = function update(opts, callback) {\n  if (_.isUndefined(opts)) {\n    throw new Error('Required parameter \"opts\" missing.');\n  }\n\n  if (_.isUndefined(opts['status'])) {\n    throw new Error('Required parameter \"opts[\\'status\\']\" missing.');\n  }\n\n  var deferred = Q.defer();\n  var data = values.of({\n    'Status': _.get(opts, 'status')\n  });\n\n  var promise = this._version.update({\n    uri: this._uri,\n    method: 'POST',\n    data: data\n  });\n\n  promise = promise.then(function (payload) {\n    deferred.resolve(new RoomInstance(this._version, payload, this._solution.sid));\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\nObject.defineProperty(RoomContext.prototype, 'recordings', {\n  get: function () {\n    if (!this._recordings) {\n      this._recordings = new RoomRecordingList(this._version, this._solution.sid);\n    }\n\n    return this._recordings;\n  }\n});\nObject.defineProperty(RoomContext.prototype, 'participants', {\n  get: function () {\n    if (!this._participants) {\n      this._participants = new ParticipantList(this._version, this._solution.sid);\n    }\n\n    return this._participants;\n  }\n});\nObject.defineProperty(RoomContext.prototype, 'recordingRules', {\n  get: function () {\n    if (!this._recordingRules) {\n      this._recordingRules = new RecordingRulesList(this._version, this._solution.sid);\n    }\n\n    return this._recordingRules;\n  }\n});\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Video.V1.RoomContext#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\nRoomContext.prototype.toJSON = function toJSON() {\n  return this._solution;\n};\n\nRoomContext.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\nmodule.exports = {\n  RoomList: RoomList,\n  RoomPage: RoomPage,\n  RoomInstance: RoomInstance,\n  RoomContext: RoomContext\n};","map":{"version":3,"names":["Q","require","_","util","Page","ParticipantList","RecordingRulesList","RoomRecordingList","deserialize","serialize","values","RoomList","RoomPage","RoomInstance","RoomContext","version","RoomListInstance","sid","get","_version","_solution","_uri","create","opts","callback","isFunction","deferred","defer","data","of","bool","map","e","object","promise","uri","method","then","payload","resolve","bind","catch","error","reject","nodeify","each","isUndefined","Error","done","currentPage","currentResource","limits","readLimits","limit","pageSize","onComplete","fetchNextPage","fn","page","instances","instance","nextPage","merge","list","allResources","resource","push","length","iso8601DateTime","pageToken","pageNumber","params","getPage","targetUrl","_domain","twilio","request","toJSON","inspect","custom","depth","options","response","solution","prototype","constructor","call","extend","getInstance","clone","forOwn","value","key","startsWith","status","dateCreated","date_created","dateUpdated","date_updated","accountSid","account_sid","enableTurn","enable_turn","uniqueName","unique_name","statusCallback","status_callback","statusCallbackMethod","status_callback_method","endTime","end_time","duration","integer","type","maxParticipants","max_participants","maxParticipantDuration","max_participant_duration","maxConcurrentPublishedTracks","max_concurrent_published_tracks","recordParticipantsOnConnect","record_participants_on_connect","videoCodecs","video_codecs","mediaRegion","media_region","audioOnly","audio_only","emptyRoomTimeout","empty_room_timeout","unusedRoomTimeout","unused_room_timeout","largeRoom","large_room","url","links","_context","undefined","Object","defineProperty","fetch","_proxy","update","recordings","participants","recordingRules","_recordings","_participants","_recordingRules","module","exports"],"sources":["/Users/hooniesun/rmit/fwp/assessment1/lan/node_modules/twilio/lib/rest/video/v1/room.js"],"sourcesContent":["'use strict';\n\n/* jshint ignore:start */\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n/* jshint ignore:end */\n\nvar Q = require('q');  /* jshint ignore:line */\nvar _ = require('lodash');  /* jshint ignore:line */\nvar util = require('util');  /* jshint ignore:line */\nvar Page = require('../../../base/Page');  /* jshint ignore:line */\nvar ParticipantList = require('./room/roomParticipant').ParticipantList;\nvar RecordingRulesList = require('./room/roomRecordingRule').RecordingRulesList;\nvar RoomRecordingList = require('./room/recording').RoomRecordingList;\nvar deserialize = require(\n    '../../../base/deserialize');  /* jshint ignore:line */\nvar serialize = require('../../../base/serialize');  /* jshint ignore:line */\nvar values = require('../../../base/values');  /* jshint ignore:line */\n\nvar RoomList;\nvar RoomPage;\nvar RoomInstance;\nvar RoomContext;\n\n/* jshint ignore:start */\n/**\n * Initialize the RoomList\n *\n * @constructor Twilio.Video.V1.RoomList\n *\n * @param {Twilio.Video.V1} version - Version of the resource\n */\n/* jshint ignore:end */\nRoomList = function RoomList(version) {\n  /* jshint ignore:start */\n  /**\n   * @function rooms\n   * @memberof Twilio.Video.V1#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Video.V1.RoomContext}\n   */\n  /* jshint ignore:end */\n  function RoomListInstance(sid) {\n    return RoomListInstance.get(sid);\n  }\n\n  RoomListInstance._version = version;\n  // Path Solution\n  RoomListInstance._solution = {};\n  RoomListInstance._uri = `/Rooms`;\n  /* jshint ignore:start */\n  /**\n   * create a RoomInstance\n   *\n   * @function create\n   * @memberof Twilio.Video.V1.RoomList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {boolean} [opts.enableTurn] -\n   *          Enable Twilio's Network Traversal TURN service\n   * @param {room.room_type} [opts.type] - The type of room\n   * @param {string} [opts.uniqueName] -\n   *          An application-defined string that uniquely identifies the resource\n   * @param {string} [opts.statusCallback] -\n   *          The URL to send status information to your application\n   * @param {string} [opts.statusCallbackMethod] -\n   *          The HTTP method we should use to call status_callback\n   * @param {number} [opts.maxParticipants] -\n   *          The maximum number of concurrent Participants allowed in the room\n   * @param {boolean} [opts.recordParticipantsOnConnect] -\n   *          Whether to start recording when Participants connect\n   * @param {room.video_codec|list} [opts.videoCodecs] -\n   *          An array of the video codecs that are supported when publishing a track in the room\n   * @param {string} [opts.mediaRegion] -\n   *          The region for the media server in Group Rooms\n   * @param {object} [opts.recordingRules] - A collection of Recording Rules\n   * @param {boolean} [opts.audioOnly] -\n   *          Indicates whether the room will only contain audio track participants for group rooms.\n   * @param {number} [opts.maxParticipantDuration] -\n   *          The maximum number of seconds a Participant can be connected to the room\n   * @param {number} [opts.emptyRoomTimeout] -\n   *          Configures the time a room will remain active after last participant leaves.\n   * @param {number} [opts.unusedRoomTimeout] -\n   *          Configures the time a room will remain active when no one joins.\n   * @param {boolean} [opts.largeRoom] - Indicates whether this is a large room.\n   * @param {function} [callback] - Callback to handle processed record\n   *\n   * @returns {Promise} Resolves to processed RoomInstance\n   */\n  /* jshint ignore:end */\n  RoomListInstance.create = function create(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n\n    var deferred = Q.defer();\n    var data = values.of({\n      'EnableTurn': serialize.bool(_.get(opts, 'enableTurn')),\n      'Type': _.get(opts, 'type'),\n      'UniqueName': _.get(opts, 'uniqueName'),\n      'StatusCallback': _.get(opts, 'statusCallback'),\n      'StatusCallbackMethod': _.get(opts, 'statusCallbackMethod'),\n      'MaxParticipants': _.get(opts, 'maxParticipants'),\n      'RecordParticipantsOnConnect': serialize.bool(_.get(opts, 'recordParticipantsOnConnect')),\n      'VideoCodecs': serialize.map(_.get(opts, 'videoCodecs'), function(e) { return e; }),\n      'MediaRegion': _.get(opts, 'mediaRegion'),\n      'RecordingRules': serialize.object(_.get(opts, 'recordingRules')),\n      'AudioOnly': serialize.bool(_.get(opts, 'audioOnly')),\n      'MaxParticipantDuration': _.get(opts, 'maxParticipantDuration'),\n      'EmptyRoomTimeout': _.get(opts, 'emptyRoomTimeout'),\n      'UnusedRoomTimeout': _.get(opts, 'unusedRoomTimeout'),\n      'LargeRoom': serialize.bool(_.get(opts, 'largeRoom'))\n    });\n\n    var promise = this._version.create({uri: this._uri, method: 'POST', data: data});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new RoomInstance(this._version, payload, this._solution.sid));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Streams RoomInstance records from the API.\n   *\n   * This operation lazily loads records as efficiently as possible until the limit\n   * is reached.\n   *\n   * The results are passed into the callback function, so this operation is memory\n   * efficient.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function each\n   * @memberof Twilio.Video.V1.RoomList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {room.room_status} [opts.status] - Read only the rooms with this status\n   * @param {string} [opts.uniqueName] - Read only rooms with this unique_name\n   * @param {Date} [opts.dateCreatedAfter] -\n   *          Read only rooms that started on or after this date, given as YYYY-MM-DD\n   * @param {Date} [opts.dateCreatedBefore] -\n   *          Read only rooms that started before this date, given as YYYY-MM-DD\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         each() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no pageSize is defined but a limit is defined,\n   *         each() will attempt to read the limit with the most efficient\n   *         page size, i.e. min(limit, 1000)\n   * @param {Function} [opts.callback] -\n   *         Function to process each record. If this and a positional\n   *         callback are passed, this one will be used\n   * @param {Function} [opts.done] -\n   *          Function to be called upon completion of streaming\n   * @param {Function} [callback] - Function to process each record\n   */\n  /* jshint ignore:end */\n  RoomListInstance.each = function each(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    if (opts.callback) {\n      callback = opts.callback;\n    }\n    if (_.isUndefined(callback)) {\n      throw new Error('Callback function must be provided');\n    }\n\n    var done = false;\n    var currentPage = 1;\n    var currentResource = 0;\n    var limits = this._version.readLimits({\n      limit: opts.limit,\n      pageSize: opts.pageSize\n    });\n\n    function onComplete(error) {\n      done = true;\n      if (_.isFunction(opts.done)) {\n        opts.done(error);\n      }\n    }\n\n    function fetchNextPage(fn) {\n      var promise = fn();\n      if (_.isUndefined(promise)) {\n        onComplete();\n        return;\n      }\n\n      promise.then(function(page) {\n        _.each(page.instances, function(instance) {\n          if (done || (!_.isUndefined(opts.limit) && currentResource >= opts.limit)) {\n            done = true;\n            return false;\n          }\n\n          currentResource++;\n          callback(instance, onComplete);\n        });\n\n        if (!done) {\n          currentPage++;\n          fetchNextPage(_.bind(page.nextPage, page));\n        } else {\n          onComplete();\n        }\n      });\n\n      promise.catch(onComplete);\n    }\n\n    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Lists RoomInstance records from the API as a list.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function list\n   * @memberof Twilio.Video.V1.RoomList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {room.room_status} [opts.status] - Read only the rooms with this status\n   * @param {string} [opts.uniqueName] - Read only rooms with this unique_name\n   * @param {Date} [opts.dateCreatedAfter] -\n   *          Read only rooms that started on or after this date, given as YYYY-MM-DD\n   * @param {Date} [opts.dateCreatedBefore] -\n   *          Read only rooms that started before this date, given as YYYY-MM-DD\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         list() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no page_size is defined but a limit is defined,\n   *         list() will attempt to read the limit with the most\n   *         efficient page size, i.e. min(limit, 1000)\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  RoomListInstance.list = function list(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    var deferred = Q.defer();\n    var allResources = [];\n    opts.callback = function(resource, done) {\n      allResources.push(resource);\n\n      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {\n        done();\n      }\n    };\n\n    opts.done = function(error) {\n      if (_.isUndefined(error)) {\n        deferred.resolve(allResources);\n      } else {\n        deferred.reject(error);\n      }\n    };\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    this.each(opts);\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single page of RoomInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function page\n   * @memberof Twilio.Video.V1.RoomList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {room.room_status} [opts.status] - Read only the rooms with this status\n   * @param {string} [opts.uniqueName] - Read only rooms with this unique_name\n   * @param {Date} [opts.dateCreatedAfter] -\n   *          Read only rooms that started on or after this date, given as YYYY-MM-DD\n   * @param {Date} [opts.dateCreatedBefore] -\n   *          Read only rooms that started before this date, given as YYYY-MM-DD\n   * @param {string} [opts.pageToken] - PageToken provided by the API\n   * @param {number} [opts.pageNumber] -\n   *          Page Number, this value is simply for client state\n   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  RoomListInstance.page = function page(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n\n    var deferred = Q.defer();\n    var data = values.of({\n      'Status': _.get(opts, 'status'),\n      'UniqueName': _.get(opts, 'uniqueName'),\n      'DateCreatedAfter': serialize.iso8601DateTime(_.get(opts, 'dateCreatedAfter')),\n      'DateCreatedBefore': serialize.iso8601DateTime(_.get(opts, 'dateCreatedBefore')),\n      'PageToken': opts.pageToken,\n      'Page': opts.pageNumber,\n      'PageSize': opts.pageSize\n    });\n\n    var promise = this._version.page({uri: this._uri, method: 'GET', params: data});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new RoomPage(this._version, payload, this._solution));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single target page of RoomInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function getPage\n   * @memberof Twilio.Video.V1.RoomList#\n   *\n   * @param {string} [targetUrl] - API-generated URL for the requested results page\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  RoomListInstance.getPage = function getPage(targetUrl, callback) {\n    var deferred = Q.defer();\n\n    var promise = this._version._domain.twilio.request({method: 'GET', uri: targetUrl});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new RoomPage(this._version, payload, this._solution));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Constructs a room\n   *\n   * @function get\n   * @memberof Twilio.Video.V1.RoomList#\n   *\n   * @param {string} sid - The SID that identifies the resource to fetch\n   *\n   * @returns {Twilio.Video.V1.RoomContext}\n   */\n  /* jshint ignore:end */\n  RoomListInstance.get = function get(sid) {\n    return new RoomContext(this._version, sid);\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Video.V1.RoomList#\n   *\n   * @returns Object\n   */\n  /* jshint ignore:end */\n  RoomListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n\n  RoomListInstance[util.inspect.custom] = function inspect(depth, options) {\n    return util.inspect(this.toJSON(), options);\n  };\n\n  return RoomListInstance;\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the RoomPage\n *\n * @constructor Twilio.Video.V1.RoomPage\n *\n * @param {V1} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {RoomSolution} solution - Path solution\n *\n * @returns RoomPage\n */\n/* jshint ignore:end */\nRoomPage = function RoomPage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n\n_.extend(RoomPage.prototype, Page.prototype);\nRoomPage.prototype.constructor = RoomPage;\n\n/* jshint ignore:start */\n/**\n * Build an instance of RoomInstance\n *\n * @function getInstance\n * @memberof Twilio.Video.V1.RoomPage#\n *\n * @param {RoomPayload} payload - Payload response from the API\n *\n * @returns RoomInstance\n */\n/* jshint ignore:end */\nRoomPage.prototype.getInstance = function getInstance(payload) {\n  return new RoomInstance(this._version, payload);\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Video.V1.RoomPage#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nRoomPage.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function(value, key) {\n    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\n\nRoomPage.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the RoomContext\n *\n * @constructor Twilio.Video.V1.RoomInstance\n *\n * @property {string} sid - The unique string that identifies the resource\n * @property {room.room_status} status - The status of the room\n * @property {Date} dateCreated -\n *          The ISO 8601 date and time in GMT when the resource was created\n * @property {Date} dateUpdated -\n *          The ISO 8601 date and time in GMT when the resource was last updated\n * @property {string} accountSid - The SID of the Account that created the resource\n * @property {boolean} enableTurn - Enable Twilio's Network Traversal TURN service\n * @property {string} uniqueName -\n *          An application-defined string that uniquely identifies the resource\n * @property {string} statusCallback -\n *          The URL to send status information to your application\n * @property {string} statusCallbackMethod -\n *          The HTTP method we use to call status_callback\n * @property {Date} endTime - The UTC end time of the room in UTC ISO 8601 format\n * @property {number} duration - The duration of the room in seconds\n * @property {room.room_type} type - The type of room\n * @property {number} maxParticipants -\n *          The maximum number of concurrent Participants allowed in the room\n * @property {number} maxParticipantDuration -\n *          The maximum number of seconds a Participant can be connected to the room\n * @property {number} maxConcurrentPublishedTracks -\n *          The maximum number of published tracks allowed in the room at the same time\n * @property {boolean} recordParticipantsOnConnect -\n *          Whether to start recording when Participants connect\n * @property {room.video_codec} videoCodecs -\n *          An array of the video codecs that are supported when publishing a track in the room\n * @property {string} mediaRegion - The region for the media server in Group Rooms\n * @property {boolean} audioOnly -\n *          Indicates whether the room will only contain audio track participants for group rooms.\n * @property {number} emptyRoomTimeout -\n *          The time a room will remain active after last participant leaves.\n * @property {number} unusedRoomTimeout -\n *          The time a room will remain active when no one joins.\n * @property {boolean} largeRoom - Indicates if this is a large room.\n * @property {string} url - The absolute URL of the resource\n * @property {string} links - The URLs of related resources\n *\n * @param {V1} version - Version of the resource\n * @param {RoomPayload} payload - The instance payload\n * @param {sid_like} sid - The SID that identifies the resource to fetch\n */\n/* jshint ignore:end */\nRoomInstance = function RoomInstance(version, payload, sid) {\n  this._version = version;\n\n  // Marshaled Properties\n  this.sid = payload.sid; // jshint ignore:line\n  this.status = payload.status; // jshint ignore:line\n  this.dateCreated = deserialize.iso8601DateTime(payload.date_created); // jshint ignore:line\n  this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated); // jshint ignore:line\n  this.accountSid = payload.account_sid; // jshint ignore:line\n  this.enableTurn = payload.enable_turn; // jshint ignore:line\n  this.uniqueName = payload.unique_name; // jshint ignore:line\n  this.statusCallback = payload.status_callback; // jshint ignore:line\n  this.statusCallbackMethod = payload.status_callback_method; // jshint ignore:line\n  this.endTime = deserialize.iso8601DateTime(payload.end_time); // jshint ignore:line\n  this.duration = deserialize.integer(payload.duration); // jshint ignore:line\n  this.type = payload.type; // jshint ignore:line\n  this.maxParticipants = deserialize.integer(payload.max_participants); // jshint ignore:line\n  this.maxParticipantDuration = deserialize.integer(payload.max_participant_duration); // jshint ignore:line\n  this.maxConcurrentPublishedTracks = deserialize.integer(payload.max_concurrent_published_tracks); // jshint ignore:line\n  this.recordParticipantsOnConnect = payload.record_participants_on_connect; // jshint ignore:line\n  this.videoCodecs = payload.video_codecs; // jshint ignore:line\n  this.mediaRegion = payload.media_region; // jshint ignore:line\n  this.audioOnly = payload.audio_only; // jshint ignore:line\n  this.emptyRoomTimeout = deserialize.integer(payload.empty_room_timeout); // jshint ignore:line\n  this.unusedRoomTimeout = deserialize.integer(payload.unused_room_timeout); // jshint ignore:line\n  this.largeRoom = payload.large_room; // jshint ignore:line\n  this.url = payload.url; // jshint ignore:line\n  this.links = payload.links; // jshint ignore:line\n\n  // Context\n  this._context = undefined;\n  this._solution = {sid: sid || this.sid, };\n};\n\nObject.defineProperty(RoomInstance.prototype,\n  '_proxy', {\n    get: function() {\n      if (!this._context) {\n        this._context = new RoomContext(this._version, this._solution.sid);\n      }\n\n      return this._context;\n    }\n});\n\n/* jshint ignore:start */\n/**\n * fetch a RoomInstance\n *\n * @function fetch\n * @memberof Twilio.Video.V1.RoomInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed RoomInstance\n */\n/* jshint ignore:end */\nRoomInstance.prototype.fetch = function fetch(callback) {\n  return this._proxy.fetch(callback);\n};\n\n/* jshint ignore:start */\n/**\n * update a RoomInstance\n *\n * @function update\n * @memberof Twilio.Video.V1.RoomInstance#\n *\n * @param {object} opts - Options for request\n * @param {room.room_status} opts.status - The new status of the resource\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed RoomInstance\n */\n/* jshint ignore:end */\nRoomInstance.prototype.update = function update(opts, callback) {\n  return this._proxy.update(opts, callback);\n};\n\n/* jshint ignore:start */\n/**\n * Access the recordings\n *\n * @function recordings\n * @memberof Twilio.Video.V1.RoomInstance#\n *\n * @returns {Twilio.Video.V1.RoomContext.RoomRecordingList}\n */\n/* jshint ignore:end */\nRoomInstance.prototype.recordings = function recordings() {\n  return this._proxy.recordings;\n};\n\n/* jshint ignore:start */\n/**\n * Access the participants\n *\n * @function participants\n * @memberof Twilio.Video.V1.RoomInstance#\n *\n * @returns {Twilio.Video.V1.RoomContext.ParticipantList}\n */\n/* jshint ignore:end */\nRoomInstance.prototype.participants = function participants() {\n  return this._proxy.participants;\n};\n\n/* jshint ignore:start */\n/**\n * Access the recordingRules\n *\n * @function recordingRules\n * @memberof Twilio.Video.V1.RoomInstance#\n *\n * @returns {Twilio.Video.V1.RoomContext.RecordingRulesList}\n */\n/* jshint ignore:end */\nRoomInstance.prototype.recordingRules = function recordingRules() {\n  return this._proxy.recordingRules;\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Video.V1.RoomInstance#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nRoomInstance.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function(value, key) {\n    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\n\nRoomInstance.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the RoomContext\n *\n * @constructor Twilio.Video.V1.RoomContext\n *\n * @property {Twilio.Video.V1.RoomContext.RoomRecordingList} recordings -\n *          recordings resource\n * @property {Twilio.Video.V1.RoomContext.ParticipantList} participants -\n *          participants resource\n * @property {Twilio.Video.V1.RoomContext.RecordingRulesList} recordingRules -\n *          recordingRules resource\n *\n * @param {V1} version - Version of the resource\n * @param {sid_like} sid - The SID that identifies the resource to fetch\n */\n/* jshint ignore:end */\nRoomContext = function RoomContext(version, sid) {\n  this._version = version;\n\n  // Path Solution\n  this._solution = {sid: sid, };\n  this._uri = `/Rooms/${sid}`;\n\n  // Dependents\n  this._recordings = undefined;\n  this._participants = undefined;\n  this._recordingRules = undefined;\n};\n\n/* jshint ignore:start */\n/**\n * fetch a RoomInstance\n *\n * @function fetch\n * @memberof Twilio.Video.V1.RoomContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed RoomInstance\n */\n/* jshint ignore:end */\nRoomContext.prototype.fetch = function fetch(callback) {\n  var deferred = Q.defer();\n  var promise = this._version.fetch({uri: this._uri, method: 'GET'});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(new RoomInstance(this._version, payload, this._solution.sid));\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * update a RoomInstance\n *\n * @function update\n * @memberof Twilio.Video.V1.RoomContext#\n *\n * @param {object} opts - Options for request\n * @param {room.room_status} opts.status - The new status of the resource\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed RoomInstance\n */\n/* jshint ignore:end */\nRoomContext.prototype.update = function update(opts, callback) {\n  if (_.isUndefined(opts)) {\n    throw new Error('Required parameter \"opts\" missing.');\n  }\n  if (_.isUndefined(opts['status'])) {\n    throw new Error('Required parameter \"opts[\\'status\\']\" missing.');\n  }\n\n  var deferred = Q.defer();\n  var data = values.of({'Status': _.get(opts, 'status')});\n\n  var promise = this._version.update({uri: this._uri, method: 'POST', data: data});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(new RoomInstance(this._version, payload, this._solution.sid));\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\nObject.defineProperty(RoomContext.prototype,\n  'recordings', {\n    get: function() {\n      if (!this._recordings) {\n        this._recordings = new RoomRecordingList(this._version, this._solution.sid);\n      }\n      return this._recordings;\n    }\n});\n\nObject.defineProperty(RoomContext.prototype,\n  'participants', {\n    get: function() {\n      if (!this._participants) {\n        this._participants = new ParticipantList(this._version, this._solution.sid);\n      }\n      return this._participants;\n    }\n});\n\nObject.defineProperty(RoomContext.prototype,\n  'recordingRules', {\n    get: function() {\n      if (!this._recordingRules) {\n        this._recordingRules = new RecordingRulesList(this._version, this._solution.sid);\n      }\n      return this._recordingRules;\n    }\n});\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Video.V1.RoomContext#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nRoomContext.prototype.toJSON = function toJSON() {\n  return this._solution;\n};\n\nRoomContext.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\nmodule.exports = {\n  RoomList: RoomList,\n  RoomPage: RoomPage,\n  RoomInstance: RoomInstance,\n  RoomContext: RoomContext\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}