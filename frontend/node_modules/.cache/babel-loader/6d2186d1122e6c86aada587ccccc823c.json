{"ast":null,"code":"'use strict';\n/* jshint ignore:start */\n\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n\n/* jshint ignore:end */\n\nvar Q = require('q');\n/* jshint ignore:line */\n\n\nvar _ = require('lodash');\n/* jshint ignore:line */\n\n\nvar util = require('util');\n/* jshint ignore:line */\n\n\nvar NetworkAccessProfileNetworkList = require('./networkAccessProfile/networkAccessProfileNetwork').NetworkAccessProfileNetworkList;\n\nvar Page = require('../../../base/Page');\n/* jshint ignore:line */\n\n\nvar deserialize = require('../../../base/deserialize');\n/* jshint ignore:line */\n\n\nvar serialize = require('../../../base/serialize');\n/* jshint ignore:line */\n\n\nvar values = require('../../../base/values');\n/* jshint ignore:line */\n\n\nvar NetworkAccessProfileList;\nvar NetworkAccessProfilePage;\nvar NetworkAccessProfileInstance;\nvar NetworkAccessProfileContext;\n/* jshint ignore:start */\n\n/**\n * Initialize the NetworkAccessProfileList\n *\n * PLEASE NOTE that this class contains beta products that are subject to change.\n * Use them with caution.\n *\n * @constructor Twilio.Supersim.V1.NetworkAccessProfileList\n *\n * @param {Twilio.Supersim.V1} version - Version of the resource\n */\n\n/* jshint ignore:end */\n\nNetworkAccessProfileList = function NetworkAccessProfileList(version) {\n  /* jshint ignore:start */\n\n  /**\n   * @function networkAccessProfiles\n   * @memberof Twilio.Supersim.V1#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Supersim.V1.NetworkAccessProfileContext}\n   */\n\n  /* jshint ignore:end */\n  function NetworkAccessProfileListInstance(sid) {\n    return NetworkAccessProfileListInstance.get(sid);\n  }\n\n  NetworkAccessProfileListInstance._version = version; // Path Solution\n\n  NetworkAccessProfileListInstance._solution = {};\n  NetworkAccessProfileListInstance._uri = `/NetworkAccessProfiles`;\n  /* jshint ignore:start */\n\n  /**\n   * create a NetworkAccessProfileInstance\n   *\n   * @function create\n   * @memberof Twilio.Supersim.V1.NetworkAccessProfileList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.uniqueName] -\n   *          An application-defined string that uniquely identifies the resource\n   * @param {string|list} [opts.networks] -\n   *          List of Network SIDs that this Network Access Profile will allow connections to\n   * @param {function} [callback] - Callback to handle processed record\n   *\n   * @returns {Promise} Resolves to processed NetworkAccessProfileInstance\n   */\n\n  /* jshint ignore:end */\n\n  NetworkAccessProfileListInstance.create = function create(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n    var deferred = Q.defer();\n    var data = values.of({\n      'UniqueName': _.get(opts, 'uniqueName'),\n      'Networks': serialize.map(_.get(opts, 'networks'), function (e) {\n        return e;\n      })\n    });\n\n    var promise = this._version.create({\n      uri: this._uri,\n      method: 'POST',\n      data: data\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new NetworkAccessProfileInstance(this._version, payload, this._solution.sid));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Streams NetworkAccessProfileInstance records from the API.\n   *\n   * This operation lazily loads records as efficiently as possible until the limit\n   * is reached.\n   *\n   * The results are passed into the callback function, so this operation is memory\n   * efficient.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function each\n   * @memberof Twilio.Supersim.V1.NetworkAccessProfileList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         each() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no pageSize is defined but a limit is defined,\n   *         each() will attempt to read the limit with the most efficient\n   *         page size, i.e. min(limit, 1000)\n   * @param {Function} [opts.callback] -\n   *         Function to process each record. If this and a positional\n   *         callback are passed, this one will be used\n   * @param {Function} [opts.done] -\n   *          Function to be called upon completion of streaming\n   * @param {Function} [callback] - Function to process each record\n   */\n\n  /* jshint ignore:end */\n\n\n  NetworkAccessProfileListInstance.each = function each(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n\n    if (opts.callback) {\n      callback = opts.callback;\n    }\n\n    if (_.isUndefined(callback)) {\n      throw new Error('Callback function must be provided');\n    }\n\n    var done = false;\n    var currentPage = 1;\n    var currentResource = 0;\n\n    var limits = this._version.readLimits({\n      limit: opts.limit,\n      pageSize: opts.pageSize\n    });\n\n    function onComplete(error) {\n      done = true;\n\n      if (_.isFunction(opts.done)) {\n        opts.done(error);\n      }\n    }\n\n    function fetchNextPage(fn) {\n      var promise = fn();\n\n      if (_.isUndefined(promise)) {\n        onComplete();\n        return;\n      }\n\n      promise.then(function (page) {\n        _.each(page.instances, function (instance) {\n          if (done || !_.isUndefined(opts.limit) && currentResource >= opts.limit) {\n            done = true;\n            return false;\n          }\n\n          currentResource++;\n          callback(instance, onComplete);\n        });\n\n        if (!done) {\n          currentPage++;\n          fetchNextPage(_.bind(page.nextPage, page));\n        } else {\n          onComplete();\n        }\n      });\n      promise.catch(onComplete);\n    }\n\n    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Lists NetworkAccessProfileInstance records from the API as a list.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function list\n   * @memberof Twilio.Supersim.V1.NetworkAccessProfileList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         list() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no page_size is defined but a limit is defined,\n   *         list() will attempt to read the limit with the most\n   *         efficient page size, i.e. min(limit, 1000)\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  NetworkAccessProfileListInstance.list = function list(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n    var deferred = Q.defer();\n    var allResources = [];\n\n    opts.callback = function (resource, done) {\n      allResources.push(resource);\n\n      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {\n        done();\n      }\n    };\n\n    opts.done = function (error) {\n      if (_.isUndefined(error)) {\n        deferred.resolve(allResources);\n      } else {\n        deferred.reject(error);\n      }\n    };\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    this.each(opts);\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Retrieve a single page of NetworkAccessProfileInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function page\n   * @memberof Twilio.Supersim.V1.NetworkAccessProfileList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.pageToken] - PageToken provided by the API\n   * @param {number} [opts.pageNumber] -\n   *          Page Number, this value is simply for client state\n   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  NetworkAccessProfileListInstance.page = function page(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n    var deferred = Q.defer();\n    var data = values.of({\n      'PageToken': opts.pageToken,\n      'Page': opts.pageNumber,\n      'PageSize': opts.pageSize\n    });\n\n    var promise = this._version.page({\n      uri: this._uri,\n      method: 'GET',\n      params: data\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new NetworkAccessProfilePage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Retrieve a single target page of NetworkAccessProfileInstance records from the\n   * API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function getPage\n   * @memberof Twilio.Supersim.V1.NetworkAccessProfileList#\n   *\n   * @param {string} [targetUrl] - API-generated URL for the requested results page\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  NetworkAccessProfileListInstance.getPage = function getPage(targetUrl, callback) {\n    var deferred = Q.defer();\n\n    var promise = this._version._domain.twilio.request({\n      method: 'GET',\n      uri: targetUrl\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new NetworkAccessProfilePage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Constructs a network_access_profile\n   *\n   * @function get\n   * @memberof Twilio.Supersim.V1.NetworkAccessProfileList#\n   *\n   * @param {string} sid - The SID that identifies the resource to fetch\n   *\n   * @returns {Twilio.Supersim.V1.NetworkAccessProfileContext}\n   */\n\n  /* jshint ignore:end */\n\n\n  NetworkAccessProfileListInstance.get = function get(sid) {\n    return new NetworkAccessProfileContext(this._version, sid);\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Supersim.V1.NetworkAccessProfileList#\n   *\n   * @returns Object\n   */\n\n  /* jshint ignore:end */\n\n\n  NetworkAccessProfileListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n\n  NetworkAccessProfileListInstance[util.inspect.custom] = function inspect(depth, options) {\n    return util.inspect(this.toJSON(), options);\n  };\n\n  return NetworkAccessProfileListInstance;\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the NetworkAccessProfilePage\n *\n * PLEASE NOTE that this class contains beta products that are subject to change.\n * Use them with caution.\n *\n * @constructor Twilio.Supersim.V1.NetworkAccessProfilePage\n *\n * @param {V1} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {NetworkAccessProfileSolution} solution - Path solution\n *\n * @returns NetworkAccessProfilePage\n */\n\n/* jshint ignore:end */\n\n\nNetworkAccessProfilePage = function NetworkAccessProfilePage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n\n_.extend(NetworkAccessProfilePage.prototype, Page.prototype);\n\nNetworkAccessProfilePage.prototype.constructor = NetworkAccessProfilePage;\n/* jshint ignore:start */\n\n/**\n * Build an instance of NetworkAccessProfileInstance\n *\n * @function getInstance\n * @memberof Twilio.Supersim.V1.NetworkAccessProfilePage#\n *\n * @param {NetworkAccessProfilePayload} payload - Payload response from the API\n *\n * @returns NetworkAccessProfileInstance\n */\n\n/* jshint ignore:end */\n\nNetworkAccessProfilePage.prototype.getInstance = function getInstance(payload) {\n  return new NetworkAccessProfileInstance(this._version, payload);\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Supersim.V1.NetworkAccessProfilePage#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nNetworkAccessProfilePage.prototype.toJSON = function toJSON() {\n  let clone = {};\n\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n\n  return clone;\n};\n\nNetworkAccessProfilePage.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the NetworkAccessProfileContext\n *\n * PLEASE NOTE that this class contains beta products that are subject to change.\n * Use them with caution.\n *\n * @constructor Twilio.Supersim.V1.NetworkAccessProfileInstance\n *\n * @property {string} sid - The unique string that identifies the resource\n * @property {string} uniqueName -\n *          An application-defined string that uniquely identifies the resource\n * @property {string} accountSid -\n *          The SID of the Account that the Network Access Profile belongs to\n * @property {Date} dateCreated -\n *          The ISO 8601 date and time in GMT when the resource was created\n * @property {Date} dateUpdated -\n *          The ISO 8601 date and time in GMT when the resource was last updated\n * @property {string} url - The absolute URL of the resource\n * @property {string} links - The links\n *\n * @param {V1} version - Version of the resource\n * @param {NetworkAccessProfilePayload} payload - The instance payload\n * @param {sid_like} sid - The SID that identifies the resource to fetch\n */\n\n/* jshint ignore:end */\n\n\nNetworkAccessProfileInstance = function NetworkAccessProfileInstance(version, payload, sid) {\n  this._version = version; // Marshaled Properties\n\n  this.sid = payload.sid; // jshint ignore:line\n\n  this.uniqueName = payload.unique_name; // jshint ignore:line\n\n  this.accountSid = payload.account_sid; // jshint ignore:line\n\n  this.dateCreated = deserialize.iso8601DateTime(payload.date_created); // jshint ignore:line\n\n  this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated); // jshint ignore:line\n\n  this.url = payload.url; // jshint ignore:line\n\n  this.links = payload.links; // jshint ignore:line\n  // Context\n\n  this._context = undefined;\n  this._solution = {\n    sid: sid || this.sid\n  };\n};\n\nObject.defineProperty(NetworkAccessProfileInstance.prototype, '_proxy', {\n  get: function () {\n    if (!this._context) {\n      this._context = new NetworkAccessProfileContext(this._version, this._solution.sid);\n    }\n\n    return this._context;\n  }\n});\n/* jshint ignore:start */\n\n/**\n * fetch a NetworkAccessProfileInstance\n *\n * @function fetch\n * @memberof Twilio.Supersim.V1.NetworkAccessProfileInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed NetworkAccessProfileInstance\n */\n\n/* jshint ignore:end */\n\nNetworkAccessProfileInstance.prototype.fetch = function fetch(callback) {\n  return this._proxy.fetch(callback);\n};\n/* jshint ignore:start */\n\n/**\n * update a NetworkAccessProfileInstance\n *\n * @function update\n * @memberof Twilio.Supersim.V1.NetworkAccessProfileInstance#\n *\n * @param {object} [opts] - Options for request\n * @param {string} [opts.uniqueName] - The new unique name of the resource\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed NetworkAccessProfileInstance\n */\n\n/* jshint ignore:end */\n\n\nNetworkAccessProfileInstance.prototype.update = function update(opts, callback) {\n  return this._proxy.update(opts, callback);\n};\n/* jshint ignore:start */\n\n/**\n * Access the networks\n *\n * @function networks\n * @memberof Twilio.Supersim.V1.NetworkAccessProfileInstance#\n *\n * @returns {Twilio.Supersim.V1.NetworkAccessProfileContext.NetworkAccessProfileNetworkList}\n */\n\n/* jshint ignore:end */\n\n\nNetworkAccessProfileInstance.prototype.networks = function networks() {\n  return this._proxy.networks;\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Supersim.V1.NetworkAccessProfileInstance#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nNetworkAccessProfileInstance.prototype.toJSON = function toJSON() {\n  let clone = {};\n\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n\n  return clone;\n};\n\nNetworkAccessProfileInstance.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the NetworkAccessProfileContext\n *\n * PLEASE NOTE that this class contains beta products that are subject to change.\n * Use them with caution.\n *\n * @constructor Twilio.Supersim.V1.NetworkAccessProfileContext\n *\n * @property {Twilio.Supersim.V1.NetworkAccessProfileContext.NetworkAccessProfileNetworkList} networks -\n *          networks resource\n *\n * @param {V1} version - Version of the resource\n * @param {sid_like} sid - The SID that identifies the resource to fetch\n */\n\n/* jshint ignore:end */\n\n\nNetworkAccessProfileContext = function NetworkAccessProfileContext(version, sid) {\n  this._version = version; // Path Solution\n\n  this._solution = {\n    sid: sid\n  };\n  this._uri = `/NetworkAccessProfiles/${sid}`; // Dependents\n\n  this._networks = undefined;\n};\n/* jshint ignore:start */\n\n/**\n * fetch a NetworkAccessProfileInstance\n *\n * @function fetch\n * @memberof Twilio.Supersim.V1.NetworkAccessProfileContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed NetworkAccessProfileInstance\n */\n\n/* jshint ignore:end */\n\n\nNetworkAccessProfileContext.prototype.fetch = function fetch(callback) {\n  var deferred = Q.defer();\n\n  var promise = this._version.fetch({\n    uri: this._uri,\n    method: 'GET'\n  });\n\n  promise = promise.then(function (payload) {\n    deferred.resolve(new NetworkAccessProfileInstance(this._version, payload, this._solution.sid));\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n/* jshint ignore:start */\n\n/**\n * update a NetworkAccessProfileInstance\n *\n * @function update\n * @memberof Twilio.Supersim.V1.NetworkAccessProfileContext#\n *\n * @param {object} [opts] - Options for request\n * @param {string} [opts.uniqueName] - The new unique name of the resource\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed NetworkAccessProfileInstance\n */\n\n/* jshint ignore:end */\n\n\nNetworkAccessProfileContext.prototype.update = function update(opts, callback) {\n  if (_.isFunction(opts)) {\n    callback = opts;\n    opts = {};\n  }\n\n  opts = opts || {};\n  var deferred = Q.defer();\n  var data = values.of({\n    'UniqueName': _.get(opts, 'uniqueName')\n  });\n\n  var promise = this._version.update({\n    uri: this._uri,\n    method: 'POST',\n    data: data\n  });\n\n  promise = promise.then(function (payload) {\n    deferred.resolve(new NetworkAccessProfileInstance(this._version, payload, this._solution.sid));\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\nObject.defineProperty(NetworkAccessProfileContext.prototype, 'networks', {\n  get: function () {\n    if (!this._networks) {\n      this._networks = new NetworkAccessProfileNetworkList(this._version, this._solution.sid);\n    }\n\n    return this._networks;\n  }\n});\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Supersim.V1.NetworkAccessProfileContext#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\nNetworkAccessProfileContext.prototype.toJSON = function toJSON() {\n  return this._solution;\n};\n\nNetworkAccessProfileContext.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\nmodule.exports = {\n  NetworkAccessProfileList: NetworkAccessProfileList,\n  NetworkAccessProfilePage: NetworkAccessProfilePage,\n  NetworkAccessProfileInstance: NetworkAccessProfileInstance,\n  NetworkAccessProfileContext: NetworkAccessProfileContext\n};","map":{"version":3,"names":["Q","require","_","util","NetworkAccessProfileNetworkList","Page","deserialize","serialize","values","NetworkAccessProfileList","NetworkAccessProfilePage","NetworkAccessProfileInstance","NetworkAccessProfileContext","version","NetworkAccessProfileListInstance","sid","get","_version","_solution","_uri","create","opts","callback","isFunction","deferred","defer","data","of","map","e","promise","uri","method","then","payload","resolve","bind","catch","error","reject","nodeify","each","isUndefined","Error","done","currentPage","currentResource","limits","readLimits","limit","pageSize","onComplete","fetchNextPage","fn","page","instances","instance","nextPage","merge","list","allResources","resource","push","length","pageToken","pageNumber","params","getPage","targetUrl","_domain","twilio","request","toJSON","inspect","custom","depth","options","response","solution","prototype","constructor","call","extend","getInstance","clone","forOwn","value","key","startsWith","uniqueName","unique_name","accountSid","account_sid","dateCreated","iso8601DateTime","date_created","dateUpdated","date_updated","url","links","_context","undefined","Object","defineProperty","fetch","_proxy","update","networks","_networks","module","exports"],"sources":["/Users/hooniesun/rmit/fwp/assessment1/lan/node_modules/twilio/lib/rest/supersim/v1/networkAccessProfile.js"],"sourcesContent":["'use strict';\n\n/* jshint ignore:start */\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n/* jshint ignore:end */\n\nvar Q = require('q');  /* jshint ignore:line */\nvar _ = require('lodash');  /* jshint ignore:line */\nvar util = require('util');  /* jshint ignore:line */\nvar NetworkAccessProfileNetworkList = require(\n    './networkAccessProfile/networkAccessProfileNetwork').NetworkAccessProfileNetworkList;\nvar Page = require('../../../base/Page');  /* jshint ignore:line */\nvar deserialize = require(\n    '../../../base/deserialize');  /* jshint ignore:line */\nvar serialize = require('../../../base/serialize');  /* jshint ignore:line */\nvar values = require('../../../base/values');  /* jshint ignore:line */\n\nvar NetworkAccessProfileList;\nvar NetworkAccessProfilePage;\nvar NetworkAccessProfileInstance;\nvar NetworkAccessProfileContext;\n\n/* jshint ignore:start */\n/**\n * Initialize the NetworkAccessProfileList\n *\n * PLEASE NOTE that this class contains beta products that are subject to change.\n * Use them with caution.\n *\n * @constructor Twilio.Supersim.V1.NetworkAccessProfileList\n *\n * @param {Twilio.Supersim.V1} version - Version of the resource\n */\n/* jshint ignore:end */\nNetworkAccessProfileList = function NetworkAccessProfileList(version) {\n  /* jshint ignore:start */\n  /**\n   * @function networkAccessProfiles\n   * @memberof Twilio.Supersim.V1#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Supersim.V1.NetworkAccessProfileContext}\n   */\n  /* jshint ignore:end */\n  function NetworkAccessProfileListInstance(sid) {\n    return NetworkAccessProfileListInstance.get(sid);\n  }\n\n  NetworkAccessProfileListInstance._version = version;\n  // Path Solution\n  NetworkAccessProfileListInstance._solution = {};\n  NetworkAccessProfileListInstance._uri = `/NetworkAccessProfiles`;\n  /* jshint ignore:start */\n  /**\n   * create a NetworkAccessProfileInstance\n   *\n   * @function create\n   * @memberof Twilio.Supersim.V1.NetworkAccessProfileList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.uniqueName] -\n   *          An application-defined string that uniquely identifies the resource\n   * @param {string|list} [opts.networks] -\n   *          List of Network SIDs that this Network Access Profile will allow connections to\n   * @param {function} [callback] - Callback to handle processed record\n   *\n   * @returns {Promise} Resolves to processed NetworkAccessProfileInstance\n   */\n  /* jshint ignore:end */\n  NetworkAccessProfileListInstance.create = function create(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n\n    var deferred = Q.defer();\n    var data = values.of({\n      'UniqueName': _.get(opts, 'uniqueName'),\n      'Networks': serialize.map(_.get(opts, 'networks'), function(e) { return e; })\n    });\n\n    var promise = this._version.create({uri: this._uri, method: 'POST', data: data});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new NetworkAccessProfileInstance(this._version, payload, this._solution.sid));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Streams NetworkAccessProfileInstance records from the API.\n   *\n   * This operation lazily loads records as efficiently as possible until the limit\n   * is reached.\n   *\n   * The results are passed into the callback function, so this operation is memory\n   * efficient.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function each\n   * @memberof Twilio.Supersim.V1.NetworkAccessProfileList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         each() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no pageSize is defined but a limit is defined,\n   *         each() will attempt to read the limit with the most efficient\n   *         page size, i.e. min(limit, 1000)\n   * @param {Function} [opts.callback] -\n   *         Function to process each record. If this and a positional\n   *         callback are passed, this one will be used\n   * @param {Function} [opts.done] -\n   *          Function to be called upon completion of streaming\n   * @param {Function} [callback] - Function to process each record\n   */\n  /* jshint ignore:end */\n  NetworkAccessProfileListInstance.each = function each(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    if (opts.callback) {\n      callback = opts.callback;\n    }\n    if (_.isUndefined(callback)) {\n      throw new Error('Callback function must be provided');\n    }\n\n    var done = false;\n    var currentPage = 1;\n    var currentResource = 0;\n    var limits = this._version.readLimits({\n      limit: opts.limit,\n      pageSize: opts.pageSize\n    });\n\n    function onComplete(error) {\n      done = true;\n      if (_.isFunction(opts.done)) {\n        opts.done(error);\n      }\n    }\n\n    function fetchNextPage(fn) {\n      var promise = fn();\n      if (_.isUndefined(promise)) {\n        onComplete();\n        return;\n      }\n\n      promise.then(function(page) {\n        _.each(page.instances, function(instance) {\n          if (done || (!_.isUndefined(opts.limit) && currentResource >= opts.limit)) {\n            done = true;\n            return false;\n          }\n\n          currentResource++;\n          callback(instance, onComplete);\n        });\n\n        if (!done) {\n          currentPage++;\n          fetchNextPage(_.bind(page.nextPage, page));\n        } else {\n          onComplete();\n        }\n      });\n\n      promise.catch(onComplete);\n    }\n\n    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Lists NetworkAccessProfileInstance records from the API as a list.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function list\n   * @memberof Twilio.Supersim.V1.NetworkAccessProfileList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         list() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no page_size is defined but a limit is defined,\n   *         list() will attempt to read the limit with the most\n   *         efficient page size, i.e. min(limit, 1000)\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  NetworkAccessProfileListInstance.list = function list(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    var deferred = Q.defer();\n    var allResources = [];\n    opts.callback = function(resource, done) {\n      allResources.push(resource);\n\n      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {\n        done();\n      }\n    };\n\n    opts.done = function(error) {\n      if (_.isUndefined(error)) {\n        deferred.resolve(allResources);\n      } else {\n        deferred.reject(error);\n      }\n    };\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    this.each(opts);\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single page of NetworkAccessProfileInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function page\n   * @memberof Twilio.Supersim.V1.NetworkAccessProfileList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.pageToken] - PageToken provided by the API\n   * @param {number} [opts.pageNumber] -\n   *          Page Number, this value is simply for client state\n   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  NetworkAccessProfileListInstance.page = function page(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n\n    var deferred = Q.defer();\n    var data = values.of({\n      'PageToken': opts.pageToken,\n      'Page': opts.pageNumber,\n      'PageSize': opts.pageSize\n    });\n\n    var promise = this._version.page({uri: this._uri, method: 'GET', params: data});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new NetworkAccessProfilePage(this._version, payload, this._solution));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single target page of NetworkAccessProfileInstance records from the\n   * API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function getPage\n   * @memberof Twilio.Supersim.V1.NetworkAccessProfileList#\n   *\n   * @param {string} [targetUrl] - API-generated URL for the requested results page\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  NetworkAccessProfileListInstance.getPage = function getPage(targetUrl, callback)\n                                                               {\n    var deferred = Q.defer();\n\n    var promise = this._version._domain.twilio.request({method: 'GET', uri: targetUrl});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new NetworkAccessProfilePage(this._version, payload, this._solution));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Constructs a network_access_profile\n   *\n   * @function get\n   * @memberof Twilio.Supersim.V1.NetworkAccessProfileList#\n   *\n   * @param {string} sid - The SID that identifies the resource to fetch\n   *\n   * @returns {Twilio.Supersim.V1.NetworkAccessProfileContext}\n   */\n  /* jshint ignore:end */\n  NetworkAccessProfileListInstance.get = function get(sid) {\n    return new NetworkAccessProfileContext(this._version, sid);\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Supersim.V1.NetworkAccessProfileList#\n   *\n   * @returns Object\n   */\n  /* jshint ignore:end */\n  NetworkAccessProfileListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n\n  NetworkAccessProfileListInstance[util.inspect.custom] = function inspect(depth,\n      options) {\n    return util.inspect(this.toJSON(), options);\n  };\n\n  return NetworkAccessProfileListInstance;\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the NetworkAccessProfilePage\n *\n * PLEASE NOTE that this class contains beta products that are subject to change.\n * Use them with caution.\n *\n * @constructor Twilio.Supersim.V1.NetworkAccessProfilePage\n *\n * @param {V1} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {NetworkAccessProfileSolution} solution - Path solution\n *\n * @returns NetworkAccessProfilePage\n */\n/* jshint ignore:end */\nNetworkAccessProfilePage = function NetworkAccessProfilePage(version, response,\n    solution) {\n  // Path Solution\n  this._solution = solution;\n\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n\n_.extend(NetworkAccessProfilePage.prototype, Page.prototype);\nNetworkAccessProfilePage.prototype.constructor = NetworkAccessProfilePage;\n\n/* jshint ignore:start */\n/**\n * Build an instance of NetworkAccessProfileInstance\n *\n * @function getInstance\n * @memberof Twilio.Supersim.V1.NetworkAccessProfilePage#\n *\n * @param {NetworkAccessProfilePayload} payload - Payload response from the API\n *\n * @returns NetworkAccessProfileInstance\n */\n/* jshint ignore:end */\nNetworkAccessProfilePage.prototype.getInstance = function getInstance(payload) {\n  return new NetworkAccessProfileInstance(this._version, payload);\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Supersim.V1.NetworkAccessProfilePage#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nNetworkAccessProfilePage.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function(value, key) {\n    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\n\nNetworkAccessProfilePage.prototype[util.inspect.custom] = function\n    inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the NetworkAccessProfileContext\n *\n * PLEASE NOTE that this class contains beta products that are subject to change.\n * Use them with caution.\n *\n * @constructor Twilio.Supersim.V1.NetworkAccessProfileInstance\n *\n * @property {string} sid - The unique string that identifies the resource\n * @property {string} uniqueName -\n *          An application-defined string that uniquely identifies the resource\n * @property {string} accountSid -\n *          The SID of the Account that the Network Access Profile belongs to\n * @property {Date} dateCreated -\n *          The ISO 8601 date and time in GMT when the resource was created\n * @property {Date} dateUpdated -\n *          The ISO 8601 date and time in GMT when the resource was last updated\n * @property {string} url - The absolute URL of the resource\n * @property {string} links - The links\n *\n * @param {V1} version - Version of the resource\n * @param {NetworkAccessProfilePayload} payload - The instance payload\n * @param {sid_like} sid - The SID that identifies the resource to fetch\n */\n/* jshint ignore:end */\nNetworkAccessProfileInstance = function NetworkAccessProfileInstance(version,\n    payload, sid) {\n  this._version = version;\n\n  // Marshaled Properties\n  this.sid = payload.sid; // jshint ignore:line\n  this.uniqueName = payload.unique_name; // jshint ignore:line\n  this.accountSid = payload.account_sid; // jshint ignore:line\n  this.dateCreated = deserialize.iso8601DateTime(payload.date_created); // jshint ignore:line\n  this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated); // jshint ignore:line\n  this.url = payload.url; // jshint ignore:line\n  this.links = payload.links; // jshint ignore:line\n\n  // Context\n  this._context = undefined;\n  this._solution = {sid: sid || this.sid, };\n};\n\nObject.defineProperty(NetworkAccessProfileInstance.prototype,\n  '_proxy', {\n    get: function() {\n      if (!this._context) {\n        this._context = new NetworkAccessProfileContext(this._version, this._solution.sid);\n      }\n\n      return this._context;\n    }\n});\n\n/* jshint ignore:start */\n/**\n * fetch a NetworkAccessProfileInstance\n *\n * @function fetch\n * @memberof Twilio.Supersim.V1.NetworkAccessProfileInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed NetworkAccessProfileInstance\n */\n/* jshint ignore:end */\nNetworkAccessProfileInstance.prototype.fetch = function fetch(callback) {\n  return this._proxy.fetch(callback);\n};\n\n/* jshint ignore:start */\n/**\n * update a NetworkAccessProfileInstance\n *\n * @function update\n * @memberof Twilio.Supersim.V1.NetworkAccessProfileInstance#\n *\n * @param {object} [opts] - Options for request\n * @param {string} [opts.uniqueName] - The new unique name of the resource\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed NetworkAccessProfileInstance\n */\n/* jshint ignore:end */\nNetworkAccessProfileInstance.prototype.update = function update(opts, callback)\n    {\n  return this._proxy.update(opts, callback);\n};\n\n/* jshint ignore:start */\n/**\n * Access the networks\n *\n * @function networks\n * @memberof Twilio.Supersim.V1.NetworkAccessProfileInstance#\n *\n * @returns {Twilio.Supersim.V1.NetworkAccessProfileContext.NetworkAccessProfileNetworkList}\n */\n/* jshint ignore:end */\nNetworkAccessProfileInstance.prototype.networks = function networks() {\n  return this._proxy.networks;\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Supersim.V1.NetworkAccessProfileInstance#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nNetworkAccessProfileInstance.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function(value, key) {\n    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\n\nNetworkAccessProfileInstance.prototype[util.inspect.custom] = function\n    inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the NetworkAccessProfileContext\n *\n * PLEASE NOTE that this class contains beta products that are subject to change.\n * Use them with caution.\n *\n * @constructor Twilio.Supersim.V1.NetworkAccessProfileContext\n *\n * @property {Twilio.Supersim.V1.NetworkAccessProfileContext.NetworkAccessProfileNetworkList} networks -\n *          networks resource\n *\n * @param {V1} version - Version of the resource\n * @param {sid_like} sid - The SID that identifies the resource to fetch\n */\n/* jshint ignore:end */\nNetworkAccessProfileContext = function NetworkAccessProfileContext(version, sid)\n    {\n  this._version = version;\n\n  // Path Solution\n  this._solution = {sid: sid, };\n  this._uri = `/NetworkAccessProfiles/${sid}`;\n\n  // Dependents\n  this._networks = undefined;\n};\n\n/* jshint ignore:start */\n/**\n * fetch a NetworkAccessProfileInstance\n *\n * @function fetch\n * @memberof Twilio.Supersim.V1.NetworkAccessProfileContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed NetworkAccessProfileInstance\n */\n/* jshint ignore:end */\nNetworkAccessProfileContext.prototype.fetch = function fetch(callback) {\n  var deferred = Q.defer();\n  var promise = this._version.fetch({uri: this._uri, method: 'GET'});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(new NetworkAccessProfileInstance(this._version, payload, this._solution.sid));\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * update a NetworkAccessProfileInstance\n *\n * @function update\n * @memberof Twilio.Supersim.V1.NetworkAccessProfileContext#\n *\n * @param {object} [opts] - Options for request\n * @param {string} [opts.uniqueName] - The new unique name of the resource\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed NetworkAccessProfileInstance\n */\n/* jshint ignore:end */\nNetworkAccessProfileContext.prototype.update = function update(opts, callback) {\n  if (_.isFunction(opts)) {\n    callback = opts;\n    opts = {};\n  }\n  opts = opts || {};\n\n  var deferred = Q.defer();\n  var data = values.of({'UniqueName': _.get(opts, 'uniqueName')});\n\n  var promise = this._version.update({uri: this._uri, method: 'POST', data: data});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(new NetworkAccessProfileInstance(this._version, payload, this._solution.sid));\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\nObject.defineProperty(NetworkAccessProfileContext.prototype,\n  'networks', {\n    get: function() {\n      if (!this._networks) {\n        this._networks = new NetworkAccessProfileNetworkList(this._version, this._solution.sid);\n      }\n      return this._networks;\n    }\n});\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Supersim.V1.NetworkAccessProfileContext#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nNetworkAccessProfileContext.prototype.toJSON = function toJSON() {\n  return this._solution;\n};\n\nNetworkAccessProfileContext.prototype[util.inspect.custom] = function\n    inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\nmodule.exports = {\n  NetworkAccessProfileList: NetworkAccessProfileList,\n  NetworkAccessProfilePage: NetworkAccessProfilePage,\n  NetworkAccessProfileInstance: NetworkAccessProfileInstance,\n  NetworkAccessProfileContext: NetworkAccessProfileContext\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}