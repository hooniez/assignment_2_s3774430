{"ast":null,"code":"'use strict';\n/* jshint ignore:start */\n\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n\n/* jshint ignore:end */\n\nvar Q = require('q');\n/* jshint ignore:line */\n\n\nvar _ = require('lodash');\n/* jshint ignore:line */\n\n\nvar util = require('util');\n/* jshint ignore:line */\n\n\nvar AccessTokenList = require('./service/accessToken').AccessTokenList;\n\nvar EntityList = require('./service/entity').EntityList;\n\nvar MessagingConfigurationList = require('./service/messagingConfiguration').MessagingConfigurationList;\n\nvar Page = require('../../../base/Page');\n/* jshint ignore:line */\n\n\nvar RateLimitList = require('./service/rateLimit').RateLimitList;\n\nvar VerificationCheckList = require('./service/verificationCheck').VerificationCheckList;\n\nvar VerificationList = require('./service/verification').VerificationList;\n\nvar WebhookList = require('./service/webhook').WebhookList;\n\nvar deserialize = require('../../../base/deserialize');\n/* jshint ignore:line */\n\n\nvar serialize = require('../../../base/serialize');\n/* jshint ignore:line */\n\n\nvar values = require('../../../base/values');\n/* jshint ignore:line */\n\n\nvar ServiceList;\nvar ServicePage;\nvar ServiceInstance;\nvar ServiceContext;\n/* jshint ignore:start */\n\n/**\n * Initialize the ServiceList\n *\n * @constructor Twilio.Verify.V2.ServiceList\n *\n * @param {Twilio.Verify.V2} version - Version of the resource\n */\n\n/* jshint ignore:end */\n\nServiceList = function ServiceList(version) {\n  /* jshint ignore:start */\n\n  /**\n   * @function services\n   * @memberof Twilio.Verify.V2#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Verify.V2.ServiceContext}\n   */\n\n  /* jshint ignore:end */\n  function ServiceListInstance(sid) {\n    return ServiceListInstance.get(sid);\n  }\n\n  ServiceListInstance._version = version; // Path Solution\n\n  ServiceListInstance._solution = {};\n  ServiceListInstance._uri = `/Services`;\n  /* jshint ignore:start */\n\n  /**\n   * create a ServiceInstance\n   *\n   * @function create\n   * @memberof Twilio.Verify.V2.ServiceList#\n   *\n   * @param {object} opts - Options for request\n   * @param {string} opts.friendlyName -\n   *          A string to describe the verification service\n   * @param {number} [opts.codeLength] -\n   *          The length of the verification code to generate\n   * @param {boolean} [opts.lookupEnabled] -\n   *          Whether to perform a lookup with each verification\n   * @param {boolean} [opts.skipSmsToLandlines] -\n   *          Whether to skip sending SMS verifications to landlines\n   * @param {boolean} [opts.dtmfInputRequired] -\n   *          Whether to ask the user to press a number before delivering the verify code in a phone call\n   * @param {string} [opts.ttsName] -\n   *          The name of an alternative text-to-speech service to use in phone calls\n   * @param {boolean} [opts.psd2Enabled] -\n   *          Whether to pass PSD2 transaction parameters when starting a verification\n   * @param {boolean} [opts.doNotShareWarningEnabled] -\n   *          Whether to add a security warning at the end of an SMS.\n   * @param {boolean} [opts.customCodeEnabled] -\n   *          Whether to allow sending verifications with a custom code.\n   * @param {boolean} [opts.push.includeDate] -\n   *          Optional. Include the date in the Challenge's response. Default: false. **Deprecated** do not use this parameter.\n   * @param {string} [opts.push.apnCredentialSid] -\n   *          Optional. Set APN Credential for this service.\n   * @param {string} [opts.push.fcmCredentialSid] -\n   *          Optional. Set FCM Credential for this service.\n   * @param {string} [opts.totp.issuer] - Optional. Set TOTP Issuer for this service.\n   * @param {number} [opts.totp.timeStep] -\n   *          Optional. How often, in seconds, are TOTP codes generated\n   * @param {number} [opts.totp.codeLength] -\n   *          Optional. Number of digits for generated TOTP codes\n   * @param {number} [opts.totp.skew] -\n   *          Optional. The number of past and future time-steps valid at a given time\n   * @param {string} [opts.defaultTemplateSid] -\n   *          The verification template SMS messages.\n   * @param {function} [callback] - Callback to handle processed record\n   *\n   * @returns {Promise} Resolves to processed ServiceInstance\n   */\n\n  /* jshint ignore:end */\n\n  ServiceListInstance.create = function create(opts, callback) {\n    if (_.isUndefined(opts)) {\n      throw new Error('Required parameter \"opts\" missing.');\n    }\n\n    if (_.isUndefined(opts['friendlyName'])) {\n      throw new Error('Required parameter \"opts[\\'friendlyName\\']\" missing.');\n    }\n\n    var deferred = Q.defer();\n    var data = values.of({\n      'FriendlyName': _.get(opts, 'friendlyName'),\n      'CodeLength': _.get(opts, 'codeLength'),\n      'LookupEnabled': serialize.bool(_.get(opts, 'lookupEnabled')),\n      'SkipSmsToLandlines': serialize.bool(_.get(opts, 'skipSmsToLandlines')),\n      'DtmfInputRequired': serialize.bool(_.get(opts, 'dtmfInputRequired')),\n      'TtsName': _.get(opts, 'ttsName'),\n      'Psd2Enabled': serialize.bool(_.get(opts, 'psd2Enabled')),\n      'DoNotShareWarningEnabled': serialize.bool(_.get(opts, 'doNotShareWarningEnabled')),\n      'CustomCodeEnabled': serialize.bool(_.get(opts, 'customCodeEnabled')),\n      'Push.IncludeDate': serialize.bool(_.get(opts, 'push.includeDate')),\n      'Push.ApnCredentialSid': _.get(opts, 'push.apnCredentialSid'),\n      'Push.FcmCredentialSid': _.get(opts, 'push.fcmCredentialSid'),\n      'Totp.Issuer': _.get(opts, 'totp.issuer'),\n      'Totp.TimeStep': _.get(opts, 'totp.timeStep'),\n      'Totp.CodeLength': _.get(opts, 'totp.codeLength'),\n      'Totp.Skew': _.get(opts, 'totp.skew'),\n      'DefaultTemplateSid': _.get(opts, 'defaultTemplateSid')\n    });\n\n    var promise = this._version.create({\n      uri: this._uri,\n      method: 'POST',\n      data: data\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new ServiceInstance(this._version, payload, this._solution.sid));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Streams ServiceInstance records from the API.\n   *\n   * This operation lazily loads records as efficiently as possible until the limit\n   * is reached.\n   *\n   * The results are passed into the callback function, so this operation is memory\n   * efficient.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function each\n   * @memberof Twilio.Verify.V2.ServiceList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         each() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no pageSize is defined but a limit is defined,\n   *         each() will attempt to read the limit with the most efficient\n   *         page size, i.e. min(limit, 1000)\n   * @param {Function} [opts.callback] -\n   *         Function to process each record. If this and a positional\n   *         callback are passed, this one will be used\n   * @param {Function} [opts.done] -\n   *          Function to be called upon completion of streaming\n   * @param {Function} [callback] - Function to process each record\n   */\n\n  /* jshint ignore:end */\n\n\n  ServiceListInstance.each = function each(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n\n    if (opts.callback) {\n      callback = opts.callback;\n    }\n\n    if (_.isUndefined(callback)) {\n      throw new Error('Callback function must be provided');\n    }\n\n    var done = false;\n    var currentPage = 1;\n    var currentResource = 0;\n\n    var limits = this._version.readLimits({\n      limit: opts.limit,\n      pageSize: opts.pageSize\n    });\n\n    function onComplete(error) {\n      done = true;\n\n      if (_.isFunction(opts.done)) {\n        opts.done(error);\n      }\n    }\n\n    function fetchNextPage(fn) {\n      var promise = fn();\n\n      if (_.isUndefined(promise)) {\n        onComplete();\n        return;\n      }\n\n      promise.then(function (page) {\n        _.each(page.instances, function (instance) {\n          if (done || !_.isUndefined(opts.limit) && currentResource >= opts.limit) {\n            done = true;\n            return false;\n          }\n\n          currentResource++;\n          callback(instance, onComplete);\n        });\n\n        if (!done) {\n          currentPage++;\n          fetchNextPage(_.bind(page.nextPage, page));\n        } else {\n          onComplete();\n        }\n      });\n      promise.catch(onComplete);\n    }\n\n    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Lists ServiceInstance records from the API as a list.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function list\n   * @memberof Twilio.Verify.V2.ServiceList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         list() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no page_size is defined but a limit is defined,\n   *         list() will attempt to read the limit with the most\n   *         efficient page size, i.e. min(limit, 1000)\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  ServiceListInstance.list = function list(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n    var deferred = Q.defer();\n    var allResources = [];\n\n    opts.callback = function (resource, done) {\n      allResources.push(resource);\n\n      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {\n        done();\n      }\n    };\n\n    opts.done = function (error) {\n      if (_.isUndefined(error)) {\n        deferred.resolve(allResources);\n      } else {\n        deferred.reject(error);\n      }\n    };\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    this.each(opts);\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Retrieve a single page of ServiceInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function page\n   * @memberof Twilio.Verify.V2.ServiceList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.pageToken] - PageToken provided by the API\n   * @param {number} [opts.pageNumber] -\n   *          Page Number, this value is simply for client state\n   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  ServiceListInstance.page = function page(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n    var deferred = Q.defer();\n    var data = values.of({\n      'PageToken': opts.pageToken,\n      'Page': opts.pageNumber,\n      'PageSize': opts.pageSize\n    });\n\n    var promise = this._version.page({\n      uri: this._uri,\n      method: 'GET',\n      params: data\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new ServicePage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Retrieve a single target page of ServiceInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function getPage\n   * @memberof Twilio.Verify.V2.ServiceList#\n   *\n   * @param {string} [targetUrl] - API-generated URL for the requested results page\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  ServiceListInstance.getPage = function getPage(targetUrl, callback) {\n    var deferred = Q.defer();\n\n    var promise = this._version._domain.twilio.request({\n      method: 'GET',\n      uri: targetUrl\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new ServicePage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Constructs a service\n   *\n   * @function get\n   * @memberof Twilio.Verify.V2.ServiceList#\n   *\n   * @param {string} sid - The unique string that identifies the resource\n   *\n   * @returns {Twilio.Verify.V2.ServiceContext}\n   */\n\n  /* jshint ignore:end */\n\n\n  ServiceListInstance.get = function get(sid) {\n    return new ServiceContext(this._version, sid);\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Verify.V2.ServiceList#\n   *\n   * @returns Object\n   */\n\n  /* jshint ignore:end */\n\n\n  ServiceListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n\n  ServiceListInstance[util.inspect.custom] = function inspect(depth, options) {\n    return util.inspect(this.toJSON(), options);\n  };\n\n  return ServiceListInstance;\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the ServicePage\n *\n * @constructor Twilio.Verify.V2.ServicePage\n *\n * @param {V2} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {ServiceSolution} solution - Path solution\n *\n * @returns ServicePage\n */\n\n/* jshint ignore:end */\n\n\nServicePage = function ServicePage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n\n_.extend(ServicePage.prototype, Page.prototype);\n\nServicePage.prototype.constructor = ServicePage;\n/* jshint ignore:start */\n\n/**\n * Build an instance of ServiceInstance\n *\n * @function getInstance\n * @memberof Twilio.Verify.V2.ServicePage#\n *\n * @param {ServicePayload} payload - Payload response from the API\n *\n * @returns ServiceInstance\n */\n\n/* jshint ignore:end */\n\nServicePage.prototype.getInstance = function getInstance(payload) {\n  return new ServiceInstance(this._version, payload);\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Verify.V2.ServicePage#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nServicePage.prototype.toJSON = function toJSON() {\n  let clone = {};\n\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n\n  return clone;\n};\n\nServicePage.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the ServiceContext\n *\n * @constructor Twilio.Verify.V2.ServiceInstance\n *\n * @property {string} sid - The unique string that identifies the resource\n * @property {string} accountSid - The SID of the Account that created the resource\n * @property {string} friendlyName -\n *          The string that you assigned to describe the verification service\n * @property {number} codeLength - The length of the verification code\n * @property {boolean} lookupEnabled -\n *          Whether to perform a lookup with each verification\n * @property {boolean} psd2Enabled -\n *          Whether to pass PSD2 transaction parameters when starting a verification\n * @property {boolean} skipSmsToLandlines -\n *          Whether to skip sending SMS verifications to landlines\n * @property {boolean} dtmfInputRequired -\n *          Whether to ask the user to press a number before delivering the verify code in a phone call\n * @property {string} ttsName -\n *          The name of an alternative text-to-speech service to use in phone calls\n * @property {boolean} doNotShareWarningEnabled -\n *          Whether to add a security warning at the end of an SMS.\n * @property {boolean} customCodeEnabled -\n *          Whether to allow sending verifications with a custom code.\n * @property {object} push - The service level configuration of factor push type.\n * @property {object} totp - The service level configuration of factor TOTP type.\n * @property {string} defaultTemplateSid - The default_template_sid\n * @property {Date} dateCreated -\n *          The RFC 2822 date and time in GMT when the resource was created\n * @property {Date} dateUpdated -\n *          The RFC 2822 date and time in GMT when the resource was last updated\n * @property {string} url - The absolute URL of the resource\n * @property {string} links - The URLs of related resources\n *\n * @param {V2} version - Version of the resource\n * @param {ServicePayload} payload - The instance payload\n * @param {sid} sid - The unique string that identifies the resource\n */\n\n/* jshint ignore:end */\n\n\nServiceInstance = function ServiceInstance(version, payload, sid) {\n  this._version = version; // Marshaled Properties\n\n  this.sid = payload.sid; // jshint ignore:line\n\n  this.accountSid = payload.account_sid; // jshint ignore:line\n\n  this.friendlyName = payload.friendly_name; // jshint ignore:line\n\n  this.codeLength = deserialize.integer(payload.code_length); // jshint ignore:line\n\n  this.lookupEnabled = payload.lookup_enabled; // jshint ignore:line\n\n  this.psd2Enabled = payload.psd2_enabled; // jshint ignore:line\n\n  this.skipSmsToLandlines = payload.skip_sms_to_landlines; // jshint ignore:line\n\n  this.dtmfInputRequired = payload.dtmf_input_required; // jshint ignore:line\n\n  this.ttsName = payload.tts_name; // jshint ignore:line\n\n  this.doNotShareWarningEnabled = payload.do_not_share_warning_enabled; // jshint ignore:line\n\n  this.customCodeEnabled = payload.custom_code_enabled; // jshint ignore:line\n\n  this.push = payload.push; // jshint ignore:line\n\n  this.totp = payload.totp; // jshint ignore:line\n\n  this.defaultTemplateSid = payload.default_template_sid; // jshint ignore:line\n\n  this.dateCreated = deserialize.iso8601DateTime(payload.date_created); // jshint ignore:line\n\n  this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated); // jshint ignore:line\n\n  this.url = payload.url; // jshint ignore:line\n\n  this.links = payload.links; // jshint ignore:line\n  // Context\n\n  this._context = undefined;\n  this._solution = {\n    sid: sid || this.sid\n  };\n};\n\nObject.defineProperty(ServiceInstance.prototype, '_proxy', {\n  get: function () {\n    if (!this._context) {\n      this._context = new ServiceContext(this._version, this._solution.sid);\n    }\n\n    return this._context;\n  }\n});\n/* jshint ignore:start */\n\n/**\n * fetch a ServiceInstance\n *\n * @function fetch\n * @memberof Twilio.Verify.V2.ServiceInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed ServiceInstance\n */\n\n/* jshint ignore:end */\n\nServiceInstance.prototype.fetch = function fetch(callback) {\n  return this._proxy.fetch(callback);\n};\n/* jshint ignore:start */\n\n/**\n * remove a ServiceInstance\n *\n * @function remove\n * @memberof Twilio.Verify.V2.ServiceInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed ServiceInstance\n */\n\n/* jshint ignore:end */\n\n\nServiceInstance.prototype.remove = function remove(callback) {\n  return this._proxy.remove(callback);\n};\n/* jshint ignore:start */\n\n/**\n * update a ServiceInstance\n *\n * @function update\n * @memberof Twilio.Verify.V2.ServiceInstance#\n *\n * @param {object} [opts] - Options for request\n * @param {string} [opts.friendlyName] -\n *          A string to describe the verification service\n * @param {number} [opts.codeLength] -\n *          The length of the verification code to generate\n * @param {boolean} [opts.lookupEnabled] -\n *          Whether to perform a lookup with each verification\n * @param {boolean} [opts.skipSmsToLandlines] -\n *          Whether to skip sending SMS verifications to landlines\n * @param {boolean} [opts.dtmfInputRequired] -\n *          Whether to ask the user to press a number before delivering the verify code in a phone call\n * @param {string} [opts.ttsName] -\n *          The name of an alternative text-to-speech service to use in phone calls\n * @param {boolean} [opts.psd2Enabled] -\n *          Whether to pass PSD2 transaction parameters when starting a verification\n * @param {boolean} [opts.doNotShareWarningEnabled] -\n *          Whether to add a privacy warning at the end of an SMS.\n * @param {boolean} [opts.customCodeEnabled] -\n *          Whether to allow sending verifications with a custom code.\n * @param {boolean} [opts.push.includeDate] -\n *          Optional. Include the date in the Challenge's response. Default: false. **Deprecated** do not use this parameter.\n * @param {string} [opts.push.apnCredentialSid] -\n *          Optional. Set APN Credential for this service.\n * @param {string} [opts.push.fcmCredentialSid] -\n *          Optional. Set FCM Credential for this service.\n * @param {string} [opts.totp.issuer] - Optional. Set TOTP Issuer for this service.\n * @param {number} [opts.totp.timeStep] -\n *          Optional. How often, in seconds, are TOTP codes generated\n * @param {number} [opts.totp.codeLength] -\n *          Optional. Number of digits for generated TOTP codes\n * @param {number} [opts.totp.skew] -\n *          Optional. The number of past and future time-steps valid at a given time\n * @param {string} [opts.defaultTemplateSid] -\n *          The verification template SMS messages.\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed ServiceInstance\n */\n\n/* jshint ignore:end */\n\n\nServiceInstance.prototype.update = function update(opts, callback) {\n  return this._proxy.update(opts, callback);\n};\n/* jshint ignore:start */\n\n/**\n * Access the verifications\n *\n * @function verifications\n * @memberof Twilio.Verify.V2.ServiceInstance#\n *\n * @returns {Twilio.Verify.V2.ServiceContext.VerificationList}\n */\n\n/* jshint ignore:end */\n\n\nServiceInstance.prototype.verifications = function verifications() {\n  return this._proxy.verifications;\n};\n/* jshint ignore:start */\n\n/**\n * Access the verificationChecks\n *\n * @function verificationChecks\n * @memberof Twilio.Verify.V2.ServiceInstance#\n *\n * @returns {Twilio.Verify.V2.ServiceContext.VerificationCheckList}\n */\n\n/* jshint ignore:end */\n\n\nServiceInstance.prototype.verificationChecks = function verificationChecks() {\n  return this._proxy.verificationChecks;\n};\n/* jshint ignore:start */\n\n/**\n * Access the rateLimits\n *\n * @function rateLimits\n * @memberof Twilio.Verify.V2.ServiceInstance#\n *\n * @returns {Twilio.Verify.V2.ServiceContext.RateLimitList}\n */\n\n/* jshint ignore:end */\n\n\nServiceInstance.prototype.rateLimits = function rateLimits() {\n  return this._proxy.rateLimits;\n};\n/* jshint ignore:start */\n\n/**\n * Access the messagingConfigurations\n *\n * @function messagingConfigurations\n * @memberof Twilio.Verify.V2.ServiceInstance#\n *\n * @returns {Twilio.Verify.V2.ServiceContext.MessagingConfigurationList}\n */\n\n/* jshint ignore:end */\n\n\nServiceInstance.prototype.messagingConfigurations = function messagingConfigurations() {\n  return this._proxy.messagingConfigurations;\n};\n/* jshint ignore:start */\n\n/**\n * Access the entities\n *\n * @function entities\n * @memberof Twilio.Verify.V2.ServiceInstance#\n *\n * @returns {Twilio.Verify.V2.ServiceContext.EntityList}\n */\n\n/* jshint ignore:end */\n\n\nServiceInstance.prototype.entities = function entities() {\n  return this._proxy.entities;\n};\n/* jshint ignore:start */\n\n/**\n * Access the webhooks\n *\n * @function webhooks\n * @memberof Twilio.Verify.V2.ServiceInstance#\n *\n * @returns {Twilio.Verify.V2.ServiceContext.WebhookList}\n */\n\n/* jshint ignore:end */\n\n\nServiceInstance.prototype.webhooks = function webhooks() {\n  return this._proxy.webhooks;\n};\n/* jshint ignore:start */\n\n/**\n * Access the accessTokens\n *\n * @function accessTokens\n * @memberof Twilio.Verify.V2.ServiceInstance#\n *\n * @returns {Twilio.Verify.V2.ServiceContext.AccessTokenList}\n */\n\n/* jshint ignore:end */\n\n\nServiceInstance.prototype.accessTokens = function accessTokens() {\n  return this._proxy.accessTokens;\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Verify.V2.ServiceInstance#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nServiceInstance.prototype.toJSON = function toJSON() {\n  let clone = {};\n\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n\n  return clone;\n};\n\nServiceInstance.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the ServiceContext\n *\n * @constructor Twilio.Verify.V2.ServiceContext\n *\n * @property {Twilio.Verify.V2.ServiceContext.VerificationList} verifications -\n *          verifications resource\n * @property {Twilio.Verify.V2.ServiceContext.VerificationCheckList} verificationChecks -\n *          verificationChecks resource\n * @property {Twilio.Verify.V2.ServiceContext.RateLimitList} rateLimits -\n *          rateLimits resource\n * @property {Twilio.Verify.V2.ServiceContext.MessagingConfigurationList} messagingConfigurations -\n *          messagingConfigurations resource\n * @property {Twilio.Verify.V2.ServiceContext.EntityList} entities -\n *          entities resource\n * @property {Twilio.Verify.V2.ServiceContext.WebhookList} webhooks -\n *          webhooks resource\n * @property {Twilio.Verify.V2.ServiceContext.AccessTokenList} accessTokens -\n *          accessTokens resource\n *\n * @param {V2} version - Version of the resource\n * @param {sid} sid - The unique string that identifies the resource\n */\n\n/* jshint ignore:end */\n\n\nServiceContext = function ServiceContext(version, sid) {\n  this._version = version; // Path Solution\n\n  this._solution = {\n    sid: sid\n  };\n  this._uri = `/Services/${sid}`; // Dependents\n\n  this._verifications = undefined;\n  this._verificationChecks = undefined;\n  this._rateLimits = undefined;\n  this._messagingConfigurations = undefined;\n  this._entities = undefined;\n  this._webhooks = undefined;\n  this._accessTokens = undefined;\n};\n/* jshint ignore:start */\n\n/**\n * fetch a ServiceInstance\n *\n * @function fetch\n * @memberof Twilio.Verify.V2.ServiceContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed ServiceInstance\n */\n\n/* jshint ignore:end */\n\n\nServiceContext.prototype.fetch = function fetch(callback) {\n  var deferred = Q.defer();\n\n  var promise = this._version.fetch({\n    uri: this._uri,\n    method: 'GET'\n  });\n\n  promise = promise.then(function (payload) {\n    deferred.resolve(new ServiceInstance(this._version, payload, this._solution.sid));\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n/* jshint ignore:start */\n\n/**\n * remove a ServiceInstance\n *\n * @function remove\n * @memberof Twilio.Verify.V2.ServiceContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed ServiceInstance\n */\n\n/* jshint ignore:end */\n\n\nServiceContext.prototype.remove = function remove(callback) {\n  var deferred = Q.defer();\n\n  var promise = this._version.remove({\n    uri: this._uri,\n    method: 'DELETE'\n  });\n\n  promise = promise.then(function (payload) {\n    deferred.resolve(payload);\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n/* jshint ignore:start */\n\n/**\n * update a ServiceInstance\n *\n * @function update\n * @memberof Twilio.Verify.V2.ServiceContext#\n *\n * @param {object} [opts] - Options for request\n * @param {string} [opts.friendlyName] -\n *          A string to describe the verification service\n * @param {number} [opts.codeLength] -\n *          The length of the verification code to generate\n * @param {boolean} [opts.lookupEnabled] -\n *          Whether to perform a lookup with each verification\n * @param {boolean} [opts.skipSmsToLandlines] -\n *          Whether to skip sending SMS verifications to landlines\n * @param {boolean} [opts.dtmfInputRequired] -\n *          Whether to ask the user to press a number before delivering the verify code in a phone call\n * @param {string} [opts.ttsName] -\n *          The name of an alternative text-to-speech service to use in phone calls\n * @param {boolean} [opts.psd2Enabled] -\n *          Whether to pass PSD2 transaction parameters when starting a verification\n * @param {boolean} [opts.doNotShareWarningEnabled] -\n *          Whether to add a privacy warning at the end of an SMS.\n * @param {boolean} [opts.customCodeEnabled] -\n *          Whether to allow sending verifications with a custom code.\n * @param {boolean} [opts.push.includeDate] -\n *          Optional. Include the date in the Challenge's response. Default: false. **Deprecated** do not use this parameter.\n * @param {string} [opts.push.apnCredentialSid] -\n *          Optional. Set APN Credential for this service.\n * @param {string} [opts.push.fcmCredentialSid] -\n *          Optional. Set FCM Credential for this service.\n * @param {string} [opts.totp.issuer] - Optional. Set TOTP Issuer for this service.\n * @param {number} [opts.totp.timeStep] -\n *          Optional. How often, in seconds, are TOTP codes generated\n * @param {number} [opts.totp.codeLength] -\n *          Optional. Number of digits for generated TOTP codes\n * @param {number} [opts.totp.skew] -\n *          Optional. The number of past and future time-steps valid at a given time\n * @param {string} [opts.defaultTemplateSid] -\n *          The verification template SMS messages.\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed ServiceInstance\n */\n\n/* jshint ignore:end */\n\n\nServiceContext.prototype.update = function update(opts, callback) {\n  if (_.isFunction(opts)) {\n    callback = opts;\n    opts = {};\n  }\n\n  opts = opts || {};\n  var deferred = Q.defer();\n  var data = values.of({\n    'FriendlyName': _.get(opts, 'friendlyName'),\n    'CodeLength': _.get(opts, 'codeLength'),\n    'LookupEnabled': serialize.bool(_.get(opts, 'lookupEnabled')),\n    'SkipSmsToLandlines': serialize.bool(_.get(opts, 'skipSmsToLandlines')),\n    'DtmfInputRequired': serialize.bool(_.get(opts, 'dtmfInputRequired')),\n    'TtsName': _.get(opts, 'ttsName'),\n    'Psd2Enabled': serialize.bool(_.get(opts, 'psd2Enabled')),\n    'DoNotShareWarningEnabled': serialize.bool(_.get(opts, 'doNotShareWarningEnabled')),\n    'CustomCodeEnabled': serialize.bool(_.get(opts, 'customCodeEnabled')),\n    'Push.IncludeDate': serialize.bool(_.get(opts, 'push.includeDate')),\n    'Push.ApnCredentialSid': _.get(opts, 'push.apnCredentialSid'),\n    'Push.FcmCredentialSid': _.get(opts, 'push.fcmCredentialSid'),\n    'Totp.Issuer': _.get(opts, 'totp.issuer'),\n    'Totp.TimeStep': _.get(opts, 'totp.timeStep'),\n    'Totp.CodeLength': _.get(opts, 'totp.codeLength'),\n    'Totp.Skew': _.get(opts, 'totp.skew'),\n    'DefaultTemplateSid': _.get(opts, 'defaultTemplateSid')\n  });\n\n  var promise = this._version.update({\n    uri: this._uri,\n    method: 'POST',\n    data: data\n  });\n\n  promise = promise.then(function (payload) {\n    deferred.resolve(new ServiceInstance(this._version, payload, this._solution.sid));\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\nObject.defineProperty(ServiceContext.prototype, 'verifications', {\n  get: function () {\n    if (!this._verifications) {\n      this._verifications = new VerificationList(this._version, this._solution.sid);\n    }\n\n    return this._verifications;\n  }\n});\nObject.defineProperty(ServiceContext.prototype, 'verificationChecks', {\n  get: function () {\n    if (!this._verificationChecks) {\n      this._verificationChecks = new VerificationCheckList(this._version, this._solution.sid);\n    }\n\n    return this._verificationChecks;\n  }\n});\nObject.defineProperty(ServiceContext.prototype, 'rateLimits', {\n  get: function () {\n    if (!this._rateLimits) {\n      this._rateLimits = new RateLimitList(this._version, this._solution.sid);\n    }\n\n    return this._rateLimits;\n  }\n});\nObject.defineProperty(ServiceContext.prototype, 'messagingConfigurations', {\n  get: function () {\n    if (!this._messagingConfigurations) {\n      this._messagingConfigurations = new MessagingConfigurationList(this._version, this._solution.sid);\n    }\n\n    return this._messagingConfigurations;\n  }\n});\nObject.defineProperty(ServiceContext.prototype, 'entities', {\n  get: function () {\n    if (!this._entities) {\n      this._entities = new EntityList(this._version, this._solution.sid);\n    }\n\n    return this._entities;\n  }\n});\nObject.defineProperty(ServiceContext.prototype, 'webhooks', {\n  get: function () {\n    if (!this._webhooks) {\n      this._webhooks = new WebhookList(this._version, this._solution.sid);\n    }\n\n    return this._webhooks;\n  }\n});\nObject.defineProperty(ServiceContext.prototype, 'accessTokens', {\n  get: function () {\n    if (!this._accessTokens) {\n      this._accessTokens = new AccessTokenList(this._version, this._solution.sid);\n    }\n\n    return this._accessTokens;\n  }\n});\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Verify.V2.ServiceContext#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\nServiceContext.prototype.toJSON = function toJSON() {\n  return this._solution;\n};\n\nServiceContext.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\nmodule.exports = {\n  ServiceList: ServiceList,\n  ServicePage: ServicePage,\n  ServiceInstance: ServiceInstance,\n  ServiceContext: ServiceContext\n};","map":{"version":3,"names":["Q","require","_","util","AccessTokenList","EntityList","MessagingConfigurationList","Page","RateLimitList","VerificationCheckList","VerificationList","WebhookList","deserialize","serialize","values","ServiceList","ServicePage","ServiceInstance","ServiceContext","version","ServiceListInstance","sid","get","_version","_solution","_uri","create","opts","callback","isUndefined","Error","deferred","defer","data","of","bool","promise","uri","method","then","payload","resolve","bind","catch","error","reject","isFunction","nodeify","each","done","currentPage","currentResource","limits","readLimits","limit","pageSize","onComplete","fetchNextPage","fn","page","instances","instance","nextPage","merge","list","allResources","resource","push","length","pageToken","pageNumber","params","getPage","targetUrl","_domain","twilio","request","toJSON","inspect","custom","depth","options","response","solution","prototype","constructor","call","extend","getInstance","clone","forOwn","value","key","startsWith","accountSid","account_sid","friendlyName","friendly_name","codeLength","integer","code_length","lookupEnabled","lookup_enabled","psd2Enabled","psd2_enabled","skipSmsToLandlines","skip_sms_to_landlines","dtmfInputRequired","dtmf_input_required","ttsName","tts_name","doNotShareWarningEnabled","do_not_share_warning_enabled","customCodeEnabled","custom_code_enabled","totp","defaultTemplateSid","default_template_sid","dateCreated","iso8601DateTime","date_created","dateUpdated","date_updated","url","links","_context","undefined","Object","defineProperty","fetch","_proxy","remove","update","verifications","verificationChecks","rateLimits","messagingConfigurations","entities","webhooks","accessTokens","_verifications","_verificationChecks","_rateLimits","_messagingConfigurations","_entities","_webhooks","_accessTokens","module","exports"],"sources":["/Users/hooniesun/rmit/fwp/assessment1/lan/node_modules/twilio/lib/rest/verify/v2/service.js"],"sourcesContent":["'use strict';\n\n/* jshint ignore:start */\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n/* jshint ignore:end */\n\nvar Q = require('q');  /* jshint ignore:line */\nvar _ = require('lodash');  /* jshint ignore:line */\nvar util = require('util');  /* jshint ignore:line */\nvar AccessTokenList = require('./service/accessToken').AccessTokenList;\nvar EntityList = require('./service/entity').EntityList;\nvar MessagingConfigurationList = require(\n    './service/messagingConfiguration').MessagingConfigurationList;\nvar Page = require('../../../base/Page');  /* jshint ignore:line */\nvar RateLimitList = require('./service/rateLimit').RateLimitList;\nvar VerificationCheckList = require(\n    './service/verificationCheck').VerificationCheckList;\nvar VerificationList = require('./service/verification').VerificationList;\nvar WebhookList = require('./service/webhook').WebhookList;\nvar deserialize = require(\n    '../../../base/deserialize');  /* jshint ignore:line */\nvar serialize = require('../../../base/serialize');  /* jshint ignore:line */\nvar values = require('../../../base/values');  /* jshint ignore:line */\n\nvar ServiceList;\nvar ServicePage;\nvar ServiceInstance;\nvar ServiceContext;\n\n/* jshint ignore:start */\n/**\n * Initialize the ServiceList\n *\n * @constructor Twilio.Verify.V2.ServiceList\n *\n * @param {Twilio.Verify.V2} version - Version of the resource\n */\n/* jshint ignore:end */\nServiceList = function ServiceList(version) {\n  /* jshint ignore:start */\n  /**\n   * @function services\n   * @memberof Twilio.Verify.V2#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Verify.V2.ServiceContext}\n   */\n  /* jshint ignore:end */\n  function ServiceListInstance(sid) {\n    return ServiceListInstance.get(sid);\n  }\n\n  ServiceListInstance._version = version;\n  // Path Solution\n  ServiceListInstance._solution = {};\n  ServiceListInstance._uri = `/Services`;\n  /* jshint ignore:start */\n  /**\n   * create a ServiceInstance\n   *\n   * @function create\n   * @memberof Twilio.Verify.V2.ServiceList#\n   *\n   * @param {object} opts - Options for request\n   * @param {string} opts.friendlyName -\n   *          A string to describe the verification service\n   * @param {number} [opts.codeLength] -\n   *          The length of the verification code to generate\n   * @param {boolean} [opts.lookupEnabled] -\n   *          Whether to perform a lookup with each verification\n   * @param {boolean} [opts.skipSmsToLandlines] -\n   *          Whether to skip sending SMS verifications to landlines\n   * @param {boolean} [opts.dtmfInputRequired] -\n   *          Whether to ask the user to press a number before delivering the verify code in a phone call\n   * @param {string} [opts.ttsName] -\n   *          The name of an alternative text-to-speech service to use in phone calls\n   * @param {boolean} [opts.psd2Enabled] -\n   *          Whether to pass PSD2 transaction parameters when starting a verification\n   * @param {boolean} [opts.doNotShareWarningEnabled] -\n   *          Whether to add a security warning at the end of an SMS.\n   * @param {boolean} [opts.customCodeEnabled] -\n   *          Whether to allow sending verifications with a custom code.\n   * @param {boolean} [opts.push.includeDate] -\n   *          Optional. Include the date in the Challenge's response. Default: false. **Deprecated** do not use this parameter.\n   * @param {string} [opts.push.apnCredentialSid] -\n   *          Optional. Set APN Credential for this service.\n   * @param {string} [opts.push.fcmCredentialSid] -\n   *          Optional. Set FCM Credential for this service.\n   * @param {string} [opts.totp.issuer] - Optional. Set TOTP Issuer for this service.\n   * @param {number} [opts.totp.timeStep] -\n   *          Optional. How often, in seconds, are TOTP codes generated\n   * @param {number} [opts.totp.codeLength] -\n   *          Optional. Number of digits for generated TOTP codes\n   * @param {number} [opts.totp.skew] -\n   *          Optional. The number of past and future time-steps valid at a given time\n   * @param {string} [opts.defaultTemplateSid] -\n   *          The verification template SMS messages.\n   * @param {function} [callback] - Callback to handle processed record\n   *\n   * @returns {Promise} Resolves to processed ServiceInstance\n   */\n  /* jshint ignore:end */\n  ServiceListInstance.create = function create(opts, callback) {\n    if (_.isUndefined(opts)) {\n      throw new Error('Required parameter \"opts\" missing.');\n    }\n    if (_.isUndefined(opts['friendlyName'])) {\n      throw new Error('Required parameter \"opts[\\'friendlyName\\']\" missing.');\n    }\n\n    var deferred = Q.defer();\n    var data = values.of({\n      'FriendlyName': _.get(opts, 'friendlyName'),\n      'CodeLength': _.get(opts, 'codeLength'),\n      'LookupEnabled': serialize.bool(_.get(opts, 'lookupEnabled')),\n      'SkipSmsToLandlines': serialize.bool(_.get(opts, 'skipSmsToLandlines')),\n      'DtmfInputRequired': serialize.bool(_.get(opts, 'dtmfInputRequired')),\n      'TtsName': _.get(opts, 'ttsName'),\n      'Psd2Enabled': serialize.bool(_.get(opts, 'psd2Enabled')),\n      'DoNotShareWarningEnabled': serialize.bool(_.get(opts, 'doNotShareWarningEnabled')),\n      'CustomCodeEnabled': serialize.bool(_.get(opts, 'customCodeEnabled')),\n      'Push.IncludeDate': serialize.bool(_.get(opts, 'push.includeDate')),\n      'Push.ApnCredentialSid': _.get(opts, 'push.apnCredentialSid'),\n      'Push.FcmCredentialSid': _.get(opts, 'push.fcmCredentialSid'),\n      'Totp.Issuer': _.get(opts, 'totp.issuer'),\n      'Totp.TimeStep': _.get(opts, 'totp.timeStep'),\n      'Totp.CodeLength': _.get(opts, 'totp.codeLength'),\n      'Totp.Skew': _.get(opts, 'totp.skew'),\n      'DefaultTemplateSid': _.get(opts, 'defaultTemplateSid')\n    });\n\n    var promise = this._version.create({uri: this._uri, method: 'POST', data: data});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new ServiceInstance(this._version, payload, this._solution.sid));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Streams ServiceInstance records from the API.\n   *\n   * This operation lazily loads records as efficiently as possible until the limit\n   * is reached.\n   *\n   * The results are passed into the callback function, so this operation is memory\n   * efficient.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function each\n   * @memberof Twilio.Verify.V2.ServiceList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         each() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no pageSize is defined but a limit is defined,\n   *         each() will attempt to read the limit with the most efficient\n   *         page size, i.e. min(limit, 1000)\n   * @param {Function} [opts.callback] -\n   *         Function to process each record. If this and a positional\n   *         callback are passed, this one will be used\n   * @param {Function} [opts.done] -\n   *          Function to be called upon completion of streaming\n   * @param {Function} [callback] - Function to process each record\n   */\n  /* jshint ignore:end */\n  ServiceListInstance.each = function each(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    if (opts.callback) {\n      callback = opts.callback;\n    }\n    if (_.isUndefined(callback)) {\n      throw new Error('Callback function must be provided');\n    }\n\n    var done = false;\n    var currentPage = 1;\n    var currentResource = 0;\n    var limits = this._version.readLimits({\n      limit: opts.limit,\n      pageSize: opts.pageSize\n    });\n\n    function onComplete(error) {\n      done = true;\n      if (_.isFunction(opts.done)) {\n        opts.done(error);\n      }\n    }\n\n    function fetchNextPage(fn) {\n      var promise = fn();\n      if (_.isUndefined(promise)) {\n        onComplete();\n        return;\n      }\n\n      promise.then(function(page) {\n        _.each(page.instances, function(instance) {\n          if (done || (!_.isUndefined(opts.limit) && currentResource >= opts.limit)) {\n            done = true;\n            return false;\n          }\n\n          currentResource++;\n          callback(instance, onComplete);\n        });\n\n        if (!done) {\n          currentPage++;\n          fetchNextPage(_.bind(page.nextPage, page));\n        } else {\n          onComplete();\n        }\n      });\n\n      promise.catch(onComplete);\n    }\n\n    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Lists ServiceInstance records from the API as a list.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function list\n   * @memberof Twilio.Verify.V2.ServiceList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         list() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no page_size is defined but a limit is defined,\n   *         list() will attempt to read the limit with the most\n   *         efficient page size, i.e. min(limit, 1000)\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  ServiceListInstance.list = function list(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    var deferred = Q.defer();\n    var allResources = [];\n    opts.callback = function(resource, done) {\n      allResources.push(resource);\n\n      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {\n        done();\n      }\n    };\n\n    opts.done = function(error) {\n      if (_.isUndefined(error)) {\n        deferred.resolve(allResources);\n      } else {\n        deferred.reject(error);\n      }\n    };\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    this.each(opts);\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single page of ServiceInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function page\n   * @memberof Twilio.Verify.V2.ServiceList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.pageToken] - PageToken provided by the API\n   * @param {number} [opts.pageNumber] -\n   *          Page Number, this value is simply for client state\n   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  ServiceListInstance.page = function page(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n\n    var deferred = Q.defer();\n    var data = values.of({\n      'PageToken': opts.pageToken,\n      'Page': opts.pageNumber,\n      'PageSize': opts.pageSize\n    });\n\n    var promise = this._version.page({uri: this._uri, method: 'GET', params: data});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new ServicePage(this._version, payload, this._solution));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single target page of ServiceInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function getPage\n   * @memberof Twilio.Verify.V2.ServiceList#\n   *\n   * @param {string} [targetUrl] - API-generated URL for the requested results page\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  ServiceListInstance.getPage = function getPage(targetUrl, callback) {\n    var deferred = Q.defer();\n\n    var promise = this._version._domain.twilio.request({method: 'GET', uri: targetUrl});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new ServicePage(this._version, payload, this._solution));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Constructs a service\n   *\n   * @function get\n   * @memberof Twilio.Verify.V2.ServiceList#\n   *\n   * @param {string} sid - The unique string that identifies the resource\n   *\n   * @returns {Twilio.Verify.V2.ServiceContext}\n   */\n  /* jshint ignore:end */\n  ServiceListInstance.get = function get(sid) {\n    return new ServiceContext(this._version, sid);\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Verify.V2.ServiceList#\n   *\n   * @returns Object\n   */\n  /* jshint ignore:end */\n  ServiceListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n\n  ServiceListInstance[util.inspect.custom] = function inspect(depth, options) {\n    return util.inspect(this.toJSON(), options);\n  };\n\n  return ServiceListInstance;\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the ServicePage\n *\n * @constructor Twilio.Verify.V2.ServicePage\n *\n * @param {V2} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {ServiceSolution} solution - Path solution\n *\n * @returns ServicePage\n */\n/* jshint ignore:end */\nServicePage = function ServicePage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n\n_.extend(ServicePage.prototype, Page.prototype);\nServicePage.prototype.constructor = ServicePage;\n\n/* jshint ignore:start */\n/**\n * Build an instance of ServiceInstance\n *\n * @function getInstance\n * @memberof Twilio.Verify.V2.ServicePage#\n *\n * @param {ServicePayload} payload - Payload response from the API\n *\n * @returns ServiceInstance\n */\n/* jshint ignore:end */\nServicePage.prototype.getInstance = function getInstance(payload) {\n  return new ServiceInstance(this._version, payload);\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Verify.V2.ServicePage#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nServicePage.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function(value, key) {\n    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\n\nServicePage.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the ServiceContext\n *\n * @constructor Twilio.Verify.V2.ServiceInstance\n *\n * @property {string} sid - The unique string that identifies the resource\n * @property {string} accountSid - The SID of the Account that created the resource\n * @property {string} friendlyName -\n *          The string that you assigned to describe the verification service\n * @property {number} codeLength - The length of the verification code\n * @property {boolean} lookupEnabled -\n *          Whether to perform a lookup with each verification\n * @property {boolean} psd2Enabled -\n *          Whether to pass PSD2 transaction parameters when starting a verification\n * @property {boolean} skipSmsToLandlines -\n *          Whether to skip sending SMS verifications to landlines\n * @property {boolean} dtmfInputRequired -\n *          Whether to ask the user to press a number before delivering the verify code in a phone call\n * @property {string} ttsName -\n *          The name of an alternative text-to-speech service to use in phone calls\n * @property {boolean} doNotShareWarningEnabled -\n *          Whether to add a security warning at the end of an SMS.\n * @property {boolean} customCodeEnabled -\n *          Whether to allow sending verifications with a custom code.\n * @property {object} push - The service level configuration of factor push type.\n * @property {object} totp - The service level configuration of factor TOTP type.\n * @property {string} defaultTemplateSid - The default_template_sid\n * @property {Date} dateCreated -\n *          The RFC 2822 date and time in GMT when the resource was created\n * @property {Date} dateUpdated -\n *          The RFC 2822 date and time in GMT when the resource was last updated\n * @property {string} url - The absolute URL of the resource\n * @property {string} links - The URLs of related resources\n *\n * @param {V2} version - Version of the resource\n * @param {ServicePayload} payload - The instance payload\n * @param {sid} sid - The unique string that identifies the resource\n */\n/* jshint ignore:end */\nServiceInstance = function ServiceInstance(version, payload, sid) {\n  this._version = version;\n\n  // Marshaled Properties\n  this.sid = payload.sid; // jshint ignore:line\n  this.accountSid = payload.account_sid; // jshint ignore:line\n  this.friendlyName = payload.friendly_name; // jshint ignore:line\n  this.codeLength = deserialize.integer(payload.code_length); // jshint ignore:line\n  this.lookupEnabled = payload.lookup_enabled; // jshint ignore:line\n  this.psd2Enabled = payload.psd2_enabled; // jshint ignore:line\n  this.skipSmsToLandlines = payload.skip_sms_to_landlines; // jshint ignore:line\n  this.dtmfInputRequired = payload.dtmf_input_required; // jshint ignore:line\n  this.ttsName = payload.tts_name; // jshint ignore:line\n  this.doNotShareWarningEnabled = payload.do_not_share_warning_enabled; // jshint ignore:line\n  this.customCodeEnabled = payload.custom_code_enabled; // jshint ignore:line\n  this.push = payload.push; // jshint ignore:line\n  this.totp = payload.totp; // jshint ignore:line\n  this.defaultTemplateSid = payload.default_template_sid; // jshint ignore:line\n  this.dateCreated = deserialize.iso8601DateTime(payload.date_created); // jshint ignore:line\n  this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated); // jshint ignore:line\n  this.url = payload.url; // jshint ignore:line\n  this.links = payload.links; // jshint ignore:line\n\n  // Context\n  this._context = undefined;\n  this._solution = {sid: sid || this.sid, };\n};\n\nObject.defineProperty(ServiceInstance.prototype,\n  '_proxy', {\n    get: function() {\n      if (!this._context) {\n        this._context = new ServiceContext(this._version, this._solution.sid);\n      }\n\n      return this._context;\n    }\n});\n\n/* jshint ignore:start */\n/**\n * fetch a ServiceInstance\n *\n * @function fetch\n * @memberof Twilio.Verify.V2.ServiceInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed ServiceInstance\n */\n/* jshint ignore:end */\nServiceInstance.prototype.fetch = function fetch(callback) {\n  return this._proxy.fetch(callback);\n};\n\n/* jshint ignore:start */\n/**\n * remove a ServiceInstance\n *\n * @function remove\n * @memberof Twilio.Verify.V2.ServiceInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed ServiceInstance\n */\n/* jshint ignore:end */\nServiceInstance.prototype.remove = function remove(callback) {\n  return this._proxy.remove(callback);\n};\n\n/* jshint ignore:start */\n/**\n * update a ServiceInstance\n *\n * @function update\n * @memberof Twilio.Verify.V2.ServiceInstance#\n *\n * @param {object} [opts] - Options for request\n * @param {string} [opts.friendlyName] -\n *          A string to describe the verification service\n * @param {number} [opts.codeLength] -\n *          The length of the verification code to generate\n * @param {boolean} [opts.lookupEnabled] -\n *          Whether to perform a lookup with each verification\n * @param {boolean} [opts.skipSmsToLandlines] -\n *          Whether to skip sending SMS verifications to landlines\n * @param {boolean} [opts.dtmfInputRequired] -\n *          Whether to ask the user to press a number before delivering the verify code in a phone call\n * @param {string} [opts.ttsName] -\n *          The name of an alternative text-to-speech service to use in phone calls\n * @param {boolean} [opts.psd2Enabled] -\n *          Whether to pass PSD2 transaction parameters when starting a verification\n * @param {boolean} [opts.doNotShareWarningEnabled] -\n *          Whether to add a privacy warning at the end of an SMS.\n * @param {boolean} [opts.customCodeEnabled] -\n *          Whether to allow sending verifications with a custom code.\n * @param {boolean} [opts.push.includeDate] -\n *          Optional. Include the date in the Challenge's response. Default: false. **Deprecated** do not use this parameter.\n * @param {string} [opts.push.apnCredentialSid] -\n *          Optional. Set APN Credential for this service.\n * @param {string} [opts.push.fcmCredentialSid] -\n *          Optional. Set FCM Credential for this service.\n * @param {string} [opts.totp.issuer] - Optional. Set TOTP Issuer for this service.\n * @param {number} [opts.totp.timeStep] -\n *          Optional. How often, in seconds, are TOTP codes generated\n * @param {number} [opts.totp.codeLength] -\n *          Optional. Number of digits for generated TOTP codes\n * @param {number} [opts.totp.skew] -\n *          Optional. The number of past and future time-steps valid at a given time\n * @param {string} [opts.defaultTemplateSid] -\n *          The verification template SMS messages.\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed ServiceInstance\n */\n/* jshint ignore:end */\nServiceInstance.prototype.update = function update(opts, callback) {\n  return this._proxy.update(opts, callback);\n};\n\n/* jshint ignore:start */\n/**\n * Access the verifications\n *\n * @function verifications\n * @memberof Twilio.Verify.V2.ServiceInstance#\n *\n * @returns {Twilio.Verify.V2.ServiceContext.VerificationList}\n */\n/* jshint ignore:end */\nServiceInstance.prototype.verifications = function verifications() {\n  return this._proxy.verifications;\n};\n\n/* jshint ignore:start */\n/**\n * Access the verificationChecks\n *\n * @function verificationChecks\n * @memberof Twilio.Verify.V2.ServiceInstance#\n *\n * @returns {Twilio.Verify.V2.ServiceContext.VerificationCheckList}\n */\n/* jshint ignore:end */\nServiceInstance.prototype.verificationChecks = function verificationChecks() {\n  return this._proxy.verificationChecks;\n};\n\n/* jshint ignore:start */\n/**\n * Access the rateLimits\n *\n * @function rateLimits\n * @memberof Twilio.Verify.V2.ServiceInstance#\n *\n * @returns {Twilio.Verify.V2.ServiceContext.RateLimitList}\n */\n/* jshint ignore:end */\nServiceInstance.prototype.rateLimits = function rateLimits() {\n  return this._proxy.rateLimits;\n};\n\n/* jshint ignore:start */\n/**\n * Access the messagingConfigurations\n *\n * @function messagingConfigurations\n * @memberof Twilio.Verify.V2.ServiceInstance#\n *\n * @returns {Twilio.Verify.V2.ServiceContext.MessagingConfigurationList}\n */\n/* jshint ignore:end */\nServiceInstance.prototype.messagingConfigurations = function\n    messagingConfigurations() {\n  return this._proxy.messagingConfigurations;\n};\n\n/* jshint ignore:start */\n/**\n * Access the entities\n *\n * @function entities\n * @memberof Twilio.Verify.V2.ServiceInstance#\n *\n * @returns {Twilio.Verify.V2.ServiceContext.EntityList}\n */\n/* jshint ignore:end */\nServiceInstance.prototype.entities = function entities() {\n  return this._proxy.entities;\n};\n\n/* jshint ignore:start */\n/**\n * Access the webhooks\n *\n * @function webhooks\n * @memberof Twilio.Verify.V2.ServiceInstance#\n *\n * @returns {Twilio.Verify.V2.ServiceContext.WebhookList}\n */\n/* jshint ignore:end */\nServiceInstance.prototype.webhooks = function webhooks() {\n  return this._proxy.webhooks;\n};\n\n/* jshint ignore:start */\n/**\n * Access the accessTokens\n *\n * @function accessTokens\n * @memberof Twilio.Verify.V2.ServiceInstance#\n *\n * @returns {Twilio.Verify.V2.ServiceContext.AccessTokenList}\n */\n/* jshint ignore:end */\nServiceInstance.prototype.accessTokens = function accessTokens() {\n  return this._proxy.accessTokens;\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Verify.V2.ServiceInstance#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nServiceInstance.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function(value, key) {\n    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\n\nServiceInstance.prototype[util.inspect.custom] = function inspect(depth,\n    options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the ServiceContext\n *\n * @constructor Twilio.Verify.V2.ServiceContext\n *\n * @property {Twilio.Verify.V2.ServiceContext.VerificationList} verifications -\n *          verifications resource\n * @property {Twilio.Verify.V2.ServiceContext.VerificationCheckList} verificationChecks -\n *          verificationChecks resource\n * @property {Twilio.Verify.V2.ServiceContext.RateLimitList} rateLimits -\n *          rateLimits resource\n * @property {Twilio.Verify.V2.ServiceContext.MessagingConfigurationList} messagingConfigurations -\n *          messagingConfigurations resource\n * @property {Twilio.Verify.V2.ServiceContext.EntityList} entities -\n *          entities resource\n * @property {Twilio.Verify.V2.ServiceContext.WebhookList} webhooks -\n *          webhooks resource\n * @property {Twilio.Verify.V2.ServiceContext.AccessTokenList} accessTokens -\n *          accessTokens resource\n *\n * @param {V2} version - Version of the resource\n * @param {sid} sid - The unique string that identifies the resource\n */\n/* jshint ignore:end */\nServiceContext = function ServiceContext(version, sid) {\n  this._version = version;\n\n  // Path Solution\n  this._solution = {sid: sid, };\n  this._uri = `/Services/${sid}`;\n\n  // Dependents\n  this._verifications = undefined;\n  this._verificationChecks = undefined;\n  this._rateLimits = undefined;\n  this._messagingConfigurations = undefined;\n  this._entities = undefined;\n  this._webhooks = undefined;\n  this._accessTokens = undefined;\n};\n\n/* jshint ignore:start */\n/**\n * fetch a ServiceInstance\n *\n * @function fetch\n * @memberof Twilio.Verify.V2.ServiceContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed ServiceInstance\n */\n/* jshint ignore:end */\nServiceContext.prototype.fetch = function fetch(callback) {\n  var deferred = Q.defer();\n  var promise = this._version.fetch({uri: this._uri, method: 'GET'});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(new ServiceInstance(this._version, payload, this._solution.sid));\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * remove a ServiceInstance\n *\n * @function remove\n * @memberof Twilio.Verify.V2.ServiceContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed ServiceInstance\n */\n/* jshint ignore:end */\nServiceContext.prototype.remove = function remove(callback) {\n  var deferred = Q.defer();\n  var promise = this._version.remove({uri: this._uri, method: 'DELETE'});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(payload);\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * update a ServiceInstance\n *\n * @function update\n * @memberof Twilio.Verify.V2.ServiceContext#\n *\n * @param {object} [opts] - Options for request\n * @param {string} [opts.friendlyName] -\n *          A string to describe the verification service\n * @param {number} [opts.codeLength] -\n *          The length of the verification code to generate\n * @param {boolean} [opts.lookupEnabled] -\n *          Whether to perform a lookup with each verification\n * @param {boolean} [opts.skipSmsToLandlines] -\n *          Whether to skip sending SMS verifications to landlines\n * @param {boolean} [opts.dtmfInputRequired] -\n *          Whether to ask the user to press a number before delivering the verify code in a phone call\n * @param {string} [opts.ttsName] -\n *          The name of an alternative text-to-speech service to use in phone calls\n * @param {boolean} [opts.psd2Enabled] -\n *          Whether to pass PSD2 transaction parameters when starting a verification\n * @param {boolean} [opts.doNotShareWarningEnabled] -\n *          Whether to add a privacy warning at the end of an SMS.\n * @param {boolean} [opts.customCodeEnabled] -\n *          Whether to allow sending verifications with a custom code.\n * @param {boolean} [opts.push.includeDate] -\n *          Optional. Include the date in the Challenge's response. Default: false. **Deprecated** do not use this parameter.\n * @param {string} [opts.push.apnCredentialSid] -\n *          Optional. Set APN Credential for this service.\n * @param {string} [opts.push.fcmCredentialSid] -\n *          Optional. Set FCM Credential for this service.\n * @param {string} [opts.totp.issuer] - Optional. Set TOTP Issuer for this service.\n * @param {number} [opts.totp.timeStep] -\n *          Optional. How often, in seconds, are TOTP codes generated\n * @param {number} [opts.totp.codeLength] -\n *          Optional. Number of digits for generated TOTP codes\n * @param {number} [opts.totp.skew] -\n *          Optional. The number of past and future time-steps valid at a given time\n * @param {string} [opts.defaultTemplateSid] -\n *          The verification template SMS messages.\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed ServiceInstance\n */\n/* jshint ignore:end */\nServiceContext.prototype.update = function update(opts, callback) {\n  if (_.isFunction(opts)) {\n    callback = opts;\n    opts = {};\n  }\n  opts = opts || {};\n\n  var deferred = Q.defer();\n  var data = values.of({\n    'FriendlyName': _.get(opts, 'friendlyName'),\n    'CodeLength': _.get(opts, 'codeLength'),\n    'LookupEnabled': serialize.bool(_.get(opts, 'lookupEnabled')),\n    'SkipSmsToLandlines': serialize.bool(_.get(opts, 'skipSmsToLandlines')),\n    'DtmfInputRequired': serialize.bool(_.get(opts, 'dtmfInputRequired')),\n    'TtsName': _.get(opts, 'ttsName'),\n    'Psd2Enabled': serialize.bool(_.get(opts, 'psd2Enabled')),\n    'DoNotShareWarningEnabled': serialize.bool(_.get(opts, 'doNotShareWarningEnabled')),\n    'CustomCodeEnabled': serialize.bool(_.get(opts, 'customCodeEnabled')),\n    'Push.IncludeDate': serialize.bool(_.get(opts, 'push.includeDate')),\n    'Push.ApnCredentialSid': _.get(opts, 'push.apnCredentialSid'),\n    'Push.FcmCredentialSid': _.get(opts, 'push.fcmCredentialSid'),\n    'Totp.Issuer': _.get(opts, 'totp.issuer'),\n    'Totp.TimeStep': _.get(opts, 'totp.timeStep'),\n    'Totp.CodeLength': _.get(opts, 'totp.codeLength'),\n    'Totp.Skew': _.get(opts, 'totp.skew'),\n    'DefaultTemplateSid': _.get(opts, 'defaultTemplateSid')\n  });\n\n  var promise = this._version.update({uri: this._uri, method: 'POST', data: data});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(new ServiceInstance(this._version, payload, this._solution.sid));\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\nObject.defineProperty(ServiceContext.prototype,\n  'verifications', {\n    get: function() {\n      if (!this._verifications) {\n        this._verifications = new VerificationList(this._version, this._solution.sid);\n      }\n      return this._verifications;\n    }\n});\n\nObject.defineProperty(ServiceContext.prototype,\n  'verificationChecks', {\n    get: function() {\n      if (!this._verificationChecks) {\n        this._verificationChecks = new VerificationCheckList(this._version, this._solution.sid);\n      }\n      return this._verificationChecks;\n    }\n});\n\nObject.defineProperty(ServiceContext.prototype,\n  'rateLimits', {\n    get: function() {\n      if (!this._rateLimits) {\n        this._rateLimits = new RateLimitList(this._version, this._solution.sid);\n      }\n      return this._rateLimits;\n    }\n});\n\nObject.defineProperty(ServiceContext.prototype,\n  'messagingConfigurations', {\n    get: function() {\n      if (!this._messagingConfigurations) {\n        this._messagingConfigurations = new MessagingConfigurationList(this._version, this._solution.sid);\n      }\n      return this._messagingConfigurations;\n    }\n});\n\nObject.defineProperty(ServiceContext.prototype,\n  'entities', {\n    get: function() {\n      if (!this._entities) {\n        this._entities = new EntityList(this._version, this._solution.sid);\n      }\n      return this._entities;\n    }\n});\n\nObject.defineProperty(ServiceContext.prototype,\n  'webhooks', {\n    get: function() {\n      if (!this._webhooks) {\n        this._webhooks = new WebhookList(this._version, this._solution.sid);\n      }\n      return this._webhooks;\n    }\n});\n\nObject.defineProperty(ServiceContext.prototype,\n  'accessTokens', {\n    get: function() {\n      if (!this._accessTokens) {\n        this._accessTokens = new AccessTokenList(this._version, this._solution.sid);\n      }\n      return this._accessTokens;\n    }\n});\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Verify.V2.ServiceContext#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nServiceContext.prototype.toJSON = function toJSON() {\n  return this._solution;\n};\n\nServiceContext.prototype[util.inspect.custom] = function inspect(depth, options)\n    {\n  return util.inspect(this.toJSON(), options);\n};\n\nmodule.exports = {\n  ServiceList: ServiceList,\n  ServicePage: ServicePage,\n  ServiceInstance: ServiceInstance,\n  ServiceContext: ServiceContext\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}