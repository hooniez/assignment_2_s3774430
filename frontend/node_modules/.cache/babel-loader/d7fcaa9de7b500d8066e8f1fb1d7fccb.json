{"ast":null,"code":"'use strict';\n/* jshint ignore:start */\n\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n\n/* jshint ignore:end */\n\nvar Q = require('q');\n/* jshint ignore:line */\n\n\nvar _ = require('lodash');\n/* jshint ignore:line */\n\n\nvar util = require('util');\n/* jshint ignore:line */\n\n\nvar Page = require('../../../../base/Page');\n/* jshint ignore:line */\n\n\nvar deserialize = require('../../../../base/deserialize');\n/* jshint ignore:line */\n\n\nvar serialize = require('../../../../base/serialize');\n/* jshint ignore:line */\n\n\nvar values = require('../../../../base/values');\n/* jshint ignore:line */\n\n\nvar ApplicationList;\nvar ApplicationPage;\nvar ApplicationInstance;\nvar ApplicationContext;\n/* jshint ignore:start */\n\n/**\n * Initialize the ApplicationList\n *\n * @constructor Twilio.Api.V2010.AccountContext.ApplicationList\n *\n * @param {Twilio.Api.V2010} version - Version of the resource\n * @param {string} accountSid - The SID of the Account that created the resource\n */\n\n/* jshint ignore:end */\n\nApplicationList = function ApplicationList(version, accountSid) {\n  /* jshint ignore:start */\n\n  /**\n   * @function applications\n   * @memberof Twilio.Api.V2010.AccountContext#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Api.V2010.AccountContext.ApplicationContext}\n   */\n\n  /* jshint ignore:end */\n  function ApplicationListInstance(sid) {\n    return ApplicationListInstance.get(sid);\n  }\n\n  ApplicationListInstance._version = version; // Path Solution\n\n  ApplicationListInstance._solution = {\n    accountSid: accountSid\n  };\n  ApplicationListInstance._uri = `/Accounts/${accountSid}/Applications.json`;\n  /* jshint ignore:start */\n\n  /**\n   * create a ApplicationInstance\n   *\n   * @function create\n   * @memberof Twilio.Api.V2010.AccountContext.ApplicationList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.apiVersion] -\n   *          The API version to use to start a new TwiML session\n   * @param {string} [opts.voiceUrl] -\n   *          The URL to call when the phone number receives a call\n   * @param {string} [opts.voiceMethod] - The HTTP method to use with the voice_url\n   * @param {string} [opts.voiceFallbackUrl] -\n   *          The URL to call when a TwiML error occurs\n   * @param {string} [opts.voiceFallbackMethod] -\n   *          The HTTP method to use with voice_fallback_url\n   * @param {string} [opts.statusCallback] -\n   *          The URL to send status information to your application\n   * @param {string} [opts.statusCallbackMethod] -\n   *          The HTTP method to use to call status_callback\n   * @param {boolean} [opts.voiceCallerIdLookup] -\n   *          Whether to lookup the caller's name\n   * @param {string} [opts.smsUrl] -\n   *          The URL to call when the phone number receives an incoming SMS message\n   * @param {string} [opts.smsMethod] - The HTTP method to use with sms_url\n   * @param {string} [opts.smsFallbackUrl] -\n   *          The URL to call when an error occurs while retrieving or executing the TwiML\n   * @param {string} [opts.smsFallbackMethod] -\n   *          The HTTP method to use with sms_fallback_url\n   * @param {string} [opts.smsStatusCallback] -\n   *          The URL to send status information to your application\n   * @param {string} [opts.messageStatusCallback] -\n   *          The URL to send message status information to your application\n   * @param {string} [opts.friendlyName] - A string to describe the new resource\n   * @param {function} [callback] - Callback to handle processed record\n   *\n   * @returns {Promise} Resolves to processed ApplicationInstance\n   */\n\n  /* jshint ignore:end */\n\n  ApplicationListInstance.create = function create(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n    var deferred = Q.defer();\n    var data = values.of({\n      'ApiVersion': _.get(opts, 'apiVersion'),\n      'VoiceUrl': _.get(opts, 'voiceUrl'),\n      'VoiceMethod': _.get(opts, 'voiceMethod'),\n      'VoiceFallbackUrl': _.get(opts, 'voiceFallbackUrl'),\n      'VoiceFallbackMethod': _.get(opts, 'voiceFallbackMethod'),\n      'StatusCallback': _.get(opts, 'statusCallback'),\n      'StatusCallbackMethod': _.get(opts, 'statusCallbackMethod'),\n      'VoiceCallerIdLookup': serialize.bool(_.get(opts, 'voiceCallerIdLookup')),\n      'SmsUrl': _.get(opts, 'smsUrl'),\n      'SmsMethod': _.get(opts, 'smsMethod'),\n      'SmsFallbackUrl': _.get(opts, 'smsFallbackUrl'),\n      'SmsFallbackMethod': _.get(opts, 'smsFallbackMethod'),\n      'SmsStatusCallback': _.get(opts, 'smsStatusCallback'),\n      'MessageStatusCallback': _.get(opts, 'messageStatusCallback'),\n      'FriendlyName': _.get(opts, 'friendlyName')\n    });\n\n    var promise = this._version.create({\n      uri: this._uri,\n      method: 'POST',\n      data: data\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new ApplicationInstance(this._version, payload, this._solution.accountSid, this._solution.sid));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Streams ApplicationInstance records from the API.\n   *\n   * This operation lazily loads records as efficiently as possible until the limit\n   * is reached.\n   *\n   * The results are passed into the callback function, so this operation is memory\n   * efficient.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function each\n   * @memberof Twilio.Api.V2010.AccountContext.ApplicationList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.friendlyName] -\n   *          The string that identifies the Application resources to read\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         each() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no pageSize is defined but a limit is defined,\n   *         each() will attempt to read the limit with the most efficient\n   *         page size, i.e. min(limit, 1000)\n   * @param {Function} [opts.callback] -\n   *         Function to process each record. If this and a positional\n   *         callback are passed, this one will be used\n   * @param {Function} [opts.done] -\n   *          Function to be called upon completion of streaming\n   * @param {Function} [callback] - Function to process each record\n   */\n\n  /* jshint ignore:end */\n\n\n  ApplicationListInstance.each = function each(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n\n    if (opts.callback) {\n      callback = opts.callback;\n    }\n\n    if (_.isUndefined(callback)) {\n      throw new Error('Callback function must be provided');\n    }\n\n    var done = false;\n    var currentPage = 1;\n    var currentResource = 0;\n\n    var limits = this._version.readLimits({\n      limit: opts.limit,\n      pageSize: opts.pageSize\n    });\n\n    function onComplete(error) {\n      done = true;\n\n      if (_.isFunction(opts.done)) {\n        opts.done(error);\n      }\n    }\n\n    function fetchNextPage(fn) {\n      var promise = fn();\n\n      if (_.isUndefined(promise)) {\n        onComplete();\n        return;\n      }\n\n      promise.then(function (page) {\n        _.each(page.instances, function (instance) {\n          if (done || !_.isUndefined(opts.limit) && currentResource >= opts.limit) {\n            done = true;\n            return false;\n          }\n\n          currentResource++;\n          callback(instance, onComplete);\n        });\n\n        if (!done) {\n          currentPage++;\n          fetchNextPage(_.bind(page.nextPage, page));\n        } else {\n          onComplete();\n        }\n      });\n      promise.catch(onComplete);\n    }\n\n    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Lists ApplicationInstance records from the API as a list.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function list\n   * @memberof Twilio.Api.V2010.AccountContext.ApplicationList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.friendlyName] -\n   *          The string that identifies the Application resources to read\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         list() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no page_size is defined but a limit is defined,\n   *         list() will attempt to read the limit with the most\n   *         efficient page size, i.e. min(limit, 1000)\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  ApplicationListInstance.list = function list(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n    var deferred = Q.defer();\n    var allResources = [];\n\n    opts.callback = function (resource, done) {\n      allResources.push(resource);\n\n      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {\n        done();\n      }\n    };\n\n    opts.done = function (error) {\n      if (_.isUndefined(error)) {\n        deferred.resolve(allResources);\n      } else {\n        deferred.reject(error);\n      }\n    };\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    this.each(opts);\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Retrieve a single page of ApplicationInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function page\n   * @memberof Twilio.Api.V2010.AccountContext.ApplicationList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.friendlyName] -\n   *          The string that identifies the Application resources to read\n   * @param {string} [opts.pageToken] - PageToken provided by the API\n   * @param {number} [opts.pageNumber] -\n   *          Page Number, this value is simply for client state\n   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  ApplicationListInstance.page = function page(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n    var deferred = Q.defer();\n    var data = values.of({\n      'FriendlyName': _.get(opts, 'friendlyName'),\n      'PageToken': opts.pageToken,\n      'Page': opts.pageNumber,\n      'PageSize': opts.pageSize\n    });\n\n    var promise = this._version.page({\n      uri: this._uri,\n      method: 'GET',\n      params: data\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new ApplicationPage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Retrieve a single target page of ApplicationInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function getPage\n   * @memberof Twilio.Api.V2010.AccountContext.ApplicationList#\n   *\n   * @param {string} [targetUrl] - API-generated URL for the requested results page\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  ApplicationListInstance.getPage = function getPage(targetUrl, callback) {\n    var deferred = Q.defer();\n\n    var promise = this._version._domain.twilio.request({\n      method: 'GET',\n      uri: targetUrl\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new ApplicationPage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Constructs a application\n   *\n   * @function get\n   * @memberof Twilio.Api.V2010.AccountContext.ApplicationList#\n   *\n   * @param {string} sid - The unique string that identifies the resource\n   *\n   * @returns {Twilio.Api.V2010.AccountContext.ApplicationContext}\n   */\n\n  /* jshint ignore:end */\n\n\n  ApplicationListInstance.get = function get(sid) {\n    return new ApplicationContext(this._version, this._solution.accountSid, sid);\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Api.V2010.AccountContext.ApplicationList#\n   *\n   * @returns Object\n   */\n\n  /* jshint ignore:end */\n\n\n  ApplicationListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n\n  ApplicationListInstance[util.inspect.custom] = function inspect(depth, options) {\n    return util.inspect(this.toJSON(), options);\n  };\n\n  return ApplicationListInstance;\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the ApplicationPage\n *\n * @constructor Twilio.Api.V2010.AccountContext.ApplicationPage\n *\n * @param {V2010} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {ApplicationSolution} solution - Path solution\n *\n * @returns ApplicationPage\n */\n\n/* jshint ignore:end */\n\n\nApplicationPage = function ApplicationPage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n\n_.extend(ApplicationPage.prototype, Page.prototype);\n\nApplicationPage.prototype.constructor = ApplicationPage;\n/* jshint ignore:start */\n\n/**\n * Build an instance of ApplicationInstance\n *\n * @function getInstance\n * @memberof Twilio.Api.V2010.AccountContext.ApplicationPage#\n *\n * @param {ApplicationPayload} payload - Payload response from the API\n *\n * @returns ApplicationInstance\n */\n\n/* jshint ignore:end */\n\nApplicationPage.prototype.getInstance = function getInstance(payload) {\n  return new ApplicationInstance(this._version, payload, this._solution.accountSid);\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Api.V2010.AccountContext.ApplicationPage#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nApplicationPage.prototype.toJSON = function toJSON() {\n  let clone = {};\n\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n\n  return clone;\n};\n\nApplicationPage.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the ApplicationContext\n *\n * @constructor Twilio.Api.V2010.AccountContext.ApplicationInstance\n *\n * @property {string} accountSid - The SID of the Account that created the resource\n * @property {string} apiVersion -\n *          The API version used to start a new TwiML session\n * @property {Date} dateCreated -\n *          The RFC 2822 date and time in GMT that the resource was created\n * @property {Date} dateUpdated -\n *          The RFC 2822 date and time in GMT that the resource was last updated\n * @property {string} friendlyName -\n *          The string that you assigned to describe the resource\n * @property {string} messageStatusCallback -\n *          The URL to send message status information to your application\n * @property {string} sid - The unique string that identifies the resource\n * @property {string} smsFallbackMethod -\n *          The HTTP method used with sms_fallback_url\n * @property {string} smsFallbackUrl -\n *          The URL that we call when an error occurs while retrieving or executing the TwiML\n * @property {string} smsMethod - The HTTP method to use with sms_url\n * @property {string} smsStatusCallback -\n *          The URL to send status information to your application\n * @property {string} smsUrl -\n *          The URL we call when the phone number receives an incoming SMS message\n * @property {string} statusCallback -\n *          The URL to send status information to your application\n * @property {string} statusCallbackMethod -\n *          The HTTP method we use to call status_callback\n * @property {string} uri -\n *          The URI of the resource, relative to `https://api.twilio.com`\n * @property {boolean} voiceCallerIdLookup - Whether to lookup the caller's name\n * @property {string} voiceFallbackMethod -\n *          The HTTP method used with voice_fallback_url\n * @property {string} voiceFallbackUrl - The URL we call when a TwiML error occurs\n * @property {string} voiceMethod - The HTTP method used with the voice_url\n * @property {string} voiceUrl -\n *          The URL we call when the phone number receives a call\n *\n * @param {V2010} version - Version of the resource\n * @param {ApplicationPayload} payload - The instance payload\n * @param {sid} accountSid - The SID of the Account that created the resource\n * @param {sid} sid - The unique string that identifies the resource\n */\n\n/* jshint ignore:end */\n\n\nApplicationInstance = function ApplicationInstance(version, payload, accountSid, sid) {\n  this._version = version; // Marshaled Properties\n\n  this.accountSid = payload.account_sid; // jshint ignore:line\n\n  this.apiVersion = payload.api_version; // jshint ignore:line\n\n  this.dateCreated = deserialize.rfc2822DateTime(payload.date_created); // jshint ignore:line\n\n  this.dateUpdated = deserialize.rfc2822DateTime(payload.date_updated); // jshint ignore:line\n\n  this.friendlyName = payload.friendly_name; // jshint ignore:line\n\n  this.messageStatusCallback = payload.message_status_callback; // jshint ignore:line\n\n  this.sid = payload.sid; // jshint ignore:line\n\n  this.smsFallbackMethod = payload.sms_fallback_method; // jshint ignore:line\n\n  this.smsFallbackUrl = payload.sms_fallback_url; // jshint ignore:line\n\n  this.smsMethod = payload.sms_method; // jshint ignore:line\n\n  this.smsStatusCallback = payload.sms_status_callback; // jshint ignore:line\n\n  this.smsUrl = payload.sms_url; // jshint ignore:line\n\n  this.statusCallback = payload.status_callback; // jshint ignore:line\n\n  this.statusCallbackMethod = payload.status_callback_method; // jshint ignore:line\n\n  this.uri = payload.uri; // jshint ignore:line\n\n  this.voiceCallerIdLookup = payload.voice_caller_id_lookup; // jshint ignore:line\n\n  this.voiceFallbackMethod = payload.voice_fallback_method; // jshint ignore:line\n\n  this.voiceFallbackUrl = payload.voice_fallback_url; // jshint ignore:line\n\n  this.voiceMethod = payload.voice_method; // jshint ignore:line\n\n  this.voiceUrl = payload.voice_url; // jshint ignore:line\n  // Context\n\n  this._context = undefined;\n  this._solution = {\n    accountSid: accountSid,\n    sid: sid || this.sid\n  };\n};\n\nObject.defineProperty(ApplicationInstance.prototype, '_proxy', {\n  get: function () {\n    if (!this._context) {\n      this._context = new ApplicationContext(this._version, this._solution.accountSid, this._solution.sid);\n    }\n\n    return this._context;\n  }\n});\n/* jshint ignore:start */\n\n/**\n * remove a ApplicationInstance\n *\n * @function remove\n * @memberof Twilio.Api.V2010.AccountContext.ApplicationInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed ApplicationInstance\n */\n\n/* jshint ignore:end */\n\nApplicationInstance.prototype.remove = function remove(callback) {\n  return this._proxy.remove(callback);\n};\n/* jshint ignore:start */\n\n/**\n * fetch a ApplicationInstance\n *\n * @function fetch\n * @memberof Twilio.Api.V2010.AccountContext.ApplicationInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed ApplicationInstance\n */\n\n/* jshint ignore:end */\n\n\nApplicationInstance.prototype.fetch = function fetch(callback) {\n  return this._proxy.fetch(callback);\n};\n/* jshint ignore:start */\n\n/**\n * update a ApplicationInstance\n *\n * @function update\n * @memberof Twilio.Api.V2010.AccountContext.ApplicationInstance#\n *\n * @param {object} [opts] - Options for request\n * @param {string} [opts.friendlyName] - A string to describe the resource\n * @param {string} [opts.apiVersion] -\n *          The API version to use to start a new TwiML session\n * @param {string} [opts.voiceUrl] -\n *          The URL to call when the phone number receives a call\n * @param {string} [opts.voiceMethod] - The HTTP method to use with the voice_url\n * @param {string} [opts.voiceFallbackUrl] -\n *          The URL to call when a TwiML error occurs\n * @param {string} [opts.voiceFallbackMethod] -\n *          The HTTP method to use with voice_fallback_url\n * @param {string} [opts.statusCallback] -\n *          The URL to send status information to your application\n * @param {string} [opts.statusCallbackMethod] -\n *          The HTTP method to use to call status_callback\n * @param {boolean} [opts.voiceCallerIdLookup] -\n *          Whether to lookup the caller's name\n * @param {string} [opts.smsUrl] -\n *          The URL to call when the phone number receives an incoming SMS message\n * @param {string} [opts.smsMethod] - The HTTP method to use with sms_url\n * @param {string} [opts.smsFallbackUrl] -\n *          The URL to call when an error occurs while retrieving or executing the TwiML\n * @param {string} [opts.smsFallbackMethod] -\n *          The HTTP method to use with sms_fallback_url\n * @param {string} [opts.smsStatusCallback] -\n *          Same as message_status_callback. Deprecated, included for backwards compatibility.\n * @param {string} [opts.messageStatusCallback] -\n *          The URL to send message status information to your application\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed ApplicationInstance\n */\n\n/* jshint ignore:end */\n\n\nApplicationInstance.prototype.update = function update(opts, callback) {\n  return this._proxy.update(opts, callback);\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Api.V2010.AccountContext.ApplicationInstance#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nApplicationInstance.prototype.toJSON = function toJSON() {\n  let clone = {};\n\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n\n  return clone;\n};\n\nApplicationInstance.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the ApplicationContext\n *\n * @constructor Twilio.Api.V2010.AccountContext.ApplicationContext\n *\n * @param {V2010} version - Version of the resource\n * @param {sid} accountSid -\n *          The SID of the Account that created the resource to fetch\n * @param {sid} sid - The unique string that identifies the resource\n */\n\n/* jshint ignore:end */\n\n\nApplicationContext = function ApplicationContext(version, accountSid, sid) {\n  this._version = version; // Path Solution\n\n  this._solution = {\n    accountSid: accountSid,\n    sid: sid\n  };\n  this._uri = `/Accounts/${accountSid}/Applications/${sid}.json`;\n};\n/* jshint ignore:start */\n\n/**\n * remove a ApplicationInstance\n *\n * @function remove\n * @memberof Twilio.Api.V2010.AccountContext.ApplicationContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed ApplicationInstance\n */\n\n/* jshint ignore:end */\n\n\nApplicationContext.prototype.remove = function remove(callback) {\n  var deferred = Q.defer();\n\n  var promise = this._version.remove({\n    uri: this._uri,\n    method: 'DELETE'\n  });\n\n  promise = promise.then(function (payload) {\n    deferred.resolve(payload);\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n/* jshint ignore:start */\n\n/**\n * fetch a ApplicationInstance\n *\n * @function fetch\n * @memberof Twilio.Api.V2010.AccountContext.ApplicationContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed ApplicationInstance\n */\n\n/* jshint ignore:end */\n\n\nApplicationContext.prototype.fetch = function fetch(callback) {\n  var deferred = Q.defer();\n\n  var promise = this._version.fetch({\n    uri: this._uri,\n    method: 'GET'\n  });\n\n  promise = promise.then(function (payload) {\n    deferred.resolve(new ApplicationInstance(this._version, payload, this._solution.accountSid, this._solution.sid));\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n/* jshint ignore:start */\n\n/**\n * update a ApplicationInstance\n *\n * @function update\n * @memberof Twilio.Api.V2010.AccountContext.ApplicationContext#\n *\n * @param {object} [opts] - Options for request\n * @param {string} [opts.friendlyName] - A string to describe the resource\n * @param {string} [opts.apiVersion] -\n *          The API version to use to start a new TwiML session\n * @param {string} [opts.voiceUrl] -\n *          The URL to call when the phone number receives a call\n * @param {string} [opts.voiceMethod] - The HTTP method to use with the voice_url\n * @param {string} [opts.voiceFallbackUrl] -\n *          The URL to call when a TwiML error occurs\n * @param {string} [opts.voiceFallbackMethod] -\n *          The HTTP method to use with voice_fallback_url\n * @param {string} [opts.statusCallback] -\n *          The URL to send status information to your application\n * @param {string} [opts.statusCallbackMethod] -\n *          The HTTP method to use to call status_callback\n * @param {boolean} [opts.voiceCallerIdLookup] -\n *          Whether to lookup the caller's name\n * @param {string} [opts.smsUrl] -\n *          The URL to call when the phone number receives an incoming SMS message\n * @param {string} [opts.smsMethod] - The HTTP method to use with sms_url\n * @param {string} [opts.smsFallbackUrl] -\n *          The URL to call when an error occurs while retrieving or executing the TwiML\n * @param {string} [opts.smsFallbackMethod] -\n *          The HTTP method to use with sms_fallback_url\n * @param {string} [opts.smsStatusCallback] -\n *          Same as message_status_callback. Deprecated, included for backwards compatibility.\n * @param {string} [opts.messageStatusCallback] -\n *          The URL to send message status information to your application\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed ApplicationInstance\n */\n\n/* jshint ignore:end */\n\n\nApplicationContext.prototype.update = function update(opts, callback) {\n  if (_.isFunction(opts)) {\n    callback = opts;\n    opts = {};\n  }\n\n  opts = opts || {};\n  var deferred = Q.defer();\n  var data = values.of({\n    'FriendlyName': _.get(opts, 'friendlyName'),\n    'ApiVersion': _.get(opts, 'apiVersion'),\n    'VoiceUrl': _.get(opts, 'voiceUrl'),\n    'VoiceMethod': _.get(opts, 'voiceMethod'),\n    'VoiceFallbackUrl': _.get(opts, 'voiceFallbackUrl'),\n    'VoiceFallbackMethod': _.get(opts, 'voiceFallbackMethod'),\n    'StatusCallback': _.get(opts, 'statusCallback'),\n    'StatusCallbackMethod': _.get(opts, 'statusCallbackMethod'),\n    'VoiceCallerIdLookup': serialize.bool(_.get(opts, 'voiceCallerIdLookup')),\n    'SmsUrl': _.get(opts, 'smsUrl'),\n    'SmsMethod': _.get(opts, 'smsMethod'),\n    'SmsFallbackUrl': _.get(opts, 'smsFallbackUrl'),\n    'SmsFallbackMethod': _.get(opts, 'smsFallbackMethod'),\n    'SmsStatusCallback': _.get(opts, 'smsStatusCallback'),\n    'MessageStatusCallback': _.get(opts, 'messageStatusCallback')\n  });\n\n  var promise = this._version.update({\n    uri: this._uri,\n    method: 'POST',\n    data: data\n  });\n\n  promise = promise.then(function (payload) {\n    deferred.resolve(new ApplicationInstance(this._version, payload, this._solution.accountSid, this._solution.sid));\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Api.V2010.AccountContext.ApplicationContext#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nApplicationContext.prototype.toJSON = function toJSON() {\n  return this._solution;\n};\n\nApplicationContext.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\nmodule.exports = {\n  ApplicationList: ApplicationList,\n  ApplicationPage: ApplicationPage,\n  ApplicationInstance: ApplicationInstance,\n  ApplicationContext: ApplicationContext\n};","map":{"version":3,"names":["Q","require","_","util","Page","deserialize","serialize","values","ApplicationList","ApplicationPage","ApplicationInstance","ApplicationContext","version","accountSid","ApplicationListInstance","sid","get","_version","_solution","_uri","create","opts","callback","isFunction","deferred","defer","data","of","bool","promise","uri","method","then","payload","resolve","bind","catch","error","reject","nodeify","each","isUndefined","Error","done","currentPage","currentResource","limits","readLimits","limit","pageSize","onComplete","fetchNextPage","fn","page","instances","instance","nextPage","merge","list","allResources","resource","push","length","pageToken","pageNumber","params","getPage","targetUrl","_domain","twilio","request","toJSON","inspect","custom","depth","options","response","solution","prototype","constructor","call","extend","getInstance","clone","forOwn","value","key","startsWith","account_sid","apiVersion","api_version","dateCreated","rfc2822DateTime","date_created","dateUpdated","date_updated","friendlyName","friendly_name","messageStatusCallback","message_status_callback","smsFallbackMethod","sms_fallback_method","smsFallbackUrl","sms_fallback_url","smsMethod","sms_method","smsStatusCallback","sms_status_callback","smsUrl","sms_url","statusCallback","status_callback","statusCallbackMethod","status_callback_method","voiceCallerIdLookup","voice_caller_id_lookup","voiceFallbackMethod","voice_fallback_method","voiceFallbackUrl","voice_fallback_url","voiceMethod","voice_method","voiceUrl","voice_url","_context","undefined","Object","defineProperty","remove","_proxy","fetch","update","module","exports"],"sources":["/Users/hooniesun/rmit/fwp/assessment1/lan/node_modules/twilio/lib/rest/api/v2010/account/application.js"],"sourcesContent":["'use strict';\n\n/* jshint ignore:start */\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n/* jshint ignore:end */\n\nvar Q = require('q');  /* jshint ignore:line */\nvar _ = require('lodash');  /* jshint ignore:line */\nvar util = require('util');  /* jshint ignore:line */\nvar Page = require('../../../../base/Page');  /* jshint ignore:line */\nvar deserialize = require(\n    '../../../../base/deserialize');  /* jshint ignore:line */\nvar serialize = require('../../../../base/serialize');  /* jshint ignore:line */\nvar values = require('../../../../base/values');  /* jshint ignore:line */\n\nvar ApplicationList;\nvar ApplicationPage;\nvar ApplicationInstance;\nvar ApplicationContext;\n\n/* jshint ignore:start */\n/**\n * Initialize the ApplicationList\n *\n * @constructor Twilio.Api.V2010.AccountContext.ApplicationList\n *\n * @param {Twilio.Api.V2010} version - Version of the resource\n * @param {string} accountSid - The SID of the Account that created the resource\n */\n/* jshint ignore:end */\nApplicationList = function ApplicationList(version, accountSid) {\n  /* jshint ignore:start */\n  /**\n   * @function applications\n   * @memberof Twilio.Api.V2010.AccountContext#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Api.V2010.AccountContext.ApplicationContext}\n   */\n  /* jshint ignore:end */\n  function ApplicationListInstance(sid) {\n    return ApplicationListInstance.get(sid);\n  }\n\n  ApplicationListInstance._version = version;\n  // Path Solution\n  ApplicationListInstance._solution = {accountSid: accountSid};\n  ApplicationListInstance._uri = `/Accounts/${accountSid}/Applications.json`;\n  /* jshint ignore:start */\n  /**\n   * create a ApplicationInstance\n   *\n   * @function create\n   * @memberof Twilio.Api.V2010.AccountContext.ApplicationList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.apiVersion] -\n   *          The API version to use to start a new TwiML session\n   * @param {string} [opts.voiceUrl] -\n   *          The URL to call when the phone number receives a call\n   * @param {string} [opts.voiceMethod] - The HTTP method to use with the voice_url\n   * @param {string} [opts.voiceFallbackUrl] -\n   *          The URL to call when a TwiML error occurs\n   * @param {string} [opts.voiceFallbackMethod] -\n   *          The HTTP method to use with voice_fallback_url\n   * @param {string} [opts.statusCallback] -\n   *          The URL to send status information to your application\n   * @param {string} [opts.statusCallbackMethod] -\n   *          The HTTP method to use to call status_callback\n   * @param {boolean} [opts.voiceCallerIdLookup] -\n   *          Whether to lookup the caller's name\n   * @param {string} [opts.smsUrl] -\n   *          The URL to call when the phone number receives an incoming SMS message\n   * @param {string} [opts.smsMethod] - The HTTP method to use with sms_url\n   * @param {string} [opts.smsFallbackUrl] -\n   *          The URL to call when an error occurs while retrieving or executing the TwiML\n   * @param {string} [opts.smsFallbackMethod] -\n   *          The HTTP method to use with sms_fallback_url\n   * @param {string} [opts.smsStatusCallback] -\n   *          The URL to send status information to your application\n   * @param {string} [opts.messageStatusCallback] -\n   *          The URL to send message status information to your application\n   * @param {string} [opts.friendlyName] - A string to describe the new resource\n   * @param {function} [callback] - Callback to handle processed record\n   *\n   * @returns {Promise} Resolves to processed ApplicationInstance\n   */\n  /* jshint ignore:end */\n  ApplicationListInstance.create = function create(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n\n    var deferred = Q.defer();\n    var data = values.of({\n      'ApiVersion': _.get(opts, 'apiVersion'),\n      'VoiceUrl': _.get(opts, 'voiceUrl'),\n      'VoiceMethod': _.get(opts, 'voiceMethod'),\n      'VoiceFallbackUrl': _.get(opts, 'voiceFallbackUrl'),\n      'VoiceFallbackMethod': _.get(opts, 'voiceFallbackMethod'),\n      'StatusCallback': _.get(opts, 'statusCallback'),\n      'StatusCallbackMethod': _.get(opts, 'statusCallbackMethod'),\n      'VoiceCallerIdLookup': serialize.bool(_.get(opts, 'voiceCallerIdLookup')),\n      'SmsUrl': _.get(opts, 'smsUrl'),\n      'SmsMethod': _.get(opts, 'smsMethod'),\n      'SmsFallbackUrl': _.get(opts, 'smsFallbackUrl'),\n      'SmsFallbackMethod': _.get(opts, 'smsFallbackMethod'),\n      'SmsStatusCallback': _.get(opts, 'smsStatusCallback'),\n      'MessageStatusCallback': _.get(opts, 'messageStatusCallback'),\n      'FriendlyName': _.get(opts, 'friendlyName')\n    });\n\n    var promise = this._version.create({uri: this._uri, method: 'POST', data: data});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new ApplicationInstance(\n        this._version,\n        payload,\n        this._solution.accountSid,\n        this._solution.sid\n      ));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Streams ApplicationInstance records from the API.\n   *\n   * This operation lazily loads records as efficiently as possible until the limit\n   * is reached.\n   *\n   * The results are passed into the callback function, so this operation is memory\n   * efficient.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function each\n   * @memberof Twilio.Api.V2010.AccountContext.ApplicationList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.friendlyName] -\n   *          The string that identifies the Application resources to read\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         each() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no pageSize is defined but a limit is defined,\n   *         each() will attempt to read the limit with the most efficient\n   *         page size, i.e. min(limit, 1000)\n   * @param {Function} [opts.callback] -\n   *         Function to process each record. If this and a positional\n   *         callback are passed, this one will be used\n   * @param {Function} [opts.done] -\n   *          Function to be called upon completion of streaming\n   * @param {Function} [callback] - Function to process each record\n   */\n  /* jshint ignore:end */\n  ApplicationListInstance.each = function each(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    if (opts.callback) {\n      callback = opts.callback;\n    }\n    if (_.isUndefined(callback)) {\n      throw new Error('Callback function must be provided');\n    }\n\n    var done = false;\n    var currentPage = 1;\n    var currentResource = 0;\n    var limits = this._version.readLimits({\n      limit: opts.limit,\n      pageSize: opts.pageSize\n    });\n\n    function onComplete(error) {\n      done = true;\n      if (_.isFunction(opts.done)) {\n        opts.done(error);\n      }\n    }\n\n    function fetchNextPage(fn) {\n      var promise = fn();\n      if (_.isUndefined(promise)) {\n        onComplete();\n        return;\n      }\n\n      promise.then(function(page) {\n        _.each(page.instances, function(instance) {\n          if (done || (!_.isUndefined(opts.limit) && currentResource >= opts.limit)) {\n            done = true;\n            return false;\n          }\n\n          currentResource++;\n          callback(instance, onComplete);\n        });\n\n        if (!done) {\n          currentPage++;\n          fetchNextPage(_.bind(page.nextPage, page));\n        } else {\n          onComplete();\n        }\n      });\n\n      promise.catch(onComplete);\n    }\n\n    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Lists ApplicationInstance records from the API as a list.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function list\n   * @memberof Twilio.Api.V2010.AccountContext.ApplicationList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.friendlyName] -\n   *          The string that identifies the Application resources to read\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         list() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no page_size is defined but a limit is defined,\n   *         list() will attempt to read the limit with the most\n   *         efficient page size, i.e. min(limit, 1000)\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  ApplicationListInstance.list = function list(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    var deferred = Q.defer();\n    var allResources = [];\n    opts.callback = function(resource, done) {\n      allResources.push(resource);\n\n      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {\n        done();\n      }\n    };\n\n    opts.done = function(error) {\n      if (_.isUndefined(error)) {\n        deferred.resolve(allResources);\n      } else {\n        deferred.reject(error);\n      }\n    };\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    this.each(opts);\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single page of ApplicationInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function page\n   * @memberof Twilio.Api.V2010.AccountContext.ApplicationList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.friendlyName] -\n   *          The string that identifies the Application resources to read\n   * @param {string} [opts.pageToken] - PageToken provided by the API\n   * @param {number} [opts.pageNumber] -\n   *          Page Number, this value is simply for client state\n   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  ApplicationListInstance.page = function page(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n\n    var deferred = Q.defer();\n    var data = values.of({\n      'FriendlyName': _.get(opts, 'friendlyName'),\n      'PageToken': opts.pageToken,\n      'Page': opts.pageNumber,\n      'PageSize': opts.pageSize\n    });\n\n    var promise = this._version.page({uri: this._uri, method: 'GET', params: data});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new ApplicationPage(this._version, payload, this._solution));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single target page of ApplicationInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function getPage\n   * @memberof Twilio.Api.V2010.AccountContext.ApplicationList#\n   *\n   * @param {string} [targetUrl] - API-generated URL for the requested results page\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  ApplicationListInstance.getPage = function getPage(targetUrl, callback) {\n    var deferred = Q.defer();\n\n    var promise = this._version._domain.twilio.request({method: 'GET', uri: targetUrl});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new ApplicationPage(this._version, payload, this._solution));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Constructs a application\n   *\n   * @function get\n   * @memberof Twilio.Api.V2010.AccountContext.ApplicationList#\n   *\n   * @param {string} sid - The unique string that identifies the resource\n   *\n   * @returns {Twilio.Api.V2010.AccountContext.ApplicationContext}\n   */\n  /* jshint ignore:end */\n  ApplicationListInstance.get = function get(sid) {\n    return new ApplicationContext(this._version, this._solution.accountSid, sid);\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Api.V2010.AccountContext.ApplicationList#\n   *\n   * @returns Object\n   */\n  /* jshint ignore:end */\n  ApplicationListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n\n  ApplicationListInstance[util.inspect.custom] = function inspect(depth, options)\n      {\n    return util.inspect(this.toJSON(), options);\n  };\n\n  return ApplicationListInstance;\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the ApplicationPage\n *\n * @constructor Twilio.Api.V2010.AccountContext.ApplicationPage\n *\n * @param {V2010} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {ApplicationSolution} solution - Path solution\n *\n * @returns ApplicationPage\n */\n/* jshint ignore:end */\nApplicationPage = function ApplicationPage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n\n_.extend(ApplicationPage.prototype, Page.prototype);\nApplicationPage.prototype.constructor = ApplicationPage;\n\n/* jshint ignore:start */\n/**\n * Build an instance of ApplicationInstance\n *\n * @function getInstance\n * @memberof Twilio.Api.V2010.AccountContext.ApplicationPage#\n *\n * @param {ApplicationPayload} payload - Payload response from the API\n *\n * @returns ApplicationInstance\n */\n/* jshint ignore:end */\nApplicationPage.prototype.getInstance = function getInstance(payload) {\n  return new ApplicationInstance(this._version, payload, this._solution.accountSid);\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Api.V2010.AccountContext.ApplicationPage#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nApplicationPage.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function(value, key) {\n    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\n\nApplicationPage.prototype[util.inspect.custom] = function inspect(depth,\n    options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the ApplicationContext\n *\n * @constructor Twilio.Api.V2010.AccountContext.ApplicationInstance\n *\n * @property {string} accountSid - The SID of the Account that created the resource\n * @property {string} apiVersion -\n *          The API version used to start a new TwiML session\n * @property {Date} dateCreated -\n *          The RFC 2822 date and time in GMT that the resource was created\n * @property {Date} dateUpdated -\n *          The RFC 2822 date and time in GMT that the resource was last updated\n * @property {string} friendlyName -\n *          The string that you assigned to describe the resource\n * @property {string} messageStatusCallback -\n *          The URL to send message status information to your application\n * @property {string} sid - The unique string that identifies the resource\n * @property {string} smsFallbackMethod -\n *          The HTTP method used with sms_fallback_url\n * @property {string} smsFallbackUrl -\n *          The URL that we call when an error occurs while retrieving or executing the TwiML\n * @property {string} smsMethod - The HTTP method to use with sms_url\n * @property {string} smsStatusCallback -\n *          The URL to send status information to your application\n * @property {string} smsUrl -\n *          The URL we call when the phone number receives an incoming SMS message\n * @property {string} statusCallback -\n *          The URL to send status information to your application\n * @property {string} statusCallbackMethod -\n *          The HTTP method we use to call status_callback\n * @property {string} uri -\n *          The URI of the resource, relative to `https://api.twilio.com`\n * @property {boolean} voiceCallerIdLookup - Whether to lookup the caller's name\n * @property {string} voiceFallbackMethod -\n *          The HTTP method used with voice_fallback_url\n * @property {string} voiceFallbackUrl - The URL we call when a TwiML error occurs\n * @property {string} voiceMethod - The HTTP method used with the voice_url\n * @property {string} voiceUrl -\n *          The URL we call when the phone number receives a call\n *\n * @param {V2010} version - Version of the resource\n * @param {ApplicationPayload} payload - The instance payload\n * @param {sid} accountSid - The SID of the Account that created the resource\n * @param {sid} sid - The unique string that identifies the resource\n */\n/* jshint ignore:end */\nApplicationInstance = function ApplicationInstance(version, payload, accountSid,\n                                                    sid) {\n  this._version = version;\n\n  // Marshaled Properties\n  this.accountSid = payload.account_sid; // jshint ignore:line\n  this.apiVersion = payload.api_version; // jshint ignore:line\n  this.dateCreated = deserialize.rfc2822DateTime(payload.date_created); // jshint ignore:line\n  this.dateUpdated = deserialize.rfc2822DateTime(payload.date_updated); // jshint ignore:line\n  this.friendlyName = payload.friendly_name; // jshint ignore:line\n  this.messageStatusCallback = payload.message_status_callback; // jshint ignore:line\n  this.sid = payload.sid; // jshint ignore:line\n  this.smsFallbackMethod = payload.sms_fallback_method; // jshint ignore:line\n  this.smsFallbackUrl = payload.sms_fallback_url; // jshint ignore:line\n  this.smsMethod = payload.sms_method; // jshint ignore:line\n  this.smsStatusCallback = payload.sms_status_callback; // jshint ignore:line\n  this.smsUrl = payload.sms_url; // jshint ignore:line\n  this.statusCallback = payload.status_callback; // jshint ignore:line\n  this.statusCallbackMethod = payload.status_callback_method; // jshint ignore:line\n  this.uri = payload.uri; // jshint ignore:line\n  this.voiceCallerIdLookup = payload.voice_caller_id_lookup; // jshint ignore:line\n  this.voiceFallbackMethod = payload.voice_fallback_method; // jshint ignore:line\n  this.voiceFallbackUrl = payload.voice_fallback_url; // jshint ignore:line\n  this.voiceMethod = payload.voice_method; // jshint ignore:line\n  this.voiceUrl = payload.voice_url; // jshint ignore:line\n\n  // Context\n  this._context = undefined;\n  this._solution = {accountSid: accountSid, sid: sid || this.sid, };\n};\n\nObject.defineProperty(ApplicationInstance.prototype,\n  '_proxy', {\n    get: function() {\n      if (!this._context) {\n        this._context = new ApplicationContext(\n          this._version,\n          this._solution.accountSid,\n          this._solution.sid\n        );\n      }\n\n      return this._context;\n    }\n});\n\n/* jshint ignore:start */\n/**\n * remove a ApplicationInstance\n *\n * @function remove\n * @memberof Twilio.Api.V2010.AccountContext.ApplicationInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed ApplicationInstance\n */\n/* jshint ignore:end */\nApplicationInstance.prototype.remove = function remove(callback) {\n  return this._proxy.remove(callback);\n};\n\n/* jshint ignore:start */\n/**\n * fetch a ApplicationInstance\n *\n * @function fetch\n * @memberof Twilio.Api.V2010.AccountContext.ApplicationInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed ApplicationInstance\n */\n/* jshint ignore:end */\nApplicationInstance.prototype.fetch = function fetch(callback) {\n  return this._proxy.fetch(callback);\n};\n\n/* jshint ignore:start */\n/**\n * update a ApplicationInstance\n *\n * @function update\n * @memberof Twilio.Api.V2010.AccountContext.ApplicationInstance#\n *\n * @param {object} [opts] - Options for request\n * @param {string} [opts.friendlyName] - A string to describe the resource\n * @param {string} [opts.apiVersion] -\n *          The API version to use to start a new TwiML session\n * @param {string} [opts.voiceUrl] -\n *          The URL to call when the phone number receives a call\n * @param {string} [opts.voiceMethod] - The HTTP method to use with the voice_url\n * @param {string} [opts.voiceFallbackUrl] -\n *          The URL to call when a TwiML error occurs\n * @param {string} [opts.voiceFallbackMethod] -\n *          The HTTP method to use with voice_fallback_url\n * @param {string} [opts.statusCallback] -\n *          The URL to send status information to your application\n * @param {string} [opts.statusCallbackMethod] -\n *          The HTTP method to use to call status_callback\n * @param {boolean} [opts.voiceCallerIdLookup] -\n *          Whether to lookup the caller's name\n * @param {string} [opts.smsUrl] -\n *          The URL to call when the phone number receives an incoming SMS message\n * @param {string} [opts.smsMethod] - The HTTP method to use with sms_url\n * @param {string} [opts.smsFallbackUrl] -\n *          The URL to call when an error occurs while retrieving or executing the TwiML\n * @param {string} [opts.smsFallbackMethod] -\n *          The HTTP method to use with sms_fallback_url\n * @param {string} [opts.smsStatusCallback] -\n *          Same as message_status_callback. Deprecated, included for backwards compatibility.\n * @param {string} [opts.messageStatusCallback] -\n *          The URL to send message status information to your application\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed ApplicationInstance\n */\n/* jshint ignore:end */\nApplicationInstance.prototype.update = function update(opts, callback) {\n  return this._proxy.update(opts, callback);\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Api.V2010.AccountContext.ApplicationInstance#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nApplicationInstance.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function(value, key) {\n    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\n\nApplicationInstance.prototype[util.inspect.custom] = function inspect(depth,\n    options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the ApplicationContext\n *\n * @constructor Twilio.Api.V2010.AccountContext.ApplicationContext\n *\n * @param {V2010} version - Version of the resource\n * @param {sid} accountSid -\n *          The SID of the Account that created the resource to fetch\n * @param {sid} sid - The unique string that identifies the resource\n */\n/* jshint ignore:end */\nApplicationContext = function ApplicationContext(version, accountSid, sid) {\n  this._version = version;\n\n  // Path Solution\n  this._solution = {accountSid: accountSid, sid: sid, };\n  this._uri = `/Accounts/${accountSid}/Applications/${sid}.json`;\n};\n\n/* jshint ignore:start */\n/**\n * remove a ApplicationInstance\n *\n * @function remove\n * @memberof Twilio.Api.V2010.AccountContext.ApplicationContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed ApplicationInstance\n */\n/* jshint ignore:end */\nApplicationContext.prototype.remove = function remove(callback) {\n  var deferred = Q.defer();\n  var promise = this._version.remove({uri: this._uri, method: 'DELETE'});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(payload);\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * fetch a ApplicationInstance\n *\n * @function fetch\n * @memberof Twilio.Api.V2010.AccountContext.ApplicationContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed ApplicationInstance\n */\n/* jshint ignore:end */\nApplicationContext.prototype.fetch = function fetch(callback) {\n  var deferred = Q.defer();\n  var promise = this._version.fetch({uri: this._uri, method: 'GET'});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(new ApplicationInstance(\n      this._version,\n      payload,\n      this._solution.accountSid,\n      this._solution.sid\n    ));\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * update a ApplicationInstance\n *\n * @function update\n * @memberof Twilio.Api.V2010.AccountContext.ApplicationContext#\n *\n * @param {object} [opts] - Options for request\n * @param {string} [opts.friendlyName] - A string to describe the resource\n * @param {string} [opts.apiVersion] -\n *          The API version to use to start a new TwiML session\n * @param {string} [opts.voiceUrl] -\n *          The URL to call when the phone number receives a call\n * @param {string} [opts.voiceMethod] - The HTTP method to use with the voice_url\n * @param {string} [opts.voiceFallbackUrl] -\n *          The URL to call when a TwiML error occurs\n * @param {string} [opts.voiceFallbackMethod] -\n *          The HTTP method to use with voice_fallback_url\n * @param {string} [opts.statusCallback] -\n *          The URL to send status information to your application\n * @param {string} [opts.statusCallbackMethod] -\n *          The HTTP method to use to call status_callback\n * @param {boolean} [opts.voiceCallerIdLookup] -\n *          Whether to lookup the caller's name\n * @param {string} [opts.smsUrl] -\n *          The URL to call when the phone number receives an incoming SMS message\n * @param {string} [opts.smsMethod] - The HTTP method to use with sms_url\n * @param {string} [opts.smsFallbackUrl] -\n *          The URL to call when an error occurs while retrieving or executing the TwiML\n * @param {string} [opts.smsFallbackMethod] -\n *          The HTTP method to use with sms_fallback_url\n * @param {string} [opts.smsStatusCallback] -\n *          Same as message_status_callback. Deprecated, included for backwards compatibility.\n * @param {string} [opts.messageStatusCallback] -\n *          The URL to send message status information to your application\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed ApplicationInstance\n */\n/* jshint ignore:end */\nApplicationContext.prototype.update = function update(opts, callback) {\n  if (_.isFunction(opts)) {\n    callback = opts;\n    opts = {};\n  }\n  opts = opts || {};\n\n  var deferred = Q.defer();\n  var data = values.of({\n    'FriendlyName': _.get(opts, 'friendlyName'),\n    'ApiVersion': _.get(opts, 'apiVersion'),\n    'VoiceUrl': _.get(opts, 'voiceUrl'),\n    'VoiceMethod': _.get(opts, 'voiceMethod'),\n    'VoiceFallbackUrl': _.get(opts, 'voiceFallbackUrl'),\n    'VoiceFallbackMethod': _.get(opts, 'voiceFallbackMethod'),\n    'StatusCallback': _.get(opts, 'statusCallback'),\n    'StatusCallbackMethod': _.get(opts, 'statusCallbackMethod'),\n    'VoiceCallerIdLookup': serialize.bool(_.get(opts, 'voiceCallerIdLookup')),\n    'SmsUrl': _.get(opts, 'smsUrl'),\n    'SmsMethod': _.get(opts, 'smsMethod'),\n    'SmsFallbackUrl': _.get(opts, 'smsFallbackUrl'),\n    'SmsFallbackMethod': _.get(opts, 'smsFallbackMethod'),\n    'SmsStatusCallback': _.get(opts, 'smsStatusCallback'),\n    'MessageStatusCallback': _.get(opts, 'messageStatusCallback')\n  });\n\n  var promise = this._version.update({uri: this._uri, method: 'POST', data: data});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(new ApplicationInstance(\n      this._version,\n      payload,\n      this._solution.accountSid,\n      this._solution.sid\n    ));\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Api.V2010.AccountContext.ApplicationContext#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nApplicationContext.prototype.toJSON = function toJSON() {\n  return this._solution;\n};\n\nApplicationContext.prototype[util.inspect.custom] = function inspect(depth,\n    options) {\n  return util.inspect(this.toJSON(), options);\n};\n\nmodule.exports = {\n  ApplicationList: ApplicationList,\n  ApplicationPage: ApplicationPage,\n  ApplicationInstance: ApplicationInstance,\n  ApplicationContext: ApplicationContext\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}