{"ast":null,"code":"'use strict';\n/* jshint ignore:start */\n\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n\n/* jshint ignore:end */\n\nvar Q = require('q');\n/* jshint ignore:line */\n\n\nvar _ = require('lodash');\n/* jshint ignore:line */\n\n\nvar util = require('util');\n/* jshint ignore:line */\n\n\nvar Page = require('../../../../../../base/Page');\n/* jshint ignore:line */\n\n\nvar deserialize = require('../../../../../../base/deserialize');\n/* jshint ignore:line */\n\n\nvar values = require('../../../../../../base/values');\n/* jshint ignore:line */\n\n\nvar CredentialList;\nvar CredentialPage;\nvar CredentialInstance;\nvar CredentialContext;\n/* jshint ignore:start */\n\n/**\n * Initialize the CredentialList\n *\n * @constructor Twilio.Api.V2010.AccountContext.SipContext.CredentialListContext.CredentialList\n *\n * @param {Twilio.Api.V2010} version - Version of the resource\n * @param {string} accountSid -\n *          The unique id of the Account that is responsible for this resource.\n * @param {string} credentialListSid -\n *          The unique id that identifies the credential list that includes this credential\n */\n\n/* jshint ignore:end */\n\nCredentialList = function CredentialList(version, accountSid, credentialListSid) {\n  /* jshint ignore:start */\n\n  /**\n   * @function credentials\n   * @memberof Twilio.Api.V2010.AccountContext.SipContext.CredentialListContext#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Api.V2010.AccountContext.SipContext.CredentialListContext.CredentialContext}\n   */\n\n  /* jshint ignore:end */\n  function CredentialListInstance(sid) {\n    return CredentialListInstance.get(sid);\n  }\n\n  CredentialListInstance._version = version; // Path Solution\n\n  CredentialListInstance._solution = {\n    accountSid: accountSid,\n    credentialListSid: credentialListSid\n  };\n  CredentialListInstance._uri = `/Accounts/${accountSid}/SIP/CredentialLists/${credentialListSid}/Credentials.json`;\n  /* jshint ignore:start */\n\n  /**\n   * Streams CredentialInstance records from the API.\n   *\n   * This operation lazily loads records as efficiently as possible until the limit\n   * is reached.\n   *\n   * The results are passed into the callback function, so this operation is memory\n   * efficient.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function each\n   * @memberof Twilio.Api.V2010.AccountContext.SipContext.CredentialListContext.CredentialList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         each() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no pageSize is defined but a limit is defined,\n   *         each() will attempt to read the limit with the most efficient\n   *         page size, i.e. min(limit, 1000)\n   * @param {Function} [opts.callback] -\n   *         Function to process each record. If this and a positional\n   *         callback are passed, this one will be used\n   * @param {Function} [opts.done] -\n   *          Function to be called upon completion of streaming\n   * @param {Function} [callback] - Function to process each record\n   */\n\n  /* jshint ignore:end */\n\n  CredentialListInstance.each = function each(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n\n    if (opts.callback) {\n      callback = opts.callback;\n    }\n\n    if (_.isUndefined(callback)) {\n      throw new Error('Callback function must be provided');\n    }\n\n    var done = false;\n    var currentPage = 1;\n    var currentResource = 0;\n\n    var limits = this._version.readLimits({\n      limit: opts.limit,\n      pageSize: opts.pageSize\n    });\n\n    function onComplete(error) {\n      done = true;\n\n      if (_.isFunction(opts.done)) {\n        opts.done(error);\n      }\n    }\n\n    function fetchNextPage(fn) {\n      var promise = fn();\n\n      if (_.isUndefined(promise)) {\n        onComplete();\n        return;\n      }\n\n      promise.then(function (page) {\n        _.each(page.instances, function (instance) {\n          if (done || !_.isUndefined(opts.limit) && currentResource >= opts.limit) {\n            done = true;\n            return false;\n          }\n\n          currentResource++;\n          callback(instance, onComplete);\n        });\n\n        if (!done) {\n          currentPage++;\n          fetchNextPage(_.bind(page.nextPage, page));\n        } else {\n          onComplete();\n        }\n      });\n      promise.catch(onComplete);\n    }\n\n    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Lists CredentialInstance records from the API as a list.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function list\n   * @memberof Twilio.Api.V2010.AccountContext.SipContext.CredentialListContext.CredentialList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         list() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no page_size is defined but a limit is defined,\n   *         list() will attempt to read the limit with the most\n   *         efficient page size, i.e. min(limit, 1000)\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  CredentialListInstance.list = function list(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n    var deferred = Q.defer();\n    var allResources = [];\n\n    opts.callback = function (resource, done) {\n      allResources.push(resource);\n\n      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {\n        done();\n      }\n    };\n\n    opts.done = function (error) {\n      if (_.isUndefined(error)) {\n        deferred.resolve(allResources);\n      } else {\n        deferred.reject(error);\n      }\n    };\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    this.each(opts);\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Retrieve a single page of CredentialInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function page\n   * @memberof Twilio.Api.V2010.AccountContext.SipContext.CredentialListContext.CredentialList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.pageToken] - PageToken provided by the API\n   * @param {number} [opts.pageNumber] -\n   *          Page Number, this value is simply for client state\n   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  CredentialListInstance.page = function page(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n    var deferred = Q.defer();\n    var data = values.of({\n      'PageToken': opts.pageToken,\n      'Page': opts.pageNumber,\n      'PageSize': opts.pageSize\n    });\n\n    var promise = this._version.page({\n      uri: this._uri,\n      method: 'GET',\n      params: data\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new CredentialPage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Retrieve a single target page of CredentialInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function getPage\n   * @memberof Twilio.Api.V2010.AccountContext.SipContext.CredentialListContext.CredentialList#\n   *\n   * @param {string} [targetUrl] - API-generated URL for the requested results page\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  CredentialListInstance.getPage = function getPage(targetUrl, callback) {\n    var deferred = Q.defer();\n\n    var promise = this._version._domain.twilio.request({\n      method: 'GET',\n      uri: targetUrl\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new CredentialPage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * create a CredentialInstance\n   *\n   * @function create\n   * @memberof Twilio.Api.V2010.AccountContext.SipContext.CredentialListContext.CredentialList#\n   *\n   * @param {object} opts - Options for request\n   * @param {string} opts.username - The username for this credential.\n   * @param {string} opts.password -\n   *          The password will not be returned in the response.\n   * @param {function} [callback] - Callback to handle processed record\n   *\n   * @returns {Promise} Resolves to processed CredentialInstance\n   */\n\n  /* jshint ignore:end */\n\n\n  CredentialListInstance.create = function create(opts, callback) {\n    if (_.isUndefined(opts)) {\n      throw new Error('Required parameter \"opts\" missing.');\n    }\n\n    if (_.isUndefined(opts['username'])) {\n      throw new Error('Required parameter \"opts[\\'username\\']\" missing.');\n    }\n\n    if (_.isUndefined(opts['password'])) {\n      throw new Error('Required parameter \"opts[\\'password\\']\" missing.');\n    }\n\n    var deferred = Q.defer();\n    var data = values.of({\n      'Username': _.get(opts, 'username'),\n      'Password': _.get(opts, 'password')\n    });\n\n    var promise = this._version.create({\n      uri: this._uri,\n      method: 'POST',\n      data: data\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new CredentialInstance(this._version, payload, this._solution.accountSid, this._solution.credentialListSid, this._solution.sid));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Constructs a credential\n   *\n   * @function get\n   * @memberof Twilio.Api.V2010.AccountContext.SipContext.CredentialListContext.CredentialList#\n   *\n   * @param {string} sid - The unique id that identifies the resource to fetch.\n   *\n   * @returns {Twilio.Api.V2010.AccountContext.SipContext.CredentialListContext.CredentialContext}\n   */\n\n  /* jshint ignore:end */\n\n\n  CredentialListInstance.get = function get(sid) {\n    return new CredentialContext(this._version, this._solution.accountSid, this._solution.credentialListSid, sid);\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Api.V2010.AccountContext.SipContext.CredentialListContext.CredentialList#\n   *\n   * @returns Object\n   */\n\n  /* jshint ignore:end */\n\n\n  CredentialListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n\n  CredentialListInstance[util.inspect.custom] = function inspect(depth, options) {\n    return util.inspect(this.toJSON(), options);\n  };\n\n  return CredentialListInstance;\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the CredentialPage\n *\n * @constructor Twilio.Api.V2010.AccountContext.SipContext.CredentialListContext.CredentialPage\n *\n * @param {V2010} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {CredentialSolution} solution - Path solution\n *\n * @returns CredentialPage\n */\n\n/* jshint ignore:end */\n\n\nCredentialPage = function CredentialPage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n\n_.extend(CredentialPage.prototype, Page.prototype);\n\nCredentialPage.prototype.constructor = CredentialPage;\n/* jshint ignore:start */\n\n/**\n * Build an instance of CredentialInstance\n *\n * @function getInstance\n * @memberof Twilio.Api.V2010.AccountContext.SipContext.CredentialListContext.CredentialPage#\n *\n * @param {CredentialPayload} payload - Payload response from the API\n *\n * @returns CredentialInstance\n */\n\n/* jshint ignore:end */\n\nCredentialPage.prototype.getInstance = function getInstance(payload) {\n  return new CredentialInstance(this._version, payload, this._solution.accountSid, this._solution.credentialListSid);\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Api.V2010.AccountContext.SipContext.CredentialListContext.CredentialPage#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nCredentialPage.prototype.toJSON = function toJSON() {\n  let clone = {};\n\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n\n  return clone;\n};\n\nCredentialPage.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the CredentialContext\n *\n * @constructor Twilio.Api.V2010.AccountContext.SipContext.CredentialListContext.CredentialInstance\n *\n * @property {string} sid -\n *          A 34 character string that uniquely identifies this resource.\n * @property {string} accountSid -\n *          The unique id of the Account that is responsible for this resource.\n * @property {string} credentialListSid -\n *          The unique id that identifies the credential list that includes this credential\n * @property {string} username - The username for this credential.\n * @property {Date} dateCreated -\n *          The date that this resource was created, given as GMT in RFC 2822 format.\n * @property {Date} dateUpdated -\n *          The date that this resource was last updated, given as GMT in RFC 2822 format.\n * @property {string} uri -\n *          The URI for this resource, relative to https://api.twilio.com\n *\n * @param {V2010} version - Version of the resource\n * @param {CredentialPayload} payload - The instance payload\n * @param {sid} accountSid -\n *          The unique id of the Account that is responsible for this resource.\n * @param {sid} credentialListSid -\n *          The unique id that identifies the credential list that includes this credential\n * @param {sid} sid - The unique id that identifies the resource to fetch.\n */\n\n/* jshint ignore:end */\n\n\nCredentialInstance = function CredentialInstance(version, payload, accountSid, credentialListSid, sid) {\n  this._version = version; // Marshaled Properties\n\n  this.sid = payload.sid; // jshint ignore:line\n\n  this.accountSid = payload.account_sid; // jshint ignore:line\n\n  this.credentialListSid = payload.credential_list_sid; // jshint ignore:line\n\n  this.username = payload.username; // jshint ignore:line\n\n  this.dateCreated = deserialize.rfc2822DateTime(payload.date_created); // jshint ignore:line\n\n  this.dateUpdated = deserialize.rfc2822DateTime(payload.date_updated); // jshint ignore:line\n\n  this.uri = payload.uri; // jshint ignore:line\n  // Context\n\n  this._context = undefined;\n  this._solution = {\n    accountSid: accountSid,\n    credentialListSid: credentialListSid,\n    sid: sid || this.sid\n  };\n};\n\nObject.defineProperty(CredentialInstance.prototype, '_proxy', {\n  get: function () {\n    if (!this._context) {\n      this._context = new CredentialContext(this._version, this._solution.accountSid, this._solution.credentialListSid, this._solution.sid);\n    }\n\n    return this._context;\n  }\n});\n/* jshint ignore:start */\n\n/**\n * fetch a CredentialInstance\n *\n * @function fetch\n * @memberof Twilio.Api.V2010.AccountContext.SipContext.CredentialListContext.CredentialInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed CredentialInstance\n */\n\n/* jshint ignore:end */\n\nCredentialInstance.prototype.fetch = function fetch(callback) {\n  return this._proxy.fetch(callback);\n};\n/* jshint ignore:start */\n\n/**\n * update a CredentialInstance\n *\n * @function update\n * @memberof Twilio.Api.V2010.AccountContext.SipContext.CredentialListContext.CredentialInstance#\n *\n * @param {object} [opts] - Options for request\n * @param {string} [opts.password] -\n *          The password will not be returned in the response\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed CredentialInstance\n */\n\n/* jshint ignore:end */\n\n\nCredentialInstance.prototype.update = function update(opts, callback) {\n  return this._proxy.update(opts, callback);\n};\n/* jshint ignore:start */\n\n/**\n * remove a CredentialInstance\n *\n * @function remove\n * @memberof Twilio.Api.V2010.AccountContext.SipContext.CredentialListContext.CredentialInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed CredentialInstance\n */\n\n/* jshint ignore:end */\n\n\nCredentialInstance.prototype.remove = function remove(callback) {\n  return this._proxy.remove(callback);\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Api.V2010.AccountContext.SipContext.CredentialListContext.CredentialInstance#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nCredentialInstance.prototype.toJSON = function toJSON() {\n  let clone = {};\n\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n\n  return clone;\n};\n\nCredentialInstance.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the CredentialContext\n *\n * @constructor Twilio.Api.V2010.AccountContext.SipContext.CredentialListContext.CredentialContext\n *\n * @param {V2010} version - Version of the resource\n * @param {sid} accountSid -\n *          The unique id of the Account that is responsible for this resource.\n * @param {sid} credentialListSid -\n *          The unique id that identifies the credential list that contains the desired credential\n * @param {sid} sid - The unique id that identifies the resource to fetch.\n */\n\n/* jshint ignore:end */\n\n\nCredentialContext = function CredentialContext(version, accountSid, credentialListSid, sid) {\n  this._version = version; // Path Solution\n\n  this._solution = {\n    accountSid: accountSid,\n    credentialListSid: credentialListSid,\n    sid: sid\n  };\n  this._uri = `/Accounts/${accountSid}/SIP/CredentialLists/${credentialListSid}/Credentials/${sid}.json`;\n};\n/* jshint ignore:start */\n\n/**\n * fetch a CredentialInstance\n *\n * @function fetch\n * @memberof Twilio.Api.V2010.AccountContext.SipContext.CredentialListContext.CredentialContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed CredentialInstance\n */\n\n/* jshint ignore:end */\n\n\nCredentialContext.prototype.fetch = function fetch(callback) {\n  var deferred = Q.defer();\n\n  var promise = this._version.fetch({\n    uri: this._uri,\n    method: 'GET'\n  });\n\n  promise = promise.then(function (payload) {\n    deferred.resolve(new CredentialInstance(this._version, payload, this._solution.accountSid, this._solution.credentialListSid, this._solution.sid));\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n/* jshint ignore:start */\n\n/**\n * update a CredentialInstance\n *\n * @function update\n * @memberof Twilio.Api.V2010.AccountContext.SipContext.CredentialListContext.CredentialContext#\n *\n * @param {object} [opts] - Options for request\n * @param {string} [opts.password] -\n *          The password will not be returned in the response\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed CredentialInstance\n */\n\n/* jshint ignore:end */\n\n\nCredentialContext.prototype.update = function update(opts, callback) {\n  if (_.isFunction(opts)) {\n    callback = opts;\n    opts = {};\n  }\n\n  opts = opts || {};\n  var deferred = Q.defer();\n  var data = values.of({\n    'Password': _.get(opts, 'password')\n  });\n\n  var promise = this._version.update({\n    uri: this._uri,\n    method: 'POST',\n    data: data\n  });\n\n  promise = promise.then(function (payload) {\n    deferred.resolve(new CredentialInstance(this._version, payload, this._solution.accountSid, this._solution.credentialListSid, this._solution.sid));\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n/* jshint ignore:start */\n\n/**\n * remove a CredentialInstance\n *\n * @function remove\n * @memberof Twilio.Api.V2010.AccountContext.SipContext.CredentialListContext.CredentialContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed CredentialInstance\n */\n\n/* jshint ignore:end */\n\n\nCredentialContext.prototype.remove = function remove(callback) {\n  var deferred = Q.defer();\n\n  var promise = this._version.remove({\n    uri: this._uri,\n    method: 'DELETE'\n  });\n\n  promise = promise.then(function (payload) {\n    deferred.resolve(payload);\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Api.V2010.AccountContext.SipContext.CredentialListContext.CredentialContext#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nCredentialContext.prototype.toJSON = function toJSON() {\n  return this._solution;\n};\n\nCredentialContext.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\nmodule.exports = {\n  CredentialList: CredentialList,\n  CredentialPage: CredentialPage,\n  CredentialInstance: CredentialInstance,\n  CredentialContext: CredentialContext\n};","map":{"version":3,"names":["Q","require","_","util","Page","deserialize","values","CredentialList","CredentialPage","CredentialInstance","CredentialContext","version","accountSid","credentialListSid","CredentialListInstance","sid","get","_version","_solution","_uri","each","opts","callback","isFunction","isUndefined","Error","done","currentPage","currentResource","limits","readLimits","limit","pageSize","onComplete","error","fetchNextPage","fn","promise","then","page","instances","instance","bind","nextPage","catch","merge","list","deferred","defer","allResources","resource","push","length","resolve","reject","nodeify","data","of","pageToken","pageNumber","uri","method","params","payload","getPage","targetUrl","_domain","twilio","request","create","toJSON","inspect","custom","depth","options","response","solution","prototype","constructor","call","extend","getInstance","clone","forOwn","value","key","startsWith","account_sid","credential_list_sid","username","dateCreated","rfc2822DateTime","date_created","dateUpdated","date_updated","_context","undefined","Object","defineProperty","fetch","_proxy","update","remove","module","exports"],"sources":["/Users/hooniesun/rmit/fwp/assessment1/lan/node_modules/twilio/lib/rest/api/v2010/account/sip/credentialList/credential.js"],"sourcesContent":["'use strict';\n\n/* jshint ignore:start */\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n/* jshint ignore:end */\n\nvar Q = require('q');  /* jshint ignore:line */\nvar _ = require('lodash');  /* jshint ignore:line */\nvar util = require('util');  /* jshint ignore:line */\nvar Page = require('../../../../../../base/Page');  /* jshint ignore:line */\nvar deserialize = require(\n    '../../../../../../base/deserialize');  /* jshint ignore:line */\nvar values = require('../../../../../../base/values');  /* jshint ignore:line */\n\nvar CredentialList;\nvar CredentialPage;\nvar CredentialInstance;\nvar CredentialContext;\n\n/* jshint ignore:start */\n/**\n * Initialize the CredentialList\n *\n * @constructor Twilio.Api.V2010.AccountContext.SipContext.CredentialListContext.CredentialList\n *\n * @param {Twilio.Api.V2010} version - Version of the resource\n * @param {string} accountSid -\n *          The unique id of the Account that is responsible for this resource.\n * @param {string} credentialListSid -\n *          The unique id that identifies the credential list that includes this credential\n */\n/* jshint ignore:end */\nCredentialList = function CredentialList(version, accountSid, credentialListSid)\n                                          {\n  /* jshint ignore:start */\n  /**\n   * @function credentials\n   * @memberof Twilio.Api.V2010.AccountContext.SipContext.CredentialListContext#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Api.V2010.AccountContext.SipContext.CredentialListContext.CredentialContext}\n   */\n  /* jshint ignore:end */\n  function CredentialListInstance(sid) {\n    return CredentialListInstance.get(sid);\n  }\n\n  CredentialListInstance._version = version;\n  // Path Solution\n  CredentialListInstance._solution = {accountSid: accountSid, credentialListSid: credentialListSid};\n  CredentialListInstance._uri = `/Accounts/${accountSid}/SIP/CredentialLists/${credentialListSid}/Credentials.json`;\n  /* jshint ignore:start */\n  /**\n   * Streams CredentialInstance records from the API.\n   *\n   * This operation lazily loads records as efficiently as possible until the limit\n   * is reached.\n   *\n   * The results are passed into the callback function, so this operation is memory\n   * efficient.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function each\n   * @memberof Twilio.Api.V2010.AccountContext.SipContext.CredentialListContext.CredentialList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         each() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no pageSize is defined but a limit is defined,\n   *         each() will attempt to read the limit with the most efficient\n   *         page size, i.e. min(limit, 1000)\n   * @param {Function} [opts.callback] -\n   *         Function to process each record. If this and a positional\n   *         callback are passed, this one will be used\n   * @param {Function} [opts.done] -\n   *          Function to be called upon completion of streaming\n   * @param {Function} [callback] - Function to process each record\n   */\n  /* jshint ignore:end */\n  CredentialListInstance.each = function each(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    if (opts.callback) {\n      callback = opts.callback;\n    }\n    if (_.isUndefined(callback)) {\n      throw new Error('Callback function must be provided');\n    }\n\n    var done = false;\n    var currentPage = 1;\n    var currentResource = 0;\n    var limits = this._version.readLimits({\n      limit: opts.limit,\n      pageSize: opts.pageSize\n    });\n\n    function onComplete(error) {\n      done = true;\n      if (_.isFunction(opts.done)) {\n        opts.done(error);\n      }\n    }\n\n    function fetchNextPage(fn) {\n      var promise = fn();\n      if (_.isUndefined(promise)) {\n        onComplete();\n        return;\n      }\n\n      promise.then(function(page) {\n        _.each(page.instances, function(instance) {\n          if (done || (!_.isUndefined(opts.limit) && currentResource >= opts.limit)) {\n            done = true;\n            return false;\n          }\n\n          currentResource++;\n          callback(instance, onComplete);\n        });\n\n        if (!done) {\n          currentPage++;\n          fetchNextPage(_.bind(page.nextPage, page));\n        } else {\n          onComplete();\n        }\n      });\n\n      promise.catch(onComplete);\n    }\n\n    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Lists CredentialInstance records from the API as a list.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function list\n   * @memberof Twilio.Api.V2010.AccountContext.SipContext.CredentialListContext.CredentialList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         list() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no page_size is defined but a limit is defined,\n   *         list() will attempt to read the limit with the most\n   *         efficient page size, i.e. min(limit, 1000)\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  CredentialListInstance.list = function list(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    var deferred = Q.defer();\n    var allResources = [];\n    opts.callback = function(resource, done) {\n      allResources.push(resource);\n\n      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {\n        done();\n      }\n    };\n\n    opts.done = function(error) {\n      if (_.isUndefined(error)) {\n        deferred.resolve(allResources);\n      } else {\n        deferred.reject(error);\n      }\n    };\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    this.each(opts);\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single page of CredentialInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function page\n   * @memberof Twilio.Api.V2010.AccountContext.SipContext.CredentialListContext.CredentialList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.pageToken] - PageToken provided by the API\n   * @param {number} [opts.pageNumber] -\n   *          Page Number, this value is simply for client state\n   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  CredentialListInstance.page = function page(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n\n    var deferred = Q.defer();\n    var data = values.of({\n      'PageToken': opts.pageToken,\n      'Page': opts.pageNumber,\n      'PageSize': opts.pageSize\n    });\n\n    var promise = this._version.page({uri: this._uri, method: 'GET', params: data});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new CredentialPage(this._version, payload, this._solution));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single target page of CredentialInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function getPage\n   * @memberof Twilio.Api.V2010.AccountContext.SipContext.CredentialListContext.CredentialList#\n   *\n   * @param {string} [targetUrl] - API-generated URL for the requested results page\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  CredentialListInstance.getPage = function getPage(targetUrl, callback) {\n    var deferred = Q.defer();\n\n    var promise = this._version._domain.twilio.request({method: 'GET', uri: targetUrl});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new CredentialPage(this._version, payload, this._solution));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * create a CredentialInstance\n   *\n   * @function create\n   * @memberof Twilio.Api.V2010.AccountContext.SipContext.CredentialListContext.CredentialList#\n   *\n   * @param {object} opts - Options for request\n   * @param {string} opts.username - The username for this credential.\n   * @param {string} opts.password -\n   *          The password will not be returned in the response.\n   * @param {function} [callback] - Callback to handle processed record\n   *\n   * @returns {Promise} Resolves to processed CredentialInstance\n   */\n  /* jshint ignore:end */\n  CredentialListInstance.create = function create(opts, callback) {\n    if (_.isUndefined(opts)) {\n      throw new Error('Required parameter \"opts\" missing.');\n    }\n    if (_.isUndefined(opts['username'])) {\n      throw new Error('Required parameter \"opts[\\'username\\']\" missing.');\n    }\n    if (_.isUndefined(opts['password'])) {\n      throw new Error('Required parameter \"opts[\\'password\\']\" missing.');\n    }\n\n    var deferred = Q.defer();\n    var data = values.of({'Username': _.get(opts, 'username'), 'Password': _.get(opts, 'password')});\n\n    var promise = this._version.create({uri: this._uri, method: 'POST', data: data});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new CredentialInstance(\n        this._version,\n        payload,\n        this._solution.accountSid,\n        this._solution.credentialListSid,\n        this._solution.sid\n      ));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Constructs a credential\n   *\n   * @function get\n   * @memberof Twilio.Api.V2010.AccountContext.SipContext.CredentialListContext.CredentialList#\n   *\n   * @param {string} sid - The unique id that identifies the resource to fetch.\n   *\n   * @returns {Twilio.Api.V2010.AccountContext.SipContext.CredentialListContext.CredentialContext}\n   */\n  /* jshint ignore:end */\n  CredentialListInstance.get = function get(sid) {\n    return new CredentialContext(\n      this._version,\n      this._solution.accountSid,\n      this._solution.credentialListSid,\n      sid\n    );\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Api.V2010.AccountContext.SipContext.CredentialListContext.CredentialList#\n   *\n   * @returns Object\n   */\n  /* jshint ignore:end */\n  CredentialListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n\n  CredentialListInstance[util.inspect.custom] = function inspect(depth, options) {\n    return util.inspect(this.toJSON(), options);\n  };\n\n  return CredentialListInstance;\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the CredentialPage\n *\n * @constructor Twilio.Api.V2010.AccountContext.SipContext.CredentialListContext.CredentialPage\n *\n * @param {V2010} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {CredentialSolution} solution - Path solution\n *\n * @returns CredentialPage\n */\n/* jshint ignore:end */\nCredentialPage = function CredentialPage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n\n_.extend(CredentialPage.prototype, Page.prototype);\nCredentialPage.prototype.constructor = CredentialPage;\n\n/* jshint ignore:start */\n/**\n * Build an instance of CredentialInstance\n *\n * @function getInstance\n * @memberof Twilio.Api.V2010.AccountContext.SipContext.CredentialListContext.CredentialPage#\n *\n * @param {CredentialPayload} payload - Payload response from the API\n *\n * @returns CredentialInstance\n */\n/* jshint ignore:end */\nCredentialPage.prototype.getInstance = function getInstance(payload) {\n  return new CredentialInstance(\n    this._version,\n    payload,\n    this._solution.accountSid,\n    this._solution.credentialListSid\n  );\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Api.V2010.AccountContext.SipContext.CredentialListContext.CredentialPage#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nCredentialPage.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function(value, key) {\n    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\n\nCredentialPage.prototype[util.inspect.custom] = function inspect(depth, options)\n    {\n  return util.inspect(this.toJSON(), options);\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the CredentialContext\n *\n * @constructor Twilio.Api.V2010.AccountContext.SipContext.CredentialListContext.CredentialInstance\n *\n * @property {string} sid -\n *          A 34 character string that uniquely identifies this resource.\n * @property {string} accountSid -\n *          The unique id of the Account that is responsible for this resource.\n * @property {string} credentialListSid -\n *          The unique id that identifies the credential list that includes this credential\n * @property {string} username - The username for this credential.\n * @property {Date} dateCreated -\n *          The date that this resource was created, given as GMT in RFC 2822 format.\n * @property {Date} dateUpdated -\n *          The date that this resource was last updated, given as GMT in RFC 2822 format.\n * @property {string} uri -\n *          The URI for this resource, relative to https://api.twilio.com\n *\n * @param {V2010} version - Version of the resource\n * @param {CredentialPayload} payload - The instance payload\n * @param {sid} accountSid -\n *          The unique id of the Account that is responsible for this resource.\n * @param {sid} credentialListSid -\n *          The unique id that identifies the credential list that includes this credential\n * @param {sid} sid - The unique id that identifies the resource to fetch.\n */\n/* jshint ignore:end */\nCredentialInstance = function CredentialInstance(version, payload, accountSid,\n                                                  credentialListSid, sid) {\n  this._version = version;\n\n  // Marshaled Properties\n  this.sid = payload.sid; // jshint ignore:line\n  this.accountSid = payload.account_sid; // jshint ignore:line\n  this.credentialListSid = payload.credential_list_sid; // jshint ignore:line\n  this.username = payload.username; // jshint ignore:line\n  this.dateCreated = deserialize.rfc2822DateTime(payload.date_created); // jshint ignore:line\n  this.dateUpdated = deserialize.rfc2822DateTime(payload.date_updated); // jshint ignore:line\n  this.uri = payload.uri; // jshint ignore:line\n\n  // Context\n  this._context = undefined;\n  this._solution = {\n    accountSid: accountSid,\n    credentialListSid: credentialListSid,\n    sid: sid || this.sid,\n  };\n};\n\nObject.defineProperty(CredentialInstance.prototype,\n  '_proxy', {\n    get: function() {\n      if (!this._context) {\n        this._context = new CredentialContext(\n          this._version,\n          this._solution.accountSid,\n          this._solution.credentialListSid,\n          this._solution.sid\n        );\n      }\n\n      return this._context;\n    }\n});\n\n/* jshint ignore:start */\n/**\n * fetch a CredentialInstance\n *\n * @function fetch\n * @memberof Twilio.Api.V2010.AccountContext.SipContext.CredentialListContext.CredentialInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed CredentialInstance\n */\n/* jshint ignore:end */\nCredentialInstance.prototype.fetch = function fetch(callback) {\n  return this._proxy.fetch(callback);\n};\n\n/* jshint ignore:start */\n/**\n * update a CredentialInstance\n *\n * @function update\n * @memberof Twilio.Api.V2010.AccountContext.SipContext.CredentialListContext.CredentialInstance#\n *\n * @param {object} [opts] - Options for request\n * @param {string} [opts.password] -\n *          The password will not be returned in the response\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed CredentialInstance\n */\n/* jshint ignore:end */\nCredentialInstance.prototype.update = function update(opts, callback) {\n  return this._proxy.update(opts, callback);\n};\n\n/* jshint ignore:start */\n/**\n * remove a CredentialInstance\n *\n * @function remove\n * @memberof Twilio.Api.V2010.AccountContext.SipContext.CredentialListContext.CredentialInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed CredentialInstance\n */\n/* jshint ignore:end */\nCredentialInstance.prototype.remove = function remove(callback) {\n  return this._proxy.remove(callback);\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Api.V2010.AccountContext.SipContext.CredentialListContext.CredentialInstance#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nCredentialInstance.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function(value, key) {\n    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\n\nCredentialInstance.prototype[util.inspect.custom] = function inspect(depth,\n    options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the CredentialContext\n *\n * @constructor Twilio.Api.V2010.AccountContext.SipContext.CredentialListContext.CredentialContext\n *\n * @param {V2010} version - Version of the resource\n * @param {sid} accountSid -\n *          The unique id of the Account that is responsible for this resource.\n * @param {sid} credentialListSid -\n *          The unique id that identifies the credential list that contains the desired credential\n * @param {sid} sid - The unique id that identifies the resource to fetch.\n */\n/* jshint ignore:end */\nCredentialContext = function CredentialContext(version, accountSid,\n                                                credentialListSid, sid) {\n  this._version = version;\n\n  // Path Solution\n  this._solution = {accountSid: accountSid, credentialListSid: credentialListSid, sid: sid, };\n  this._uri = `/Accounts/${accountSid}/SIP/CredentialLists/${credentialListSid}/Credentials/${sid}.json`;\n};\n\n/* jshint ignore:start */\n/**\n * fetch a CredentialInstance\n *\n * @function fetch\n * @memberof Twilio.Api.V2010.AccountContext.SipContext.CredentialListContext.CredentialContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed CredentialInstance\n */\n/* jshint ignore:end */\nCredentialContext.prototype.fetch = function fetch(callback) {\n  var deferred = Q.defer();\n  var promise = this._version.fetch({uri: this._uri, method: 'GET'});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(new CredentialInstance(\n      this._version,\n      payload,\n      this._solution.accountSid,\n      this._solution.credentialListSid,\n      this._solution.sid\n    ));\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * update a CredentialInstance\n *\n * @function update\n * @memberof Twilio.Api.V2010.AccountContext.SipContext.CredentialListContext.CredentialContext#\n *\n * @param {object} [opts] - Options for request\n * @param {string} [opts.password] -\n *          The password will not be returned in the response\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed CredentialInstance\n */\n/* jshint ignore:end */\nCredentialContext.prototype.update = function update(opts, callback) {\n  if (_.isFunction(opts)) {\n    callback = opts;\n    opts = {};\n  }\n  opts = opts || {};\n\n  var deferred = Q.defer();\n  var data = values.of({'Password': _.get(opts, 'password')});\n\n  var promise = this._version.update({uri: this._uri, method: 'POST', data: data});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(new CredentialInstance(\n      this._version,\n      payload,\n      this._solution.accountSid,\n      this._solution.credentialListSid,\n      this._solution.sid\n    ));\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * remove a CredentialInstance\n *\n * @function remove\n * @memberof Twilio.Api.V2010.AccountContext.SipContext.CredentialListContext.CredentialContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed CredentialInstance\n */\n/* jshint ignore:end */\nCredentialContext.prototype.remove = function remove(callback) {\n  var deferred = Q.defer();\n  var promise = this._version.remove({uri: this._uri, method: 'DELETE'});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(payload);\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Api.V2010.AccountContext.SipContext.CredentialListContext.CredentialContext#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nCredentialContext.prototype.toJSON = function toJSON() {\n  return this._solution;\n};\n\nCredentialContext.prototype[util.inspect.custom] = function inspect(depth,\n    options) {\n  return util.inspect(this.toJSON(), options);\n};\n\nmodule.exports = {\n  CredentialList: CredentialList,\n  CredentialPage: CredentialPage,\n  CredentialInstance: CredentialInstance,\n  CredentialContext: CredentialContext\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}