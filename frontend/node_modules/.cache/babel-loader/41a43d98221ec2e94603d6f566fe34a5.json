{"ast":null,"code":"'use strict';\n/* jshint ignore:start */\n\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n\n/* jshint ignore:end */\n\nvar Q = require('q');\n/* jshint ignore:line */\n\n\nvar _ = require('lodash');\n/* jshint ignore:line */\n\n\nvar util = require('util');\n/* jshint ignore:line */\n\n\nvar Page = require('../../../../base/Page');\n/* jshint ignore:line */\n\n\nvar deserialize = require('../../../../base/deserialize');\n/* jshint ignore:line */\n\n\nvar values = require('../../../../base/values');\n/* jshint ignore:line */\n\n\nvar QueryList;\nvar QueryPage;\nvar QueryInstance;\nvar QueryContext;\n/* jshint ignore:start */\n\n/**\n * Initialize the QueryList\n *\n * PLEASE NOTE that this class contains preview products that are subject to\n * change. Use them with caution. If you currently do not have developer preview\n * access, please contact help@twilio.com.\n *\n * @constructor Twilio.Preview.Understand.AssistantContext.QueryList\n *\n * @param {Twilio.Preview.Understand} version - Version of the resource\n * @param {string} assistantSid - The unique ID of the parent Assistant.\n */\n\n/* jshint ignore:end */\n\nQueryList = function QueryList(version, assistantSid) {\n  /* jshint ignore:start */\n\n  /**\n   * @function queries\n   * @memberof Twilio.Preview.Understand.AssistantContext#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Preview.Understand.AssistantContext.QueryContext}\n   */\n\n  /* jshint ignore:end */\n  function QueryListInstance(sid) {\n    return QueryListInstance.get(sid);\n  }\n\n  QueryListInstance._version = version; // Path Solution\n\n  QueryListInstance._solution = {\n    assistantSid: assistantSid\n  };\n  QueryListInstance._uri = `/Assistants/${assistantSid}/Queries`;\n  /* jshint ignore:start */\n\n  /**\n   * Streams QueryInstance records from the API.\n   *\n   * This operation lazily loads records as efficiently as possible until the limit\n   * is reached.\n   *\n   * The results are passed into the callback function, so this operation is memory\n   * efficient.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function each\n   * @memberof Twilio.Preview.Understand.AssistantContext.QueryList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.language] - An ISO language-country string of the sample.\n   * @param {string} [opts.modelBuild] -\n   *          The Model Build Sid or unique name of the Model Build to be queried.\n   * @param {string} [opts.status] -\n   *          A string that described the query status. The values can be: pending_review, reviewed, discarded\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         each() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no pageSize is defined but a limit is defined,\n   *         each() will attempt to read the limit with the most efficient\n   *         page size, i.e. min(limit, 1000)\n   * @param {Function} [opts.callback] -\n   *         Function to process each record. If this and a positional\n   *         callback are passed, this one will be used\n   * @param {Function} [opts.done] -\n   *          Function to be called upon completion of streaming\n   * @param {Function} [callback] - Function to process each record\n   */\n\n  /* jshint ignore:end */\n\n  QueryListInstance.each = function each(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n\n    if (opts.callback) {\n      callback = opts.callback;\n    }\n\n    if (_.isUndefined(callback)) {\n      throw new Error('Callback function must be provided');\n    }\n\n    var done = false;\n    var currentPage = 1;\n    var currentResource = 0;\n\n    var limits = this._version.readLimits({\n      limit: opts.limit,\n      pageSize: opts.pageSize\n    });\n\n    function onComplete(error) {\n      done = true;\n\n      if (_.isFunction(opts.done)) {\n        opts.done(error);\n      }\n    }\n\n    function fetchNextPage(fn) {\n      var promise = fn();\n\n      if (_.isUndefined(promise)) {\n        onComplete();\n        return;\n      }\n\n      promise.then(function (page) {\n        _.each(page.instances, function (instance) {\n          if (done || !_.isUndefined(opts.limit) && currentResource >= opts.limit) {\n            done = true;\n            return false;\n          }\n\n          currentResource++;\n          callback(instance, onComplete);\n        });\n\n        if (!done) {\n          currentPage++;\n          fetchNextPage(_.bind(page.nextPage, page));\n        } else {\n          onComplete();\n        }\n      });\n      promise.catch(onComplete);\n    }\n\n    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Lists QueryInstance records from the API as a list.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function list\n   * @memberof Twilio.Preview.Understand.AssistantContext.QueryList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.language] - An ISO language-country string of the sample.\n   * @param {string} [opts.modelBuild] -\n   *          The Model Build Sid or unique name of the Model Build to be queried.\n   * @param {string} [opts.status] -\n   *          A string that described the query status. The values can be: pending_review, reviewed, discarded\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         list() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no page_size is defined but a limit is defined,\n   *         list() will attempt to read the limit with the most\n   *         efficient page size, i.e. min(limit, 1000)\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  QueryListInstance.list = function list(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n    var deferred = Q.defer();\n    var allResources = [];\n\n    opts.callback = function (resource, done) {\n      allResources.push(resource);\n\n      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {\n        done();\n      }\n    };\n\n    opts.done = function (error) {\n      if (_.isUndefined(error)) {\n        deferred.resolve(allResources);\n      } else {\n        deferred.reject(error);\n      }\n    };\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    this.each(opts);\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Retrieve a single page of QueryInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function page\n   * @memberof Twilio.Preview.Understand.AssistantContext.QueryList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.language] - An ISO language-country string of the sample.\n   * @param {string} [opts.modelBuild] -\n   *          The Model Build Sid or unique name of the Model Build to be queried.\n   * @param {string} [opts.status] -\n   *          A string that described the query status. The values can be: pending_review, reviewed, discarded\n   * @param {string} [opts.pageToken] - PageToken provided by the API\n   * @param {number} [opts.pageNumber] -\n   *          Page Number, this value is simply for client state\n   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  QueryListInstance.page = function page(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n    var deferred = Q.defer();\n    var data = values.of({\n      'Language': _.get(opts, 'language'),\n      'ModelBuild': _.get(opts, 'modelBuild'),\n      'Status': _.get(opts, 'status'),\n      'PageToken': opts.pageToken,\n      'Page': opts.pageNumber,\n      'PageSize': opts.pageSize\n    });\n\n    var promise = this._version.page({\n      uri: this._uri,\n      method: 'GET',\n      params: data\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new QueryPage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Retrieve a single target page of QueryInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function getPage\n   * @memberof Twilio.Preview.Understand.AssistantContext.QueryList#\n   *\n   * @param {string} [targetUrl] - API-generated URL for the requested results page\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  QueryListInstance.getPage = function getPage(targetUrl, callback) {\n    var deferred = Q.defer();\n\n    var promise = this._version._domain.twilio.request({\n      method: 'GET',\n      uri: targetUrl\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new QueryPage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * create a QueryInstance\n   *\n   * @function create\n   * @memberof Twilio.Preview.Understand.AssistantContext.QueryList#\n   *\n   * @param {object} opts - Options for request\n   * @param {string} opts.language - An ISO language-country string of the sample.\n   * @param {string} opts.query -\n   *          A user-provided string that uniquely identifies this resource as an alternative to the sid. It can be up to 2048 characters long.\n   * @param {string} [opts.tasks] -\n   *          Constraints the query to a set of tasks. Useful when you need to constrain the paths the user can take. Tasks should be comma separated task-unique-name-1, task-unique-name-2\n   * @param {string} [opts.modelBuild] -\n   *          The Model Build Sid or unique name of the Model Build to be queried.\n   * @param {string} [opts.field] -\n   *          Constraints the query to a given Field with an task. Useful when you know the Field you are expecting. It accepts one field in the format task-unique-name-1:field-unique-name\n   * @param {function} [callback] - Callback to handle processed record\n   *\n   * @returns {Promise} Resolves to processed QueryInstance\n   */\n\n  /* jshint ignore:end */\n\n\n  QueryListInstance.create = function create(opts, callback) {\n    if (_.isUndefined(opts)) {\n      throw new Error('Required parameter \"opts\" missing.');\n    }\n\n    if (_.isUndefined(opts['language'])) {\n      throw new Error('Required parameter \"opts[\\'language\\']\" missing.');\n    }\n\n    if (_.isUndefined(opts['query'])) {\n      throw new Error('Required parameter \"opts[\\'query\\']\" missing.');\n    }\n\n    var deferred = Q.defer();\n    var data = values.of({\n      'Language': _.get(opts, 'language'),\n      'Query': _.get(opts, 'query'),\n      'Tasks': _.get(opts, 'tasks'),\n      'ModelBuild': _.get(opts, 'modelBuild'),\n      'Field': _.get(opts, 'field')\n    });\n\n    var promise = this._version.create({\n      uri: this._uri,\n      method: 'POST',\n      data: data\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new QueryInstance(this._version, payload, this._solution.assistantSid, this._solution.sid));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Constructs a query\n   *\n   * @function get\n   * @memberof Twilio.Preview.Understand.AssistantContext.QueryList#\n   *\n   * @param {string} sid -\n   *          A 34 character string that uniquely identifies this resource.\n   *\n   * @returns {Twilio.Preview.Understand.AssistantContext.QueryContext}\n   */\n\n  /* jshint ignore:end */\n\n\n  QueryListInstance.get = function get(sid) {\n    return new QueryContext(this._version, this._solution.assistantSid, sid);\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Preview.Understand.AssistantContext.QueryList#\n   *\n   * @returns Object\n   */\n\n  /* jshint ignore:end */\n\n\n  QueryListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n\n  QueryListInstance[util.inspect.custom] = function inspect(depth, options) {\n    return util.inspect(this.toJSON(), options);\n  };\n\n  return QueryListInstance;\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the QueryPage\n *\n * PLEASE NOTE that this class contains preview products that are subject to\n * change. Use them with caution. If you currently do not have developer preview\n * access, please contact help@twilio.com.\n *\n * @constructor Twilio.Preview.Understand.AssistantContext.QueryPage\n *\n * @param {Understand} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {QuerySolution} solution - Path solution\n *\n * @returns QueryPage\n */\n\n/* jshint ignore:end */\n\n\nQueryPage = function QueryPage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n\n_.extend(QueryPage.prototype, Page.prototype);\n\nQueryPage.prototype.constructor = QueryPage;\n/* jshint ignore:start */\n\n/**\n * Build an instance of QueryInstance\n *\n * @function getInstance\n * @memberof Twilio.Preview.Understand.AssistantContext.QueryPage#\n *\n * @param {QueryPayload} payload - Payload response from the API\n *\n * @returns QueryInstance\n */\n\n/* jshint ignore:end */\n\nQueryPage.prototype.getInstance = function getInstance(payload) {\n  return new QueryInstance(this._version, payload, this._solution.assistantSid);\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Preview.Understand.AssistantContext.QueryPage#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nQueryPage.prototype.toJSON = function toJSON() {\n  let clone = {};\n\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n\n  return clone;\n};\n\nQueryPage.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the QueryContext\n *\n * PLEASE NOTE that this class contains preview products that are subject to\n * change. Use them with caution. If you currently do not have developer preview\n * access, please contact help@twilio.com.\n *\n * @constructor Twilio.Preview.Understand.AssistantContext.QueryInstance\n *\n * @property {string} accountSid -\n *          The unique ID of the Account that created this Query.\n * @property {Date} dateCreated - The date that this resource was created\n * @property {Date} dateUpdated - The date that this resource was last updated\n * @property {object} results -\n *          The natural language analysis results which include the Task recognized, the confidence score and a list of identified Fields.\n * @property {string} language - An ISO language-country string of the sample.\n * @property {string} modelBuildSid - The unique ID of the Model Build queried.\n * @property {string} query - The end-user's natural language input.\n * @property {string} sampleSid -\n *          An optional reference to the Sample created from this query.\n * @property {string} assistantSid - The unique ID of the parent Assistant.\n * @property {string} sid -\n *          A 34 character string that uniquely identifies this resource.\n * @property {string} status -\n *          A string that described the query status. The values can be: pending_review, reviewed, discarded\n * @property {string} url - The url\n * @property {string} sourceChannel -\n *          The communication channel where this end-user input came from\n *\n * @param {Understand} version - Version of the resource\n * @param {QueryPayload} payload - The instance payload\n * @param {sid} assistantSid - The unique ID of the parent Assistant.\n * @param {sid_like} sid -\n *          A 34 character string that uniquely identifies this resource.\n */\n\n/* jshint ignore:end */\n\n\nQueryInstance = function QueryInstance(version, payload, assistantSid, sid) {\n  this._version = version; // Marshaled Properties\n\n  this.accountSid = payload.account_sid; // jshint ignore:line\n\n  this.dateCreated = deserialize.iso8601DateTime(payload.date_created); // jshint ignore:line\n\n  this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated); // jshint ignore:line\n\n  this.results = payload.results; // jshint ignore:line\n\n  this.language = payload.language; // jshint ignore:line\n\n  this.modelBuildSid = payload.model_build_sid; // jshint ignore:line\n\n  this.query = payload.query; // jshint ignore:line\n\n  this.sampleSid = payload.sample_sid; // jshint ignore:line\n\n  this.assistantSid = payload.assistant_sid; // jshint ignore:line\n\n  this.sid = payload.sid; // jshint ignore:line\n\n  this.status = payload.status; // jshint ignore:line\n\n  this.url = payload.url; // jshint ignore:line\n\n  this.sourceChannel = payload.source_channel; // jshint ignore:line\n  // Context\n\n  this._context = undefined;\n  this._solution = {\n    assistantSid: assistantSid,\n    sid: sid || this.sid\n  };\n};\n\nObject.defineProperty(QueryInstance.prototype, '_proxy', {\n  get: function () {\n    if (!this._context) {\n      this._context = new QueryContext(this._version, this._solution.assistantSid, this._solution.sid);\n    }\n\n    return this._context;\n  }\n});\n/* jshint ignore:start */\n\n/**\n * fetch a QueryInstance\n *\n * @function fetch\n * @memberof Twilio.Preview.Understand.AssistantContext.QueryInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed QueryInstance\n */\n\n/* jshint ignore:end */\n\nQueryInstance.prototype.fetch = function fetch(callback) {\n  return this._proxy.fetch(callback);\n};\n/* jshint ignore:start */\n\n/**\n * update a QueryInstance\n *\n * @function update\n * @memberof Twilio.Preview.Understand.AssistantContext.QueryInstance#\n *\n * @param {object} [opts] - Options for request\n * @param {string} [opts.sampleSid] -\n *          An optional reference to the Sample created from this query.\n * @param {string} [opts.status] -\n *          A string that described the query status. The values can be: pending_review, reviewed, discarded\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed QueryInstance\n */\n\n/* jshint ignore:end */\n\n\nQueryInstance.prototype.update = function update(opts, callback) {\n  return this._proxy.update(opts, callback);\n};\n/* jshint ignore:start */\n\n/**\n * remove a QueryInstance\n *\n * @function remove\n * @memberof Twilio.Preview.Understand.AssistantContext.QueryInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed QueryInstance\n */\n\n/* jshint ignore:end */\n\n\nQueryInstance.prototype.remove = function remove(callback) {\n  return this._proxy.remove(callback);\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Preview.Understand.AssistantContext.QueryInstance#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nQueryInstance.prototype.toJSON = function toJSON() {\n  let clone = {};\n\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n\n  return clone;\n};\n\nQueryInstance.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the QueryContext\n *\n * PLEASE NOTE that this class contains preview products that are subject to\n * change. Use them with caution. If you currently do not have developer preview\n * access, please contact help@twilio.com.\n *\n * @constructor Twilio.Preview.Understand.AssistantContext.QueryContext\n *\n * @param {Understand} version - Version of the resource\n * @param {sid_like} assistantSid - The unique ID of the Assistant.\n * @param {sid_like} sid -\n *          A 34 character string that uniquely identifies this resource.\n */\n\n/* jshint ignore:end */\n\n\nQueryContext = function QueryContext(version, assistantSid, sid) {\n  this._version = version; // Path Solution\n\n  this._solution = {\n    assistantSid: assistantSid,\n    sid: sid\n  };\n  this._uri = `/Assistants/${assistantSid}/Queries/${sid}`;\n};\n/* jshint ignore:start */\n\n/**\n * fetch a QueryInstance\n *\n * @function fetch\n * @memberof Twilio.Preview.Understand.AssistantContext.QueryContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed QueryInstance\n */\n\n/* jshint ignore:end */\n\n\nQueryContext.prototype.fetch = function fetch(callback) {\n  var deferred = Q.defer();\n\n  var promise = this._version.fetch({\n    uri: this._uri,\n    method: 'GET'\n  });\n\n  promise = promise.then(function (payload) {\n    deferred.resolve(new QueryInstance(this._version, payload, this._solution.assistantSid, this._solution.sid));\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n/* jshint ignore:start */\n\n/**\n * update a QueryInstance\n *\n * @function update\n * @memberof Twilio.Preview.Understand.AssistantContext.QueryContext#\n *\n * @param {object} [opts] - Options for request\n * @param {string} [opts.sampleSid] -\n *          An optional reference to the Sample created from this query.\n * @param {string} [opts.status] -\n *          A string that described the query status. The values can be: pending_review, reviewed, discarded\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed QueryInstance\n */\n\n/* jshint ignore:end */\n\n\nQueryContext.prototype.update = function update(opts, callback) {\n  if (_.isFunction(opts)) {\n    callback = opts;\n    opts = {};\n  }\n\n  opts = opts || {};\n  var deferred = Q.defer();\n  var data = values.of({\n    'SampleSid': _.get(opts, 'sampleSid'),\n    'Status': _.get(opts, 'status')\n  });\n\n  var promise = this._version.update({\n    uri: this._uri,\n    method: 'POST',\n    data: data\n  });\n\n  promise = promise.then(function (payload) {\n    deferred.resolve(new QueryInstance(this._version, payload, this._solution.assistantSid, this._solution.sid));\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n/* jshint ignore:start */\n\n/**\n * remove a QueryInstance\n *\n * @function remove\n * @memberof Twilio.Preview.Understand.AssistantContext.QueryContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed QueryInstance\n */\n\n/* jshint ignore:end */\n\n\nQueryContext.prototype.remove = function remove(callback) {\n  var deferred = Q.defer();\n\n  var promise = this._version.remove({\n    uri: this._uri,\n    method: 'DELETE'\n  });\n\n  promise = promise.then(function (payload) {\n    deferred.resolve(payload);\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Preview.Understand.AssistantContext.QueryContext#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nQueryContext.prototype.toJSON = function toJSON() {\n  return this._solution;\n};\n\nQueryContext.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\nmodule.exports = {\n  QueryList: QueryList,\n  QueryPage: QueryPage,\n  QueryInstance: QueryInstance,\n  QueryContext: QueryContext\n};","map":{"version":3,"names":["Q","require","_","util","Page","deserialize","values","QueryList","QueryPage","QueryInstance","QueryContext","version","assistantSid","QueryListInstance","sid","get","_version","_solution","_uri","each","opts","callback","isFunction","isUndefined","Error","done","currentPage","currentResource","limits","readLimits","limit","pageSize","onComplete","error","fetchNextPage","fn","promise","then","page","instances","instance","bind","nextPage","catch","merge","list","deferred","defer","allResources","resource","push","length","resolve","reject","nodeify","data","of","pageToken","pageNumber","uri","method","params","payload","getPage","targetUrl","_domain","twilio","request","create","toJSON","inspect","custom","depth","options","response","solution","prototype","constructor","call","extend","getInstance","clone","forOwn","value","key","startsWith","accountSid","account_sid","dateCreated","iso8601DateTime","date_created","dateUpdated","date_updated","results","language","modelBuildSid","model_build_sid","query","sampleSid","sample_sid","assistant_sid","status","url","sourceChannel","source_channel","_context","undefined","Object","defineProperty","fetch","_proxy","update","remove","module","exports"],"sources":["/Users/hooniesun/rmit/fwp/assessment1/lan/node_modules/twilio/lib/rest/preview/understand/assistant/query.js"],"sourcesContent":["'use strict';\n\n/* jshint ignore:start */\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n/* jshint ignore:end */\n\nvar Q = require('q');  /* jshint ignore:line */\nvar _ = require('lodash');  /* jshint ignore:line */\nvar util = require('util');  /* jshint ignore:line */\nvar Page = require('../../../../base/Page');  /* jshint ignore:line */\nvar deserialize = require(\n    '../../../../base/deserialize');  /* jshint ignore:line */\nvar values = require('../../../../base/values');  /* jshint ignore:line */\n\nvar QueryList;\nvar QueryPage;\nvar QueryInstance;\nvar QueryContext;\n\n/* jshint ignore:start */\n/**\n * Initialize the QueryList\n *\n * PLEASE NOTE that this class contains preview products that are subject to\n * change. Use them with caution. If you currently do not have developer preview\n * access, please contact help@twilio.com.\n *\n * @constructor Twilio.Preview.Understand.AssistantContext.QueryList\n *\n * @param {Twilio.Preview.Understand} version - Version of the resource\n * @param {string} assistantSid - The unique ID of the parent Assistant.\n */\n/* jshint ignore:end */\nQueryList = function QueryList(version, assistantSid) {\n  /* jshint ignore:start */\n  /**\n   * @function queries\n   * @memberof Twilio.Preview.Understand.AssistantContext#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Preview.Understand.AssistantContext.QueryContext}\n   */\n  /* jshint ignore:end */\n  function QueryListInstance(sid) {\n    return QueryListInstance.get(sid);\n  }\n\n  QueryListInstance._version = version;\n  // Path Solution\n  QueryListInstance._solution = {assistantSid: assistantSid};\n  QueryListInstance._uri = `/Assistants/${assistantSid}/Queries`;\n  /* jshint ignore:start */\n  /**\n   * Streams QueryInstance records from the API.\n   *\n   * This operation lazily loads records as efficiently as possible until the limit\n   * is reached.\n   *\n   * The results are passed into the callback function, so this operation is memory\n   * efficient.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function each\n   * @memberof Twilio.Preview.Understand.AssistantContext.QueryList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.language] - An ISO language-country string of the sample.\n   * @param {string} [opts.modelBuild] -\n   *          The Model Build Sid or unique name of the Model Build to be queried.\n   * @param {string} [opts.status] -\n   *          A string that described the query status. The values can be: pending_review, reviewed, discarded\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         each() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no pageSize is defined but a limit is defined,\n   *         each() will attempt to read the limit with the most efficient\n   *         page size, i.e. min(limit, 1000)\n   * @param {Function} [opts.callback] -\n   *         Function to process each record. If this and a positional\n   *         callback are passed, this one will be used\n   * @param {Function} [opts.done] -\n   *          Function to be called upon completion of streaming\n   * @param {Function} [callback] - Function to process each record\n   */\n  /* jshint ignore:end */\n  QueryListInstance.each = function each(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    if (opts.callback) {\n      callback = opts.callback;\n    }\n    if (_.isUndefined(callback)) {\n      throw new Error('Callback function must be provided');\n    }\n\n    var done = false;\n    var currentPage = 1;\n    var currentResource = 0;\n    var limits = this._version.readLimits({\n      limit: opts.limit,\n      pageSize: opts.pageSize\n    });\n\n    function onComplete(error) {\n      done = true;\n      if (_.isFunction(opts.done)) {\n        opts.done(error);\n      }\n    }\n\n    function fetchNextPage(fn) {\n      var promise = fn();\n      if (_.isUndefined(promise)) {\n        onComplete();\n        return;\n      }\n\n      promise.then(function(page) {\n        _.each(page.instances, function(instance) {\n          if (done || (!_.isUndefined(opts.limit) && currentResource >= opts.limit)) {\n            done = true;\n            return false;\n          }\n\n          currentResource++;\n          callback(instance, onComplete);\n        });\n\n        if (!done) {\n          currentPage++;\n          fetchNextPage(_.bind(page.nextPage, page));\n        } else {\n          onComplete();\n        }\n      });\n\n      promise.catch(onComplete);\n    }\n\n    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Lists QueryInstance records from the API as a list.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function list\n   * @memberof Twilio.Preview.Understand.AssistantContext.QueryList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.language] - An ISO language-country string of the sample.\n   * @param {string} [opts.modelBuild] -\n   *          The Model Build Sid or unique name of the Model Build to be queried.\n   * @param {string} [opts.status] -\n   *          A string that described the query status. The values can be: pending_review, reviewed, discarded\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         list() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no page_size is defined but a limit is defined,\n   *         list() will attempt to read the limit with the most\n   *         efficient page size, i.e. min(limit, 1000)\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  QueryListInstance.list = function list(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    var deferred = Q.defer();\n    var allResources = [];\n    opts.callback = function(resource, done) {\n      allResources.push(resource);\n\n      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {\n        done();\n      }\n    };\n\n    opts.done = function(error) {\n      if (_.isUndefined(error)) {\n        deferred.resolve(allResources);\n      } else {\n        deferred.reject(error);\n      }\n    };\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    this.each(opts);\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single page of QueryInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function page\n   * @memberof Twilio.Preview.Understand.AssistantContext.QueryList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.language] - An ISO language-country string of the sample.\n   * @param {string} [opts.modelBuild] -\n   *          The Model Build Sid or unique name of the Model Build to be queried.\n   * @param {string} [opts.status] -\n   *          A string that described the query status. The values can be: pending_review, reviewed, discarded\n   * @param {string} [opts.pageToken] - PageToken provided by the API\n   * @param {number} [opts.pageNumber] -\n   *          Page Number, this value is simply for client state\n   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  QueryListInstance.page = function page(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n\n    var deferred = Q.defer();\n    var data = values.of({\n      'Language': _.get(opts, 'language'),\n      'ModelBuild': _.get(opts, 'modelBuild'),\n      'Status': _.get(opts, 'status'),\n      'PageToken': opts.pageToken,\n      'Page': opts.pageNumber,\n      'PageSize': opts.pageSize\n    });\n\n    var promise = this._version.page({uri: this._uri, method: 'GET', params: data});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new QueryPage(this._version, payload, this._solution));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single target page of QueryInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function getPage\n   * @memberof Twilio.Preview.Understand.AssistantContext.QueryList#\n   *\n   * @param {string} [targetUrl] - API-generated URL for the requested results page\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  QueryListInstance.getPage = function getPage(targetUrl, callback) {\n    var deferred = Q.defer();\n\n    var promise = this._version._domain.twilio.request({method: 'GET', uri: targetUrl});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new QueryPage(this._version, payload, this._solution));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * create a QueryInstance\n   *\n   * @function create\n   * @memberof Twilio.Preview.Understand.AssistantContext.QueryList#\n   *\n   * @param {object} opts - Options for request\n   * @param {string} opts.language - An ISO language-country string of the sample.\n   * @param {string} opts.query -\n   *          A user-provided string that uniquely identifies this resource as an alternative to the sid. It can be up to 2048 characters long.\n   * @param {string} [opts.tasks] -\n   *          Constraints the query to a set of tasks. Useful when you need to constrain the paths the user can take. Tasks should be comma separated task-unique-name-1, task-unique-name-2\n   * @param {string} [opts.modelBuild] -\n   *          The Model Build Sid or unique name of the Model Build to be queried.\n   * @param {string} [opts.field] -\n   *          Constraints the query to a given Field with an task. Useful when you know the Field you are expecting. It accepts one field in the format task-unique-name-1:field-unique-name\n   * @param {function} [callback] - Callback to handle processed record\n   *\n   * @returns {Promise} Resolves to processed QueryInstance\n   */\n  /* jshint ignore:end */\n  QueryListInstance.create = function create(opts, callback) {\n    if (_.isUndefined(opts)) {\n      throw new Error('Required parameter \"opts\" missing.');\n    }\n    if (_.isUndefined(opts['language'])) {\n      throw new Error('Required parameter \"opts[\\'language\\']\" missing.');\n    }\n    if (_.isUndefined(opts['query'])) {\n      throw new Error('Required parameter \"opts[\\'query\\']\" missing.');\n    }\n\n    var deferred = Q.defer();\n    var data = values.of({\n      'Language': _.get(opts, 'language'),\n      'Query': _.get(opts, 'query'),\n      'Tasks': _.get(opts, 'tasks'),\n      'ModelBuild': _.get(opts, 'modelBuild'),\n      'Field': _.get(opts, 'field')\n    });\n\n    var promise = this._version.create({uri: this._uri, method: 'POST', data: data});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new QueryInstance(\n        this._version,\n        payload,\n        this._solution.assistantSid,\n        this._solution.sid\n      ));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Constructs a query\n   *\n   * @function get\n   * @memberof Twilio.Preview.Understand.AssistantContext.QueryList#\n   *\n   * @param {string} sid -\n   *          A 34 character string that uniquely identifies this resource.\n   *\n   * @returns {Twilio.Preview.Understand.AssistantContext.QueryContext}\n   */\n  /* jshint ignore:end */\n  QueryListInstance.get = function get(sid) {\n    return new QueryContext(this._version, this._solution.assistantSid, sid);\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Preview.Understand.AssistantContext.QueryList#\n   *\n   * @returns Object\n   */\n  /* jshint ignore:end */\n  QueryListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n\n  QueryListInstance[util.inspect.custom] = function inspect(depth, options) {\n    return util.inspect(this.toJSON(), options);\n  };\n\n  return QueryListInstance;\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the QueryPage\n *\n * PLEASE NOTE that this class contains preview products that are subject to\n * change. Use them with caution. If you currently do not have developer preview\n * access, please contact help@twilio.com.\n *\n * @constructor Twilio.Preview.Understand.AssistantContext.QueryPage\n *\n * @param {Understand} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {QuerySolution} solution - Path solution\n *\n * @returns QueryPage\n */\n/* jshint ignore:end */\nQueryPage = function QueryPage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n\n_.extend(QueryPage.prototype, Page.prototype);\nQueryPage.prototype.constructor = QueryPage;\n\n/* jshint ignore:start */\n/**\n * Build an instance of QueryInstance\n *\n * @function getInstance\n * @memberof Twilio.Preview.Understand.AssistantContext.QueryPage#\n *\n * @param {QueryPayload} payload - Payload response from the API\n *\n * @returns QueryInstance\n */\n/* jshint ignore:end */\nQueryPage.prototype.getInstance = function getInstance(payload) {\n  return new QueryInstance(this._version, payload, this._solution.assistantSid);\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Preview.Understand.AssistantContext.QueryPage#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nQueryPage.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function(value, key) {\n    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\n\nQueryPage.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the QueryContext\n *\n * PLEASE NOTE that this class contains preview products that are subject to\n * change. Use them with caution. If you currently do not have developer preview\n * access, please contact help@twilio.com.\n *\n * @constructor Twilio.Preview.Understand.AssistantContext.QueryInstance\n *\n * @property {string} accountSid -\n *          The unique ID of the Account that created this Query.\n * @property {Date} dateCreated - The date that this resource was created\n * @property {Date} dateUpdated - The date that this resource was last updated\n * @property {object} results -\n *          The natural language analysis results which include the Task recognized, the confidence score and a list of identified Fields.\n * @property {string} language - An ISO language-country string of the sample.\n * @property {string} modelBuildSid - The unique ID of the Model Build queried.\n * @property {string} query - The end-user's natural language input.\n * @property {string} sampleSid -\n *          An optional reference to the Sample created from this query.\n * @property {string} assistantSid - The unique ID of the parent Assistant.\n * @property {string} sid -\n *          A 34 character string that uniquely identifies this resource.\n * @property {string} status -\n *          A string that described the query status. The values can be: pending_review, reviewed, discarded\n * @property {string} url - The url\n * @property {string} sourceChannel -\n *          The communication channel where this end-user input came from\n *\n * @param {Understand} version - Version of the resource\n * @param {QueryPayload} payload - The instance payload\n * @param {sid} assistantSid - The unique ID of the parent Assistant.\n * @param {sid_like} sid -\n *          A 34 character string that uniquely identifies this resource.\n */\n/* jshint ignore:end */\nQueryInstance = function QueryInstance(version, payload, assistantSid, sid) {\n  this._version = version;\n\n  // Marshaled Properties\n  this.accountSid = payload.account_sid; // jshint ignore:line\n  this.dateCreated = deserialize.iso8601DateTime(payload.date_created); // jshint ignore:line\n  this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated); // jshint ignore:line\n  this.results = payload.results; // jshint ignore:line\n  this.language = payload.language; // jshint ignore:line\n  this.modelBuildSid = payload.model_build_sid; // jshint ignore:line\n  this.query = payload.query; // jshint ignore:line\n  this.sampleSid = payload.sample_sid; // jshint ignore:line\n  this.assistantSid = payload.assistant_sid; // jshint ignore:line\n  this.sid = payload.sid; // jshint ignore:line\n  this.status = payload.status; // jshint ignore:line\n  this.url = payload.url; // jshint ignore:line\n  this.sourceChannel = payload.source_channel; // jshint ignore:line\n\n  // Context\n  this._context = undefined;\n  this._solution = {assistantSid: assistantSid, sid: sid || this.sid, };\n};\n\nObject.defineProperty(QueryInstance.prototype,\n  '_proxy', {\n    get: function() {\n      if (!this._context) {\n        this._context = new QueryContext(this._version, this._solution.assistantSid, this._solution.sid);\n      }\n\n      return this._context;\n    }\n});\n\n/* jshint ignore:start */\n/**\n * fetch a QueryInstance\n *\n * @function fetch\n * @memberof Twilio.Preview.Understand.AssistantContext.QueryInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed QueryInstance\n */\n/* jshint ignore:end */\nQueryInstance.prototype.fetch = function fetch(callback) {\n  return this._proxy.fetch(callback);\n};\n\n/* jshint ignore:start */\n/**\n * update a QueryInstance\n *\n * @function update\n * @memberof Twilio.Preview.Understand.AssistantContext.QueryInstance#\n *\n * @param {object} [opts] - Options for request\n * @param {string} [opts.sampleSid] -\n *          An optional reference to the Sample created from this query.\n * @param {string} [opts.status] -\n *          A string that described the query status. The values can be: pending_review, reviewed, discarded\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed QueryInstance\n */\n/* jshint ignore:end */\nQueryInstance.prototype.update = function update(opts, callback) {\n  return this._proxy.update(opts, callback);\n};\n\n/* jshint ignore:start */\n/**\n * remove a QueryInstance\n *\n * @function remove\n * @memberof Twilio.Preview.Understand.AssistantContext.QueryInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed QueryInstance\n */\n/* jshint ignore:end */\nQueryInstance.prototype.remove = function remove(callback) {\n  return this._proxy.remove(callback);\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Preview.Understand.AssistantContext.QueryInstance#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nQueryInstance.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function(value, key) {\n    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\n\nQueryInstance.prototype[util.inspect.custom] = function inspect(depth, options)\n    {\n  return util.inspect(this.toJSON(), options);\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the QueryContext\n *\n * PLEASE NOTE that this class contains preview products that are subject to\n * change. Use them with caution. If you currently do not have developer preview\n * access, please contact help@twilio.com.\n *\n * @constructor Twilio.Preview.Understand.AssistantContext.QueryContext\n *\n * @param {Understand} version - Version of the resource\n * @param {sid_like} assistantSid - The unique ID of the Assistant.\n * @param {sid_like} sid -\n *          A 34 character string that uniquely identifies this resource.\n */\n/* jshint ignore:end */\nQueryContext = function QueryContext(version, assistantSid, sid) {\n  this._version = version;\n\n  // Path Solution\n  this._solution = {assistantSid: assistantSid, sid: sid, };\n  this._uri = `/Assistants/${assistantSid}/Queries/${sid}`;\n};\n\n/* jshint ignore:start */\n/**\n * fetch a QueryInstance\n *\n * @function fetch\n * @memberof Twilio.Preview.Understand.AssistantContext.QueryContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed QueryInstance\n */\n/* jshint ignore:end */\nQueryContext.prototype.fetch = function fetch(callback) {\n  var deferred = Q.defer();\n  var promise = this._version.fetch({uri: this._uri, method: 'GET'});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(new QueryInstance(\n      this._version,\n      payload,\n      this._solution.assistantSid,\n      this._solution.sid\n    ));\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * update a QueryInstance\n *\n * @function update\n * @memberof Twilio.Preview.Understand.AssistantContext.QueryContext#\n *\n * @param {object} [opts] - Options for request\n * @param {string} [opts.sampleSid] -\n *          An optional reference to the Sample created from this query.\n * @param {string} [opts.status] -\n *          A string that described the query status. The values can be: pending_review, reviewed, discarded\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed QueryInstance\n */\n/* jshint ignore:end */\nQueryContext.prototype.update = function update(opts, callback) {\n  if (_.isFunction(opts)) {\n    callback = opts;\n    opts = {};\n  }\n  opts = opts || {};\n\n  var deferred = Q.defer();\n  var data = values.of({'SampleSid': _.get(opts, 'sampleSid'), 'Status': _.get(opts, 'status')});\n\n  var promise = this._version.update({uri: this._uri, method: 'POST', data: data});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(new QueryInstance(\n      this._version,\n      payload,\n      this._solution.assistantSid,\n      this._solution.sid\n    ));\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * remove a QueryInstance\n *\n * @function remove\n * @memberof Twilio.Preview.Understand.AssistantContext.QueryContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed QueryInstance\n */\n/* jshint ignore:end */\nQueryContext.prototype.remove = function remove(callback) {\n  var deferred = Q.defer();\n  var promise = this._version.remove({uri: this._uri, method: 'DELETE'});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(payload);\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Preview.Understand.AssistantContext.QueryContext#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nQueryContext.prototype.toJSON = function toJSON() {\n  return this._solution;\n};\n\nQueryContext.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\nmodule.exports = {\n  QueryList: QueryList,\n  QueryPage: QueryPage,\n  QueryInstance: QueryInstance,\n  QueryContext: QueryContext\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}