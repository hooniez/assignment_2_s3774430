{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useEffect } from \"react\";\nimport { Row, Col, Card, Form, Button, Container, ProgressBar } from \"react-bootstrap\";\nimport { Image } from \"react-bootstrap-icons\";\nimport styles from \"./PostForm.module.css\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst postUrl = \"https://api.cloudinary.com/v1_1/duc4zmhl7/image/upload\";\nconst resUrl = \"https://res.cloudinary.com/duc4zmhl7/image/upload\";\nexport default function PostForm(_ref) {\n  _s();\n\n  let {\n    user,\n    dispatchUser,\n    addPost,\n    postId,\n    isComment,\n    parentPostId,\n    replyTo\n  } = _ref;\n  const [isPostable, setIsPostable] = useState(false);\n  const [numCharsTyped, setNumCharsTyped] = useState(0);\n  const [progressBarVariant, setProgressBarVariant] = useState(\"success\");\n  const [isImageVisible, setIsImageVisible] = useState(false);\n  const [isPosting, setIsPosting] = useState(false);\n  const wordLimit = 250; // Every time the number of characters the user has typed in changes,\n  // 1. Check whether the post is postable\n  // 2. Notify the user how many more characters can be typed by use of a progress bar.\n\n  let validateTextareaTimeoutId;\n\n  const validateTextarea = num => num > 0 && num <= wordLimit;\n\n  useEffect(() => {\n    // Disable/enable the post button\n    clearTimeout(validateTextareaTimeoutId);\n    validateTextareaTimeoutId = setTimeout(() => {\n      setIsPostable(validateTextarea(numCharsTyped));\n    }, 500);\n\n    if (Math.floor(numCharsTyped / wordLimit * 100) <= 70) {\n      setProgressBarVariant(\"success\");\n    } else if (numCharsTyped <= wordLimit) {\n      setProgressBarVariant(\"warning\");\n    } else {\n      setProgressBarVariant(\"danger\");\n    }\n  }, [numCharsTyped]); // The useEffect above will be invoked when the handler below is called.\n\n  const textareaChangeHandler = event => {\n    setNumCharsTyped(event.target.value.length);\n  }; // Upload an image onto a page\n\n\n  const imageUploadHandler = event => {\n    let img = document.querySelector(\"#myImg\");\n    img.src = URL.createObjectURL(event.target.files[0]);\n    setIsImageVisible(true);\n  }; // Make a post request to Cloudinary to store it and access it using its API.\n\n\n  const postHandler = async e => {\n    e.preventDefault();\n    let imagesToUpload = document.querySelector(\"#imageUpload\").files; // Create a general post JSON\n\n    let post = {\n      postId: postId,\n      parentId: null,\n      children: [],\n      text: e.target[0].value,\n      datePosted: new Date(),\n      postBy: user.data.email,\n      likes: [],\n      isDeleted: false,\n      img: null\n    }; // If user has attached an image in her post\n\n    if (imagesToUpload.length != 0) {\n      setIsPosting(true);\n      const data = new FormData();\n      data.append(\"file\", imagesToUpload[0]);\n      data.append(\"upload_preset\", \"zqlcfaas\");\n      fetch(postUrl, {\n        method: \"POST\",\n        body: data\n      }).then(response => response.json()).then(data => {\n        post.img = `${resUrl}/v${data.version}/${data.public_id}.${data.format}`;\n        e.target.querySelector(\"img\").src = \"#\";\n        addPost(post, isComment, parentPostId);\n        setIsPosting(false);\n      }).catch(error => console.log(error));\n    } else {\n      addPost(post, isComment, parentPostId);\n    }\n\n    e.target.reset();\n    setIsPostable(false);\n    setIsImageVisible(false);\n    setNumCharsTyped(0);\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false);\n}\n\n_s(PostForm, \"jqLa2DYOZa8bz0zC4iUBASjmpL8=\");\n\n_c = PostForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"PostForm\");","map":{"version":3,"names":["useState","useEffect","Row","Col","Card","Form","Button","Container","ProgressBar","Image","styles","postUrl","resUrl","PostForm","user","dispatchUser","addPost","postId","isComment","parentPostId","replyTo","isPostable","setIsPostable","numCharsTyped","setNumCharsTyped","progressBarVariant","setProgressBarVariant","isImageVisible","setIsImageVisible","isPosting","setIsPosting","wordLimit","validateTextareaTimeoutId","validateTextarea","num","clearTimeout","setTimeout","Math","floor","textareaChangeHandler","event","target","value","length","imageUploadHandler","img","document","querySelector","src","URL","createObjectURL","files","postHandler","e","preventDefault","imagesToUpload","post","parentId","children","text","datePosted","Date","postBy","data","email","likes","isDeleted","FormData","append","fetch","method","body","then","response","json","version","public_id","format","catch","error","console","log","reset"],"sources":["/Users/hooniesun/rmit/fwp/assessment1/lan/src/UI/Posts/PostForm.js"],"sourcesContent":["import { useState, useEffect } from \"react\";\nimport {\n  Row,\n  Col,\n  Card,\n  Form,\n  Button,\n  Container,\n  ProgressBar,\n} from \"react-bootstrap\";\nimport { Image } from \"react-bootstrap-icons\";\nimport styles from \"./PostForm.module.css\";\n\nconst postUrl = \"https://api.cloudinary.com/v1_1/duc4zmhl7/image/upload\";\nconst resUrl = \"https://res.cloudinary.com/duc4zmhl7/image/upload\";\n\nexport default function PostForm({\n  user,\n  dispatchUser,\n  addPost,\n  postId,\n  isComment,\n  parentPostId,\n  replyTo,\n}) {\n  const [isPostable, setIsPostable] = useState(false);\n  const [numCharsTyped, setNumCharsTyped] = useState(0);\n  const [progressBarVariant, setProgressBarVariant] = useState(\"success\");\n  const [isImageVisible, setIsImageVisible] = useState(false);\n  const [isPosting, setIsPosting] = useState(false);\n  const wordLimit = 250;\n\n  // Every time the number of characters the user has typed in changes,\n  // 1. Check whether the post is postable\n  // 2. Notify the user how many more characters can be typed by use of a progress bar.\n  let validateTextareaTimeoutId;\n  const validateTextarea = (num) => num > 0 && num <= wordLimit;\n  useEffect(() => {\n    // Disable/enable the post button\n    clearTimeout(validateTextareaTimeoutId);\n    validateTextareaTimeoutId = setTimeout(() => {\n      setIsPostable(validateTextarea(numCharsTyped));\n    }, 500);\n\n    if (Math.floor((numCharsTyped / wordLimit) * 100) <= 70) {\n      setProgressBarVariant(\"success\");\n    } else if (numCharsTyped <= wordLimit) {\n      setProgressBarVariant(\"warning\");\n    } else {\n      setProgressBarVariant(\"danger\");\n    }\n  }, [numCharsTyped]);\n\n  // The useEffect above will be invoked when the handler below is called.\n  const textareaChangeHandler = (event) => {\n    setNumCharsTyped(event.target.value.length);\n  };\n\n  // Upload an image onto a page\n  const imageUploadHandler = (event) => {\n    let img = document.querySelector(\"#myImg\");\n    img.src = URL.createObjectURL(event.target.files[0]);\n    setIsImageVisible(true);\n  };\n\n  // Make a post request to Cloudinary to store it and access it using its API.\n  const postHandler = async (e) => {\n    e.preventDefault();\n\n    let imagesToUpload = document.querySelector(\"#imageUpload\").files;\n    // Create a general post JSON\n    let post = {\n      postId: postId,\n      parentId: null,\n      children: [],\n      text: e.target[0].value,\n      datePosted: new Date(),\n      postBy: user.data.email,\n      likes: [],\n      isDeleted: false,\n      img: null,\n    };\n\n    // If user has attached an image in her post\n    if (imagesToUpload.length != 0) {\n      setIsPosting(true);\n      const data = new FormData();\n      data.append(\"file\", imagesToUpload[0]);\n      data.append(\"upload_preset\", \"zqlcfaas\");\n\n      fetch(postUrl, {\n        method: \"POST\",\n        body: data,\n      })\n        .then((response) => response.json())\n        .then((data) => {\n          post.img = `${resUrl}/v${data.version}/${data.public_id}.${data.format}`;\n\n          e.target.querySelector(\"img\").src = \"#\";\n          addPost(post, isComment, parentPostId);\n          setIsPosting(false);\n        })\n        .catch((error) => console.log(error));\n    } else {\n      addPost(post, isComment, parentPostId);\n    }\n\n    e.target.reset();\n    setIsPostable(false);\n    setIsImageVisible(false);\n    setNumCharsTyped(0);\n  };\n\n  return (\n    <>\n    </>\n    \n  );\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}