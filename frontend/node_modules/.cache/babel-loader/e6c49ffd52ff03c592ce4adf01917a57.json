{"ast":null,"code":"'use strict';\n/* jshint ignore:start */\n\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n\n/* jshint ignore:end */\n\nvar Q = require('q');\n/* jshint ignore:line */\n\n\nvar _ = require('lodash');\n/* jshint ignore:line */\n\n\nvar util = require('util');\n/* jshint ignore:line */\n\n\nvar Page = require('../../../base/Page');\n/* jshint ignore:line */\n\n\nvar deserialize = require('../../../base/deserialize');\n/* jshint ignore:line */\n\n\nvar values = require('../../../base/values');\n/* jshint ignore:line */\n\n\nvar SourceIpMappingList;\nvar SourceIpMappingPage;\nvar SourceIpMappingInstance;\nvar SourceIpMappingContext;\n/* jshint ignore:start */\n\n/**\n * Initialize the SourceIpMappingList\n *\n * @constructor Twilio.Voice.V1.SourceIpMappingList\n *\n * @param {Twilio.Voice.V1} version - Version of the resource\n */\n\n/* jshint ignore:end */\n\nSourceIpMappingList = function SourceIpMappingList(version) {\n  /* jshint ignore:start */\n\n  /**\n   * @function sourceIpMappings\n   * @memberof Twilio.Voice.V1#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Voice.V1.SourceIpMappingContext}\n   */\n\n  /* jshint ignore:end */\n  function SourceIpMappingListInstance(sid) {\n    return SourceIpMappingListInstance.get(sid);\n  }\n\n  SourceIpMappingListInstance._version = version; // Path Solution\n\n  SourceIpMappingListInstance._solution = {};\n  SourceIpMappingListInstance._uri = `/SourceIpMappings`;\n  /* jshint ignore:start */\n\n  /**\n   * create a SourceIpMappingInstance\n   *\n   * @function create\n   * @memberof Twilio.Voice.V1.SourceIpMappingList#\n   *\n   * @param {object} opts - Options for request\n   * @param {string} opts.ipRecordSid -\n   *          The unique string that identifies an IP Record\n   * @param {string} opts.sipDomainSid -\n   *          The unique string that identifies a SIP Domain\n   * @param {function} [callback] - Callback to handle processed record\n   *\n   * @returns {Promise} Resolves to processed SourceIpMappingInstance\n   */\n\n  /* jshint ignore:end */\n\n  SourceIpMappingListInstance.create = function create(opts, callback) {\n    if (_.isUndefined(opts)) {\n      throw new Error('Required parameter \"opts\" missing.');\n    }\n\n    if (_.isUndefined(opts['ipRecordSid'])) {\n      throw new Error('Required parameter \"opts[\\'ipRecordSid\\']\" missing.');\n    }\n\n    if (_.isUndefined(opts['sipDomainSid'])) {\n      throw new Error('Required parameter \"opts[\\'sipDomainSid\\']\" missing.');\n    }\n\n    var deferred = Q.defer();\n    var data = values.of({\n      'IpRecordSid': _.get(opts, 'ipRecordSid'),\n      'SipDomainSid': _.get(opts, 'sipDomainSid')\n    });\n\n    var promise = this._version.create({\n      uri: this._uri,\n      method: 'POST',\n      data: data\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new SourceIpMappingInstance(this._version, payload, this._solution.sid));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Streams SourceIpMappingInstance records from the API.\n   *\n   * This operation lazily loads records as efficiently as possible until the limit\n   * is reached.\n   *\n   * The results are passed into the callback function, so this operation is memory\n   * efficient.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function each\n   * @memberof Twilio.Voice.V1.SourceIpMappingList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         each() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no pageSize is defined but a limit is defined,\n   *         each() will attempt to read the limit with the most efficient\n   *         page size, i.e. min(limit, 1000)\n   * @param {Function} [opts.callback] -\n   *         Function to process each record. If this and a positional\n   *         callback are passed, this one will be used\n   * @param {Function} [opts.done] -\n   *          Function to be called upon completion of streaming\n   * @param {Function} [callback] - Function to process each record\n   */\n\n  /* jshint ignore:end */\n\n\n  SourceIpMappingListInstance.each = function each(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n\n    if (opts.callback) {\n      callback = opts.callback;\n    }\n\n    if (_.isUndefined(callback)) {\n      throw new Error('Callback function must be provided');\n    }\n\n    var done = false;\n    var currentPage = 1;\n    var currentResource = 0;\n\n    var limits = this._version.readLimits({\n      limit: opts.limit,\n      pageSize: opts.pageSize\n    });\n\n    function onComplete(error) {\n      done = true;\n\n      if (_.isFunction(opts.done)) {\n        opts.done(error);\n      }\n    }\n\n    function fetchNextPage(fn) {\n      var promise = fn();\n\n      if (_.isUndefined(promise)) {\n        onComplete();\n        return;\n      }\n\n      promise.then(function (page) {\n        _.each(page.instances, function (instance) {\n          if (done || !_.isUndefined(opts.limit) && currentResource >= opts.limit) {\n            done = true;\n            return false;\n          }\n\n          currentResource++;\n          callback(instance, onComplete);\n        });\n\n        if (!done) {\n          currentPage++;\n          fetchNextPage(_.bind(page.nextPage, page));\n        } else {\n          onComplete();\n        }\n      });\n      promise.catch(onComplete);\n    }\n\n    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Lists SourceIpMappingInstance records from the API as a list.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function list\n   * @memberof Twilio.Voice.V1.SourceIpMappingList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         list() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no page_size is defined but a limit is defined,\n   *         list() will attempt to read the limit with the most\n   *         efficient page size, i.e. min(limit, 1000)\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  SourceIpMappingListInstance.list = function list(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n    var deferred = Q.defer();\n    var allResources = [];\n\n    opts.callback = function (resource, done) {\n      allResources.push(resource);\n\n      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {\n        done();\n      }\n    };\n\n    opts.done = function (error) {\n      if (_.isUndefined(error)) {\n        deferred.resolve(allResources);\n      } else {\n        deferred.reject(error);\n      }\n    };\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    this.each(opts);\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Retrieve a single page of SourceIpMappingInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function page\n   * @memberof Twilio.Voice.V1.SourceIpMappingList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.pageToken] - PageToken provided by the API\n   * @param {number} [opts.pageNumber] -\n   *          Page Number, this value is simply for client state\n   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  SourceIpMappingListInstance.page = function page(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n    var deferred = Q.defer();\n    var data = values.of({\n      'PageToken': opts.pageToken,\n      'Page': opts.pageNumber,\n      'PageSize': opts.pageSize\n    });\n\n    var promise = this._version.page({\n      uri: this._uri,\n      method: 'GET',\n      params: data\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new SourceIpMappingPage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Retrieve a single target page of SourceIpMappingInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function getPage\n   * @memberof Twilio.Voice.V1.SourceIpMappingList#\n   *\n   * @param {string} [targetUrl] - API-generated URL for the requested results page\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  SourceIpMappingListInstance.getPage = function getPage(targetUrl, callback) {\n    var deferred = Q.defer();\n\n    var promise = this._version._domain.twilio.request({\n      method: 'GET',\n      uri: targetUrl\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new SourceIpMappingPage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Constructs a source_ip_mapping\n   *\n   * @function get\n   * @memberof Twilio.Voice.V1.SourceIpMappingList#\n   *\n   * @param {string} sid - The unique string that identifies the resource\n   *\n   * @returns {Twilio.Voice.V1.SourceIpMappingContext}\n   */\n\n  /* jshint ignore:end */\n\n\n  SourceIpMappingListInstance.get = function get(sid) {\n    return new SourceIpMappingContext(this._version, sid);\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Voice.V1.SourceIpMappingList#\n   *\n   * @returns Object\n   */\n\n  /* jshint ignore:end */\n\n\n  SourceIpMappingListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n\n  SourceIpMappingListInstance[util.inspect.custom] = function inspect(depth, options) {\n    return util.inspect(this.toJSON(), options);\n  };\n\n  return SourceIpMappingListInstance;\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the SourceIpMappingPage\n *\n * @constructor Twilio.Voice.V1.SourceIpMappingPage\n *\n * @param {V1} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {SourceIpMappingSolution} solution - Path solution\n *\n * @returns SourceIpMappingPage\n */\n\n/* jshint ignore:end */\n\n\nSourceIpMappingPage = function SourceIpMappingPage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n\n_.extend(SourceIpMappingPage.prototype, Page.prototype);\n\nSourceIpMappingPage.prototype.constructor = SourceIpMappingPage;\n/* jshint ignore:start */\n\n/**\n * Build an instance of SourceIpMappingInstance\n *\n * @function getInstance\n * @memberof Twilio.Voice.V1.SourceIpMappingPage#\n *\n * @param {SourceIpMappingPayload} payload - Payload response from the API\n *\n * @returns SourceIpMappingInstance\n */\n\n/* jshint ignore:end */\n\nSourceIpMappingPage.prototype.getInstance = function getInstance(payload) {\n  return new SourceIpMappingInstance(this._version, payload);\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Voice.V1.SourceIpMappingPage#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nSourceIpMappingPage.prototype.toJSON = function toJSON() {\n  let clone = {};\n\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n\n  return clone;\n};\n\nSourceIpMappingPage.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the SourceIpMappingContext\n *\n * @constructor Twilio.Voice.V1.SourceIpMappingInstance\n *\n * @property {string} sid - The unique string that identifies the resource\n * @property {string} ipRecordSid - The unique string that identifies an IP Record\n * @property {string} sipDomainSid - The unique string that identifies a SIP Domain\n * @property {Date} dateCreated -\n *          The RFC 2822 date and time in GMT that the resource was created\n * @property {Date} dateUpdated -\n *          The RFC 2822 date and time in GMT that the resource was last updated\n * @property {string} url - The absolute URL of the resource\n *\n * @param {V1} version - Version of the resource\n * @param {SourceIpMappingPayload} payload - The instance payload\n * @param {sid} sid - The unique string that identifies the resource\n */\n\n/* jshint ignore:end */\n\n\nSourceIpMappingInstance = function SourceIpMappingInstance(version, payload, sid) {\n  this._version = version; // Marshaled Properties\n\n  this.sid = payload.sid; // jshint ignore:line\n\n  this.ipRecordSid = payload.ip_record_sid; // jshint ignore:line\n\n  this.sipDomainSid = payload.sip_domain_sid; // jshint ignore:line\n\n  this.dateCreated = deserialize.iso8601DateTime(payload.date_created); // jshint ignore:line\n\n  this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated); // jshint ignore:line\n\n  this.url = payload.url; // jshint ignore:line\n  // Context\n\n  this._context = undefined;\n  this._solution = {\n    sid: sid || this.sid\n  };\n};\n\nObject.defineProperty(SourceIpMappingInstance.prototype, '_proxy', {\n  get: function () {\n    if (!this._context) {\n      this._context = new SourceIpMappingContext(this._version, this._solution.sid);\n    }\n\n    return this._context;\n  }\n});\n/* jshint ignore:start */\n\n/**\n * fetch a SourceIpMappingInstance\n *\n * @function fetch\n * @memberof Twilio.Voice.V1.SourceIpMappingInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed SourceIpMappingInstance\n */\n\n/* jshint ignore:end */\n\nSourceIpMappingInstance.prototype.fetch = function fetch(callback) {\n  return this._proxy.fetch(callback);\n};\n/* jshint ignore:start */\n\n/**\n * update a SourceIpMappingInstance\n *\n * @function update\n * @memberof Twilio.Voice.V1.SourceIpMappingInstance#\n *\n * @param {object} opts - Options for request\n * @param {string} opts.sipDomainSid -\n *          The unique string that identifies a SIP Domain\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed SourceIpMappingInstance\n */\n\n/* jshint ignore:end */\n\n\nSourceIpMappingInstance.prototype.update = function update(opts, callback) {\n  return this._proxy.update(opts, callback);\n};\n/* jshint ignore:start */\n\n/**\n * remove a SourceIpMappingInstance\n *\n * @function remove\n * @memberof Twilio.Voice.V1.SourceIpMappingInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed SourceIpMappingInstance\n */\n\n/* jshint ignore:end */\n\n\nSourceIpMappingInstance.prototype.remove = function remove(callback) {\n  return this._proxy.remove(callback);\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Voice.V1.SourceIpMappingInstance#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nSourceIpMappingInstance.prototype.toJSON = function toJSON() {\n  let clone = {};\n\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n\n  return clone;\n};\n\nSourceIpMappingInstance.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the SourceIpMappingContext\n *\n * @constructor Twilio.Voice.V1.SourceIpMappingContext\n *\n * @param {V1} version - Version of the resource\n * @param {sid} sid - The unique string that identifies the resource\n */\n\n/* jshint ignore:end */\n\n\nSourceIpMappingContext = function SourceIpMappingContext(version, sid) {\n  this._version = version; // Path Solution\n\n  this._solution = {\n    sid: sid\n  };\n  this._uri = `/SourceIpMappings/${sid}`;\n};\n/* jshint ignore:start */\n\n/**\n * fetch a SourceIpMappingInstance\n *\n * @function fetch\n * @memberof Twilio.Voice.V1.SourceIpMappingContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed SourceIpMappingInstance\n */\n\n/* jshint ignore:end */\n\n\nSourceIpMappingContext.prototype.fetch = function fetch(callback) {\n  var deferred = Q.defer();\n\n  var promise = this._version.fetch({\n    uri: this._uri,\n    method: 'GET'\n  });\n\n  promise = promise.then(function (payload) {\n    deferred.resolve(new SourceIpMappingInstance(this._version, payload, this._solution.sid));\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n/* jshint ignore:start */\n\n/**\n * update a SourceIpMappingInstance\n *\n * @function update\n * @memberof Twilio.Voice.V1.SourceIpMappingContext#\n *\n * @param {object} opts - Options for request\n * @param {string} opts.sipDomainSid -\n *          The unique string that identifies a SIP Domain\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed SourceIpMappingInstance\n */\n\n/* jshint ignore:end */\n\n\nSourceIpMappingContext.prototype.update = function update(opts, callback) {\n  if (_.isUndefined(opts)) {\n    throw new Error('Required parameter \"opts\" missing.');\n  }\n\n  if (_.isUndefined(opts['sipDomainSid'])) {\n    throw new Error('Required parameter \"opts[\\'sipDomainSid\\']\" missing.');\n  }\n\n  var deferred = Q.defer();\n  var data = values.of({\n    'SipDomainSid': _.get(opts, 'sipDomainSid')\n  });\n\n  var promise = this._version.update({\n    uri: this._uri,\n    method: 'POST',\n    data: data\n  });\n\n  promise = promise.then(function (payload) {\n    deferred.resolve(new SourceIpMappingInstance(this._version, payload, this._solution.sid));\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n/* jshint ignore:start */\n\n/**\n * remove a SourceIpMappingInstance\n *\n * @function remove\n * @memberof Twilio.Voice.V1.SourceIpMappingContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed SourceIpMappingInstance\n */\n\n/* jshint ignore:end */\n\n\nSourceIpMappingContext.prototype.remove = function remove(callback) {\n  var deferred = Q.defer();\n\n  var promise = this._version.remove({\n    uri: this._uri,\n    method: 'DELETE'\n  });\n\n  promise = promise.then(function (payload) {\n    deferred.resolve(payload);\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Voice.V1.SourceIpMappingContext#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nSourceIpMappingContext.prototype.toJSON = function toJSON() {\n  return this._solution;\n};\n\nSourceIpMappingContext.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\nmodule.exports = {\n  SourceIpMappingList: SourceIpMappingList,\n  SourceIpMappingPage: SourceIpMappingPage,\n  SourceIpMappingInstance: SourceIpMappingInstance,\n  SourceIpMappingContext: SourceIpMappingContext\n};","map":{"version":3,"names":["Q","require","_","util","Page","deserialize","values","SourceIpMappingList","SourceIpMappingPage","SourceIpMappingInstance","SourceIpMappingContext","version","SourceIpMappingListInstance","sid","get","_version","_solution","_uri","create","opts","callback","isUndefined","Error","deferred","defer","data","of","promise","uri","method","then","payload","resolve","bind","catch","error","reject","isFunction","nodeify","each","done","currentPage","currentResource","limits","readLimits","limit","pageSize","onComplete","fetchNextPage","fn","page","instances","instance","nextPage","merge","list","allResources","resource","push","length","pageToken","pageNumber","params","getPage","targetUrl","_domain","twilio","request","toJSON","inspect","custom","depth","options","response","solution","prototype","constructor","call","extend","getInstance","clone","forOwn","value","key","startsWith","ipRecordSid","ip_record_sid","sipDomainSid","sip_domain_sid","dateCreated","iso8601DateTime","date_created","dateUpdated","date_updated","url","_context","undefined","Object","defineProperty","fetch","_proxy","update","remove","module","exports"],"sources":["/Users/hooniesun/rmit/fwp/assessment1/lan/node_modules/twilio/lib/rest/voice/v1/sourceIpMapping.js"],"sourcesContent":["'use strict';\n\n/* jshint ignore:start */\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n/* jshint ignore:end */\n\nvar Q = require('q');  /* jshint ignore:line */\nvar _ = require('lodash');  /* jshint ignore:line */\nvar util = require('util');  /* jshint ignore:line */\nvar Page = require('../../../base/Page');  /* jshint ignore:line */\nvar deserialize = require(\n    '../../../base/deserialize');  /* jshint ignore:line */\nvar values = require('../../../base/values');  /* jshint ignore:line */\n\nvar SourceIpMappingList;\nvar SourceIpMappingPage;\nvar SourceIpMappingInstance;\nvar SourceIpMappingContext;\n\n/* jshint ignore:start */\n/**\n * Initialize the SourceIpMappingList\n *\n * @constructor Twilio.Voice.V1.SourceIpMappingList\n *\n * @param {Twilio.Voice.V1} version - Version of the resource\n */\n/* jshint ignore:end */\nSourceIpMappingList = function SourceIpMappingList(version) {\n  /* jshint ignore:start */\n  /**\n   * @function sourceIpMappings\n   * @memberof Twilio.Voice.V1#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Voice.V1.SourceIpMappingContext}\n   */\n  /* jshint ignore:end */\n  function SourceIpMappingListInstance(sid) {\n    return SourceIpMappingListInstance.get(sid);\n  }\n\n  SourceIpMappingListInstance._version = version;\n  // Path Solution\n  SourceIpMappingListInstance._solution = {};\n  SourceIpMappingListInstance._uri = `/SourceIpMappings`;\n  /* jshint ignore:start */\n  /**\n   * create a SourceIpMappingInstance\n   *\n   * @function create\n   * @memberof Twilio.Voice.V1.SourceIpMappingList#\n   *\n   * @param {object} opts - Options for request\n   * @param {string} opts.ipRecordSid -\n   *          The unique string that identifies an IP Record\n   * @param {string} opts.sipDomainSid -\n   *          The unique string that identifies a SIP Domain\n   * @param {function} [callback] - Callback to handle processed record\n   *\n   * @returns {Promise} Resolves to processed SourceIpMappingInstance\n   */\n  /* jshint ignore:end */\n  SourceIpMappingListInstance.create = function create(opts, callback) {\n    if (_.isUndefined(opts)) {\n      throw new Error('Required parameter \"opts\" missing.');\n    }\n    if (_.isUndefined(opts['ipRecordSid'])) {\n      throw new Error('Required parameter \"opts[\\'ipRecordSid\\']\" missing.');\n    }\n    if (_.isUndefined(opts['sipDomainSid'])) {\n      throw new Error('Required parameter \"opts[\\'sipDomainSid\\']\" missing.');\n    }\n\n    var deferred = Q.defer();\n    var data = values.of({\n      'IpRecordSid': _.get(opts, 'ipRecordSid'),\n      'SipDomainSid': _.get(opts, 'sipDomainSid')\n    });\n\n    var promise = this._version.create({uri: this._uri, method: 'POST', data: data});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new SourceIpMappingInstance(this._version, payload, this._solution.sid));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Streams SourceIpMappingInstance records from the API.\n   *\n   * This operation lazily loads records as efficiently as possible until the limit\n   * is reached.\n   *\n   * The results are passed into the callback function, so this operation is memory\n   * efficient.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function each\n   * @memberof Twilio.Voice.V1.SourceIpMappingList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         each() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no pageSize is defined but a limit is defined,\n   *         each() will attempt to read the limit with the most efficient\n   *         page size, i.e. min(limit, 1000)\n   * @param {Function} [opts.callback] -\n   *         Function to process each record. If this and a positional\n   *         callback are passed, this one will be used\n   * @param {Function} [opts.done] -\n   *          Function to be called upon completion of streaming\n   * @param {Function} [callback] - Function to process each record\n   */\n  /* jshint ignore:end */\n  SourceIpMappingListInstance.each = function each(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    if (opts.callback) {\n      callback = opts.callback;\n    }\n    if (_.isUndefined(callback)) {\n      throw new Error('Callback function must be provided');\n    }\n\n    var done = false;\n    var currentPage = 1;\n    var currentResource = 0;\n    var limits = this._version.readLimits({\n      limit: opts.limit,\n      pageSize: opts.pageSize\n    });\n\n    function onComplete(error) {\n      done = true;\n      if (_.isFunction(opts.done)) {\n        opts.done(error);\n      }\n    }\n\n    function fetchNextPage(fn) {\n      var promise = fn();\n      if (_.isUndefined(promise)) {\n        onComplete();\n        return;\n      }\n\n      promise.then(function(page) {\n        _.each(page.instances, function(instance) {\n          if (done || (!_.isUndefined(opts.limit) && currentResource >= opts.limit)) {\n            done = true;\n            return false;\n          }\n\n          currentResource++;\n          callback(instance, onComplete);\n        });\n\n        if (!done) {\n          currentPage++;\n          fetchNextPage(_.bind(page.nextPage, page));\n        } else {\n          onComplete();\n        }\n      });\n\n      promise.catch(onComplete);\n    }\n\n    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Lists SourceIpMappingInstance records from the API as a list.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function list\n   * @memberof Twilio.Voice.V1.SourceIpMappingList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         list() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no page_size is defined but a limit is defined,\n   *         list() will attempt to read the limit with the most\n   *         efficient page size, i.e. min(limit, 1000)\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  SourceIpMappingListInstance.list = function list(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    var deferred = Q.defer();\n    var allResources = [];\n    opts.callback = function(resource, done) {\n      allResources.push(resource);\n\n      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {\n        done();\n      }\n    };\n\n    opts.done = function(error) {\n      if (_.isUndefined(error)) {\n        deferred.resolve(allResources);\n      } else {\n        deferred.reject(error);\n      }\n    };\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    this.each(opts);\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single page of SourceIpMappingInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function page\n   * @memberof Twilio.Voice.V1.SourceIpMappingList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.pageToken] - PageToken provided by the API\n   * @param {number} [opts.pageNumber] -\n   *          Page Number, this value is simply for client state\n   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  SourceIpMappingListInstance.page = function page(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n\n    var deferred = Q.defer();\n    var data = values.of({\n      'PageToken': opts.pageToken,\n      'Page': opts.pageNumber,\n      'PageSize': opts.pageSize\n    });\n\n    var promise = this._version.page({uri: this._uri, method: 'GET', params: data});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new SourceIpMappingPage(this._version, payload, this._solution));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single target page of SourceIpMappingInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function getPage\n   * @memberof Twilio.Voice.V1.SourceIpMappingList#\n   *\n   * @param {string} [targetUrl] - API-generated URL for the requested results page\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  SourceIpMappingListInstance.getPage = function getPage(targetUrl, callback) {\n    var deferred = Q.defer();\n\n    var promise = this._version._domain.twilio.request({method: 'GET', uri: targetUrl});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new SourceIpMappingPage(this._version, payload, this._solution));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Constructs a source_ip_mapping\n   *\n   * @function get\n   * @memberof Twilio.Voice.V1.SourceIpMappingList#\n   *\n   * @param {string} sid - The unique string that identifies the resource\n   *\n   * @returns {Twilio.Voice.V1.SourceIpMappingContext}\n   */\n  /* jshint ignore:end */\n  SourceIpMappingListInstance.get = function get(sid) {\n    return new SourceIpMappingContext(this._version, sid);\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Voice.V1.SourceIpMappingList#\n   *\n   * @returns Object\n   */\n  /* jshint ignore:end */\n  SourceIpMappingListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n\n  SourceIpMappingListInstance[util.inspect.custom] = function inspect(depth,\n      options) {\n    return util.inspect(this.toJSON(), options);\n  };\n\n  return SourceIpMappingListInstance;\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the SourceIpMappingPage\n *\n * @constructor Twilio.Voice.V1.SourceIpMappingPage\n *\n * @param {V1} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {SourceIpMappingSolution} solution - Path solution\n *\n * @returns SourceIpMappingPage\n */\n/* jshint ignore:end */\nSourceIpMappingPage = function SourceIpMappingPage(version, response, solution)\n                                                    {\n  // Path Solution\n  this._solution = solution;\n\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n\n_.extend(SourceIpMappingPage.prototype, Page.prototype);\nSourceIpMappingPage.prototype.constructor = SourceIpMappingPage;\n\n/* jshint ignore:start */\n/**\n * Build an instance of SourceIpMappingInstance\n *\n * @function getInstance\n * @memberof Twilio.Voice.V1.SourceIpMappingPage#\n *\n * @param {SourceIpMappingPayload} payload - Payload response from the API\n *\n * @returns SourceIpMappingInstance\n */\n/* jshint ignore:end */\nSourceIpMappingPage.prototype.getInstance = function getInstance(payload) {\n  return new SourceIpMappingInstance(this._version, payload);\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Voice.V1.SourceIpMappingPage#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nSourceIpMappingPage.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function(value, key) {\n    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\n\nSourceIpMappingPage.prototype[util.inspect.custom] = function inspect(depth,\n    options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the SourceIpMappingContext\n *\n * @constructor Twilio.Voice.V1.SourceIpMappingInstance\n *\n * @property {string} sid - The unique string that identifies the resource\n * @property {string} ipRecordSid - The unique string that identifies an IP Record\n * @property {string} sipDomainSid - The unique string that identifies a SIP Domain\n * @property {Date} dateCreated -\n *          The RFC 2822 date and time in GMT that the resource was created\n * @property {Date} dateUpdated -\n *          The RFC 2822 date and time in GMT that the resource was last updated\n * @property {string} url - The absolute URL of the resource\n *\n * @param {V1} version - Version of the resource\n * @param {SourceIpMappingPayload} payload - The instance payload\n * @param {sid} sid - The unique string that identifies the resource\n */\n/* jshint ignore:end */\nSourceIpMappingInstance = function SourceIpMappingInstance(version, payload,\n                                                            sid) {\n  this._version = version;\n\n  // Marshaled Properties\n  this.sid = payload.sid; // jshint ignore:line\n  this.ipRecordSid = payload.ip_record_sid; // jshint ignore:line\n  this.sipDomainSid = payload.sip_domain_sid; // jshint ignore:line\n  this.dateCreated = deserialize.iso8601DateTime(payload.date_created); // jshint ignore:line\n  this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated); // jshint ignore:line\n  this.url = payload.url; // jshint ignore:line\n\n  // Context\n  this._context = undefined;\n  this._solution = {sid: sid || this.sid, };\n};\n\nObject.defineProperty(SourceIpMappingInstance.prototype,\n  '_proxy', {\n    get: function() {\n      if (!this._context) {\n        this._context = new SourceIpMappingContext(this._version, this._solution.sid);\n      }\n\n      return this._context;\n    }\n});\n\n/* jshint ignore:start */\n/**\n * fetch a SourceIpMappingInstance\n *\n * @function fetch\n * @memberof Twilio.Voice.V1.SourceIpMappingInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed SourceIpMappingInstance\n */\n/* jshint ignore:end */\nSourceIpMappingInstance.prototype.fetch = function fetch(callback) {\n  return this._proxy.fetch(callback);\n};\n\n/* jshint ignore:start */\n/**\n * update a SourceIpMappingInstance\n *\n * @function update\n * @memberof Twilio.Voice.V1.SourceIpMappingInstance#\n *\n * @param {object} opts - Options for request\n * @param {string} opts.sipDomainSid -\n *          The unique string that identifies a SIP Domain\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed SourceIpMappingInstance\n */\n/* jshint ignore:end */\nSourceIpMappingInstance.prototype.update = function update(opts, callback) {\n  return this._proxy.update(opts, callback);\n};\n\n/* jshint ignore:start */\n/**\n * remove a SourceIpMappingInstance\n *\n * @function remove\n * @memberof Twilio.Voice.V1.SourceIpMappingInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed SourceIpMappingInstance\n */\n/* jshint ignore:end */\nSourceIpMappingInstance.prototype.remove = function remove(callback) {\n  return this._proxy.remove(callback);\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Voice.V1.SourceIpMappingInstance#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nSourceIpMappingInstance.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function(value, key) {\n    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\n\nSourceIpMappingInstance.prototype[util.inspect.custom] = function inspect(depth,\n    options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the SourceIpMappingContext\n *\n * @constructor Twilio.Voice.V1.SourceIpMappingContext\n *\n * @param {V1} version - Version of the resource\n * @param {sid} sid - The unique string that identifies the resource\n */\n/* jshint ignore:end */\nSourceIpMappingContext = function SourceIpMappingContext(version, sid) {\n  this._version = version;\n\n  // Path Solution\n  this._solution = {sid: sid, };\n  this._uri = `/SourceIpMappings/${sid}`;\n};\n\n/* jshint ignore:start */\n/**\n * fetch a SourceIpMappingInstance\n *\n * @function fetch\n * @memberof Twilio.Voice.V1.SourceIpMappingContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed SourceIpMappingInstance\n */\n/* jshint ignore:end */\nSourceIpMappingContext.prototype.fetch = function fetch(callback) {\n  var deferred = Q.defer();\n  var promise = this._version.fetch({uri: this._uri, method: 'GET'});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(new SourceIpMappingInstance(this._version, payload, this._solution.sid));\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * update a SourceIpMappingInstance\n *\n * @function update\n * @memberof Twilio.Voice.V1.SourceIpMappingContext#\n *\n * @param {object} opts - Options for request\n * @param {string} opts.sipDomainSid -\n *          The unique string that identifies a SIP Domain\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed SourceIpMappingInstance\n */\n/* jshint ignore:end */\nSourceIpMappingContext.prototype.update = function update(opts, callback) {\n  if (_.isUndefined(opts)) {\n    throw new Error('Required parameter \"opts\" missing.');\n  }\n  if (_.isUndefined(opts['sipDomainSid'])) {\n    throw new Error('Required parameter \"opts[\\'sipDomainSid\\']\" missing.');\n  }\n\n  var deferred = Q.defer();\n  var data = values.of({'SipDomainSid': _.get(opts, 'sipDomainSid')});\n\n  var promise = this._version.update({uri: this._uri, method: 'POST', data: data});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(new SourceIpMappingInstance(this._version, payload, this._solution.sid));\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * remove a SourceIpMappingInstance\n *\n * @function remove\n * @memberof Twilio.Voice.V1.SourceIpMappingContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed SourceIpMappingInstance\n */\n/* jshint ignore:end */\nSourceIpMappingContext.prototype.remove = function remove(callback) {\n  var deferred = Q.defer();\n  var promise = this._version.remove({uri: this._uri, method: 'DELETE'});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(payload);\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Voice.V1.SourceIpMappingContext#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nSourceIpMappingContext.prototype.toJSON = function toJSON() {\n  return this._solution;\n};\n\nSourceIpMappingContext.prototype[util.inspect.custom] = function inspect(depth,\n    options) {\n  return util.inspect(this.toJSON(), options);\n};\n\nmodule.exports = {\n  SourceIpMappingList: SourceIpMappingList,\n  SourceIpMappingPage: SourceIpMappingPage,\n  SourceIpMappingInstance: SourceIpMappingInstance,\n  SourceIpMappingContext: SourceIpMappingContext\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}