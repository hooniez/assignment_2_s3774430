{"ast":null,"code":"'use strict';\n/* jshint ignore:start */\n\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n\n/* jshint ignore:end */\n\nvar Q = require('q');\n/* jshint ignore:line */\n\n\nvar _ = require('lodash');\n/* jshint ignore:line */\n\n\nvar util = require('util');\n/* jshint ignore:line */\n\n\nvar Page = require('../../../base/Page');\n/* jshint ignore:line */\n\n\nvar deserialize = require('../../../base/deserialize');\n/* jshint ignore:line */\n\n\nvar values = require('../../../base/values');\n/* jshint ignore:line */\n\n\nvar IpRecordList;\nvar IpRecordPage;\nvar IpRecordInstance;\nvar IpRecordContext;\n/* jshint ignore:start */\n\n/**\n * Initialize the IpRecordList\n *\n * @constructor Twilio.Voice.V1.IpRecordList\n *\n * @param {Twilio.Voice.V1} version - Version of the resource\n */\n\n/* jshint ignore:end */\n\nIpRecordList = function IpRecordList(version) {\n  /* jshint ignore:start */\n\n  /**\n   * @function ipRecords\n   * @memberof Twilio.Voice.V1#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Voice.V1.IpRecordContext}\n   */\n\n  /* jshint ignore:end */\n  function IpRecordListInstance(sid) {\n    return IpRecordListInstance.get(sid);\n  }\n\n  IpRecordListInstance._version = version; // Path Solution\n\n  IpRecordListInstance._solution = {};\n  IpRecordListInstance._uri = `/IpRecords`;\n  /* jshint ignore:start */\n\n  /**\n   * create a IpRecordInstance\n   *\n   * @function create\n   * @memberof Twilio.Voice.V1.IpRecordList#\n   *\n   * @param {object} opts - Options for request\n   * @param {string} opts.ipAddress -\n   *          An IP address in dotted decimal notation, IPv4 only.\n   * @param {string} [opts.friendlyName] - A string to describe the resource\n   * @param {number} [opts.cidrPrefixLength] -\n   *          An integer representing the length of the {@link https://tools.ietf.org/html/rfc4632|CIDR} prefix to use with this IP address. By default the entire IP address is used, which for IPv4 is value 32.\n   * @param {function} [callback] - Callback to handle processed record\n   *\n   * @returns {Promise} Resolves to processed IpRecordInstance\n   */\n\n  /* jshint ignore:end */\n\n  IpRecordListInstance.create = function create(opts, callback) {\n    if (_.isUndefined(opts)) {\n      throw new Error('Required parameter \"opts\" missing.');\n    }\n\n    if (_.isUndefined(opts['ipAddress'])) {\n      throw new Error('Required parameter \"opts[\\'ipAddress\\']\" missing.');\n    }\n\n    var deferred = Q.defer();\n    var data = values.of({\n      'IpAddress': _.get(opts, 'ipAddress'),\n      'FriendlyName': _.get(opts, 'friendlyName'),\n      'CidrPrefixLength': _.get(opts, 'cidrPrefixLength')\n    });\n\n    var promise = this._version.create({\n      uri: this._uri,\n      method: 'POST',\n      data: data\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new IpRecordInstance(this._version, payload, this._solution.sid));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Streams IpRecordInstance records from the API.\n   *\n   * This operation lazily loads records as efficiently as possible until the limit\n   * is reached.\n   *\n   * The results are passed into the callback function, so this operation is memory\n   * efficient.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function each\n   * @memberof Twilio.Voice.V1.IpRecordList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         each() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no pageSize is defined but a limit is defined,\n   *         each() will attempt to read the limit with the most efficient\n   *         page size, i.e. min(limit, 1000)\n   * @param {Function} [opts.callback] -\n   *         Function to process each record. If this and a positional\n   *         callback are passed, this one will be used\n   * @param {Function} [opts.done] -\n   *          Function to be called upon completion of streaming\n   * @param {Function} [callback] - Function to process each record\n   */\n\n  /* jshint ignore:end */\n\n\n  IpRecordListInstance.each = function each(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n\n    if (opts.callback) {\n      callback = opts.callback;\n    }\n\n    if (_.isUndefined(callback)) {\n      throw new Error('Callback function must be provided');\n    }\n\n    var done = false;\n    var currentPage = 1;\n    var currentResource = 0;\n\n    var limits = this._version.readLimits({\n      limit: opts.limit,\n      pageSize: opts.pageSize\n    });\n\n    function onComplete(error) {\n      done = true;\n\n      if (_.isFunction(opts.done)) {\n        opts.done(error);\n      }\n    }\n\n    function fetchNextPage(fn) {\n      var promise = fn();\n\n      if (_.isUndefined(promise)) {\n        onComplete();\n        return;\n      }\n\n      promise.then(function (page) {\n        _.each(page.instances, function (instance) {\n          if (done || !_.isUndefined(opts.limit) && currentResource >= opts.limit) {\n            done = true;\n            return false;\n          }\n\n          currentResource++;\n          callback(instance, onComplete);\n        });\n\n        if (!done) {\n          currentPage++;\n          fetchNextPage(_.bind(page.nextPage, page));\n        } else {\n          onComplete();\n        }\n      });\n      promise.catch(onComplete);\n    }\n\n    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Lists IpRecordInstance records from the API as a list.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function list\n   * @memberof Twilio.Voice.V1.IpRecordList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         list() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no page_size is defined but a limit is defined,\n   *         list() will attempt to read the limit with the most\n   *         efficient page size, i.e. min(limit, 1000)\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  IpRecordListInstance.list = function list(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n    var deferred = Q.defer();\n    var allResources = [];\n\n    opts.callback = function (resource, done) {\n      allResources.push(resource);\n\n      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {\n        done();\n      }\n    };\n\n    opts.done = function (error) {\n      if (_.isUndefined(error)) {\n        deferred.resolve(allResources);\n      } else {\n        deferred.reject(error);\n      }\n    };\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    this.each(opts);\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Retrieve a single page of IpRecordInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function page\n   * @memberof Twilio.Voice.V1.IpRecordList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.pageToken] - PageToken provided by the API\n   * @param {number} [opts.pageNumber] -\n   *          Page Number, this value is simply for client state\n   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  IpRecordListInstance.page = function page(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n    var deferred = Q.defer();\n    var data = values.of({\n      'PageToken': opts.pageToken,\n      'Page': opts.pageNumber,\n      'PageSize': opts.pageSize\n    });\n\n    var promise = this._version.page({\n      uri: this._uri,\n      method: 'GET',\n      params: data\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new IpRecordPage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Retrieve a single target page of IpRecordInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function getPage\n   * @memberof Twilio.Voice.V1.IpRecordList#\n   *\n   * @param {string} [targetUrl] - API-generated URL for the requested results page\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  IpRecordListInstance.getPage = function getPage(targetUrl, callback) {\n    var deferred = Q.defer();\n\n    var promise = this._version._domain.twilio.request({\n      method: 'GET',\n      uri: targetUrl\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new IpRecordPage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Constructs a ip_record\n   *\n   * @function get\n   * @memberof Twilio.Voice.V1.IpRecordList#\n   *\n   * @param {string} sid - The unique string that identifies the resource\n   *\n   * @returns {Twilio.Voice.V1.IpRecordContext}\n   */\n\n  /* jshint ignore:end */\n\n\n  IpRecordListInstance.get = function get(sid) {\n    return new IpRecordContext(this._version, sid);\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Voice.V1.IpRecordList#\n   *\n   * @returns Object\n   */\n\n  /* jshint ignore:end */\n\n\n  IpRecordListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n\n  IpRecordListInstance[util.inspect.custom] = function inspect(depth, options) {\n    return util.inspect(this.toJSON(), options);\n  };\n\n  return IpRecordListInstance;\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the IpRecordPage\n *\n * @constructor Twilio.Voice.V1.IpRecordPage\n *\n * @param {V1} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {IpRecordSolution} solution - Path solution\n *\n * @returns IpRecordPage\n */\n\n/* jshint ignore:end */\n\n\nIpRecordPage = function IpRecordPage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n\n_.extend(IpRecordPage.prototype, Page.prototype);\n\nIpRecordPage.prototype.constructor = IpRecordPage;\n/* jshint ignore:start */\n\n/**\n * Build an instance of IpRecordInstance\n *\n * @function getInstance\n * @memberof Twilio.Voice.V1.IpRecordPage#\n *\n * @param {IpRecordPayload} payload - Payload response from the API\n *\n * @returns IpRecordInstance\n */\n\n/* jshint ignore:end */\n\nIpRecordPage.prototype.getInstance = function getInstance(payload) {\n  return new IpRecordInstance(this._version, payload);\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Voice.V1.IpRecordPage#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nIpRecordPage.prototype.toJSON = function toJSON() {\n  let clone = {};\n\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n\n  return clone;\n};\n\nIpRecordPage.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the IpRecordContext\n *\n * @constructor Twilio.Voice.V1.IpRecordInstance\n *\n * @property {string} accountSid - The SID of the Account that created the resource\n * @property {string} sid - The unique string that identifies the resource\n * @property {string} friendlyName -\n *          The string that you assigned to describe the resource\n * @property {string} ipAddress -\n *          An IP address in dotted decimal notation, IPv4 only.\n * @property {number} cidrPrefixLength -\n *          An integer representing the length of the {@link https://tools.ietf.org/html/rfc4632|CIDR} prefix to use with this IP address. By default the entire IP address is used, which for IPv4 is value 32.\n * @property {Date} dateCreated -\n *          The RFC 2822 date and time in GMT that the resource was created\n * @property {Date} dateUpdated -\n *          The RFC 2822 date and time in GMT that the resource was last updated\n * @property {string} url - The absolute URL of the resource\n *\n * @param {V1} version - Version of the resource\n * @param {IpRecordPayload} payload - The instance payload\n * @param {sid} sid - The unique string that identifies the resource\n */\n\n/* jshint ignore:end */\n\n\nIpRecordInstance = function IpRecordInstance(version, payload, sid) {\n  this._version = version; // Marshaled Properties\n\n  this.accountSid = payload.account_sid; // jshint ignore:line\n\n  this.sid = payload.sid; // jshint ignore:line\n\n  this.friendlyName = payload.friendly_name; // jshint ignore:line\n\n  this.ipAddress = payload.ip_address; // jshint ignore:line\n\n  this.cidrPrefixLength = deserialize.integer(payload.cidr_prefix_length); // jshint ignore:line\n\n  this.dateCreated = deserialize.iso8601DateTime(payload.date_created); // jshint ignore:line\n\n  this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated); // jshint ignore:line\n\n  this.url = payload.url; // jshint ignore:line\n  // Context\n\n  this._context = undefined;\n  this._solution = {\n    sid: sid || this.sid\n  };\n};\n\nObject.defineProperty(IpRecordInstance.prototype, '_proxy', {\n  get: function () {\n    if (!this._context) {\n      this._context = new IpRecordContext(this._version, this._solution.sid);\n    }\n\n    return this._context;\n  }\n});\n/* jshint ignore:start */\n\n/**\n * fetch a IpRecordInstance\n *\n * @function fetch\n * @memberof Twilio.Voice.V1.IpRecordInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed IpRecordInstance\n */\n\n/* jshint ignore:end */\n\nIpRecordInstance.prototype.fetch = function fetch(callback) {\n  return this._proxy.fetch(callback);\n};\n/* jshint ignore:start */\n\n/**\n * update a IpRecordInstance\n *\n * @function update\n * @memberof Twilio.Voice.V1.IpRecordInstance#\n *\n * @param {object} [opts] - Options for request\n * @param {string} [opts.friendlyName] - A string to describe the resource\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed IpRecordInstance\n */\n\n/* jshint ignore:end */\n\n\nIpRecordInstance.prototype.update = function update(opts, callback) {\n  return this._proxy.update(opts, callback);\n};\n/* jshint ignore:start */\n\n/**\n * remove a IpRecordInstance\n *\n * @function remove\n * @memberof Twilio.Voice.V1.IpRecordInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed IpRecordInstance\n */\n\n/* jshint ignore:end */\n\n\nIpRecordInstance.prototype.remove = function remove(callback) {\n  return this._proxy.remove(callback);\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Voice.V1.IpRecordInstance#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nIpRecordInstance.prototype.toJSON = function toJSON() {\n  let clone = {};\n\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n\n  return clone;\n};\n\nIpRecordInstance.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the IpRecordContext\n *\n * @constructor Twilio.Voice.V1.IpRecordContext\n *\n * @param {V1} version - Version of the resource\n * @param {sid} sid - The unique string that identifies the resource\n */\n\n/* jshint ignore:end */\n\n\nIpRecordContext = function IpRecordContext(version, sid) {\n  this._version = version; // Path Solution\n\n  this._solution = {\n    sid: sid\n  };\n  this._uri = `/IpRecords/${sid}`;\n};\n/* jshint ignore:start */\n\n/**\n * fetch a IpRecordInstance\n *\n * @function fetch\n * @memberof Twilio.Voice.V1.IpRecordContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed IpRecordInstance\n */\n\n/* jshint ignore:end */\n\n\nIpRecordContext.prototype.fetch = function fetch(callback) {\n  var deferred = Q.defer();\n\n  var promise = this._version.fetch({\n    uri: this._uri,\n    method: 'GET'\n  });\n\n  promise = promise.then(function (payload) {\n    deferred.resolve(new IpRecordInstance(this._version, payload, this._solution.sid));\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n/* jshint ignore:start */\n\n/**\n * update a IpRecordInstance\n *\n * @function update\n * @memberof Twilio.Voice.V1.IpRecordContext#\n *\n * @param {object} [opts] - Options for request\n * @param {string} [opts.friendlyName] - A string to describe the resource\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed IpRecordInstance\n */\n\n/* jshint ignore:end */\n\n\nIpRecordContext.prototype.update = function update(opts, callback) {\n  if (_.isFunction(opts)) {\n    callback = opts;\n    opts = {};\n  }\n\n  opts = opts || {};\n  var deferred = Q.defer();\n  var data = values.of({\n    'FriendlyName': _.get(opts, 'friendlyName')\n  });\n\n  var promise = this._version.update({\n    uri: this._uri,\n    method: 'POST',\n    data: data\n  });\n\n  promise = promise.then(function (payload) {\n    deferred.resolve(new IpRecordInstance(this._version, payload, this._solution.sid));\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n/* jshint ignore:start */\n\n/**\n * remove a IpRecordInstance\n *\n * @function remove\n * @memberof Twilio.Voice.V1.IpRecordContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed IpRecordInstance\n */\n\n/* jshint ignore:end */\n\n\nIpRecordContext.prototype.remove = function remove(callback) {\n  var deferred = Q.defer();\n\n  var promise = this._version.remove({\n    uri: this._uri,\n    method: 'DELETE'\n  });\n\n  promise = promise.then(function (payload) {\n    deferred.resolve(payload);\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Voice.V1.IpRecordContext#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nIpRecordContext.prototype.toJSON = function toJSON() {\n  return this._solution;\n};\n\nIpRecordContext.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\nmodule.exports = {\n  IpRecordList: IpRecordList,\n  IpRecordPage: IpRecordPage,\n  IpRecordInstance: IpRecordInstance,\n  IpRecordContext: IpRecordContext\n};","map":{"version":3,"names":["Q","require","_","util","Page","deserialize","values","IpRecordList","IpRecordPage","IpRecordInstance","IpRecordContext","version","IpRecordListInstance","sid","get","_version","_solution","_uri","create","opts","callback","isUndefined","Error","deferred","defer","data","of","promise","uri","method","then","payload","resolve","bind","catch","error","reject","isFunction","nodeify","each","done","currentPage","currentResource","limits","readLimits","limit","pageSize","onComplete","fetchNextPage","fn","page","instances","instance","nextPage","merge","list","allResources","resource","push","length","pageToken","pageNumber","params","getPage","targetUrl","_domain","twilio","request","toJSON","inspect","custom","depth","options","response","solution","prototype","constructor","call","extend","getInstance","clone","forOwn","value","key","startsWith","accountSid","account_sid","friendlyName","friendly_name","ipAddress","ip_address","cidrPrefixLength","integer","cidr_prefix_length","dateCreated","iso8601DateTime","date_created","dateUpdated","date_updated","url","_context","undefined","Object","defineProperty","fetch","_proxy","update","remove","module","exports"],"sources":["/Users/hooniesun/rmit/fwp/assessment1/lan/node_modules/twilio/lib/rest/voice/v1/ipRecord.js"],"sourcesContent":["'use strict';\n\n/* jshint ignore:start */\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n/* jshint ignore:end */\n\nvar Q = require('q');  /* jshint ignore:line */\nvar _ = require('lodash');  /* jshint ignore:line */\nvar util = require('util');  /* jshint ignore:line */\nvar Page = require('../../../base/Page');  /* jshint ignore:line */\nvar deserialize = require(\n    '../../../base/deserialize');  /* jshint ignore:line */\nvar values = require('../../../base/values');  /* jshint ignore:line */\n\nvar IpRecordList;\nvar IpRecordPage;\nvar IpRecordInstance;\nvar IpRecordContext;\n\n/* jshint ignore:start */\n/**\n * Initialize the IpRecordList\n *\n * @constructor Twilio.Voice.V1.IpRecordList\n *\n * @param {Twilio.Voice.V1} version - Version of the resource\n */\n/* jshint ignore:end */\nIpRecordList = function IpRecordList(version) {\n  /* jshint ignore:start */\n  /**\n   * @function ipRecords\n   * @memberof Twilio.Voice.V1#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Voice.V1.IpRecordContext}\n   */\n  /* jshint ignore:end */\n  function IpRecordListInstance(sid) {\n    return IpRecordListInstance.get(sid);\n  }\n\n  IpRecordListInstance._version = version;\n  // Path Solution\n  IpRecordListInstance._solution = {};\n  IpRecordListInstance._uri = `/IpRecords`;\n  /* jshint ignore:start */\n  /**\n   * create a IpRecordInstance\n   *\n   * @function create\n   * @memberof Twilio.Voice.V1.IpRecordList#\n   *\n   * @param {object} opts - Options for request\n   * @param {string} opts.ipAddress -\n   *          An IP address in dotted decimal notation, IPv4 only.\n   * @param {string} [opts.friendlyName] - A string to describe the resource\n   * @param {number} [opts.cidrPrefixLength] -\n   *          An integer representing the length of the {@link https://tools.ietf.org/html/rfc4632|CIDR} prefix to use with this IP address. By default the entire IP address is used, which for IPv4 is value 32.\n   * @param {function} [callback] - Callback to handle processed record\n   *\n   * @returns {Promise} Resolves to processed IpRecordInstance\n   */\n  /* jshint ignore:end */\n  IpRecordListInstance.create = function create(opts, callback) {\n    if (_.isUndefined(opts)) {\n      throw new Error('Required parameter \"opts\" missing.');\n    }\n    if (_.isUndefined(opts['ipAddress'])) {\n      throw new Error('Required parameter \"opts[\\'ipAddress\\']\" missing.');\n    }\n\n    var deferred = Q.defer();\n    var data = values.of({\n      'IpAddress': _.get(opts, 'ipAddress'),\n      'FriendlyName': _.get(opts, 'friendlyName'),\n      'CidrPrefixLength': _.get(opts, 'cidrPrefixLength')\n    });\n\n    var promise = this._version.create({uri: this._uri, method: 'POST', data: data});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new IpRecordInstance(this._version, payload, this._solution.sid));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Streams IpRecordInstance records from the API.\n   *\n   * This operation lazily loads records as efficiently as possible until the limit\n   * is reached.\n   *\n   * The results are passed into the callback function, so this operation is memory\n   * efficient.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function each\n   * @memberof Twilio.Voice.V1.IpRecordList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         each() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no pageSize is defined but a limit is defined,\n   *         each() will attempt to read the limit with the most efficient\n   *         page size, i.e. min(limit, 1000)\n   * @param {Function} [opts.callback] -\n   *         Function to process each record. If this and a positional\n   *         callback are passed, this one will be used\n   * @param {Function} [opts.done] -\n   *          Function to be called upon completion of streaming\n   * @param {Function} [callback] - Function to process each record\n   */\n  /* jshint ignore:end */\n  IpRecordListInstance.each = function each(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    if (opts.callback) {\n      callback = opts.callback;\n    }\n    if (_.isUndefined(callback)) {\n      throw new Error('Callback function must be provided');\n    }\n\n    var done = false;\n    var currentPage = 1;\n    var currentResource = 0;\n    var limits = this._version.readLimits({\n      limit: opts.limit,\n      pageSize: opts.pageSize\n    });\n\n    function onComplete(error) {\n      done = true;\n      if (_.isFunction(opts.done)) {\n        opts.done(error);\n      }\n    }\n\n    function fetchNextPage(fn) {\n      var promise = fn();\n      if (_.isUndefined(promise)) {\n        onComplete();\n        return;\n      }\n\n      promise.then(function(page) {\n        _.each(page.instances, function(instance) {\n          if (done || (!_.isUndefined(opts.limit) && currentResource >= opts.limit)) {\n            done = true;\n            return false;\n          }\n\n          currentResource++;\n          callback(instance, onComplete);\n        });\n\n        if (!done) {\n          currentPage++;\n          fetchNextPage(_.bind(page.nextPage, page));\n        } else {\n          onComplete();\n        }\n      });\n\n      promise.catch(onComplete);\n    }\n\n    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Lists IpRecordInstance records from the API as a list.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function list\n   * @memberof Twilio.Voice.V1.IpRecordList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         list() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no page_size is defined but a limit is defined,\n   *         list() will attempt to read the limit with the most\n   *         efficient page size, i.e. min(limit, 1000)\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  IpRecordListInstance.list = function list(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    var deferred = Q.defer();\n    var allResources = [];\n    opts.callback = function(resource, done) {\n      allResources.push(resource);\n\n      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {\n        done();\n      }\n    };\n\n    opts.done = function(error) {\n      if (_.isUndefined(error)) {\n        deferred.resolve(allResources);\n      } else {\n        deferred.reject(error);\n      }\n    };\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    this.each(opts);\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single page of IpRecordInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function page\n   * @memberof Twilio.Voice.V1.IpRecordList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.pageToken] - PageToken provided by the API\n   * @param {number} [opts.pageNumber] -\n   *          Page Number, this value is simply for client state\n   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  IpRecordListInstance.page = function page(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n\n    var deferred = Q.defer();\n    var data = values.of({\n      'PageToken': opts.pageToken,\n      'Page': opts.pageNumber,\n      'PageSize': opts.pageSize\n    });\n\n    var promise = this._version.page({uri: this._uri, method: 'GET', params: data});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new IpRecordPage(this._version, payload, this._solution));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single target page of IpRecordInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function getPage\n   * @memberof Twilio.Voice.V1.IpRecordList#\n   *\n   * @param {string} [targetUrl] - API-generated URL for the requested results page\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  IpRecordListInstance.getPage = function getPage(targetUrl, callback) {\n    var deferred = Q.defer();\n\n    var promise = this._version._domain.twilio.request({method: 'GET', uri: targetUrl});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new IpRecordPage(this._version, payload, this._solution));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Constructs a ip_record\n   *\n   * @function get\n   * @memberof Twilio.Voice.V1.IpRecordList#\n   *\n   * @param {string} sid - The unique string that identifies the resource\n   *\n   * @returns {Twilio.Voice.V1.IpRecordContext}\n   */\n  /* jshint ignore:end */\n  IpRecordListInstance.get = function get(sid) {\n    return new IpRecordContext(this._version, sid);\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Voice.V1.IpRecordList#\n   *\n   * @returns Object\n   */\n  /* jshint ignore:end */\n  IpRecordListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n\n  IpRecordListInstance[util.inspect.custom] = function inspect(depth, options) {\n    return util.inspect(this.toJSON(), options);\n  };\n\n  return IpRecordListInstance;\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the IpRecordPage\n *\n * @constructor Twilio.Voice.V1.IpRecordPage\n *\n * @param {V1} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {IpRecordSolution} solution - Path solution\n *\n * @returns IpRecordPage\n */\n/* jshint ignore:end */\nIpRecordPage = function IpRecordPage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n\n_.extend(IpRecordPage.prototype, Page.prototype);\nIpRecordPage.prototype.constructor = IpRecordPage;\n\n/* jshint ignore:start */\n/**\n * Build an instance of IpRecordInstance\n *\n * @function getInstance\n * @memberof Twilio.Voice.V1.IpRecordPage#\n *\n * @param {IpRecordPayload} payload - Payload response from the API\n *\n * @returns IpRecordInstance\n */\n/* jshint ignore:end */\nIpRecordPage.prototype.getInstance = function getInstance(payload) {\n  return new IpRecordInstance(this._version, payload);\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Voice.V1.IpRecordPage#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nIpRecordPage.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function(value, key) {\n    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\n\nIpRecordPage.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the IpRecordContext\n *\n * @constructor Twilio.Voice.V1.IpRecordInstance\n *\n * @property {string} accountSid - The SID of the Account that created the resource\n * @property {string} sid - The unique string that identifies the resource\n * @property {string} friendlyName -\n *          The string that you assigned to describe the resource\n * @property {string} ipAddress -\n *          An IP address in dotted decimal notation, IPv4 only.\n * @property {number} cidrPrefixLength -\n *          An integer representing the length of the {@link https://tools.ietf.org/html/rfc4632|CIDR} prefix to use with this IP address. By default the entire IP address is used, which for IPv4 is value 32.\n * @property {Date} dateCreated -\n *          The RFC 2822 date and time in GMT that the resource was created\n * @property {Date} dateUpdated -\n *          The RFC 2822 date and time in GMT that the resource was last updated\n * @property {string} url - The absolute URL of the resource\n *\n * @param {V1} version - Version of the resource\n * @param {IpRecordPayload} payload - The instance payload\n * @param {sid} sid - The unique string that identifies the resource\n */\n/* jshint ignore:end */\nIpRecordInstance = function IpRecordInstance(version, payload, sid) {\n  this._version = version;\n\n  // Marshaled Properties\n  this.accountSid = payload.account_sid; // jshint ignore:line\n  this.sid = payload.sid; // jshint ignore:line\n  this.friendlyName = payload.friendly_name; // jshint ignore:line\n  this.ipAddress = payload.ip_address; // jshint ignore:line\n  this.cidrPrefixLength = deserialize.integer(payload.cidr_prefix_length); // jshint ignore:line\n  this.dateCreated = deserialize.iso8601DateTime(payload.date_created); // jshint ignore:line\n  this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated); // jshint ignore:line\n  this.url = payload.url; // jshint ignore:line\n\n  // Context\n  this._context = undefined;\n  this._solution = {sid: sid || this.sid, };\n};\n\nObject.defineProperty(IpRecordInstance.prototype,\n  '_proxy', {\n    get: function() {\n      if (!this._context) {\n        this._context = new IpRecordContext(this._version, this._solution.sid);\n      }\n\n      return this._context;\n    }\n});\n\n/* jshint ignore:start */\n/**\n * fetch a IpRecordInstance\n *\n * @function fetch\n * @memberof Twilio.Voice.V1.IpRecordInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed IpRecordInstance\n */\n/* jshint ignore:end */\nIpRecordInstance.prototype.fetch = function fetch(callback) {\n  return this._proxy.fetch(callback);\n};\n\n/* jshint ignore:start */\n/**\n * update a IpRecordInstance\n *\n * @function update\n * @memberof Twilio.Voice.V1.IpRecordInstance#\n *\n * @param {object} [opts] - Options for request\n * @param {string} [opts.friendlyName] - A string to describe the resource\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed IpRecordInstance\n */\n/* jshint ignore:end */\nIpRecordInstance.prototype.update = function update(opts, callback) {\n  return this._proxy.update(opts, callback);\n};\n\n/* jshint ignore:start */\n/**\n * remove a IpRecordInstance\n *\n * @function remove\n * @memberof Twilio.Voice.V1.IpRecordInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed IpRecordInstance\n */\n/* jshint ignore:end */\nIpRecordInstance.prototype.remove = function remove(callback) {\n  return this._proxy.remove(callback);\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Voice.V1.IpRecordInstance#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nIpRecordInstance.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function(value, key) {\n    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\n\nIpRecordInstance.prototype[util.inspect.custom] = function inspect(depth,\n    options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the IpRecordContext\n *\n * @constructor Twilio.Voice.V1.IpRecordContext\n *\n * @param {V1} version - Version of the resource\n * @param {sid} sid - The unique string that identifies the resource\n */\n/* jshint ignore:end */\nIpRecordContext = function IpRecordContext(version, sid) {\n  this._version = version;\n\n  // Path Solution\n  this._solution = {sid: sid, };\n  this._uri = `/IpRecords/${sid}`;\n};\n\n/* jshint ignore:start */\n/**\n * fetch a IpRecordInstance\n *\n * @function fetch\n * @memberof Twilio.Voice.V1.IpRecordContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed IpRecordInstance\n */\n/* jshint ignore:end */\nIpRecordContext.prototype.fetch = function fetch(callback) {\n  var deferred = Q.defer();\n  var promise = this._version.fetch({uri: this._uri, method: 'GET'});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(new IpRecordInstance(this._version, payload, this._solution.sid));\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * update a IpRecordInstance\n *\n * @function update\n * @memberof Twilio.Voice.V1.IpRecordContext#\n *\n * @param {object} [opts] - Options for request\n * @param {string} [opts.friendlyName] - A string to describe the resource\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed IpRecordInstance\n */\n/* jshint ignore:end */\nIpRecordContext.prototype.update = function update(opts, callback) {\n  if (_.isFunction(opts)) {\n    callback = opts;\n    opts = {};\n  }\n  opts = opts || {};\n\n  var deferred = Q.defer();\n  var data = values.of({'FriendlyName': _.get(opts, 'friendlyName')});\n\n  var promise = this._version.update({uri: this._uri, method: 'POST', data: data});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(new IpRecordInstance(this._version, payload, this._solution.sid));\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * remove a IpRecordInstance\n *\n * @function remove\n * @memberof Twilio.Voice.V1.IpRecordContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed IpRecordInstance\n */\n/* jshint ignore:end */\nIpRecordContext.prototype.remove = function remove(callback) {\n  var deferred = Q.defer();\n  var promise = this._version.remove({uri: this._uri, method: 'DELETE'});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(payload);\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Voice.V1.IpRecordContext#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nIpRecordContext.prototype.toJSON = function toJSON() {\n  return this._solution;\n};\n\nIpRecordContext.prototype[util.inspect.custom] = function inspect(depth,\n    options) {\n  return util.inspect(this.toJSON(), options);\n};\n\nmodule.exports = {\n  IpRecordList: IpRecordList,\n  IpRecordPage: IpRecordPage,\n  IpRecordInstance: IpRecordInstance,\n  IpRecordContext: IpRecordContext\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}