{"ast":null,"code":"// Generated by CoffeeScript 2.4.1\n(function () {\n  var NodeType, XMLDTDElement, XMLNode;\n  XMLNode = require('./XMLNode');\n  NodeType = require('./NodeType'); // Represents an attribute\n\n  module.exports = XMLDTDElement = class XMLDTDElement extends XMLNode {\n    // Initializes a new instance of `XMLDTDElement`\n    // `parent` the parent `XMLDocType` element\n    // `name` element name\n    // `value` element content (defaults to #PCDATA)\n    constructor(parent, name, value) {\n      super(parent);\n\n      if (name == null) {\n        throw new Error(\"Missing DTD element name. \" + this.debugInfo());\n      }\n\n      if (!value) {\n        value = '(#PCDATA)';\n      }\n\n      if (Array.isArray(value)) {\n        value = '(' + value.join(',') + ')';\n      }\n\n      this.name = this.stringify.name(name);\n      this.type = NodeType.ElementDeclaration;\n      this.value = this.stringify.dtdElementValue(value);\n    } // Converts the XML fragment to string\n    // `options.pretty` pretty prints the result\n    // `options.indent` indentation for pretty print\n    // `options.offset` how many indentations to add to every line for pretty print\n    // `options.newline` newline sequence for pretty print\n\n\n    toString(options) {\n      return this.options.writer.dtdElement(this, this.options.writer.filterOptions(options));\n    }\n\n  };\n}).call(this);","map":{"version":3,"names":["NodeType","XMLDTDElement","XMLNode","require","module","exports","constructor","parent","name","value","Error","debugInfo","Array","isArray","join","stringify","type","ElementDeclaration","dtdElementValue","toString","options","writer","dtdElement","filterOptions","call"],"sources":["/Users/hooniesun/rmit/fwp/assessment1/lan/node_modules/xmlbuilder/lib/XMLDTDElement.js"],"sourcesContent":["// Generated by CoffeeScript 2.4.1\n(function() {\n  var NodeType, XMLDTDElement, XMLNode;\n\n  XMLNode = require('./XMLNode');\n\n  NodeType = require('./NodeType');\n\n  // Represents an attribute\n  module.exports = XMLDTDElement = class XMLDTDElement extends XMLNode {\n    // Initializes a new instance of `XMLDTDElement`\n\n    // `parent` the parent `XMLDocType` element\n    // `name` element name\n    // `value` element content (defaults to #PCDATA)\n    constructor(parent, name, value) {\n      super(parent);\n      if (name == null) {\n        throw new Error(\"Missing DTD element name. \" + this.debugInfo());\n      }\n      if (!value) {\n        value = '(#PCDATA)';\n      }\n      if (Array.isArray(value)) {\n        value = '(' + value.join(',') + ')';\n      }\n      this.name = this.stringify.name(name);\n      this.type = NodeType.ElementDeclaration;\n      this.value = this.stringify.dtdElementValue(value);\n    }\n\n    // Converts the XML fragment to string\n\n    // `options.pretty` pretty prints the result\n    // `options.indent` indentation for pretty print\n    // `options.offset` how many indentations to add to every line for pretty print\n    // `options.newline` newline sequence for pretty print\n    toString(options) {\n      return this.options.writer.dtdElement(this, this.options.writer.filterOptions(options));\n    }\n\n  };\n\n}).call(this);\n"],"mappings":"AAAA;AACA,CAAC,YAAW;EACV,IAAIA,QAAJ,EAAcC,aAAd,EAA6BC,OAA7B;EAEAA,OAAO,GAAGC,OAAO,CAAC,WAAD,CAAjB;EAEAH,QAAQ,GAAGG,OAAO,CAAC,YAAD,CAAlB,CALU,CAOV;;EACAC,MAAM,CAACC,OAAP,GAAiBJ,aAAa,GAAG,MAAMA,aAAN,SAA4BC,OAA5B,CAAoC;IACnE;IAEA;IACA;IACA;IACAI,WAAW,CAACC,MAAD,EAASC,IAAT,EAAeC,KAAf,EAAsB;MAC/B,MAAMF,MAAN;;MACA,IAAIC,IAAI,IAAI,IAAZ,EAAkB;QAChB,MAAM,IAAIE,KAAJ,CAAU,+BAA+B,KAAKC,SAAL,EAAzC,CAAN;MACD;;MACD,IAAI,CAACF,KAAL,EAAY;QACVA,KAAK,GAAG,WAAR;MACD;;MACD,IAAIG,KAAK,CAACC,OAAN,CAAcJ,KAAd,CAAJ,EAA0B;QACxBA,KAAK,GAAG,MAAMA,KAAK,CAACK,IAAN,CAAW,GAAX,CAAN,GAAwB,GAAhC;MACD;;MACD,KAAKN,IAAL,GAAY,KAAKO,SAAL,CAAeP,IAAf,CAAoBA,IAApB,CAAZ;MACA,KAAKQ,IAAL,GAAYhB,QAAQ,CAACiB,kBAArB;MACA,KAAKR,KAAL,GAAa,KAAKM,SAAL,CAAeG,eAAf,CAA+BT,KAA/B,CAAb;IACD,CApBkE,CAsBnE;IAEA;IACA;IACA;IACA;;;IACAU,QAAQ,CAACC,OAAD,EAAU;MAChB,OAAO,KAAKA,OAAL,CAAaC,MAAb,CAAoBC,UAApB,CAA+B,IAA/B,EAAqC,KAAKF,OAAL,CAAaC,MAAb,CAAoBE,aAApB,CAAkCH,OAAlC,CAArC,CAAP;IACD;;EA9BkE,CAArE;AAkCD,CA1CD,EA0CGI,IA1CH,CA0CQ,IA1CR"},"metadata":{},"sourceType":"script"}