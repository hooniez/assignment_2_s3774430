{"ast":null,"code":"// Generated by CoffeeScript 2.4.1\n(function () {\n  var NodeType,\n      WriterState,\n      XMLCData,\n      XMLComment,\n      XMLDTDAttList,\n      XMLDTDElement,\n      XMLDTDEntity,\n      XMLDTDNotation,\n      XMLDeclaration,\n      XMLDocType,\n      XMLDummy,\n      XMLElement,\n      XMLProcessingInstruction,\n      XMLRaw,\n      XMLText,\n      XMLWriterBase,\n      assign,\n      hasProp = {}.hasOwnProperty;\n  ({\n    assign\n  } = require('./Utility'));\n  NodeType = require('./NodeType');\n  XMLDeclaration = require('./XMLDeclaration');\n  XMLDocType = require('./XMLDocType');\n  XMLCData = require('./XMLCData');\n  XMLComment = require('./XMLComment');\n  XMLElement = require('./XMLElement');\n  XMLRaw = require('./XMLRaw');\n  XMLText = require('./XMLText');\n  XMLProcessingInstruction = require('./XMLProcessingInstruction');\n  XMLDummy = require('./XMLDummy');\n  XMLDTDAttList = require('./XMLDTDAttList');\n  XMLDTDElement = require('./XMLDTDElement');\n  XMLDTDEntity = require('./XMLDTDEntity');\n  XMLDTDNotation = require('./XMLDTDNotation');\n  WriterState = require('./WriterState'); // Base class for XML writers\n\n  module.exports = XMLWriterBase = class XMLWriterBase {\n    // Initializes a new instance of `XMLWriterBase`\n    // `options.pretty` pretty prints the result\n    // `options.indent` indentation string\n    // `options.newline` newline sequence\n    // `options.offset` a fixed number of indentations to add to every line\n    // `options.width` maximum column width\n    // `options.allowEmpty` do not self close empty element tags\n    // 'options.dontPrettyTextNodes' if any text is present in node, don't indent or LF\n    // `options.spaceBeforeSlash` add a space before the closing slash of empty elements\n    constructor(options) {\n      var key, ref, value;\n      options || (options = {});\n      this.options = options;\n      ref = options.writer || {};\n\n      for (key in ref) {\n        if (!hasProp.call(ref, key)) continue;\n        value = ref[key];\n        this[\"_\" + key] = this[key];\n        this[key] = value;\n      }\n    } // Filters writer options and provides defaults\n    // `options` writer options\n\n\n    filterOptions(options) {\n      var filteredOptions, ref, ref1, ref2, ref3, ref4, ref5, ref6, ref7;\n      options || (options = {});\n      options = assign({}, this.options, options);\n      filteredOptions = {\n        writer: this\n      };\n      filteredOptions.pretty = options.pretty || false;\n      filteredOptions.allowEmpty = options.allowEmpty || false;\n      filteredOptions.indent = (ref = options.indent) != null ? ref : '  ';\n      filteredOptions.newline = (ref1 = options.newline) != null ? ref1 : '\\n';\n      filteredOptions.offset = (ref2 = options.offset) != null ? ref2 : 0;\n      filteredOptions.width = (ref3 = options.width) != null ? ref3 : 0;\n      filteredOptions.dontPrettyTextNodes = (ref4 = (ref5 = options.dontPrettyTextNodes) != null ? ref5 : options.dontprettytextnodes) != null ? ref4 : 0;\n      filteredOptions.spaceBeforeSlash = (ref6 = (ref7 = options.spaceBeforeSlash) != null ? ref7 : options.spacebeforeslash) != null ? ref6 : '';\n\n      if (filteredOptions.spaceBeforeSlash === true) {\n        filteredOptions.spaceBeforeSlash = ' ';\n      }\n\n      filteredOptions.suppressPrettyCount = 0;\n      filteredOptions.user = {};\n      filteredOptions.state = WriterState.None;\n      return filteredOptions;\n    } // Returns the indentation string for the current level\n    // `node` current node\n    // `options` writer options\n    // `level` current indentation level\n\n\n    indent(node, options, level) {\n      var indentLevel;\n\n      if (!options.pretty || options.suppressPrettyCount) {\n        return '';\n      } else if (options.pretty) {\n        indentLevel = (level || 0) + options.offset + 1;\n\n        if (indentLevel > 0) {\n          return new Array(indentLevel).join(options.indent);\n        }\n      }\n\n      return '';\n    } // Returns the newline string\n    // `node` current node\n    // `options` writer options\n    // `level` current indentation level\n\n\n    endline(node, options, level) {\n      if (!options.pretty || options.suppressPrettyCount) {\n        return '';\n      } else {\n        return options.newline;\n      }\n    }\n\n    attribute(att, options, level) {\n      var r;\n      this.openAttribute(att, options, level);\n\n      if (options.pretty && options.width > 0) {\n        r = att.name + '=\"' + att.value + '\"';\n      } else {\n        r = ' ' + att.name + '=\"' + att.value + '\"';\n      }\n\n      this.closeAttribute(att, options, level);\n      return r;\n    }\n\n    cdata(node, options, level) {\n      var r;\n      this.openNode(node, options, level);\n      options.state = WriterState.OpenTag;\n      r = this.indent(node, options, level) + '<![CDATA[';\n      options.state = WriterState.InsideTag;\n      r += node.value;\n      options.state = WriterState.CloseTag;\n      r += ']]>' + this.endline(node, options, level);\n      options.state = WriterState.None;\n      this.closeNode(node, options, level);\n      return r;\n    }\n\n    comment(node, options, level) {\n      var r;\n      this.openNode(node, options, level);\n      options.state = WriterState.OpenTag;\n      r = this.indent(node, options, level) + '<!-- ';\n      options.state = WriterState.InsideTag;\n      r += node.value;\n      options.state = WriterState.CloseTag;\n      r += ' -->' + this.endline(node, options, level);\n      options.state = WriterState.None;\n      this.closeNode(node, options, level);\n      return r;\n    }\n\n    declaration(node, options, level) {\n      var r;\n      this.openNode(node, options, level);\n      options.state = WriterState.OpenTag;\n      r = this.indent(node, options, level) + '<?xml';\n      options.state = WriterState.InsideTag;\n      r += ' version=\"' + node.version + '\"';\n\n      if (node.encoding != null) {\n        r += ' encoding=\"' + node.encoding + '\"';\n      }\n\n      if (node.standalone != null) {\n        r += ' standalone=\"' + node.standalone + '\"';\n      }\n\n      options.state = WriterState.CloseTag;\n      r += options.spaceBeforeSlash + '?>';\n      r += this.endline(node, options, level);\n      options.state = WriterState.None;\n      this.closeNode(node, options, level);\n      return r;\n    }\n\n    docType(node, options, level) {\n      var child, i, len1, r, ref;\n      level || (level = 0);\n      this.openNode(node, options, level);\n      options.state = WriterState.OpenTag;\n      r = this.indent(node, options, level);\n      r += '<!DOCTYPE ' + node.root().name; // external identifier\n\n      if (node.pubID && node.sysID) {\n        r += ' PUBLIC \"' + node.pubID + '\" \"' + node.sysID + '\"';\n      } else if (node.sysID) {\n        r += ' SYSTEM \"' + node.sysID + '\"';\n      } // internal subset\n\n\n      if (node.children.length > 0) {\n        r += ' [';\n        r += this.endline(node, options, level);\n        options.state = WriterState.InsideTag;\n        ref = node.children;\n\n        for (i = 0, len1 = ref.length; i < len1; i++) {\n          child = ref[i];\n          r += this.writeChildNode(child, options, level + 1);\n        }\n\n        options.state = WriterState.CloseTag;\n        r += ']';\n      } // close tag\n\n\n      options.state = WriterState.CloseTag;\n      r += options.spaceBeforeSlash + '>';\n      r += this.endline(node, options, level);\n      options.state = WriterState.None;\n      this.closeNode(node, options, level);\n      return r;\n    }\n\n    element(node, options, level) {\n      var att, attLen, child, childNodeCount, firstChildNode, i, j, len, len1, len2, name, prettySuppressed, r, ratt, ref, ref1, ref2, ref3, rline;\n      level || (level = 0);\n      prettySuppressed = false; // open tag\n\n      this.openNode(node, options, level);\n      options.state = WriterState.OpenTag;\n      r = this.indent(node, options, level) + '<' + node.name; // attributes\n\n      if (options.pretty && options.width > 0) {\n        len = r.length;\n        ref = node.attribs;\n\n        for (name in ref) {\n          if (!hasProp.call(ref, name)) continue;\n          att = ref[name];\n          ratt = this.attribute(att, options, level);\n          attLen = ratt.length;\n\n          if (len + attLen > options.width) {\n            rline = this.indent(node, options, level + 1) + ratt;\n            r += this.endline(node, options, level) + rline;\n            len = rline.length;\n          } else {\n            rline = ' ' + ratt;\n            r += rline;\n            len += rline.length;\n          }\n        }\n      } else {\n        ref1 = node.attribs;\n\n        for (name in ref1) {\n          if (!hasProp.call(ref1, name)) continue;\n          att = ref1[name];\n          r += this.attribute(att, options, level);\n        }\n      }\n\n      childNodeCount = node.children.length;\n      firstChildNode = childNodeCount === 0 ? null : node.children[0];\n\n      if (childNodeCount === 0 || node.children.every(function (e) {\n        return (e.type === NodeType.Text || e.type === NodeType.Raw) && e.value === '';\n      })) {\n        // empty element\n        if (options.allowEmpty) {\n          r += '>';\n          options.state = WriterState.CloseTag;\n          r += '</' + node.name + '>' + this.endline(node, options, level);\n        } else {\n          options.state = WriterState.CloseTag;\n          r += options.spaceBeforeSlash + '/>' + this.endline(node, options, level);\n        }\n      } else if (options.pretty && childNodeCount === 1 && (firstChildNode.type === NodeType.Text || firstChildNode.type === NodeType.Raw) && firstChildNode.value != null) {\n        // do not indent text-only nodes\n        r += '>';\n        options.state = WriterState.InsideTag;\n        options.suppressPrettyCount++;\n        prettySuppressed = true;\n        r += this.writeChildNode(firstChildNode, options, level + 1);\n        options.suppressPrettyCount--;\n        prettySuppressed = false;\n        options.state = WriterState.CloseTag;\n        r += '</' + node.name + '>' + this.endline(node, options, level);\n      } else {\n        // if ANY are a text node, then suppress pretty now\n        if (options.dontPrettyTextNodes) {\n          ref2 = node.children;\n\n          for (i = 0, len1 = ref2.length; i < len1; i++) {\n            child = ref2[i];\n\n            if ((child.type === NodeType.Text || child.type === NodeType.Raw) && child.value != null) {\n              options.suppressPrettyCount++;\n              prettySuppressed = true;\n              break;\n            }\n          }\n        } // close the opening tag, after dealing with newline\n\n\n        r += '>' + this.endline(node, options, level);\n        options.state = WriterState.InsideTag;\n        ref3 = node.children; // inner tags\n\n        for (j = 0, len2 = ref3.length; j < len2; j++) {\n          child = ref3[j];\n          r += this.writeChildNode(child, options, level + 1);\n        } // close tag\n\n\n        options.state = WriterState.CloseTag;\n        r += this.indent(node, options, level) + '</' + node.name + '>';\n\n        if (prettySuppressed) {\n          options.suppressPrettyCount--;\n        }\n\n        r += this.endline(node, options, level);\n        options.state = WriterState.None;\n      }\n\n      this.closeNode(node, options, level);\n      return r;\n    }\n\n    writeChildNode(node, options, level) {\n      switch (node.type) {\n        case NodeType.CData:\n          return this.cdata(node, options, level);\n\n        case NodeType.Comment:\n          return this.comment(node, options, level);\n\n        case NodeType.Element:\n          return this.element(node, options, level);\n\n        case NodeType.Raw:\n          return this.raw(node, options, level);\n\n        case NodeType.Text:\n          return this.text(node, options, level);\n\n        case NodeType.ProcessingInstruction:\n          return this.processingInstruction(node, options, level);\n\n        case NodeType.Dummy:\n          return '';\n\n        case NodeType.Declaration:\n          return this.declaration(node, options, level);\n\n        case NodeType.DocType:\n          return this.docType(node, options, level);\n\n        case NodeType.AttributeDeclaration:\n          return this.dtdAttList(node, options, level);\n\n        case NodeType.ElementDeclaration:\n          return this.dtdElement(node, options, level);\n\n        case NodeType.EntityDeclaration:\n          return this.dtdEntity(node, options, level);\n\n        case NodeType.NotationDeclaration:\n          return this.dtdNotation(node, options, level);\n\n        default:\n          throw new Error(\"Unknown XML node type: \" + node.constructor.name);\n      }\n    }\n\n    processingInstruction(node, options, level) {\n      var r;\n      this.openNode(node, options, level);\n      options.state = WriterState.OpenTag;\n      r = this.indent(node, options, level) + '<?';\n      options.state = WriterState.InsideTag;\n      r += node.target;\n\n      if (node.value) {\n        r += ' ' + node.value;\n      }\n\n      options.state = WriterState.CloseTag;\n      r += options.spaceBeforeSlash + '?>';\n      r += this.endline(node, options, level);\n      options.state = WriterState.None;\n      this.closeNode(node, options, level);\n      return r;\n    }\n\n    raw(node, options, level) {\n      var r;\n      this.openNode(node, options, level);\n      options.state = WriterState.OpenTag;\n      r = this.indent(node, options, level);\n      options.state = WriterState.InsideTag;\n      r += node.value;\n      options.state = WriterState.CloseTag;\n      r += this.endline(node, options, level);\n      options.state = WriterState.None;\n      this.closeNode(node, options, level);\n      return r;\n    }\n\n    text(node, options, level) {\n      var r;\n      this.openNode(node, options, level);\n      options.state = WriterState.OpenTag;\n      r = this.indent(node, options, level);\n      options.state = WriterState.InsideTag;\n      r += node.value;\n      options.state = WriterState.CloseTag;\n      r += this.endline(node, options, level);\n      options.state = WriterState.None;\n      this.closeNode(node, options, level);\n      return r;\n    }\n\n    dtdAttList(node, options, level) {\n      var r;\n      this.openNode(node, options, level);\n      options.state = WriterState.OpenTag;\n      r = this.indent(node, options, level) + '<!ATTLIST';\n      options.state = WriterState.InsideTag;\n      r += ' ' + node.elementName + ' ' + node.attributeName + ' ' + node.attributeType;\n\n      if (node.defaultValueType !== '#DEFAULT') {\n        r += ' ' + node.defaultValueType;\n      }\n\n      if (node.defaultValue) {\n        r += ' \"' + node.defaultValue + '\"';\n      }\n\n      options.state = WriterState.CloseTag;\n      r += options.spaceBeforeSlash + '>' + this.endline(node, options, level);\n      options.state = WriterState.None;\n      this.closeNode(node, options, level);\n      return r;\n    }\n\n    dtdElement(node, options, level) {\n      var r;\n      this.openNode(node, options, level);\n      options.state = WriterState.OpenTag;\n      r = this.indent(node, options, level) + '<!ELEMENT';\n      options.state = WriterState.InsideTag;\n      r += ' ' + node.name + ' ' + node.value;\n      options.state = WriterState.CloseTag;\n      r += options.spaceBeforeSlash + '>' + this.endline(node, options, level);\n      options.state = WriterState.None;\n      this.closeNode(node, options, level);\n      return r;\n    }\n\n    dtdEntity(node, options, level) {\n      var r;\n      this.openNode(node, options, level);\n      options.state = WriterState.OpenTag;\n      r = this.indent(node, options, level) + '<!ENTITY';\n      options.state = WriterState.InsideTag;\n\n      if (node.pe) {\n        r += ' %';\n      }\n\n      r += ' ' + node.name;\n\n      if (node.value) {\n        r += ' \"' + node.value + '\"';\n      } else {\n        if (node.pubID && node.sysID) {\n          r += ' PUBLIC \"' + node.pubID + '\" \"' + node.sysID + '\"';\n        } else if (node.sysID) {\n          r += ' SYSTEM \"' + node.sysID + '\"';\n        }\n\n        if (node.nData) {\n          r += ' NDATA ' + node.nData;\n        }\n      }\n\n      options.state = WriterState.CloseTag;\n      r += options.spaceBeforeSlash + '>' + this.endline(node, options, level);\n      options.state = WriterState.None;\n      this.closeNode(node, options, level);\n      return r;\n    }\n\n    dtdNotation(node, options, level) {\n      var r;\n      this.openNode(node, options, level);\n      options.state = WriterState.OpenTag;\n      r = this.indent(node, options, level) + '<!NOTATION';\n      options.state = WriterState.InsideTag;\n      r += ' ' + node.name;\n\n      if (node.pubID && node.sysID) {\n        r += ' PUBLIC \"' + node.pubID + '\" \"' + node.sysID + '\"';\n      } else if (node.pubID) {\n        r += ' PUBLIC \"' + node.pubID + '\"';\n      } else if (node.sysID) {\n        r += ' SYSTEM \"' + node.sysID + '\"';\n      }\n\n      options.state = WriterState.CloseTag;\n      r += options.spaceBeforeSlash + '>' + this.endline(node, options, level);\n      options.state = WriterState.None;\n      this.closeNode(node, options, level);\n      return r;\n    }\n\n    openNode(node, options, level) {}\n\n    closeNode(node, options, level) {}\n\n    openAttribute(att, options, level) {}\n\n    closeAttribute(att, options, level) {}\n\n  };\n}).call(this);","map":{"version":3,"names":["NodeType","WriterState","XMLCData","XMLComment","XMLDTDAttList","XMLDTDElement","XMLDTDEntity","XMLDTDNotation","XMLDeclaration","XMLDocType","XMLDummy","XMLElement","XMLProcessingInstruction","XMLRaw","XMLText","XMLWriterBase","assign","hasProp","hasOwnProperty","require","module","exports","constructor","options","key","ref","value","writer","call","filterOptions","filteredOptions","ref1","ref2","ref3","ref4","ref5","ref6","ref7","pretty","allowEmpty","indent","newline","offset","width","dontPrettyTextNodes","dontprettytextnodes","spaceBeforeSlash","spacebeforeslash","suppressPrettyCount","user","state","None","node","level","indentLevel","Array","join","endline","attribute","att","r","openAttribute","name","closeAttribute","cdata","openNode","OpenTag","InsideTag","CloseTag","closeNode","comment","declaration","version","encoding","standalone","docType","child","i","len1","root","pubID","sysID","children","length","writeChildNode","element","attLen","childNodeCount","firstChildNode","j","len","len2","prettySuppressed","ratt","rline","attribs","every","e","type","Text","Raw","CData","Comment","Element","raw","text","ProcessingInstruction","processingInstruction","Dummy","Declaration","DocType","AttributeDeclaration","dtdAttList","ElementDeclaration","dtdElement","EntityDeclaration","dtdEntity","NotationDeclaration","dtdNotation","Error","target","elementName","attributeName","attributeType","defaultValueType","defaultValue","pe","nData"],"sources":["/Users/hooniesun/rmit/fwp/assessment1/lan/node_modules/xmlbuilder/lib/XMLWriterBase.js"],"sourcesContent":["// Generated by CoffeeScript 2.4.1\n(function() {\n  var NodeType, WriterState, XMLCData, XMLComment, XMLDTDAttList, XMLDTDElement, XMLDTDEntity, XMLDTDNotation, XMLDeclaration, XMLDocType, XMLDummy, XMLElement, XMLProcessingInstruction, XMLRaw, XMLText, XMLWriterBase, assign,\n    hasProp = {}.hasOwnProperty;\n\n  ({assign} = require('./Utility'));\n\n  NodeType = require('./NodeType');\n\n  XMLDeclaration = require('./XMLDeclaration');\n\n  XMLDocType = require('./XMLDocType');\n\n  XMLCData = require('./XMLCData');\n\n  XMLComment = require('./XMLComment');\n\n  XMLElement = require('./XMLElement');\n\n  XMLRaw = require('./XMLRaw');\n\n  XMLText = require('./XMLText');\n\n  XMLProcessingInstruction = require('./XMLProcessingInstruction');\n\n  XMLDummy = require('./XMLDummy');\n\n  XMLDTDAttList = require('./XMLDTDAttList');\n\n  XMLDTDElement = require('./XMLDTDElement');\n\n  XMLDTDEntity = require('./XMLDTDEntity');\n\n  XMLDTDNotation = require('./XMLDTDNotation');\n\n  WriterState = require('./WriterState');\n\n  // Base class for XML writers\n  module.exports = XMLWriterBase = class XMLWriterBase {\n    // Initializes a new instance of `XMLWriterBase`\n\n    // `options.pretty` pretty prints the result\n    // `options.indent` indentation string\n    // `options.newline` newline sequence\n    // `options.offset` a fixed number of indentations to add to every line\n    // `options.width` maximum column width\n    // `options.allowEmpty` do not self close empty element tags\n    // 'options.dontPrettyTextNodes' if any text is present in node, don't indent or LF\n    // `options.spaceBeforeSlash` add a space before the closing slash of empty elements\n    constructor(options) {\n      var key, ref, value;\n      options || (options = {});\n      this.options = options;\n      ref = options.writer || {};\n      for (key in ref) {\n        if (!hasProp.call(ref, key)) continue;\n        value = ref[key];\n        this[\"_\" + key] = this[key];\n        this[key] = value;\n      }\n    }\n\n    // Filters writer options and provides defaults\n\n    // `options` writer options\n    filterOptions(options) {\n      var filteredOptions, ref, ref1, ref2, ref3, ref4, ref5, ref6, ref7;\n      options || (options = {});\n      options = assign({}, this.options, options);\n      filteredOptions = {\n        writer: this\n      };\n      filteredOptions.pretty = options.pretty || false;\n      filteredOptions.allowEmpty = options.allowEmpty || false;\n      filteredOptions.indent = (ref = options.indent) != null ? ref : '  ';\n      filteredOptions.newline = (ref1 = options.newline) != null ? ref1 : '\\n';\n      filteredOptions.offset = (ref2 = options.offset) != null ? ref2 : 0;\n      filteredOptions.width = (ref3 = options.width) != null ? ref3 : 0;\n      filteredOptions.dontPrettyTextNodes = (ref4 = (ref5 = options.dontPrettyTextNodes) != null ? ref5 : options.dontprettytextnodes) != null ? ref4 : 0;\n      filteredOptions.spaceBeforeSlash = (ref6 = (ref7 = options.spaceBeforeSlash) != null ? ref7 : options.spacebeforeslash) != null ? ref6 : '';\n      if (filteredOptions.spaceBeforeSlash === true) {\n        filteredOptions.spaceBeforeSlash = ' ';\n      }\n      filteredOptions.suppressPrettyCount = 0;\n      filteredOptions.user = {};\n      filteredOptions.state = WriterState.None;\n      return filteredOptions;\n    }\n\n    // Returns the indentation string for the current level\n\n    // `node` current node\n    // `options` writer options\n    // `level` current indentation level\n    indent(node, options, level) {\n      var indentLevel;\n      if (!options.pretty || options.suppressPrettyCount) {\n        return '';\n      } else if (options.pretty) {\n        indentLevel = (level || 0) + options.offset + 1;\n        if (indentLevel > 0) {\n          return new Array(indentLevel).join(options.indent);\n        }\n      }\n      return '';\n    }\n\n    // Returns the newline string\n\n    // `node` current node\n    // `options` writer options\n    // `level` current indentation level\n    endline(node, options, level) {\n      if (!options.pretty || options.suppressPrettyCount) {\n        return '';\n      } else {\n        return options.newline;\n      }\n    }\n\n    attribute(att, options, level) {\n      var r;\n      this.openAttribute(att, options, level);\n      if (options.pretty && options.width > 0) {\n        r = att.name + '=\"' + att.value + '\"';\n      } else {\n        r = ' ' + att.name + '=\"' + att.value + '\"';\n      }\n      this.closeAttribute(att, options, level);\n      return r;\n    }\n\n    cdata(node, options, level) {\n      var r;\n      this.openNode(node, options, level);\n      options.state = WriterState.OpenTag;\n      r = this.indent(node, options, level) + '<![CDATA[';\n      options.state = WriterState.InsideTag;\n      r += node.value;\n      options.state = WriterState.CloseTag;\n      r += ']]>' + this.endline(node, options, level);\n      options.state = WriterState.None;\n      this.closeNode(node, options, level);\n      return r;\n    }\n\n    comment(node, options, level) {\n      var r;\n      this.openNode(node, options, level);\n      options.state = WriterState.OpenTag;\n      r = this.indent(node, options, level) + '<!-- ';\n      options.state = WriterState.InsideTag;\n      r += node.value;\n      options.state = WriterState.CloseTag;\n      r += ' -->' + this.endline(node, options, level);\n      options.state = WriterState.None;\n      this.closeNode(node, options, level);\n      return r;\n    }\n\n    declaration(node, options, level) {\n      var r;\n      this.openNode(node, options, level);\n      options.state = WriterState.OpenTag;\n      r = this.indent(node, options, level) + '<?xml';\n      options.state = WriterState.InsideTag;\n      r += ' version=\"' + node.version + '\"';\n      if (node.encoding != null) {\n        r += ' encoding=\"' + node.encoding + '\"';\n      }\n      if (node.standalone != null) {\n        r += ' standalone=\"' + node.standalone + '\"';\n      }\n      options.state = WriterState.CloseTag;\n      r += options.spaceBeforeSlash + '?>';\n      r += this.endline(node, options, level);\n      options.state = WriterState.None;\n      this.closeNode(node, options, level);\n      return r;\n    }\n\n    docType(node, options, level) {\n      var child, i, len1, r, ref;\n      level || (level = 0);\n      this.openNode(node, options, level);\n      options.state = WriterState.OpenTag;\n      r = this.indent(node, options, level);\n      r += '<!DOCTYPE ' + node.root().name;\n      // external identifier\n      if (node.pubID && node.sysID) {\n        r += ' PUBLIC \"' + node.pubID + '\" \"' + node.sysID + '\"';\n      } else if (node.sysID) {\n        r += ' SYSTEM \"' + node.sysID + '\"';\n      }\n      // internal subset\n      if (node.children.length > 0) {\n        r += ' [';\n        r += this.endline(node, options, level);\n        options.state = WriterState.InsideTag;\n        ref = node.children;\n        for (i = 0, len1 = ref.length; i < len1; i++) {\n          child = ref[i];\n          r += this.writeChildNode(child, options, level + 1);\n        }\n        options.state = WriterState.CloseTag;\n        r += ']';\n      }\n      // close tag\n      options.state = WriterState.CloseTag;\n      r += options.spaceBeforeSlash + '>';\n      r += this.endline(node, options, level);\n      options.state = WriterState.None;\n      this.closeNode(node, options, level);\n      return r;\n    }\n\n    element(node, options, level) {\n      var att, attLen, child, childNodeCount, firstChildNode, i, j, len, len1, len2, name, prettySuppressed, r, ratt, ref, ref1, ref2, ref3, rline;\n      level || (level = 0);\n      prettySuppressed = false;\n      // open tag\n      this.openNode(node, options, level);\n      options.state = WriterState.OpenTag;\n      r = this.indent(node, options, level) + '<' + node.name;\n      // attributes\n      if (options.pretty && options.width > 0) {\n        len = r.length;\n        ref = node.attribs;\n        for (name in ref) {\n          if (!hasProp.call(ref, name)) continue;\n          att = ref[name];\n          ratt = this.attribute(att, options, level);\n          attLen = ratt.length;\n          if (len + attLen > options.width) {\n            rline = this.indent(node, options, level + 1) + ratt;\n            r += this.endline(node, options, level) + rline;\n            len = rline.length;\n          } else {\n            rline = ' ' + ratt;\n            r += rline;\n            len += rline.length;\n          }\n        }\n      } else {\n        ref1 = node.attribs;\n        for (name in ref1) {\n          if (!hasProp.call(ref1, name)) continue;\n          att = ref1[name];\n          r += this.attribute(att, options, level);\n        }\n      }\n      childNodeCount = node.children.length;\n      firstChildNode = childNodeCount === 0 ? null : node.children[0];\n      if (childNodeCount === 0 || node.children.every(function(e) {\n        return (e.type === NodeType.Text || e.type === NodeType.Raw) && e.value === '';\n      })) {\n        // empty element\n        if (options.allowEmpty) {\n          r += '>';\n          options.state = WriterState.CloseTag;\n          r += '</' + node.name + '>' + this.endline(node, options, level);\n        } else {\n          options.state = WriterState.CloseTag;\n          r += options.spaceBeforeSlash + '/>' + this.endline(node, options, level);\n        }\n      } else if (options.pretty && childNodeCount === 1 && (firstChildNode.type === NodeType.Text || firstChildNode.type === NodeType.Raw) && (firstChildNode.value != null)) {\n        // do not indent text-only nodes\n        r += '>';\n        options.state = WriterState.InsideTag;\n        options.suppressPrettyCount++;\n        prettySuppressed = true;\n        r += this.writeChildNode(firstChildNode, options, level + 1);\n        options.suppressPrettyCount--;\n        prettySuppressed = false;\n        options.state = WriterState.CloseTag;\n        r += '</' + node.name + '>' + this.endline(node, options, level);\n      } else {\n        // if ANY are a text node, then suppress pretty now\n        if (options.dontPrettyTextNodes) {\n          ref2 = node.children;\n          for (i = 0, len1 = ref2.length; i < len1; i++) {\n            child = ref2[i];\n            if ((child.type === NodeType.Text || child.type === NodeType.Raw) && (child.value != null)) {\n              options.suppressPrettyCount++;\n              prettySuppressed = true;\n              break;\n            }\n          }\n        }\n        // close the opening tag, after dealing with newline\n        r += '>' + this.endline(node, options, level);\n        options.state = WriterState.InsideTag;\n        ref3 = node.children;\n        // inner tags\n        for (j = 0, len2 = ref3.length; j < len2; j++) {\n          child = ref3[j];\n          r += this.writeChildNode(child, options, level + 1);\n        }\n        // close tag\n        options.state = WriterState.CloseTag;\n        r += this.indent(node, options, level) + '</' + node.name + '>';\n        if (prettySuppressed) {\n          options.suppressPrettyCount--;\n        }\n        r += this.endline(node, options, level);\n        options.state = WriterState.None;\n      }\n      this.closeNode(node, options, level);\n      return r;\n    }\n\n    writeChildNode(node, options, level) {\n      switch (node.type) {\n        case NodeType.CData:\n          return this.cdata(node, options, level);\n        case NodeType.Comment:\n          return this.comment(node, options, level);\n        case NodeType.Element:\n          return this.element(node, options, level);\n        case NodeType.Raw:\n          return this.raw(node, options, level);\n        case NodeType.Text:\n          return this.text(node, options, level);\n        case NodeType.ProcessingInstruction:\n          return this.processingInstruction(node, options, level);\n        case NodeType.Dummy:\n          return '';\n        case NodeType.Declaration:\n          return this.declaration(node, options, level);\n        case NodeType.DocType:\n          return this.docType(node, options, level);\n        case NodeType.AttributeDeclaration:\n          return this.dtdAttList(node, options, level);\n        case NodeType.ElementDeclaration:\n          return this.dtdElement(node, options, level);\n        case NodeType.EntityDeclaration:\n          return this.dtdEntity(node, options, level);\n        case NodeType.NotationDeclaration:\n          return this.dtdNotation(node, options, level);\n        default:\n          throw new Error(\"Unknown XML node type: \" + node.constructor.name);\n      }\n    }\n\n    processingInstruction(node, options, level) {\n      var r;\n      this.openNode(node, options, level);\n      options.state = WriterState.OpenTag;\n      r = this.indent(node, options, level) + '<?';\n      options.state = WriterState.InsideTag;\n      r += node.target;\n      if (node.value) {\n        r += ' ' + node.value;\n      }\n      options.state = WriterState.CloseTag;\n      r += options.spaceBeforeSlash + '?>';\n      r += this.endline(node, options, level);\n      options.state = WriterState.None;\n      this.closeNode(node, options, level);\n      return r;\n    }\n\n    raw(node, options, level) {\n      var r;\n      this.openNode(node, options, level);\n      options.state = WriterState.OpenTag;\n      r = this.indent(node, options, level);\n      options.state = WriterState.InsideTag;\n      r += node.value;\n      options.state = WriterState.CloseTag;\n      r += this.endline(node, options, level);\n      options.state = WriterState.None;\n      this.closeNode(node, options, level);\n      return r;\n    }\n\n    text(node, options, level) {\n      var r;\n      this.openNode(node, options, level);\n      options.state = WriterState.OpenTag;\n      r = this.indent(node, options, level);\n      options.state = WriterState.InsideTag;\n      r += node.value;\n      options.state = WriterState.CloseTag;\n      r += this.endline(node, options, level);\n      options.state = WriterState.None;\n      this.closeNode(node, options, level);\n      return r;\n    }\n\n    dtdAttList(node, options, level) {\n      var r;\n      this.openNode(node, options, level);\n      options.state = WriterState.OpenTag;\n      r = this.indent(node, options, level) + '<!ATTLIST';\n      options.state = WriterState.InsideTag;\n      r += ' ' + node.elementName + ' ' + node.attributeName + ' ' + node.attributeType;\n      if (node.defaultValueType !== '#DEFAULT') {\n        r += ' ' + node.defaultValueType;\n      }\n      if (node.defaultValue) {\n        r += ' \"' + node.defaultValue + '\"';\n      }\n      options.state = WriterState.CloseTag;\n      r += options.spaceBeforeSlash + '>' + this.endline(node, options, level);\n      options.state = WriterState.None;\n      this.closeNode(node, options, level);\n      return r;\n    }\n\n    dtdElement(node, options, level) {\n      var r;\n      this.openNode(node, options, level);\n      options.state = WriterState.OpenTag;\n      r = this.indent(node, options, level) + '<!ELEMENT';\n      options.state = WriterState.InsideTag;\n      r += ' ' + node.name + ' ' + node.value;\n      options.state = WriterState.CloseTag;\n      r += options.spaceBeforeSlash + '>' + this.endline(node, options, level);\n      options.state = WriterState.None;\n      this.closeNode(node, options, level);\n      return r;\n    }\n\n    dtdEntity(node, options, level) {\n      var r;\n      this.openNode(node, options, level);\n      options.state = WriterState.OpenTag;\n      r = this.indent(node, options, level) + '<!ENTITY';\n      options.state = WriterState.InsideTag;\n      if (node.pe) {\n        r += ' %';\n      }\n      r += ' ' + node.name;\n      if (node.value) {\n        r += ' \"' + node.value + '\"';\n      } else {\n        if (node.pubID && node.sysID) {\n          r += ' PUBLIC \"' + node.pubID + '\" \"' + node.sysID + '\"';\n        } else if (node.sysID) {\n          r += ' SYSTEM \"' + node.sysID + '\"';\n        }\n        if (node.nData) {\n          r += ' NDATA ' + node.nData;\n        }\n      }\n      options.state = WriterState.CloseTag;\n      r += options.spaceBeforeSlash + '>' + this.endline(node, options, level);\n      options.state = WriterState.None;\n      this.closeNode(node, options, level);\n      return r;\n    }\n\n    dtdNotation(node, options, level) {\n      var r;\n      this.openNode(node, options, level);\n      options.state = WriterState.OpenTag;\n      r = this.indent(node, options, level) + '<!NOTATION';\n      options.state = WriterState.InsideTag;\n      r += ' ' + node.name;\n      if (node.pubID && node.sysID) {\n        r += ' PUBLIC \"' + node.pubID + '\" \"' + node.sysID + '\"';\n      } else if (node.pubID) {\n        r += ' PUBLIC \"' + node.pubID + '\"';\n      } else if (node.sysID) {\n        r += ' SYSTEM \"' + node.sysID + '\"';\n      }\n      options.state = WriterState.CloseTag;\n      r += options.spaceBeforeSlash + '>' + this.endline(node, options, level);\n      options.state = WriterState.None;\n      this.closeNode(node, options, level);\n      return r;\n    }\n\n    openNode(node, options, level) {}\n\n    closeNode(node, options, level) {}\n\n    openAttribute(att, options, level) {}\n\n    closeAttribute(att, options, level) {}\n\n  };\n\n}).call(this);\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}