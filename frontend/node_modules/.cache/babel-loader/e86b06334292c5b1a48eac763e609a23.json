{"ast":null,"code":"'use strict';\n/* jshint ignore:start */\n\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n\n/* jshint ignore:end */\n\nvar Q = require('q');\n/* jshint ignore:line */\n\n\nvar _ = require('lodash');\n/* jshint ignore:line */\n\n\nvar util = require('util');\n/* jshint ignore:line */\n\n\nvar FeedbackList = require('./message/feedback').FeedbackList;\n\nvar MediaList = require('./message/media').MediaList;\n\nvar Page = require('../../../../base/Page');\n/* jshint ignore:line */\n\n\nvar deserialize = require('../../../../base/deserialize');\n/* jshint ignore:line */\n\n\nvar serialize = require('../../../../base/serialize');\n/* jshint ignore:line */\n\n\nvar values = require('../../../../base/values');\n/* jshint ignore:line */\n\n\nvar MessageList;\nvar MessagePage;\nvar MessageInstance;\nvar MessageContext;\n/* jshint ignore:start */\n\n/**\n * Initialize the MessageList\n *\n * @constructor Twilio.Api.V2010.AccountContext.MessageList\n *\n * @param {Twilio.Api.V2010} version - Version of the resource\n * @param {string} accountSid - The SID of the Account that created the resource\n */\n\n/* jshint ignore:end */\n\nMessageList = function MessageList(version, accountSid) {\n  /* jshint ignore:start */\n\n  /**\n   * @function messages\n   * @memberof Twilio.Api.V2010.AccountContext#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Api.V2010.AccountContext.MessageContext}\n   */\n\n  /* jshint ignore:end */\n  function MessageListInstance(sid) {\n    return MessageListInstance.get(sid);\n  }\n\n  MessageListInstance._version = version; // Path Solution\n\n  MessageListInstance._solution = {\n    accountSid: accountSid\n  };\n  MessageListInstance._uri = `/Accounts/${accountSid}/Messages.json`;\n  /* jshint ignore:start */\n\n  /**\n   * create a MessageInstance\n   *\n   * @function create\n   * @memberof Twilio.Api.V2010.AccountContext.MessageList#\n   *\n   * @param {object} opts - Options for request\n   * @param {string} opts.to - The destination phone number\n   * @param {string} [opts.statusCallback] -\n   *          The URL we should call to send status information to your application\n   * @param {string} [opts.applicationSid] - The application to use for callbacks\n   * @param {number} [opts.maxPrice] -\n   *          The total maximum price up to 4 decimal places in US dollars acceptable for the message to be delivered.\n   * @param {boolean} [opts.provideFeedback] -\n   *          Whether to confirm delivery of the message\n   * @param {number} [opts.attempt] -\n   *          Total numer of attempts made , this inclusive to send out the message\n   * @param {number} [opts.validityPeriod] -\n   *          The number of seconds that the message can remain in our outgoing queue.\n   * @param {boolean} [opts.forceDelivery] - Reserved\n   * @param {message.content_retention} [opts.contentRetention] -\n   *          Determines if the message content can be stored or redacted based on privacy settings\n   * @param {message.address_retention} [opts.addressRetention] -\n   *          Determines if the address can be stored or obfuscated based on privacy settings\n   * @param {boolean} [opts.smartEncoded] -\n   *          Whether to detect Unicode characters that have a similar GSM-7 character and replace them\n   * @param {string|list} [opts.persistentAction] -\n   *          Rich actions for Channels Messages.\n   * @param {message.schedule_type} [opts.scheduleType] -\n   *          Pass the value `fixed` to schedule a message at a fixed time.\n   * @param {Date} [opts.sendAt] -\n   *          The time that Twilio will send the message. Must be in ISO 8601 format.\n   * @param {boolean} [opts.sendAsMms] -\n   *          If set to True, Twilio will deliver the message as a single MMS message, regardless of the presence of media.\n   * @param {string} [opts.from] - The phone number that initiated the message\n   * @param {string} [opts.messagingServiceSid] -\n   *          The SID of the Messaging Service you want to associate with the message.\n   * @param {string} [opts.body] -\n   *          The text of the message you want to send. Can be up to 1,600 characters in length.\n   * @param {string|list} [opts.mediaUrl] -\n   *          The URL of the media to send with the message\n   * @param {function} [callback] - Callback to handle processed record\n   *\n   * @returns {Promise} Resolves to processed MessageInstance\n   */\n\n  /* jshint ignore:end */\n\n  MessageListInstance.create = function create(opts, callback) {\n    if (_.isUndefined(opts)) {\n      throw new Error('Required parameter \"opts\" missing.');\n    }\n\n    if (_.isUndefined(opts['to'])) {\n      throw new Error('Required parameter \"opts[\\'to\\']\" missing.');\n    }\n\n    var deferred = Q.defer();\n    var data = values.of({\n      'To': _.get(opts, 'to'),\n      'From': _.get(opts, 'from'),\n      'MessagingServiceSid': _.get(opts, 'messagingServiceSid'),\n      'Body': _.get(opts, 'body'),\n      'MediaUrl': serialize.map(_.get(opts, 'mediaUrl'), function (e) {\n        return e;\n      }),\n      'StatusCallback': _.get(opts, 'statusCallback'),\n      'ApplicationSid': _.get(opts, 'applicationSid'),\n      'MaxPrice': _.get(opts, 'maxPrice'),\n      'ProvideFeedback': serialize.bool(_.get(opts, 'provideFeedback')),\n      'Attempt': _.get(opts, 'attempt'),\n      'ValidityPeriod': _.get(opts, 'validityPeriod'),\n      'ForceDelivery': serialize.bool(_.get(opts, 'forceDelivery')),\n      'ContentRetention': _.get(opts, 'contentRetention'),\n      'AddressRetention': _.get(opts, 'addressRetention'),\n      'SmartEncoded': serialize.bool(_.get(opts, 'smartEncoded')),\n      'PersistentAction': serialize.map(_.get(opts, 'persistentAction'), function (e) {\n        return e;\n      }),\n      'ScheduleType': _.get(opts, 'scheduleType'),\n      'SendAt': serialize.iso8601DateTime(_.get(opts, 'sendAt')),\n      'SendAsMms': serialize.bool(_.get(opts, 'sendAsMms'))\n    });\n\n    var promise = this._version.create({\n      uri: this._uri,\n      method: 'POST',\n      data: data\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new MessageInstance(this._version, payload, this._solution.accountSid, this._solution.sid));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Streams MessageInstance records from the API.\n   *\n   * This operation lazily loads records as efficiently as possible until the limit\n   * is reached.\n   *\n   * The results are passed into the callback function, so this operation is memory\n   * efficient.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function each\n   * @memberof Twilio.Api.V2010.AccountContext.MessageList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.to] - Filter by messages sent to this number\n   * @param {string} [opts.from] - Filter by from number\n   * @param {Date} [opts.dateSentBefore] - Filter by date sent\n   * @param {Date} [opts.dateSent] - Filter by date sent\n   * @param {Date} [opts.dateSentAfter] - Filter by date sent\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         each() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no pageSize is defined but a limit is defined,\n   *         each() will attempt to read the limit with the most efficient\n   *         page size, i.e. min(limit, 1000)\n   * @param {Function} [opts.callback] -\n   *         Function to process each record. If this and a positional\n   *         callback are passed, this one will be used\n   * @param {Function} [opts.done] -\n   *          Function to be called upon completion of streaming\n   * @param {Function} [callback] - Function to process each record\n   */\n\n  /* jshint ignore:end */\n\n\n  MessageListInstance.each = function each(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n\n    if (opts.callback) {\n      callback = opts.callback;\n    }\n\n    if (_.isUndefined(callback)) {\n      throw new Error('Callback function must be provided');\n    }\n\n    var done = false;\n    var currentPage = 1;\n    var currentResource = 0;\n\n    var limits = this._version.readLimits({\n      limit: opts.limit,\n      pageSize: opts.pageSize\n    });\n\n    function onComplete(error) {\n      done = true;\n\n      if (_.isFunction(opts.done)) {\n        opts.done(error);\n      }\n    }\n\n    function fetchNextPage(fn) {\n      var promise = fn();\n\n      if (_.isUndefined(promise)) {\n        onComplete();\n        return;\n      }\n\n      promise.then(function (page) {\n        _.each(page.instances, function (instance) {\n          if (done || !_.isUndefined(opts.limit) && currentResource >= opts.limit) {\n            done = true;\n            return false;\n          }\n\n          currentResource++;\n          callback(instance, onComplete);\n        });\n\n        if (!done) {\n          currentPage++;\n          fetchNextPage(_.bind(page.nextPage, page));\n        } else {\n          onComplete();\n        }\n      });\n      promise.catch(onComplete);\n    }\n\n    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Lists MessageInstance records from the API as a list.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function list\n   * @memberof Twilio.Api.V2010.AccountContext.MessageList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.to] - Filter by messages sent to this number\n   * @param {string} [opts.from] - Filter by from number\n   * @param {Date} [opts.dateSentBefore] - Filter by date sent\n   * @param {Date} [opts.dateSent] - Filter by date sent\n   * @param {Date} [opts.dateSentAfter] - Filter by date sent\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         list() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no page_size is defined but a limit is defined,\n   *         list() will attempt to read the limit with the most\n   *         efficient page size, i.e. min(limit, 1000)\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  MessageListInstance.list = function list(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n    var deferred = Q.defer();\n    var allResources = [];\n\n    opts.callback = function (resource, done) {\n      allResources.push(resource);\n\n      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {\n        done();\n      }\n    };\n\n    opts.done = function (error) {\n      if (_.isUndefined(error)) {\n        deferred.resolve(allResources);\n      } else {\n        deferred.reject(error);\n      }\n    };\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    this.each(opts);\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Retrieve a single page of MessageInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function page\n   * @memberof Twilio.Api.V2010.AccountContext.MessageList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.to] - Filter by messages sent to this number\n   * @param {string} [opts.from] - Filter by from number\n   * @param {Date} [opts.dateSentBefore] - Filter by date sent\n   * @param {Date} [opts.dateSent] - Filter by date sent\n   * @param {Date} [opts.dateSentAfter] - Filter by date sent\n   * @param {string} [opts.pageToken] - PageToken provided by the API\n   * @param {number} [opts.pageNumber] -\n   *          Page Number, this value is simply for client state\n   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  MessageListInstance.page = function page(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n    var deferred = Q.defer();\n    var data = values.of({\n      'To': _.get(opts, 'to'),\n      'From': _.get(opts, 'from'),\n      'DateSent<': serialize.iso8601DateTime(_.get(opts, 'dateSentBefore')),\n      'DateSent': serialize.iso8601DateTime(_.get(opts, 'dateSent')),\n      'DateSent>': serialize.iso8601DateTime(_.get(opts, 'dateSentAfter')),\n      'PageToken': opts.pageToken,\n      'Page': opts.pageNumber,\n      'PageSize': opts.pageSize\n    });\n\n    var promise = this._version.page({\n      uri: this._uri,\n      method: 'GET',\n      params: data\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new MessagePage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Retrieve a single target page of MessageInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function getPage\n   * @memberof Twilio.Api.V2010.AccountContext.MessageList#\n   *\n   * @param {string} [targetUrl] - API-generated URL for the requested results page\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  MessageListInstance.getPage = function getPage(targetUrl, callback) {\n    var deferred = Q.defer();\n\n    var promise = this._version._domain.twilio.request({\n      method: 'GET',\n      uri: targetUrl\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new MessagePage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Constructs a message\n   *\n   * @function get\n   * @memberof Twilio.Api.V2010.AccountContext.MessageList#\n   *\n   * @param {string} sid - The unique string that identifies the resource\n   *\n   * @returns {Twilio.Api.V2010.AccountContext.MessageContext}\n   */\n\n  /* jshint ignore:end */\n\n\n  MessageListInstance.get = function get(sid) {\n    return new MessageContext(this._version, this._solution.accountSid, sid);\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Api.V2010.AccountContext.MessageList#\n   *\n   * @returns Object\n   */\n\n  /* jshint ignore:end */\n\n\n  MessageListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n\n  MessageListInstance[util.inspect.custom] = function inspect(depth, options) {\n    return util.inspect(this.toJSON(), options);\n  };\n\n  return MessageListInstance;\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the MessagePage\n *\n * @constructor Twilio.Api.V2010.AccountContext.MessagePage\n *\n * @param {V2010} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {MessageSolution} solution - Path solution\n *\n * @returns MessagePage\n */\n\n/* jshint ignore:end */\n\n\nMessagePage = function MessagePage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n\n_.extend(MessagePage.prototype, Page.prototype);\n\nMessagePage.prototype.constructor = MessagePage;\n/* jshint ignore:start */\n\n/**\n * Build an instance of MessageInstance\n *\n * @function getInstance\n * @memberof Twilio.Api.V2010.AccountContext.MessagePage#\n *\n * @param {MessagePayload} payload - Payload response from the API\n *\n * @returns MessageInstance\n */\n\n/* jshint ignore:end */\n\nMessagePage.prototype.getInstance = function getInstance(payload) {\n  return new MessageInstance(this._version, payload, this._solution.accountSid);\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Api.V2010.AccountContext.MessagePage#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nMessagePage.prototype.toJSON = function toJSON() {\n  let clone = {};\n\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n\n  return clone;\n};\n\nMessagePage.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the MessageContext\n *\n * @constructor Twilio.Api.V2010.AccountContext.MessageInstance\n *\n * @property {string} body - The message text\n * @property {string} numSegments -\n *          The number of messages used to deliver the message body\n * @property {message.direction} direction - The direction of the message\n * @property {string} from - The phone number that initiated the message\n * @property {string} to - The phone number that received the message\n * @property {Date} dateUpdated -\n *          The RFC 2822 date and time in GMT that the resource was last updated\n * @property {string} price - The amount billed for the message\n * @property {string} errorMessage - The description of the error_code\n * @property {string} uri -\n *          The URI of the resource, relative to `https://api.twilio.com`\n * @property {string} accountSid - The SID of the Account that created the resource\n * @property {string} numMedia -\n *          The number of media files associated with the message\n * @property {message.status} status - The status of the message\n * @property {string} messagingServiceSid -\n *          The SID of the Messaging Service used with the message.\n * @property {string} sid - The unique string that identifies the resource\n * @property {Date} dateSent -\n *          The RFC 2822 date and time in GMT when the message was sent\n * @property {Date} dateCreated -\n *          The RFC 2822 date and time in GMT that the resource was created\n * @property {number} errorCode - The error code associated with the message\n * @property {string} priceUnit - The currency in which price is measured\n * @property {string} apiVersion - The API version used to process the message\n * @property {string} subresourceUris -\n *          A list of related resources identified by their relative URIs\n *\n * @param {V2010} version - Version of the resource\n * @param {MessagePayload} payload - The instance payload\n * @param {sid} accountSid - The SID of the Account that created the resource\n * @param {sid} sid - The unique string that identifies the resource\n */\n\n/* jshint ignore:end */\n\n\nMessageInstance = function MessageInstance(version, payload, accountSid, sid) {\n  this._version = version; // Marshaled Properties\n\n  this.body = payload.body; // jshint ignore:line\n\n  this.numSegments = payload.num_segments; // jshint ignore:line\n\n  this.direction = payload.direction; // jshint ignore:line\n\n  this.from = payload.from; // jshint ignore:line\n\n  this.to = payload.to; // jshint ignore:line\n\n  this.dateUpdated = deserialize.rfc2822DateTime(payload.date_updated); // jshint ignore:line\n\n  this.price = payload.price; // jshint ignore:line\n\n  this.errorMessage = payload.error_message; // jshint ignore:line\n\n  this.uri = payload.uri; // jshint ignore:line\n\n  this.accountSid = payload.account_sid; // jshint ignore:line\n\n  this.numMedia = payload.num_media; // jshint ignore:line\n\n  this.status = payload.status; // jshint ignore:line\n\n  this.messagingServiceSid = payload.messaging_service_sid; // jshint ignore:line\n\n  this.sid = payload.sid; // jshint ignore:line\n\n  this.dateSent = deserialize.rfc2822DateTime(payload.date_sent); // jshint ignore:line\n\n  this.dateCreated = deserialize.rfc2822DateTime(payload.date_created); // jshint ignore:line\n\n  this.errorCode = deserialize.integer(payload.error_code); // jshint ignore:line\n\n  this.priceUnit = payload.price_unit; // jshint ignore:line\n\n  this.apiVersion = payload.api_version; // jshint ignore:line\n\n  this.subresourceUris = payload.subresource_uris; // jshint ignore:line\n  // Context\n\n  this._context = undefined;\n  this._solution = {\n    accountSid: accountSid,\n    sid: sid || this.sid\n  };\n};\n\nObject.defineProperty(MessageInstance.prototype, '_proxy', {\n  get: function () {\n    if (!this._context) {\n      this._context = new MessageContext(this._version, this._solution.accountSid, this._solution.sid);\n    }\n\n    return this._context;\n  }\n});\n/* jshint ignore:start */\n\n/**\n * remove a MessageInstance\n *\n * @function remove\n * @memberof Twilio.Api.V2010.AccountContext.MessageInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed MessageInstance\n */\n\n/* jshint ignore:end */\n\nMessageInstance.prototype.remove = function remove(callback) {\n  return this._proxy.remove(callback);\n};\n/* jshint ignore:start */\n\n/**\n * fetch a MessageInstance\n *\n * @function fetch\n * @memberof Twilio.Api.V2010.AccountContext.MessageInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed MessageInstance\n */\n\n/* jshint ignore:end */\n\n\nMessageInstance.prototype.fetch = function fetch(callback) {\n  return this._proxy.fetch(callback);\n};\n/* jshint ignore:start */\n\n/**\n * update a MessageInstance\n *\n * @function update\n * @memberof Twilio.Api.V2010.AccountContext.MessageInstance#\n *\n * @param {object} [opts] - Options for request\n * @param {string} [opts.body] - The text of the message you want to send\n * @param {message.update_status} [opts.status] -\n *          Set as `canceled` to cancel a message from being sent.\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed MessageInstance\n */\n\n/* jshint ignore:end */\n\n\nMessageInstance.prototype.update = function update(opts, callback) {\n  return this._proxy.update(opts, callback);\n};\n/* jshint ignore:start */\n\n/**\n * Access the media\n *\n * @function media\n * @memberof Twilio.Api.V2010.AccountContext.MessageInstance#\n *\n * @returns {Twilio.Api.V2010.AccountContext.MessageContext.MediaList}\n */\n\n/* jshint ignore:end */\n\n\nMessageInstance.prototype.media = function media() {\n  return this._proxy.media;\n};\n/* jshint ignore:start */\n\n/**\n * Access the feedback\n *\n * @function feedback\n * @memberof Twilio.Api.V2010.AccountContext.MessageInstance#\n *\n * @returns {Twilio.Api.V2010.AccountContext.MessageContext.FeedbackList}\n */\n\n/* jshint ignore:end */\n\n\nMessageInstance.prototype.feedback = function feedback() {\n  return this._proxy.feedback;\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Api.V2010.AccountContext.MessageInstance#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nMessageInstance.prototype.toJSON = function toJSON() {\n  let clone = {};\n\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n\n  return clone;\n};\n\nMessageInstance.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the MessageContext\n *\n * @constructor Twilio.Api.V2010.AccountContext.MessageContext\n *\n * @property {Twilio.Api.V2010.AccountContext.MessageContext.MediaList} media -\n *          media resource\n * @property {Twilio.Api.V2010.AccountContext.MessageContext.FeedbackList} feedback -\n *          feedback resource\n *\n * @param {V2010} version - Version of the resource\n * @param {sid} accountSid -\n *          The SID of the Account that created the resource to fetch\n * @param {sid} sid - The unique string that identifies the resource\n */\n\n/* jshint ignore:end */\n\n\nMessageContext = function MessageContext(version, accountSid, sid) {\n  this._version = version; // Path Solution\n\n  this._solution = {\n    accountSid: accountSid,\n    sid: sid\n  };\n  this._uri = `/Accounts/${accountSid}/Messages/${sid}.json`; // Dependents\n\n  this._media = undefined;\n  this._feedback = undefined;\n};\n/* jshint ignore:start */\n\n/**\n * remove a MessageInstance\n *\n * @function remove\n * @memberof Twilio.Api.V2010.AccountContext.MessageContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed MessageInstance\n */\n\n/* jshint ignore:end */\n\n\nMessageContext.prototype.remove = function remove(callback) {\n  var deferred = Q.defer();\n\n  var promise = this._version.remove({\n    uri: this._uri,\n    method: 'DELETE'\n  });\n\n  promise = promise.then(function (payload) {\n    deferred.resolve(payload);\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n/* jshint ignore:start */\n\n/**\n * fetch a MessageInstance\n *\n * @function fetch\n * @memberof Twilio.Api.V2010.AccountContext.MessageContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed MessageInstance\n */\n\n/* jshint ignore:end */\n\n\nMessageContext.prototype.fetch = function fetch(callback) {\n  var deferred = Q.defer();\n\n  var promise = this._version.fetch({\n    uri: this._uri,\n    method: 'GET'\n  });\n\n  promise = promise.then(function (payload) {\n    deferred.resolve(new MessageInstance(this._version, payload, this._solution.accountSid, this._solution.sid));\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n/* jshint ignore:start */\n\n/**\n * update a MessageInstance\n *\n * @function update\n * @memberof Twilio.Api.V2010.AccountContext.MessageContext#\n *\n * @param {object} [opts] - Options for request\n * @param {string} [opts.body] - The text of the message you want to send\n * @param {message.update_status} [opts.status] -\n *          Set as `canceled` to cancel a message from being sent.\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed MessageInstance\n */\n\n/* jshint ignore:end */\n\n\nMessageContext.prototype.update = function update(opts, callback) {\n  if (_.isFunction(opts)) {\n    callback = opts;\n    opts = {};\n  }\n\n  opts = opts || {};\n  var deferred = Q.defer();\n  var data = values.of({\n    'Body': _.get(opts, 'body'),\n    'Status': _.get(opts, 'status')\n  });\n\n  var promise = this._version.update({\n    uri: this._uri,\n    method: 'POST',\n    data: data\n  });\n\n  promise = promise.then(function (payload) {\n    deferred.resolve(new MessageInstance(this._version, payload, this._solution.accountSid, this._solution.sid));\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\nObject.defineProperty(MessageContext.prototype, 'media', {\n  get: function () {\n    if (!this._media) {\n      this._media = new MediaList(this._version, this._solution.accountSid, this._solution.sid);\n    }\n\n    return this._media;\n  }\n});\nObject.defineProperty(MessageContext.prototype, 'feedback', {\n  get: function () {\n    if (!this._feedback) {\n      this._feedback = new FeedbackList(this._version, this._solution.accountSid, this._solution.sid);\n    }\n\n    return this._feedback;\n  }\n});\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Api.V2010.AccountContext.MessageContext#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\nMessageContext.prototype.toJSON = function toJSON() {\n  return this._solution;\n};\n\nMessageContext.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\nmodule.exports = {\n  MessageList: MessageList,\n  MessagePage: MessagePage,\n  MessageInstance: MessageInstance,\n  MessageContext: MessageContext\n};","map":{"version":3,"names":["Q","require","_","util","FeedbackList","MediaList","Page","deserialize","serialize","values","MessageList","MessagePage","MessageInstance","MessageContext","version","accountSid","MessageListInstance","sid","get","_version","_solution","_uri","create","opts","callback","isUndefined","Error","deferred","defer","data","of","map","e","bool","iso8601DateTime","promise","uri","method","then","payload","resolve","bind","catch","error","reject","isFunction","nodeify","each","done","currentPage","currentResource","limits","readLimits","limit","pageSize","onComplete","fetchNextPage","fn","page","instances","instance","nextPage","merge","list","allResources","resource","push","length","pageToken","pageNumber","params","getPage","targetUrl","_domain","twilio","request","toJSON","inspect","custom","depth","options","response","solution","prototype","constructor","call","extend","getInstance","clone","forOwn","value","key","startsWith","body","numSegments","num_segments","direction","from","to","dateUpdated","rfc2822DateTime","date_updated","price","errorMessage","error_message","account_sid","numMedia","num_media","status","messagingServiceSid","messaging_service_sid","dateSent","date_sent","dateCreated","date_created","errorCode","integer","error_code","priceUnit","price_unit","apiVersion","api_version","subresourceUris","subresource_uris","_context","undefined","Object","defineProperty","remove","_proxy","fetch","update","media","feedback","_media","_feedback","module","exports"],"sources":["/Users/hooniesun/rmit/fwp/assessment1/lan/node_modules/twilio/lib/rest/api/v2010/account/message.js"],"sourcesContent":["'use strict';\n\n/* jshint ignore:start */\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n/* jshint ignore:end */\n\nvar Q = require('q');  /* jshint ignore:line */\nvar _ = require('lodash');  /* jshint ignore:line */\nvar util = require('util');  /* jshint ignore:line */\nvar FeedbackList = require('./message/feedback').FeedbackList;\nvar MediaList = require('./message/media').MediaList;\nvar Page = require('../../../../base/Page');  /* jshint ignore:line */\nvar deserialize = require(\n    '../../../../base/deserialize');  /* jshint ignore:line */\nvar serialize = require('../../../../base/serialize');  /* jshint ignore:line */\nvar values = require('../../../../base/values');  /* jshint ignore:line */\n\nvar MessageList;\nvar MessagePage;\nvar MessageInstance;\nvar MessageContext;\n\n/* jshint ignore:start */\n/**\n * Initialize the MessageList\n *\n * @constructor Twilio.Api.V2010.AccountContext.MessageList\n *\n * @param {Twilio.Api.V2010} version - Version of the resource\n * @param {string} accountSid - The SID of the Account that created the resource\n */\n/* jshint ignore:end */\nMessageList = function MessageList(version, accountSid) {\n  /* jshint ignore:start */\n  /**\n   * @function messages\n   * @memberof Twilio.Api.V2010.AccountContext#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Api.V2010.AccountContext.MessageContext}\n   */\n  /* jshint ignore:end */\n  function MessageListInstance(sid) {\n    return MessageListInstance.get(sid);\n  }\n\n  MessageListInstance._version = version;\n  // Path Solution\n  MessageListInstance._solution = {accountSid: accountSid};\n  MessageListInstance._uri = `/Accounts/${accountSid}/Messages.json`;\n  /* jshint ignore:start */\n  /**\n   * create a MessageInstance\n   *\n   * @function create\n   * @memberof Twilio.Api.V2010.AccountContext.MessageList#\n   *\n   * @param {object} opts - Options for request\n   * @param {string} opts.to - The destination phone number\n   * @param {string} [opts.statusCallback] -\n   *          The URL we should call to send status information to your application\n   * @param {string} [opts.applicationSid] - The application to use for callbacks\n   * @param {number} [opts.maxPrice] -\n   *          The total maximum price up to 4 decimal places in US dollars acceptable for the message to be delivered.\n   * @param {boolean} [opts.provideFeedback] -\n   *          Whether to confirm delivery of the message\n   * @param {number} [opts.attempt] -\n   *          Total numer of attempts made , this inclusive to send out the message\n   * @param {number} [opts.validityPeriod] -\n   *          The number of seconds that the message can remain in our outgoing queue.\n   * @param {boolean} [opts.forceDelivery] - Reserved\n   * @param {message.content_retention} [opts.contentRetention] -\n   *          Determines if the message content can be stored or redacted based on privacy settings\n   * @param {message.address_retention} [opts.addressRetention] -\n   *          Determines if the address can be stored or obfuscated based on privacy settings\n   * @param {boolean} [opts.smartEncoded] -\n   *          Whether to detect Unicode characters that have a similar GSM-7 character and replace them\n   * @param {string|list} [opts.persistentAction] -\n   *          Rich actions for Channels Messages.\n   * @param {message.schedule_type} [opts.scheduleType] -\n   *          Pass the value `fixed` to schedule a message at a fixed time.\n   * @param {Date} [opts.sendAt] -\n   *          The time that Twilio will send the message. Must be in ISO 8601 format.\n   * @param {boolean} [opts.sendAsMms] -\n   *          If set to True, Twilio will deliver the message as a single MMS message, regardless of the presence of media.\n   * @param {string} [opts.from] - The phone number that initiated the message\n   * @param {string} [opts.messagingServiceSid] -\n   *          The SID of the Messaging Service you want to associate with the message.\n   * @param {string} [opts.body] -\n   *          The text of the message you want to send. Can be up to 1,600 characters in length.\n   * @param {string|list} [opts.mediaUrl] -\n   *          The URL of the media to send with the message\n   * @param {function} [callback] - Callback to handle processed record\n   *\n   * @returns {Promise} Resolves to processed MessageInstance\n   */\n  /* jshint ignore:end */\n  MessageListInstance.create = function create(opts, callback) {\n    if (_.isUndefined(opts)) {\n      throw new Error('Required parameter \"opts\" missing.');\n    }\n    if (_.isUndefined(opts['to'])) {\n      throw new Error('Required parameter \"opts[\\'to\\']\" missing.');\n    }\n\n    var deferred = Q.defer();\n    var data = values.of({\n      'To': _.get(opts, 'to'),\n      'From': _.get(opts, 'from'),\n      'MessagingServiceSid': _.get(opts, 'messagingServiceSid'),\n      'Body': _.get(opts, 'body'),\n      'MediaUrl': serialize.map(_.get(opts, 'mediaUrl'), function(e) { return e; }),\n      'StatusCallback': _.get(opts, 'statusCallback'),\n      'ApplicationSid': _.get(opts, 'applicationSid'),\n      'MaxPrice': _.get(opts, 'maxPrice'),\n      'ProvideFeedback': serialize.bool(_.get(opts, 'provideFeedback')),\n      'Attempt': _.get(opts, 'attempt'),\n      'ValidityPeriod': _.get(opts, 'validityPeriod'),\n      'ForceDelivery': serialize.bool(_.get(opts, 'forceDelivery')),\n      'ContentRetention': _.get(opts, 'contentRetention'),\n      'AddressRetention': _.get(opts, 'addressRetention'),\n      'SmartEncoded': serialize.bool(_.get(opts, 'smartEncoded')),\n      'PersistentAction': serialize.map(_.get(opts, 'persistentAction'), function(e) { return e; }),\n      'ScheduleType': _.get(opts, 'scheduleType'),\n      'SendAt': serialize.iso8601DateTime(_.get(opts, 'sendAt')),\n      'SendAsMms': serialize.bool(_.get(opts, 'sendAsMms'))\n    });\n\n    var promise = this._version.create({uri: this._uri, method: 'POST', data: data});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new MessageInstance(\n        this._version,\n        payload,\n        this._solution.accountSid,\n        this._solution.sid\n      ));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Streams MessageInstance records from the API.\n   *\n   * This operation lazily loads records as efficiently as possible until the limit\n   * is reached.\n   *\n   * The results are passed into the callback function, so this operation is memory\n   * efficient.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function each\n   * @memberof Twilio.Api.V2010.AccountContext.MessageList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.to] - Filter by messages sent to this number\n   * @param {string} [opts.from] - Filter by from number\n   * @param {Date} [opts.dateSentBefore] - Filter by date sent\n   * @param {Date} [opts.dateSent] - Filter by date sent\n   * @param {Date} [opts.dateSentAfter] - Filter by date sent\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         each() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no pageSize is defined but a limit is defined,\n   *         each() will attempt to read the limit with the most efficient\n   *         page size, i.e. min(limit, 1000)\n   * @param {Function} [opts.callback] -\n   *         Function to process each record. If this and a positional\n   *         callback are passed, this one will be used\n   * @param {Function} [opts.done] -\n   *          Function to be called upon completion of streaming\n   * @param {Function} [callback] - Function to process each record\n   */\n  /* jshint ignore:end */\n  MessageListInstance.each = function each(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    if (opts.callback) {\n      callback = opts.callback;\n    }\n    if (_.isUndefined(callback)) {\n      throw new Error('Callback function must be provided');\n    }\n\n    var done = false;\n    var currentPage = 1;\n    var currentResource = 0;\n    var limits = this._version.readLimits({\n      limit: opts.limit,\n      pageSize: opts.pageSize\n    });\n\n    function onComplete(error) {\n      done = true;\n      if (_.isFunction(opts.done)) {\n        opts.done(error);\n      }\n    }\n\n    function fetchNextPage(fn) {\n      var promise = fn();\n      if (_.isUndefined(promise)) {\n        onComplete();\n        return;\n      }\n\n      promise.then(function(page) {\n        _.each(page.instances, function(instance) {\n          if (done || (!_.isUndefined(opts.limit) && currentResource >= opts.limit)) {\n            done = true;\n            return false;\n          }\n\n          currentResource++;\n          callback(instance, onComplete);\n        });\n\n        if (!done) {\n          currentPage++;\n          fetchNextPage(_.bind(page.nextPage, page));\n        } else {\n          onComplete();\n        }\n      });\n\n      promise.catch(onComplete);\n    }\n\n    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Lists MessageInstance records from the API as a list.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function list\n   * @memberof Twilio.Api.V2010.AccountContext.MessageList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.to] - Filter by messages sent to this number\n   * @param {string} [opts.from] - Filter by from number\n   * @param {Date} [opts.dateSentBefore] - Filter by date sent\n   * @param {Date} [opts.dateSent] - Filter by date sent\n   * @param {Date} [opts.dateSentAfter] - Filter by date sent\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         list() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no page_size is defined but a limit is defined,\n   *         list() will attempt to read the limit with the most\n   *         efficient page size, i.e. min(limit, 1000)\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  MessageListInstance.list = function list(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    var deferred = Q.defer();\n    var allResources = [];\n    opts.callback = function(resource, done) {\n      allResources.push(resource);\n\n      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {\n        done();\n      }\n    };\n\n    opts.done = function(error) {\n      if (_.isUndefined(error)) {\n        deferred.resolve(allResources);\n      } else {\n        deferred.reject(error);\n      }\n    };\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    this.each(opts);\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single page of MessageInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function page\n   * @memberof Twilio.Api.V2010.AccountContext.MessageList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.to] - Filter by messages sent to this number\n   * @param {string} [opts.from] - Filter by from number\n   * @param {Date} [opts.dateSentBefore] - Filter by date sent\n   * @param {Date} [opts.dateSent] - Filter by date sent\n   * @param {Date} [opts.dateSentAfter] - Filter by date sent\n   * @param {string} [opts.pageToken] - PageToken provided by the API\n   * @param {number} [opts.pageNumber] -\n   *          Page Number, this value is simply for client state\n   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  MessageListInstance.page = function page(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n\n    var deferred = Q.defer();\n    var data = values.of({\n      'To': _.get(opts, 'to'),\n      'From': _.get(opts, 'from'),\n      'DateSent<': serialize.iso8601DateTime(_.get(opts, 'dateSentBefore')),\n      'DateSent': serialize.iso8601DateTime(_.get(opts, 'dateSent')),\n      'DateSent>': serialize.iso8601DateTime(_.get(opts, 'dateSentAfter')),\n      'PageToken': opts.pageToken,\n      'Page': opts.pageNumber,\n      'PageSize': opts.pageSize\n    });\n\n    var promise = this._version.page({uri: this._uri, method: 'GET', params: data});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new MessagePage(this._version, payload, this._solution));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single target page of MessageInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function getPage\n   * @memberof Twilio.Api.V2010.AccountContext.MessageList#\n   *\n   * @param {string} [targetUrl] - API-generated URL for the requested results page\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  MessageListInstance.getPage = function getPage(targetUrl, callback) {\n    var deferred = Q.defer();\n\n    var promise = this._version._domain.twilio.request({method: 'GET', uri: targetUrl});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new MessagePage(this._version, payload, this._solution));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Constructs a message\n   *\n   * @function get\n   * @memberof Twilio.Api.V2010.AccountContext.MessageList#\n   *\n   * @param {string} sid - The unique string that identifies the resource\n   *\n   * @returns {Twilio.Api.V2010.AccountContext.MessageContext}\n   */\n  /* jshint ignore:end */\n  MessageListInstance.get = function get(sid) {\n    return new MessageContext(this._version, this._solution.accountSid, sid);\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Api.V2010.AccountContext.MessageList#\n   *\n   * @returns Object\n   */\n  /* jshint ignore:end */\n  MessageListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n\n  MessageListInstance[util.inspect.custom] = function inspect(depth, options) {\n    return util.inspect(this.toJSON(), options);\n  };\n\n  return MessageListInstance;\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the MessagePage\n *\n * @constructor Twilio.Api.V2010.AccountContext.MessagePage\n *\n * @param {V2010} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {MessageSolution} solution - Path solution\n *\n * @returns MessagePage\n */\n/* jshint ignore:end */\nMessagePage = function MessagePage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n\n_.extend(MessagePage.prototype, Page.prototype);\nMessagePage.prototype.constructor = MessagePage;\n\n/* jshint ignore:start */\n/**\n * Build an instance of MessageInstance\n *\n * @function getInstance\n * @memberof Twilio.Api.V2010.AccountContext.MessagePage#\n *\n * @param {MessagePayload} payload - Payload response from the API\n *\n * @returns MessageInstance\n */\n/* jshint ignore:end */\nMessagePage.prototype.getInstance = function getInstance(payload) {\n  return new MessageInstance(this._version, payload, this._solution.accountSid);\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Api.V2010.AccountContext.MessagePage#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nMessagePage.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function(value, key) {\n    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\n\nMessagePage.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the MessageContext\n *\n * @constructor Twilio.Api.V2010.AccountContext.MessageInstance\n *\n * @property {string} body - The message text\n * @property {string} numSegments -\n *          The number of messages used to deliver the message body\n * @property {message.direction} direction - The direction of the message\n * @property {string} from - The phone number that initiated the message\n * @property {string} to - The phone number that received the message\n * @property {Date} dateUpdated -\n *          The RFC 2822 date and time in GMT that the resource was last updated\n * @property {string} price - The amount billed for the message\n * @property {string} errorMessage - The description of the error_code\n * @property {string} uri -\n *          The URI of the resource, relative to `https://api.twilio.com`\n * @property {string} accountSid - The SID of the Account that created the resource\n * @property {string} numMedia -\n *          The number of media files associated with the message\n * @property {message.status} status - The status of the message\n * @property {string} messagingServiceSid -\n *          The SID of the Messaging Service used with the message.\n * @property {string} sid - The unique string that identifies the resource\n * @property {Date} dateSent -\n *          The RFC 2822 date and time in GMT when the message was sent\n * @property {Date} dateCreated -\n *          The RFC 2822 date and time in GMT that the resource was created\n * @property {number} errorCode - The error code associated with the message\n * @property {string} priceUnit - The currency in which price is measured\n * @property {string} apiVersion - The API version used to process the message\n * @property {string} subresourceUris -\n *          A list of related resources identified by their relative URIs\n *\n * @param {V2010} version - Version of the resource\n * @param {MessagePayload} payload - The instance payload\n * @param {sid} accountSid - The SID of the Account that created the resource\n * @param {sid} sid - The unique string that identifies the resource\n */\n/* jshint ignore:end */\nMessageInstance = function MessageInstance(version, payload, accountSid, sid) {\n  this._version = version;\n\n  // Marshaled Properties\n  this.body = payload.body; // jshint ignore:line\n  this.numSegments = payload.num_segments; // jshint ignore:line\n  this.direction = payload.direction; // jshint ignore:line\n  this.from = payload.from; // jshint ignore:line\n  this.to = payload.to; // jshint ignore:line\n  this.dateUpdated = deserialize.rfc2822DateTime(payload.date_updated); // jshint ignore:line\n  this.price = payload.price; // jshint ignore:line\n  this.errorMessage = payload.error_message; // jshint ignore:line\n  this.uri = payload.uri; // jshint ignore:line\n  this.accountSid = payload.account_sid; // jshint ignore:line\n  this.numMedia = payload.num_media; // jshint ignore:line\n  this.status = payload.status; // jshint ignore:line\n  this.messagingServiceSid = payload.messaging_service_sid; // jshint ignore:line\n  this.sid = payload.sid; // jshint ignore:line\n  this.dateSent = deserialize.rfc2822DateTime(payload.date_sent); // jshint ignore:line\n  this.dateCreated = deserialize.rfc2822DateTime(payload.date_created); // jshint ignore:line\n  this.errorCode = deserialize.integer(payload.error_code); // jshint ignore:line\n  this.priceUnit = payload.price_unit; // jshint ignore:line\n  this.apiVersion = payload.api_version; // jshint ignore:line\n  this.subresourceUris = payload.subresource_uris; // jshint ignore:line\n\n  // Context\n  this._context = undefined;\n  this._solution = {accountSid: accountSid, sid: sid || this.sid, };\n};\n\nObject.defineProperty(MessageInstance.prototype,\n  '_proxy', {\n    get: function() {\n      if (!this._context) {\n        this._context = new MessageContext(this._version, this._solution.accountSid, this._solution.sid);\n      }\n\n      return this._context;\n    }\n});\n\n/* jshint ignore:start */\n/**\n * remove a MessageInstance\n *\n * @function remove\n * @memberof Twilio.Api.V2010.AccountContext.MessageInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed MessageInstance\n */\n/* jshint ignore:end */\nMessageInstance.prototype.remove = function remove(callback) {\n  return this._proxy.remove(callback);\n};\n\n/* jshint ignore:start */\n/**\n * fetch a MessageInstance\n *\n * @function fetch\n * @memberof Twilio.Api.V2010.AccountContext.MessageInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed MessageInstance\n */\n/* jshint ignore:end */\nMessageInstance.prototype.fetch = function fetch(callback) {\n  return this._proxy.fetch(callback);\n};\n\n/* jshint ignore:start */\n/**\n * update a MessageInstance\n *\n * @function update\n * @memberof Twilio.Api.V2010.AccountContext.MessageInstance#\n *\n * @param {object} [opts] - Options for request\n * @param {string} [opts.body] - The text of the message you want to send\n * @param {message.update_status} [opts.status] -\n *          Set as `canceled` to cancel a message from being sent.\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed MessageInstance\n */\n/* jshint ignore:end */\nMessageInstance.prototype.update = function update(opts, callback) {\n  return this._proxy.update(opts, callback);\n};\n\n/* jshint ignore:start */\n/**\n * Access the media\n *\n * @function media\n * @memberof Twilio.Api.V2010.AccountContext.MessageInstance#\n *\n * @returns {Twilio.Api.V2010.AccountContext.MessageContext.MediaList}\n */\n/* jshint ignore:end */\nMessageInstance.prototype.media = function media() {\n  return this._proxy.media;\n};\n\n/* jshint ignore:start */\n/**\n * Access the feedback\n *\n * @function feedback\n * @memberof Twilio.Api.V2010.AccountContext.MessageInstance#\n *\n * @returns {Twilio.Api.V2010.AccountContext.MessageContext.FeedbackList}\n */\n/* jshint ignore:end */\nMessageInstance.prototype.feedback = function feedback() {\n  return this._proxy.feedback;\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Api.V2010.AccountContext.MessageInstance#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nMessageInstance.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function(value, key) {\n    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\n\nMessageInstance.prototype[util.inspect.custom] = function inspect(depth,\n    options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the MessageContext\n *\n * @constructor Twilio.Api.V2010.AccountContext.MessageContext\n *\n * @property {Twilio.Api.V2010.AccountContext.MessageContext.MediaList} media -\n *          media resource\n * @property {Twilio.Api.V2010.AccountContext.MessageContext.FeedbackList} feedback -\n *          feedback resource\n *\n * @param {V2010} version - Version of the resource\n * @param {sid} accountSid -\n *          The SID of the Account that created the resource to fetch\n * @param {sid} sid - The unique string that identifies the resource\n */\n/* jshint ignore:end */\nMessageContext = function MessageContext(version, accountSid, sid) {\n  this._version = version;\n\n  // Path Solution\n  this._solution = {accountSid: accountSid, sid: sid, };\n  this._uri = `/Accounts/${accountSid}/Messages/${sid}.json`;\n\n  // Dependents\n  this._media = undefined;\n  this._feedback = undefined;\n};\n\n/* jshint ignore:start */\n/**\n * remove a MessageInstance\n *\n * @function remove\n * @memberof Twilio.Api.V2010.AccountContext.MessageContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed MessageInstance\n */\n/* jshint ignore:end */\nMessageContext.prototype.remove = function remove(callback) {\n  var deferred = Q.defer();\n  var promise = this._version.remove({uri: this._uri, method: 'DELETE'});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(payload);\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * fetch a MessageInstance\n *\n * @function fetch\n * @memberof Twilio.Api.V2010.AccountContext.MessageContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed MessageInstance\n */\n/* jshint ignore:end */\nMessageContext.prototype.fetch = function fetch(callback) {\n  var deferred = Q.defer();\n  var promise = this._version.fetch({uri: this._uri, method: 'GET'});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(new MessageInstance(\n      this._version,\n      payload,\n      this._solution.accountSid,\n      this._solution.sid\n    ));\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * update a MessageInstance\n *\n * @function update\n * @memberof Twilio.Api.V2010.AccountContext.MessageContext#\n *\n * @param {object} [opts] - Options for request\n * @param {string} [opts.body] - The text of the message you want to send\n * @param {message.update_status} [opts.status] -\n *          Set as `canceled` to cancel a message from being sent.\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed MessageInstance\n */\n/* jshint ignore:end */\nMessageContext.prototype.update = function update(opts, callback) {\n  if (_.isFunction(opts)) {\n    callback = opts;\n    opts = {};\n  }\n  opts = opts || {};\n\n  var deferred = Q.defer();\n  var data = values.of({'Body': _.get(opts, 'body'), 'Status': _.get(opts, 'status')});\n\n  var promise = this._version.update({uri: this._uri, method: 'POST', data: data});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(new MessageInstance(\n      this._version,\n      payload,\n      this._solution.accountSid,\n      this._solution.sid\n    ));\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\nObject.defineProperty(MessageContext.prototype,\n  'media', {\n    get: function() {\n      if (!this._media) {\n        this._media = new MediaList(this._version, this._solution.accountSid, this._solution.sid);\n      }\n      return this._media;\n    }\n});\n\nObject.defineProperty(MessageContext.prototype,\n  'feedback', {\n    get: function() {\n      if (!this._feedback) {\n        this._feedback = new FeedbackList(this._version, this._solution.accountSid, this._solution.sid);\n      }\n      return this._feedback;\n    }\n});\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Api.V2010.AccountContext.MessageContext#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nMessageContext.prototype.toJSON = function toJSON() {\n  return this._solution;\n};\n\nMessageContext.prototype[util.inspect.custom] = function inspect(depth, options)\n    {\n  return util.inspect(this.toJSON(), options);\n};\n\nmodule.exports = {\n  MessageList: MessageList,\n  MessagePage: MessagePage,\n  MessageInstance: MessageInstance,\n  MessageContext: MessageContext\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}