{"ast":null,"code":"'use strict';\n/* jshint ignore:start */\n\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n\n/* jshint ignore:end */\n\nvar Q = require('q');\n/* jshint ignore:line */\n\n\nvar _ = require('lodash');\n/* jshint ignore:line */\n\n\nvar util = require('util');\n/* jshint ignore:line */\n\n\nvar Page = require('../../../../../base/Page');\n/* jshint ignore:line */\n\n\nvar deserialize = require('../../../../../base/deserialize');\n/* jshint ignore:line */\n\n\nvar serialize = require('../../../../../base/serialize');\n/* jshint ignore:line */\n\n\nvar values = require('../../../../../base/values');\n/* jshint ignore:line */\n\n\nvar ParticipantList;\nvar ParticipantPage;\nvar ParticipantInstance;\nvar ParticipantContext;\n/* jshint ignore:start */\n\n/**\n * Initialize the ParticipantList\n *\n * @constructor Twilio.Api.V2010.AccountContext.ConferenceContext.ParticipantList\n *\n * @param {Twilio.Api.V2010} version - Version of the resource\n * @param {string} accountSid - The SID of the Account that created the resource\n * @param {string} conferenceSid - The SID of the conference the participant is in\n */\n\n/* jshint ignore:end */\n\nParticipantList = function ParticipantList(version, accountSid, conferenceSid) {\n  /* jshint ignore:start */\n\n  /**\n   * @function participants\n   * @memberof Twilio.Api.V2010.AccountContext.ConferenceContext#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Api.V2010.AccountContext.ConferenceContext.ParticipantContext}\n   */\n\n  /* jshint ignore:end */\n  function ParticipantListInstance(sid) {\n    return ParticipantListInstance.get(sid);\n  }\n\n  ParticipantListInstance._version = version; // Path Solution\n\n  ParticipantListInstance._solution = {\n    accountSid: accountSid,\n    conferenceSid: conferenceSid\n  };\n  ParticipantListInstance._uri = `/Accounts/${accountSid}/Conferences/${conferenceSid}/Participants.json`;\n  /* jshint ignore:start */\n\n  /**\n   * create a ParticipantInstance\n   *\n   * @function create\n   * @memberof Twilio.Api.V2010.AccountContext.ConferenceContext.ParticipantList#\n   *\n   * @param {object} opts - Options for request\n   * @param {string} opts.from -\n   *          The phone number, Client identifier, or username portion of SIP address that made this call.\n   * @param {string} opts.to -\n   *          The phone number, SIP address or Client identifier that received this call.\n   * @param {string} [opts.statusCallback] -\n   *          The URL we should call to send status information to your application\n   * @param {string} [opts.statusCallbackMethod] -\n   *          The HTTP method we should use to call `status_callback`\n   * @param {string|list} [opts.statusCallbackEvent] -\n   *          Set state change events that will trigger a callback\n   * @param {string} [opts.label] - The label of this participant\n   * @param {number} [opts.timeout] -\n   *          he number of seconds that we should wait for an answer\n   * @param {boolean} [opts.record] -\n   *          Whether to record the participant and their conferences\n   * @param {boolean} [opts.muted] - Whether to mute the agent\n   * @param {string} [opts.beep] -\n   *          Whether to play a notification beep to the conference when the participant joins\n   * @param {boolean} [opts.startConferenceOnEnter] -\n   *          Whether the conference starts when the participant joins the conference\n   * @param {boolean} [opts.endConferenceOnExit] -\n   *          Whether to end the conference when the participant leaves\n   * @param {string} [opts.waitUrl] - URL that hosts pre-conference hold music\n   * @param {string} [opts.waitMethod] -\n   *          The HTTP method we should use to call `wait_url`\n   * @param {boolean} [opts.earlyMedia] -\n   *          Whether agents can hear the state of the outbound call\n   * @param {number} [opts.maxParticipants] -\n   *          The maximum number of agent conference participants\n   * @param {string} [opts.conferenceRecord] -\n   *          Whether to record the conference the participant is joining\n   * @param {string} [opts.conferenceTrim] -\n   *          Whether to trim leading and trailing silence from your recorded conference audio files\n   * @param {string} [opts.conferenceStatusCallback] -\n   *          The callback URL for conference events\n   * @param {string} [opts.conferenceStatusCallbackMethod] -\n   *          HTTP method for requesting `conference_status_callback` URL\n   * @param {string|list} [opts.conferenceStatusCallbackEvent] -\n   *          The conference state changes that should generate a call to `conference_status_callback`\n   * @param {string} [opts.recordingChannels] -\n   *          Specify `mono` or `dual` recording channels\n   * @param {string} [opts.recordingStatusCallback] -\n   *          The URL that we should call using the `recording_status_callback_method` when the recording status changes\n   * @param {string} [opts.recordingStatusCallbackMethod] -\n   *          The HTTP method we should use when we call `recording_status_callback`\n   * @param {string} [opts.sipAuthUsername] -\n   *          The SIP username used for authentication\n   * @param {string} [opts.sipAuthPassword] - The SIP password for authentication\n   * @param {string} [opts.region] -\n   *          The region where we should mix the conference audio\n   * @param {string} [opts.conferenceRecordingStatusCallback] -\n   *          The URL we should call using the `conference_recording_status_callback_method` when the conference recording is available\n   * @param {string} [opts.conferenceRecordingStatusCallbackMethod] -\n   *          The HTTP method we should use to call `conference_recording_status_callback`\n   * @param {string|list} [opts.recordingStatusCallbackEvent] -\n   *          The recording state changes that should generate a call to `recording_status_callback`\n   * @param {string|list} [opts.conferenceRecordingStatusCallbackEvent] -\n   *          The conference recording state changes that should generate a call to `conference_recording_status_callback`\n   * @param {boolean} [opts.coaching] - Indicates if the participant changed to coach\n   * @param {string} [opts.callSidToCoach] -\n   *          The SID of the participant who is being `coached`\n   * @param {string} [opts.jitterBufferSize] -\n   *          Jitter Buffer size for the connecting participant\n   * @param {string} [opts.byoc] - BYOC trunk SID (Beta)\n   * @param {string} [opts.callerId] -\n   *          The phone number, Client identifier, or username portion of SIP address that made this call.\n   * @param {string} [opts.callReason] - Reason for the call (Branded Calls Beta)\n   * @param {string} [opts.recordingTrack] - The track(s) to record\n   * @param {number} [opts.timeLimit] - The maximum duration of the call in seconds.\n   * @param {function} [callback] - Callback to handle processed record\n   *\n   * @returns {Promise} Resolves to processed ParticipantInstance\n   */\n\n  /* jshint ignore:end */\n\n  ParticipantListInstance.create = function create(opts, callback) {\n    if (_.isUndefined(opts)) {\n      throw new Error('Required parameter \"opts\" missing.');\n    }\n\n    if (_.isUndefined(opts['from'])) {\n      throw new Error('Required parameter \"opts[\\'from\\']\" missing.');\n    }\n\n    if (_.isUndefined(opts['to'])) {\n      throw new Error('Required parameter \"opts[\\'to\\']\" missing.');\n    }\n\n    var deferred = Q.defer();\n    var data = values.of({\n      'From': _.get(opts, 'from'),\n      'To': _.get(opts, 'to'),\n      'StatusCallback': _.get(opts, 'statusCallback'),\n      'StatusCallbackMethod': _.get(opts, 'statusCallbackMethod'),\n      'StatusCallbackEvent': serialize.map(_.get(opts, 'statusCallbackEvent'), function (e) {\n        return e;\n      }),\n      'Label': _.get(opts, 'label'),\n      'Timeout': _.get(opts, 'timeout'),\n      'Record': serialize.bool(_.get(opts, 'record')),\n      'Muted': serialize.bool(_.get(opts, 'muted')),\n      'Beep': _.get(opts, 'beep'),\n      'StartConferenceOnEnter': serialize.bool(_.get(opts, 'startConferenceOnEnter')),\n      'EndConferenceOnExit': serialize.bool(_.get(opts, 'endConferenceOnExit')),\n      'WaitUrl': _.get(opts, 'waitUrl'),\n      'WaitMethod': _.get(opts, 'waitMethod'),\n      'EarlyMedia': serialize.bool(_.get(opts, 'earlyMedia')),\n      'MaxParticipants': _.get(opts, 'maxParticipants'),\n      'ConferenceRecord': _.get(opts, 'conferenceRecord'),\n      'ConferenceTrim': _.get(opts, 'conferenceTrim'),\n      'ConferenceStatusCallback': _.get(opts, 'conferenceStatusCallback'),\n      'ConferenceStatusCallbackMethod': _.get(opts, 'conferenceStatusCallbackMethod'),\n      'ConferenceStatusCallbackEvent': serialize.map(_.get(opts, 'conferenceStatusCallbackEvent'), function (e) {\n        return e;\n      }),\n      'RecordingChannels': _.get(opts, 'recordingChannels'),\n      'RecordingStatusCallback': _.get(opts, 'recordingStatusCallback'),\n      'RecordingStatusCallbackMethod': _.get(opts, 'recordingStatusCallbackMethod'),\n      'SipAuthUsername': _.get(opts, 'sipAuthUsername'),\n      'SipAuthPassword': _.get(opts, 'sipAuthPassword'),\n      'Region': _.get(opts, 'region'),\n      'ConferenceRecordingStatusCallback': _.get(opts, 'conferenceRecordingStatusCallback'),\n      'ConferenceRecordingStatusCallbackMethod': _.get(opts, 'conferenceRecordingStatusCallbackMethod'),\n      'RecordingStatusCallbackEvent': serialize.map(_.get(opts, 'recordingStatusCallbackEvent'), function (e) {\n        return e;\n      }),\n      'ConferenceRecordingStatusCallbackEvent': serialize.map(_.get(opts, 'conferenceRecordingStatusCallbackEvent'), function (e) {\n        return e;\n      }),\n      'Coaching': serialize.bool(_.get(opts, 'coaching')),\n      'CallSidToCoach': _.get(opts, 'callSidToCoach'),\n      'JitterBufferSize': _.get(opts, 'jitterBufferSize'),\n      'Byoc': _.get(opts, 'byoc'),\n      'CallerId': _.get(opts, 'callerId'),\n      'CallReason': _.get(opts, 'callReason'),\n      'RecordingTrack': _.get(opts, 'recordingTrack'),\n      'TimeLimit': _.get(opts, 'timeLimit')\n    });\n\n    var promise = this._version.create({\n      uri: this._uri,\n      method: 'POST',\n      data: data\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new ParticipantInstance(this._version, payload, this._solution.accountSid, this._solution.conferenceSid, this._solution.callSid));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Streams ParticipantInstance records from the API.\n   *\n   * This operation lazily loads records as efficiently as possible until the limit\n   * is reached.\n   *\n   * The results are passed into the callback function, so this operation is memory\n   * efficient.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function each\n   * @memberof Twilio.Api.V2010.AccountContext.ConferenceContext.ParticipantList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {boolean} [opts.muted] -\n   *          Whether to return only participants that are muted\n   * @param {boolean} [opts.hold] -\n   *          Whether to return only participants that are on hold\n   * @param {boolean} [opts.coaching] -\n   *          Whether to return only participants who are coaching another call\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         each() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no pageSize is defined but a limit is defined,\n   *         each() will attempt to read the limit with the most efficient\n   *         page size, i.e. min(limit, 1000)\n   * @param {Function} [opts.callback] -\n   *         Function to process each record. If this and a positional\n   *         callback are passed, this one will be used\n   * @param {Function} [opts.done] -\n   *          Function to be called upon completion of streaming\n   * @param {Function} [callback] - Function to process each record\n   */\n\n  /* jshint ignore:end */\n\n\n  ParticipantListInstance.each = function each(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n\n    if (opts.callback) {\n      callback = opts.callback;\n    }\n\n    if (_.isUndefined(callback)) {\n      throw new Error('Callback function must be provided');\n    }\n\n    var done = false;\n    var currentPage = 1;\n    var currentResource = 0;\n\n    var limits = this._version.readLimits({\n      limit: opts.limit,\n      pageSize: opts.pageSize\n    });\n\n    function onComplete(error) {\n      done = true;\n\n      if (_.isFunction(opts.done)) {\n        opts.done(error);\n      }\n    }\n\n    function fetchNextPage(fn) {\n      var promise = fn();\n\n      if (_.isUndefined(promise)) {\n        onComplete();\n        return;\n      }\n\n      promise.then(function (page) {\n        _.each(page.instances, function (instance) {\n          if (done || !_.isUndefined(opts.limit) && currentResource >= opts.limit) {\n            done = true;\n            return false;\n          }\n\n          currentResource++;\n          callback(instance, onComplete);\n        });\n\n        if (!done) {\n          currentPage++;\n          fetchNextPage(_.bind(page.nextPage, page));\n        } else {\n          onComplete();\n        }\n      });\n      promise.catch(onComplete);\n    }\n\n    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Lists ParticipantInstance records from the API as a list.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function list\n   * @memberof Twilio.Api.V2010.AccountContext.ConferenceContext.ParticipantList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {boolean} [opts.muted] -\n   *          Whether to return only participants that are muted\n   * @param {boolean} [opts.hold] -\n   *          Whether to return only participants that are on hold\n   * @param {boolean} [opts.coaching] -\n   *          Whether to return only participants who are coaching another call\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         list() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no page_size is defined but a limit is defined,\n   *         list() will attempt to read the limit with the most\n   *         efficient page size, i.e. min(limit, 1000)\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  ParticipantListInstance.list = function list(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n    var deferred = Q.defer();\n    var allResources = [];\n\n    opts.callback = function (resource, done) {\n      allResources.push(resource);\n\n      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {\n        done();\n      }\n    };\n\n    opts.done = function (error) {\n      if (_.isUndefined(error)) {\n        deferred.resolve(allResources);\n      } else {\n        deferred.reject(error);\n      }\n    };\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    this.each(opts);\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Retrieve a single page of ParticipantInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function page\n   * @memberof Twilio.Api.V2010.AccountContext.ConferenceContext.ParticipantList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {boolean} [opts.muted] -\n   *          Whether to return only participants that are muted\n   * @param {boolean} [opts.hold] -\n   *          Whether to return only participants that are on hold\n   * @param {boolean} [opts.coaching] -\n   *          Whether to return only participants who are coaching another call\n   * @param {string} [opts.pageToken] - PageToken provided by the API\n   * @param {number} [opts.pageNumber] -\n   *          Page Number, this value is simply for client state\n   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  ParticipantListInstance.page = function page(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n    var deferred = Q.defer();\n    var data = values.of({\n      'Muted': serialize.bool(_.get(opts, 'muted')),\n      'Hold': serialize.bool(_.get(opts, 'hold')),\n      'Coaching': serialize.bool(_.get(opts, 'coaching')),\n      'PageToken': opts.pageToken,\n      'Page': opts.pageNumber,\n      'PageSize': opts.pageSize\n    });\n\n    var promise = this._version.page({\n      uri: this._uri,\n      method: 'GET',\n      params: data\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new ParticipantPage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Retrieve a single target page of ParticipantInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function getPage\n   * @memberof Twilio.Api.V2010.AccountContext.ConferenceContext.ParticipantList#\n   *\n   * @param {string} [targetUrl] - API-generated URL for the requested results page\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  ParticipantListInstance.getPage = function getPage(targetUrl, callback) {\n    var deferred = Q.defer();\n\n    var promise = this._version._domain.twilio.request({\n      method: 'GET',\n      uri: targetUrl\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new ParticipantPage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Constructs a participant\n   *\n   * @function get\n   * @memberof Twilio.Api.V2010.AccountContext.ConferenceContext.ParticipantList#\n   *\n   * @param {string} callSid -\n   *          The Call SID or URL encoded label of the participant to fetch\n   *\n   * @returns {Twilio.Api.V2010.AccountContext.ConferenceContext.ParticipantContext}\n   */\n\n  /* jshint ignore:end */\n\n\n  ParticipantListInstance.get = function get(callSid) {\n    return new ParticipantContext(this._version, this._solution.accountSid, this._solution.conferenceSid, callSid);\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Api.V2010.AccountContext.ConferenceContext.ParticipantList#\n   *\n   * @returns Object\n   */\n\n  /* jshint ignore:end */\n\n\n  ParticipantListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n\n  ParticipantListInstance[util.inspect.custom] = function inspect(depth, options) {\n    return util.inspect(this.toJSON(), options);\n  };\n\n  return ParticipantListInstance;\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the ParticipantPage\n *\n * @constructor Twilio.Api.V2010.AccountContext.ConferenceContext.ParticipantPage\n *\n * @param {V2010} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {ParticipantSolution} solution - Path solution\n *\n * @returns ParticipantPage\n */\n\n/* jshint ignore:end */\n\n\nParticipantPage = function ParticipantPage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n\n_.extend(ParticipantPage.prototype, Page.prototype);\n\nParticipantPage.prototype.constructor = ParticipantPage;\n/* jshint ignore:start */\n\n/**\n * Build an instance of ParticipantInstance\n *\n * @function getInstance\n * @memberof Twilio.Api.V2010.AccountContext.ConferenceContext.ParticipantPage#\n *\n * @param {ParticipantPayload} payload - Payload response from the API\n *\n * @returns ParticipantInstance\n */\n\n/* jshint ignore:end */\n\nParticipantPage.prototype.getInstance = function getInstance(payload) {\n  return new ParticipantInstance(this._version, payload, this._solution.accountSid, this._solution.conferenceSid);\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Api.V2010.AccountContext.ConferenceContext.ParticipantPage#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nParticipantPage.prototype.toJSON = function toJSON() {\n  let clone = {};\n\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n\n  return clone;\n};\n\nParticipantPage.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the ParticipantContext\n *\n * @constructor Twilio.Api.V2010.AccountContext.ConferenceContext.ParticipantInstance\n *\n * @property {string} accountSid - The SID of the Account that created the resource\n * @property {string} callSid - The SID of the Call the resource is associated with\n * @property {string} label - The label of this participant\n * @property {string} callSidToCoach -\n *          The SID of the participant who is being `coached`\n * @property {boolean} coaching - Indicates if the participant changed to coach\n * @property {string} conferenceSid -\n *          The SID of the conference the participant is in\n * @property {Date} dateCreated -\n *          The RFC 2822 date and time in GMT that the resource was created\n * @property {Date} dateUpdated -\n *          The RFC 2822 date and time in GMT that the resource was last updated\n * @property {boolean} endConferenceOnExit -\n *          Whether the conference ends when the participant leaves\n * @property {boolean} muted - Whether the participant is muted\n * @property {boolean} hold - Whether the participant is on hold\n * @property {boolean} startConferenceOnEnter -\n *          Whether the conference starts when the participant joins the conference\n * @property {participant.status} status -\n *          The status of the participant's call in a session\n * @property {string} uri -\n *          The URI of the resource, relative to `https://api.twilio.com`\n *\n * @param {V2010} version - Version of the resource\n * @param {ParticipantPayload} payload - The instance payload\n * @param {sid} accountSid - The SID of the Account that created the resource\n * @param {sid} conferenceSid - The SID of the conference the participant is in\n * @param {sid_like} callSid -\n *          The Call SID or URL encoded label of the participant to fetch\n */\n\n/* jshint ignore:end */\n\n\nParticipantInstance = function ParticipantInstance(version, payload, accountSid, conferenceSid, callSid) {\n  this._version = version; // Marshaled Properties\n\n  this.accountSid = payload.account_sid; // jshint ignore:line\n\n  this.callSid = payload.call_sid; // jshint ignore:line\n\n  this.label = payload.label; // jshint ignore:line\n\n  this.callSidToCoach = payload.call_sid_to_coach; // jshint ignore:line\n\n  this.coaching = payload.coaching; // jshint ignore:line\n\n  this.conferenceSid = payload.conference_sid; // jshint ignore:line\n\n  this.dateCreated = deserialize.rfc2822DateTime(payload.date_created); // jshint ignore:line\n\n  this.dateUpdated = deserialize.rfc2822DateTime(payload.date_updated); // jshint ignore:line\n\n  this.endConferenceOnExit = payload.end_conference_on_exit; // jshint ignore:line\n\n  this.muted = payload.muted; // jshint ignore:line\n\n  this.hold = payload.hold; // jshint ignore:line\n\n  this.startConferenceOnEnter = payload.start_conference_on_enter; // jshint ignore:line\n\n  this.status = payload.status; // jshint ignore:line\n\n  this.uri = payload.uri; // jshint ignore:line\n  // Context\n\n  this._context = undefined;\n  this._solution = {\n    accountSid: accountSid,\n    conferenceSid: conferenceSid,\n    callSid: callSid || this.callSid\n  };\n};\n\nObject.defineProperty(ParticipantInstance.prototype, '_proxy', {\n  get: function () {\n    if (!this._context) {\n      this._context = new ParticipantContext(this._version, this._solution.accountSid, this._solution.conferenceSid, this._solution.callSid);\n    }\n\n    return this._context;\n  }\n});\n/* jshint ignore:start */\n\n/**\n * fetch a ParticipantInstance\n *\n * @function fetch\n * @memberof Twilio.Api.V2010.AccountContext.ConferenceContext.ParticipantInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed ParticipantInstance\n */\n\n/* jshint ignore:end */\n\nParticipantInstance.prototype.fetch = function fetch(callback) {\n  return this._proxy.fetch(callback);\n};\n/* jshint ignore:start */\n\n/**\n * update a ParticipantInstance\n *\n * @function update\n * @memberof Twilio.Api.V2010.AccountContext.ConferenceContext.ParticipantInstance#\n *\n * @param {object} [opts] - Options for request\n * @param {boolean} [opts.muted] - Whether the participant should be muted\n * @param {boolean} [opts.hold] - Whether the participant should be on hold\n * @param {string} [opts.holdUrl] -\n *          The URL we call using the `hold_method` for  music that plays when the participant is on hold\n * @param {string} [opts.holdMethod] -\n *          The HTTP method we should use to call hold_url\n * @param {string} [opts.announceUrl] -\n *          The URL we call using the `announce_method` for an announcement to the participant\n * @param {string} [opts.announceMethod] -\n *          The HTTP method we should use to call announce_url\n * @param {string} [opts.waitUrl] - URL that hosts pre-conference hold music\n * @param {string} [opts.waitMethod] -\n *          The HTTP method we should use to call `wait_url`\n * @param {boolean} [opts.beepOnExit] -\n *          Whether to play a notification beep to the conference when the participant exit\n * @param {boolean} [opts.endConferenceOnExit] -\n *          Whether to end the conference when the participant leaves\n * @param {boolean} [opts.coaching] - Indicates if the participant changed to coach\n * @param {string} [opts.callSidToCoach] -\n *          The SID of the participant who is being `coached`\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed ParticipantInstance\n */\n\n/* jshint ignore:end */\n\n\nParticipantInstance.prototype.update = function update(opts, callback) {\n  return this._proxy.update(opts, callback);\n};\n/* jshint ignore:start */\n\n/**\n * remove a ParticipantInstance\n *\n * @function remove\n * @memberof Twilio.Api.V2010.AccountContext.ConferenceContext.ParticipantInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed ParticipantInstance\n */\n\n/* jshint ignore:end */\n\n\nParticipantInstance.prototype.remove = function remove(callback) {\n  return this._proxy.remove(callback);\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Api.V2010.AccountContext.ConferenceContext.ParticipantInstance#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nParticipantInstance.prototype.toJSON = function toJSON() {\n  let clone = {};\n\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n\n  return clone;\n};\n\nParticipantInstance.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the ParticipantContext\n *\n * @constructor Twilio.Api.V2010.AccountContext.ConferenceContext.ParticipantContext\n *\n * @param {V2010} version - Version of the resource\n * @param {sid} accountSid -\n *          The SID of the Account that created the resource to fetch\n * @param {sid} conferenceSid -\n *          The SID of the conference with the participant to fetch\n * @param {sid_like} callSid -\n *          The Call SID or URL encoded label of the participant to fetch\n */\n\n/* jshint ignore:end */\n\n\nParticipantContext = function ParticipantContext(version, accountSid, conferenceSid, callSid) {\n  this._version = version; // Path Solution\n\n  this._solution = {\n    accountSid: accountSid,\n    conferenceSid: conferenceSid,\n    callSid: callSid\n  };\n  this._uri = `/Accounts/${accountSid}/Conferences/${conferenceSid}/Participants/${callSid}.json`;\n};\n/* jshint ignore:start */\n\n/**\n * fetch a ParticipantInstance\n *\n * @function fetch\n * @memberof Twilio.Api.V2010.AccountContext.ConferenceContext.ParticipantContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed ParticipantInstance\n */\n\n/* jshint ignore:end */\n\n\nParticipantContext.prototype.fetch = function fetch(callback) {\n  var deferred = Q.defer();\n\n  var promise = this._version.fetch({\n    uri: this._uri,\n    method: 'GET'\n  });\n\n  promise = promise.then(function (payload) {\n    deferred.resolve(new ParticipantInstance(this._version, payload, this._solution.accountSid, this._solution.conferenceSid, this._solution.callSid));\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n/* jshint ignore:start */\n\n/**\n * update a ParticipantInstance\n *\n * @function update\n * @memberof Twilio.Api.V2010.AccountContext.ConferenceContext.ParticipantContext#\n *\n * @param {object} [opts] - Options for request\n * @param {boolean} [opts.muted] - Whether the participant should be muted\n * @param {boolean} [opts.hold] - Whether the participant should be on hold\n * @param {string} [opts.holdUrl] -\n *          The URL we call using the `hold_method` for  music that plays when the participant is on hold\n * @param {string} [opts.holdMethod] -\n *          The HTTP method we should use to call hold_url\n * @param {string} [opts.announceUrl] -\n *          The URL we call using the `announce_method` for an announcement to the participant\n * @param {string} [opts.announceMethod] -\n *          The HTTP method we should use to call announce_url\n * @param {string} [opts.waitUrl] - URL that hosts pre-conference hold music\n * @param {string} [opts.waitMethod] -\n *          The HTTP method we should use to call `wait_url`\n * @param {boolean} [opts.beepOnExit] -\n *          Whether to play a notification beep to the conference when the participant exit\n * @param {boolean} [opts.endConferenceOnExit] -\n *          Whether to end the conference when the participant leaves\n * @param {boolean} [opts.coaching] - Indicates if the participant changed to coach\n * @param {string} [opts.callSidToCoach] -\n *          The SID of the participant who is being `coached`\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed ParticipantInstance\n */\n\n/* jshint ignore:end */\n\n\nParticipantContext.prototype.update = function update(opts, callback) {\n  if (_.isFunction(opts)) {\n    callback = opts;\n    opts = {};\n  }\n\n  opts = opts || {};\n  var deferred = Q.defer();\n  var data = values.of({\n    'Muted': serialize.bool(_.get(opts, 'muted')),\n    'Hold': serialize.bool(_.get(opts, 'hold')),\n    'HoldUrl': _.get(opts, 'holdUrl'),\n    'HoldMethod': _.get(opts, 'holdMethod'),\n    'AnnounceUrl': _.get(opts, 'announceUrl'),\n    'AnnounceMethod': _.get(opts, 'announceMethod'),\n    'WaitUrl': _.get(opts, 'waitUrl'),\n    'WaitMethod': _.get(opts, 'waitMethod'),\n    'BeepOnExit': serialize.bool(_.get(opts, 'beepOnExit')),\n    'EndConferenceOnExit': serialize.bool(_.get(opts, 'endConferenceOnExit')),\n    'Coaching': serialize.bool(_.get(opts, 'coaching')),\n    'CallSidToCoach': _.get(opts, 'callSidToCoach')\n  });\n\n  var promise = this._version.update({\n    uri: this._uri,\n    method: 'POST',\n    data: data\n  });\n\n  promise = promise.then(function (payload) {\n    deferred.resolve(new ParticipantInstance(this._version, payload, this._solution.accountSid, this._solution.conferenceSid, this._solution.callSid));\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n/* jshint ignore:start */\n\n/**\n * remove a ParticipantInstance\n *\n * @function remove\n * @memberof Twilio.Api.V2010.AccountContext.ConferenceContext.ParticipantContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed ParticipantInstance\n */\n\n/* jshint ignore:end */\n\n\nParticipantContext.prototype.remove = function remove(callback) {\n  var deferred = Q.defer();\n\n  var promise = this._version.remove({\n    uri: this._uri,\n    method: 'DELETE'\n  });\n\n  promise = promise.then(function (payload) {\n    deferred.resolve(payload);\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Api.V2010.AccountContext.ConferenceContext.ParticipantContext#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nParticipantContext.prototype.toJSON = function toJSON() {\n  return this._solution;\n};\n\nParticipantContext.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\nmodule.exports = {\n  ParticipantList: ParticipantList,\n  ParticipantPage: ParticipantPage,\n  ParticipantInstance: ParticipantInstance,\n  ParticipantContext: ParticipantContext\n};","map":{"version":3,"names":["Q","require","_","util","Page","deserialize","serialize","values","ParticipantList","ParticipantPage","ParticipantInstance","ParticipantContext","version","accountSid","conferenceSid","ParticipantListInstance","sid","get","_version","_solution","_uri","create","opts","callback","isUndefined","Error","deferred","defer","data","of","map","e","bool","promise","uri","method","then","payload","resolve","callSid","bind","catch","error","reject","isFunction","nodeify","each","done","currentPage","currentResource","limits","readLimits","limit","pageSize","onComplete","fetchNextPage","fn","page","instances","instance","nextPage","merge","list","allResources","resource","push","length","pageToken","pageNumber","params","getPage","targetUrl","_domain","twilio","request","toJSON","inspect","custom","depth","options","response","solution","prototype","constructor","call","extend","getInstance","clone","forOwn","value","key","startsWith","account_sid","call_sid","label","callSidToCoach","call_sid_to_coach","coaching","conference_sid","dateCreated","rfc2822DateTime","date_created","dateUpdated","date_updated","endConferenceOnExit","end_conference_on_exit","muted","hold","startConferenceOnEnter","start_conference_on_enter","status","_context","undefined","Object","defineProperty","fetch","_proxy","update","remove","module","exports"],"sources":["/Users/hooniesun/rmit/fwp/assessment1/lan/node_modules/twilio/lib/rest/api/v2010/account/conference/participant.js"],"sourcesContent":["'use strict';\n\n/* jshint ignore:start */\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n/* jshint ignore:end */\n\nvar Q = require('q');  /* jshint ignore:line */\nvar _ = require('lodash');  /* jshint ignore:line */\nvar util = require('util');  /* jshint ignore:line */\nvar Page = require('../../../../../base/Page');  /* jshint ignore:line */\nvar deserialize = require(\n    '../../../../../base/deserialize');  /* jshint ignore:line */\nvar serialize = require(\n    '../../../../../base/serialize');  /* jshint ignore:line */\nvar values = require('../../../../../base/values');  /* jshint ignore:line */\n\nvar ParticipantList;\nvar ParticipantPage;\nvar ParticipantInstance;\nvar ParticipantContext;\n\n/* jshint ignore:start */\n/**\n * Initialize the ParticipantList\n *\n * @constructor Twilio.Api.V2010.AccountContext.ConferenceContext.ParticipantList\n *\n * @param {Twilio.Api.V2010} version - Version of the resource\n * @param {string} accountSid - The SID of the Account that created the resource\n * @param {string} conferenceSid - The SID of the conference the participant is in\n */\n/* jshint ignore:end */\nParticipantList = function ParticipantList(version, accountSid, conferenceSid) {\n  /* jshint ignore:start */\n  /**\n   * @function participants\n   * @memberof Twilio.Api.V2010.AccountContext.ConferenceContext#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Api.V2010.AccountContext.ConferenceContext.ParticipantContext}\n   */\n  /* jshint ignore:end */\n  function ParticipantListInstance(sid) {\n    return ParticipantListInstance.get(sid);\n  }\n\n  ParticipantListInstance._version = version;\n  // Path Solution\n  ParticipantListInstance._solution = {accountSid: accountSid, conferenceSid: conferenceSid};\n  ParticipantListInstance._uri = `/Accounts/${accountSid}/Conferences/${conferenceSid}/Participants.json`;\n  /* jshint ignore:start */\n  /**\n   * create a ParticipantInstance\n   *\n   * @function create\n   * @memberof Twilio.Api.V2010.AccountContext.ConferenceContext.ParticipantList#\n   *\n   * @param {object} opts - Options for request\n   * @param {string} opts.from -\n   *          The phone number, Client identifier, or username portion of SIP address that made this call.\n   * @param {string} opts.to -\n   *          The phone number, SIP address or Client identifier that received this call.\n   * @param {string} [opts.statusCallback] -\n   *          The URL we should call to send status information to your application\n   * @param {string} [opts.statusCallbackMethod] -\n   *          The HTTP method we should use to call `status_callback`\n   * @param {string|list} [opts.statusCallbackEvent] -\n   *          Set state change events that will trigger a callback\n   * @param {string} [opts.label] - The label of this participant\n   * @param {number} [opts.timeout] -\n   *          he number of seconds that we should wait for an answer\n   * @param {boolean} [opts.record] -\n   *          Whether to record the participant and their conferences\n   * @param {boolean} [opts.muted] - Whether to mute the agent\n   * @param {string} [opts.beep] -\n   *          Whether to play a notification beep to the conference when the participant joins\n   * @param {boolean} [opts.startConferenceOnEnter] -\n   *          Whether the conference starts when the participant joins the conference\n   * @param {boolean} [opts.endConferenceOnExit] -\n   *          Whether to end the conference when the participant leaves\n   * @param {string} [opts.waitUrl] - URL that hosts pre-conference hold music\n   * @param {string} [opts.waitMethod] -\n   *          The HTTP method we should use to call `wait_url`\n   * @param {boolean} [opts.earlyMedia] -\n   *          Whether agents can hear the state of the outbound call\n   * @param {number} [opts.maxParticipants] -\n   *          The maximum number of agent conference participants\n   * @param {string} [opts.conferenceRecord] -\n   *          Whether to record the conference the participant is joining\n   * @param {string} [opts.conferenceTrim] -\n   *          Whether to trim leading and trailing silence from your recorded conference audio files\n   * @param {string} [opts.conferenceStatusCallback] -\n   *          The callback URL for conference events\n   * @param {string} [opts.conferenceStatusCallbackMethod] -\n   *          HTTP method for requesting `conference_status_callback` URL\n   * @param {string|list} [opts.conferenceStatusCallbackEvent] -\n   *          The conference state changes that should generate a call to `conference_status_callback`\n   * @param {string} [opts.recordingChannels] -\n   *          Specify `mono` or `dual` recording channels\n   * @param {string} [opts.recordingStatusCallback] -\n   *          The URL that we should call using the `recording_status_callback_method` when the recording status changes\n   * @param {string} [opts.recordingStatusCallbackMethod] -\n   *          The HTTP method we should use when we call `recording_status_callback`\n   * @param {string} [opts.sipAuthUsername] -\n   *          The SIP username used for authentication\n   * @param {string} [opts.sipAuthPassword] - The SIP password for authentication\n   * @param {string} [opts.region] -\n   *          The region where we should mix the conference audio\n   * @param {string} [opts.conferenceRecordingStatusCallback] -\n   *          The URL we should call using the `conference_recording_status_callback_method` when the conference recording is available\n   * @param {string} [opts.conferenceRecordingStatusCallbackMethod] -\n   *          The HTTP method we should use to call `conference_recording_status_callback`\n   * @param {string|list} [opts.recordingStatusCallbackEvent] -\n   *          The recording state changes that should generate a call to `recording_status_callback`\n   * @param {string|list} [opts.conferenceRecordingStatusCallbackEvent] -\n   *          The conference recording state changes that should generate a call to `conference_recording_status_callback`\n   * @param {boolean} [opts.coaching] - Indicates if the participant changed to coach\n   * @param {string} [opts.callSidToCoach] -\n   *          The SID of the participant who is being `coached`\n   * @param {string} [opts.jitterBufferSize] -\n   *          Jitter Buffer size for the connecting participant\n   * @param {string} [opts.byoc] - BYOC trunk SID (Beta)\n   * @param {string} [opts.callerId] -\n   *          The phone number, Client identifier, or username portion of SIP address that made this call.\n   * @param {string} [opts.callReason] - Reason for the call (Branded Calls Beta)\n   * @param {string} [opts.recordingTrack] - The track(s) to record\n   * @param {number} [opts.timeLimit] - The maximum duration of the call in seconds.\n   * @param {function} [callback] - Callback to handle processed record\n   *\n   * @returns {Promise} Resolves to processed ParticipantInstance\n   */\n  /* jshint ignore:end */\n  ParticipantListInstance.create = function create(opts, callback) {\n    if (_.isUndefined(opts)) {\n      throw new Error('Required parameter \"opts\" missing.');\n    }\n    if (_.isUndefined(opts['from'])) {\n      throw new Error('Required parameter \"opts[\\'from\\']\" missing.');\n    }\n    if (_.isUndefined(opts['to'])) {\n      throw new Error('Required parameter \"opts[\\'to\\']\" missing.');\n    }\n\n    var deferred = Q.defer();\n    var data = values.of({\n      'From': _.get(opts, 'from'),\n      'To': _.get(opts, 'to'),\n      'StatusCallback': _.get(opts, 'statusCallback'),\n      'StatusCallbackMethod': _.get(opts, 'statusCallbackMethod'),\n      'StatusCallbackEvent': serialize.map(_.get(opts, 'statusCallbackEvent'), function(e) { return e; }),\n      'Label': _.get(opts, 'label'),\n      'Timeout': _.get(opts, 'timeout'),\n      'Record': serialize.bool(_.get(opts, 'record')),\n      'Muted': serialize.bool(_.get(opts, 'muted')),\n      'Beep': _.get(opts, 'beep'),\n      'StartConferenceOnEnter': serialize.bool(_.get(opts, 'startConferenceOnEnter')),\n      'EndConferenceOnExit': serialize.bool(_.get(opts, 'endConferenceOnExit')),\n      'WaitUrl': _.get(opts, 'waitUrl'),\n      'WaitMethod': _.get(opts, 'waitMethod'),\n      'EarlyMedia': serialize.bool(_.get(opts, 'earlyMedia')),\n      'MaxParticipants': _.get(opts, 'maxParticipants'),\n      'ConferenceRecord': _.get(opts, 'conferenceRecord'),\n      'ConferenceTrim': _.get(opts, 'conferenceTrim'),\n      'ConferenceStatusCallback': _.get(opts, 'conferenceStatusCallback'),\n      'ConferenceStatusCallbackMethod': _.get(opts, 'conferenceStatusCallbackMethod'),\n      'ConferenceStatusCallbackEvent': serialize.map(_.get(opts, 'conferenceStatusCallbackEvent'), function(e) { return e; }),\n      'RecordingChannels': _.get(opts, 'recordingChannels'),\n      'RecordingStatusCallback': _.get(opts, 'recordingStatusCallback'),\n      'RecordingStatusCallbackMethod': _.get(opts, 'recordingStatusCallbackMethod'),\n      'SipAuthUsername': _.get(opts, 'sipAuthUsername'),\n      'SipAuthPassword': _.get(opts, 'sipAuthPassword'),\n      'Region': _.get(opts, 'region'),\n      'ConferenceRecordingStatusCallback': _.get(opts, 'conferenceRecordingStatusCallback'),\n      'ConferenceRecordingStatusCallbackMethod': _.get(opts, 'conferenceRecordingStatusCallbackMethod'),\n      'RecordingStatusCallbackEvent': serialize.map(_.get(opts, 'recordingStatusCallbackEvent'), function(e) { return e; }),\n      'ConferenceRecordingStatusCallbackEvent': serialize.map(_.get(opts, 'conferenceRecordingStatusCallbackEvent'), function(e) { return e; }),\n      'Coaching': serialize.bool(_.get(opts, 'coaching')),\n      'CallSidToCoach': _.get(opts, 'callSidToCoach'),\n      'JitterBufferSize': _.get(opts, 'jitterBufferSize'),\n      'Byoc': _.get(opts, 'byoc'),\n      'CallerId': _.get(opts, 'callerId'),\n      'CallReason': _.get(opts, 'callReason'),\n      'RecordingTrack': _.get(opts, 'recordingTrack'),\n      'TimeLimit': _.get(opts, 'timeLimit')\n    });\n\n    var promise = this._version.create({uri: this._uri, method: 'POST', data: data});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new ParticipantInstance(\n        this._version,\n        payload,\n        this._solution.accountSid,\n        this._solution.conferenceSid,\n        this._solution.callSid\n      ));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Streams ParticipantInstance records from the API.\n   *\n   * This operation lazily loads records as efficiently as possible until the limit\n   * is reached.\n   *\n   * The results are passed into the callback function, so this operation is memory\n   * efficient.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function each\n   * @memberof Twilio.Api.V2010.AccountContext.ConferenceContext.ParticipantList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {boolean} [opts.muted] -\n   *          Whether to return only participants that are muted\n   * @param {boolean} [opts.hold] -\n   *          Whether to return only participants that are on hold\n   * @param {boolean} [opts.coaching] -\n   *          Whether to return only participants who are coaching another call\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         each() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no pageSize is defined but a limit is defined,\n   *         each() will attempt to read the limit with the most efficient\n   *         page size, i.e. min(limit, 1000)\n   * @param {Function} [opts.callback] -\n   *         Function to process each record. If this and a positional\n   *         callback are passed, this one will be used\n   * @param {Function} [opts.done] -\n   *          Function to be called upon completion of streaming\n   * @param {Function} [callback] - Function to process each record\n   */\n  /* jshint ignore:end */\n  ParticipantListInstance.each = function each(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    if (opts.callback) {\n      callback = opts.callback;\n    }\n    if (_.isUndefined(callback)) {\n      throw new Error('Callback function must be provided');\n    }\n\n    var done = false;\n    var currentPage = 1;\n    var currentResource = 0;\n    var limits = this._version.readLimits({\n      limit: opts.limit,\n      pageSize: opts.pageSize\n    });\n\n    function onComplete(error) {\n      done = true;\n      if (_.isFunction(opts.done)) {\n        opts.done(error);\n      }\n    }\n\n    function fetchNextPage(fn) {\n      var promise = fn();\n      if (_.isUndefined(promise)) {\n        onComplete();\n        return;\n      }\n\n      promise.then(function(page) {\n        _.each(page.instances, function(instance) {\n          if (done || (!_.isUndefined(opts.limit) && currentResource >= opts.limit)) {\n            done = true;\n            return false;\n          }\n\n          currentResource++;\n          callback(instance, onComplete);\n        });\n\n        if (!done) {\n          currentPage++;\n          fetchNextPage(_.bind(page.nextPage, page));\n        } else {\n          onComplete();\n        }\n      });\n\n      promise.catch(onComplete);\n    }\n\n    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Lists ParticipantInstance records from the API as a list.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function list\n   * @memberof Twilio.Api.V2010.AccountContext.ConferenceContext.ParticipantList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {boolean} [opts.muted] -\n   *          Whether to return only participants that are muted\n   * @param {boolean} [opts.hold] -\n   *          Whether to return only participants that are on hold\n   * @param {boolean} [opts.coaching] -\n   *          Whether to return only participants who are coaching another call\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         list() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no page_size is defined but a limit is defined,\n   *         list() will attempt to read the limit with the most\n   *         efficient page size, i.e. min(limit, 1000)\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  ParticipantListInstance.list = function list(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    var deferred = Q.defer();\n    var allResources = [];\n    opts.callback = function(resource, done) {\n      allResources.push(resource);\n\n      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {\n        done();\n      }\n    };\n\n    opts.done = function(error) {\n      if (_.isUndefined(error)) {\n        deferred.resolve(allResources);\n      } else {\n        deferred.reject(error);\n      }\n    };\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    this.each(opts);\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single page of ParticipantInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function page\n   * @memberof Twilio.Api.V2010.AccountContext.ConferenceContext.ParticipantList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {boolean} [opts.muted] -\n   *          Whether to return only participants that are muted\n   * @param {boolean} [opts.hold] -\n   *          Whether to return only participants that are on hold\n   * @param {boolean} [opts.coaching] -\n   *          Whether to return only participants who are coaching another call\n   * @param {string} [opts.pageToken] - PageToken provided by the API\n   * @param {number} [opts.pageNumber] -\n   *          Page Number, this value is simply for client state\n   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  ParticipantListInstance.page = function page(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n\n    var deferred = Q.defer();\n    var data = values.of({\n      'Muted': serialize.bool(_.get(opts, 'muted')),\n      'Hold': serialize.bool(_.get(opts, 'hold')),\n      'Coaching': serialize.bool(_.get(opts, 'coaching')),\n      'PageToken': opts.pageToken,\n      'Page': opts.pageNumber,\n      'PageSize': opts.pageSize\n    });\n\n    var promise = this._version.page({uri: this._uri, method: 'GET', params: data});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new ParticipantPage(this._version, payload, this._solution));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single target page of ParticipantInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function getPage\n   * @memberof Twilio.Api.V2010.AccountContext.ConferenceContext.ParticipantList#\n   *\n   * @param {string} [targetUrl] - API-generated URL for the requested results page\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  ParticipantListInstance.getPage = function getPage(targetUrl, callback) {\n    var deferred = Q.defer();\n\n    var promise = this._version._domain.twilio.request({method: 'GET', uri: targetUrl});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new ParticipantPage(this._version, payload, this._solution));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Constructs a participant\n   *\n   * @function get\n   * @memberof Twilio.Api.V2010.AccountContext.ConferenceContext.ParticipantList#\n   *\n   * @param {string} callSid -\n   *          The Call SID or URL encoded label of the participant to fetch\n   *\n   * @returns {Twilio.Api.V2010.AccountContext.ConferenceContext.ParticipantContext}\n   */\n  /* jshint ignore:end */\n  ParticipantListInstance.get = function get(callSid) {\n    return new ParticipantContext(\n      this._version,\n      this._solution.accountSid,\n      this._solution.conferenceSid,\n      callSid\n    );\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Api.V2010.AccountContext.ConferenceContext.ParticipantList#\n   *\n   * @returns Object\n   */\n  /* jshint ignore:end */\n  ParticipantListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n\n  ParticipantListInstance[util.inspect.custom] = function inspect(depth, options)\n      {\n    return util.inspect(this.toJSON(), options);\n  };\n\n  return ParticipantListInstance;\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the ParticipantPage\n *\n * @constructor Twilio.Api.V2010.AccountContext.ConferenceContext.ParticipantPage\n *\n * @param {V2010} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {ParticipantSolution} solution - Path solution\n *\n * @returns ParticipantPage\n */\n/* jshint ignore:end */\nParticipantPage = function ParticipantPage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n\n_.extend(ParticipantPage.prototype, Page.prototype);\nParticipantPage.prototype.constructor = ParticipantPage;\n\n/* jshint ignore:start */\n/**\n * Build an instance of ParticipantInstance\n *\n * @function getInstance\n * @memberof Twilio.Api.V2010.AccountContext.ConferenceContext.ParticipantPage#\n *\n * @param {ParticipantPayload} payload - Payload response from the API\n *\n * @returns ParticipantInstance\n */\n/* jshint ignore:end */\nParticipantPage.prototype.getInstance = function getInstance(payload) {\n  return new ParticipantInstance(\n    this._version,\n    payload,\n    this._solution.accountSid,\n    this._solution.conferenceSid\n  );\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Api.V2010.AccountContext.ConferenceContext.ParticipantPage#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nParticipantPage.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function(value, key) {\n    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\n\nParticipantPage.prototype[util.inspect.custom] = function inspect(depth,\n    options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the ParticipantContext\n *\n * @constructor Twilio.Api.V2010.AccountContext.ConferenceContext.ParticipantInstance\n *\n * @property {string} accountSid - The SID of the Account that created the resource\n * @property {string} callSid - The SID of the Call the resource is associated with\n * @property {string} label - The label of this participant\n * @property {string} callSidToCoach -\n *          The SID of the participant who is being `coached`\n * @property {boolean} coaching - Indicates if the participant changed to coach\n * @property {string} conferenceSid -\n *          The SID of the conference the participant is in\n * @property {Date} dateCreated -\n *          The RFC 2822 date and time in GMT that the resource was created\n * @property {Date} dateUpdated -\n *          The RFC 2822 date and time in GMT that the resource was last updated\n * @property {boolean} endConferenceOnExit -\n *          Whether the conference ends when the participant leaves\n * @property {boolean} muted - Whether the participant is muted\n * @property {boolean} hold - Whether the participant is on hold\n * @property {boolean} startConferenceOnEnter -\n *          Whether the conference starts when the participant joins the conference\n * @property {participant.status} status -\n *          The status of the participant's call in a session\n * @property {string} uri -\n *          The URI of the resource, relative to `https://api.twilio.com`\n *\n * @param {V2010} version - Version of the resource\n * @param {ParticipantPayload} payload - The instance payload\n * @param {sid} accountSid - The SID of the Account that created the resource\n * @param {sid} conferenceSid - The SID of the conference the participant is in\n * @param {sid_like} callSid -\n *          The Call SID or URL encoded label of the participant to fetch\n */\n/* jshint ignore:end */\nParticipantInstance = function ParticipantInstance(version, payload, accountSid,\n                                                    conferenceSid, callSid) {\n  this._version = version;\n\n  // Marshaled Properties\n  this.accountSid = payload.account_sid; // jshint ignore:line\n  this.callSid = payload.call_sid; // jshint ignore:line\n  this.label = payload.label; // jshint ignore:line\n  this.callSidToCoach = payload.call_sid_to_coach; // jshint ignore:line\n  this.coaching = payload.coaching; // jshint ignore:line\n  this.conferenceSid = payload.conference_sid; // jshint ignore:line\n  this.dateCreated = deserialize.rfc2822DateTime(payload.date_created); // jshint ignore:line\n  this.dateUpdated = deserialize.rfc2822DateTime(payload.date_updated); // jshint ignore:line\n  this.endConferenceOnExit = payload.end_conference_on_exit; // jshint ignore:line\n  this.muted = payload.muted; // jshint ignore:line\n  this.hold = payload.hold; // jshint ignore:line\n  this.startConferenceOnEnter = payload.start_conference_on_enter; // jshint ignore:line\n  this.status = payload.status; // jshint ignore:line\n  this.uri = payload.uri; // jshint ignore:line\n\n  // Context\n  this._context = undefined;\n  this._solution = {\n    accountSid: accountSid,\n    conferenceSid: conferenceSid,\n    callSid: callSid || this.callSid,\n  };\n};\n\nObject.defineProperty(ParticipantInstance.prototype,\n  '_proxy', {\n    get: function() {\n      if (!this._context) {\n        this._context = new ParticipantContext(\n          this._version,\n          this._solution.accountSid,\n          this._solution.conferenceSid,\n          this._solution.callSid\n        );\n      }\n\n      return this._context;\n    }\n});\n\n/* jshint ignore:start */\n/**\n * fetch a ParticipantInstance\n *\n * @function fetch\n * @memberof Twilio.Api.V2010.AccountContext.ConferenceContext.ParticipantInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed ParticipantInstance\n */\n/* jshint ignore:end */\nParticipantInstance.prototype.fetch = function fetch(callback) {\n  return this._proxy.fetch(callback);\n};\n\n/* jshint ignore:start */\n/**\n * update a ParticipantInstance\n *\n * @function update\n * @memberof Twilio.Api.V2010.AccountContext.ConferenceContext.ParticipantInstance#\n *\n * @param {object} [opts] - Options for request\n * @param {boolean} [opts.muted] - Whether the participant should be muted\n * @param {boolean} [opts.hold] - Whether the participant should be on hold\n * @param {string} [opts.holdUrl] -\n *          The URL we call using the `hold_method` for  music that plays when the participant is on hold\n * @param {string} [opts.holdMethod] -\n *          The HTTP method we should use to call hold_url\n * @param {string} [opts.announceUrl] -\n *          The URL we call using the `announce_method` for an announcement to the participant\n * @param {string} [opts.announceMethod] -\n *          The HTTP method we should use to call announce_url\n * @param {string} [opts.waitUrl] - URL that hosts pre-conference hold music\n * @param {string} [opts.waitMethod] -\n *          The HTTP method we should use to call `wait_url`\n * @param {boolean} [opts.beepOnExit] -\n *          Whether to play a notification beep to the conference when the participant exit\n * @param {boolean} [opts.endConferenceOnExit] -\n *          Whether to end the conference when the participant leaves\n * @param {boolean} [opts.coaching] - Indicates if the participant changed to coach\n * @param {string} [opts.callSidToCoach] -\n *          The SID of the participant who is being `coached`\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed ParticipantInstance\n */\n/* jshint ignore:end */\nParticipantInstance.prototype.update = function update(opts, callback) {\n  return this._proxy.update(opts, callback);\n};\n\n/* jshint ignore:start */\n/**\n * remove a ParticipantInstance\n *\n * @function remove\n * @memberof Twilio.Api.V2010.AccountContext.ConferenceContext.ParticipantInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed ParticipantInstance\n */\n/* jshint ignore:end */\nParticipantInstance.prototype.remove = function remove(callback) {\n  return this._proxy.remove(callback);\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Api.V2010.AccountContext.ConferenceContext.ParticipantInstance#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nParticipantInstance.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function(value, key) {\n    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\n\nParticipantInstance.prototype[util.inspect.custom] = function inspect(depth,\n    options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the ParticipantContext\n *\n * @constructor Twilio.Api.V2010.AccountContext.ConferenceContext.ParticipantContext\n *\n * @param {V2010} version - Version of the resource\n * @param {sid} accountSid -\n *          The SID of the Account that created the resource to fetch\n * @param {sid} conferenceSid -\n *          The SID of the conference with the participant to fetch\n * @param {sid_like} callSid -\n *          The Call SID or URL encoded label of the participant to fetch\n */\n/* jshint ignore:end */\nParticipantContext = function ParticipantContext(version, accountSid,\n                                                  conferenceSid, callSid) {\n  this._version = version;\n\n  // Path Solution\n  this._solution = {accountSid: accountSid, conferenceSid: conferenceSid, callSid: callSid, };\n  this._uri = `/Accounts/${accountSid}/Conferences/${conferenceSid}/Participants/${callSid}.json`;\n};\n\n/* jshint ignore:start */\n/**\n * fetch a ParticipantInstance\n *\n * @function fetch\n * @memberof Twilio.Api.V2010.AccountContext.ConferenceContext.ParticipantContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed ParticipantInstance\n */\n/* jshint ignore:end */\nParticipantContext.prototype.fetch = function fetch(callback) {\n  var deferred = Q.defer();\n  var promise = this._version.fetch({uri: this._uri, method: 'GET'});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(new ParticipantInstance(\n      this._version,\n      payload,\n      this._solution.accountSid,\n      this._solution.conferenceSid,\n      this._solution.callSid\n    ));\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * update a ParticipantInstance\n *\n * @function update\n * @memberof Twilio.Api.V2010.AccountContext.ConferenceContext.ParticipantContext#\n *\n * @param {object} [opts] - Options for request\n * @param {boolean} [opts.muted] - Whether the participant should be muted\n * @param {boolean} [opts.hold] - Whether the participant should be on hold\n * @param {string} [opts.holdUrl] -\n *          The URL we call using the `hold_method` for  music that plays when the participant is on hold\n * @param {string} [opts.holdMethod] -\n *          The HTTP method we should use to call hold_url\n * @param {string} [opts.announceUrl] -\n *          The URL we call using the `announce_method` for an announcement to the participant\n * @param {string} [opts.announceMethod] -\n *          The HTTP method we should use to call announce_url\n * @param {string} [opts.waitUrl] - URL that hosts pre-conference hold music\n * @param {string} [opts.waitMethod] -\n *          The HTTP method we should use to call `wait_url`\n * @param {boolean} [opts.beepOnExit] -\n *          Whether to play a notification beep to the conference when the participant exit\n * @param {boolean} [opts.endConferenceOnExit] -\n *          Whether to end the conference when the participant leaves\n * @param {boolean} [opts.coaching] - Indicates if the participant changed to coach\n * @param {string} [opts.callSidToCoach] -\n *          The SID of the participant who is being `coached`\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed ParticipantInstance\n */\n/* jshint ignore:end */\nParticipantContext.prototype.update = function update(opts, callback) {\n  if (_.isFunction(opts)) {\n    callback = opts;\n    opts = {};\n  }\n  opts = opts || {};\n\n  var deferred = Q.defer();\n  var data = values.of({\n    'Muted': serialize.bool(_.get(opts, 'muted')),\n    'Hold': serialize.bool(_.get(opts, 'hold')),\n    'HoldUrl': _.get(opts, 'holdUrl'),\n    'HoldMethod': _.get(opts, 'holdMethod'),\n    'AnnounceUrl': _.get(opts, 'announceUrl'),\n    'AnnounceMethod': _.get(opts, 'announceMethod'),\n    'WaitUrl': _.get(opts, 'waitUrl'),\n    'WaitMethod': _.get(opts, 'waitMethod'),\n    'BeepOnExit': serialize.bool(_.get(opts, 'beepOnExit')),\n    'EndConferenceOnExit': serialize.bool(_.get(opts, 'endConferenceOnExit')),\n    'Coaching': serialize.bool(_.get(opts, 'coaching')),\n    'CallSidToCoach': _.get(opts, 'callSidToCoach')\n  });\n\n  var promise = this._version.update({uri: this._uri, method: 'POST', data: data});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(new ParticipantInstance(\n      this._version,\n      payload,\n      this._solution.accountSid,\n      this._solution.conferenceSid,\n      this._solution.callSid\n    ));\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * remove a ParticipantInstance\n *\n * @function remove\n * @memberof Twilio.Api.V2010.AccountContext.ConferenceContext.ParticipantContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed ParticipantInstance\n */\n/* jshint ignore:end */\nParticipantContext.prototype.remove = function remove(callback) {\n  var deferred = Q.defer();\n  var promise = this._version.remove({uri: this._uri, method: 'DELETE'});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(payload);\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Api.V2010.AccountContext.ConferenceContext.ParticipantContext#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nParticipantContext.prototype.toJSON = function toJSON() {\n  return this._solution;\n};\n\nParticipantContext.prototype[util.inspect.custom] = function inspect(depth,\n    options) {\n  return util.inspect(this.toJSON(), options);\n};\n\nmodule.exports = {\n  ParticipantList: ParticipantList,\n  ParticipantPage: ParticipantPage,\n  ParticipantInstance: ParticipantInstance,\n  ParticipantContext: ParticipantContext\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}