{"ast":null,"code":"'use strict';\n/* jshint ignore:start */\n\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n\n/* jshint ignore:end */\n\nvar Q = require('q');\n/* jshint ignore:line */\n\n\nvar _ = require('lodash');\n/* jshint ignore:line */\n\n\nvar util = require('util');\n/* jshint ignore:line */\n\n\nvar ExecutionList = require('./flow/execution').ExecutionList;\n\nvar FlowRevisionList = require('./flow/flowRevision').FlowRevisionList;\n\nvar FlowTestUserList = require('./flow/testUser').FlowTestUserList;\n\nvar Page = require('../../../base/Page');\n/* jshint ignore:line */\n\n\nvar deserialize = require('../../../base/deserialize');\n/* jshint ignore:line */\n\n\nvar serialize = require('../../../base/serialize');\n/* jshint ignore:line */\n\n\nvar values = require('../../../base/values');\n/* jshint ignore:line */\n\n\nvar FlowList;\nvar FlowPage;\nvar FlowInstance;\nvar FlowContext;\n/* jshint ignore:start */\n\n/**\n * Initialize the FlowList\n *\n * @constructor Twilio.Studio.V2.FlowList\n *\n * @param {Twilio.Studio.V2} version - Version of the resource\n */\n\n/* jshint ignore:end */\n\nFlowList = function FlowList(version) {\n  /* jshint ignore:start */\n\n  /**\n   * @function flows\n   * @memberof Twilio.Studio.V2#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Studio.V2.FlowContext}\n   */\n\n  /* jshint ignore:end */\n  function FlowListInstance(sid) {\n    return FlowListInstance.get(sid);\n  }\n\n  FlowListInstance._version = version; // Path Solution\n\n  FlowListInstance._solution = {};\n  FlowListInstance._uri = `/Flows`;\n  /* jshint ignore:start */\n\n  /**\n   * create a FlowInstance\n   *\n   * @function create\n   * @memberof Twilio.Studio.V2.FlowList#\n   *\n   * @param {object} opts - Options for request\n   * @param {string} opts.friendlyName -\n   *          The string that you assigned to describe the Flow\n   * @param {flow.status} opts.status - The status of the Flow\n   * @param {object} opts.definition - JSON representation of flow definition\n   * @param {string} [opts.commitMessage] -\n   *          Description of change made in the revision\n   * @param {function} [callback] - Callback to handle processed record\n   *\n   * @returns {Promise} Resolves to processed FlowInstance\n   */\n\n  /* jshint ignore:end */\n\n  FlowListInstance.create = function create(opts, callback) {\n    if (_.isUndefined(opts)) {\n      throw new Error('Required parameter \"opts\" missing.');\n    }\n\n    if (_.isUndefined(opts['friendlyName'])) {\n      throw new Error('Required parameter \"opts[\\'friendlyName\\']\" missing.');\n    }\n\n    if (_.isUndefined(opts['status'])) {\n      throw new Error('Required parameter \"opts[\\'status\\']\" missing.');\n    }\n\n    if (_.isUndefined(opts['definition'])) {\n      throw new Error('Required parameter \"opts[\\'definition\\']\" missing.');\n    }\n\n    var deferred = Q.defer();\n    var data = values.of({\n      'FriendlyName': _.get(opts, 'friendlyName'),\n      'Status': _.get(opts, 'status'),\n      'Definition': serialize.object(_.get(opts, 'definition')),\n      'CommitMessage': _.get(opts, 'commitMessage')\n    });\n\n    var promise = this._version.create({\n      uri: this._uri,\n      method: 'POST',\n      data: data\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new FlowInstance(this._version, payload, this._solution.sid));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Streams FlowInstance records from the API.\n   *\n   * This operation lazily loads records as efficiently as possible until the limit\n   * is reached.\n   *\n   * The results are passed into the callback function, so this operation is memory\n   * efficient.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function each\n   * @memberof Twilio.Studio.V2.FlowList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         each() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no pageSize is defined but a limit is defined,\n   *         each() will attempt to read the limit with the most efficient\n   *         page size, i.e. min(limit, 1000)\n   * @param {Function} [opts.callback] -\n   *         Function to process each record. If this and a positional\n   *         callback are passed, this one will be used\n   * @param {Function} [opts.done] -\n   *          Function to be called upon completion of streaming\n   * @param {Function} [callback] - Function to process each record\n   */\n\n  /* jshint ignore:end */\n\n\n  FlowListInstance.each = function each(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n\n    if (opts.callback) {\n      callback = opts.callback;\n    }\n\n    if (_.isUndefined(callback)) {\n      throw new Error('Callback function must be provided');\n    }\n\n    var done = false;\n    var currentPage = 1;\n    var currentResource = 0;\n\n    var limits = this._version.readLimits({\n      limit: opts.limit,\n      pageSize: opts.pageSize\n    });\n\n    function onComplete(error) {\n      done = true;\n\n      if (_.isFunction(opts.done)) {\n        opts.done(error);\n      }\n    }\n\n    function fetchNextPage(fn) {\n      var promise = fn();\n\n      if (_.isUndefined(promise)) {\n        onComplete();\n        return;\n      }\n\n      promise.then(function (page) {\n        _.each(page.instances, function (instance) {\n          if (done || !_.isUndefined(opts.limit) && currentResource >= opts.limit) {\n            done = true;\n            return false;\n          }\n\n          currentResource++;\n          callback(instance, onComplete);\n        });\n\n        if (!done) {\n          currentPage++;\n          fetchNextPage(_.bind(page.nextPage, page));\n        } else {\n          onComplete();\n        }\n      });\n      promise.catch(onComplete);\n    }\n\n    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Lists FlowInstance records from the API as a list.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function list\n   * @memberof Twilio.Studio.V2.FlowList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         list() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no page_size is defined but a limit is defined,\n   *         list() will attempt to read the limit with the most\n   *         efficient page size, i.e. min(limit, 1000)\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  FlowListInstance.list = function list(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n    var deferred = Q.defer();\n    var allResources = [];\n\n    opts.callback = function (resource, done) {\n      allResources.push(resource);\n\n      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {\n        done();\n      }\n    };\n\n    opts.done = function (error) {\n      if (_.isUndefined(error)) {\n        deferred.resolve(allResources);\n      } else {\n        deferred.reject(error);\n      }\n    };\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    this.each(opts);\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Retrieve a single page of FlowInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function page\n   * @memberof Twilio.Studio.V2.FlowList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.pageToken] - PageToken provided by the API\n   * @param {number} [opts.pageNumber] -\n   *          Page Number, this value is simply for client state\n   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  FlowListInstance.page = function page(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n    var deferred = Q.defer();\n    var data = values.of({\n      'PageToken': opts.pageToken,\n      'Page': opts.pageNumber,\n      'PageSize': opts.pageSize\n    });\n\n    var promise = this._version.page({\n      uri: this._uri,\n      method: 'GET',\n      params: data\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new FlowPage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Retrieve a single target page of FlowInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function getPage\n   * @memberof Twilio.Studio.V2.FlowList#\n   *\n   * @param {string} [targetUrl] - API-generated URL for the requested results page\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  FlowListInstance.getPage = function getPage(targetUrl, callback) {\n    var deferred = Q.defer();\n\n    var promise = this._version._domain.twilio.request({\n      method: 'GET',\n      uri: targetUrl\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new FlowPage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Constructs a flow\n   *\n   * @function get\n   * @memberof Twilio.Studio.V2.FlowList#\n   *\n   * @param {string} sid - The SID that identifies the resource to fetch\n   *\n   * @returns {Twilio.Studio.V2.FlowContext}\n   */\n\n  /* jshint ignore:end */\n\n\n  FlowListInstance.get = function get(sid) {\n    return new FlowContext(this._version, sid);\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Studio.V2.FlowList#\n   *\n   * @returns Object\n   */\n\n  /* jshint ignore:end */\n\n\n  FlowListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n\n  FlowListInstance[util.inspect.custom] = function inspect(depth, options) {\n    return util.inspect(this.toJSON(), options);\n  };\n\n  return FlowListInstance;\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the FlowPage\n *\n * @constructor Twilio.Studio.V2.FlowPage\n *\n * @param {V2} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {FlowSolution} solution - Path solution\n *\n * @returns FlowPage\n */\n\n/* jshint ignore:end */\n\n\nFlowPage = function FlowPage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n\n_.extend(FlowPage.prototype, Page.prototype);\n\nFlowPage.prototype.constructor = FlowPage;\n/* jshint ignore:start */\n\n/**\n * Build an instance of FlowInstance\n *\n * @function getInstance\n * @memberof Twilio.Studio.V2.FlowPage#\n *\n * @param {FlowPayload} payload - Payload response from the API\n *\n * @returns FlowInstance\n */\n\n/* jshint ignore:end */\n\nFlowPage.prototype.getInstance = function getInstance(payload) {\n  return new FlowInstance(this._version, payload);\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Studio.V2.FlowPage#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nFlowPage.prototype.toJSON = function toJSON() {\n  let clone = {};\n\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n\n  return clone;\n};\n\nFlowPage.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the FlowContext\n *\n * @constructor Twilio.Studio.V2.FlowInstance\n *\n * @property {string} sid - The unique string that identifies the resource\n * @property {string} accountSid - The SID of the Account that created the resource\n * @property {string} friendlyName -\n *          The string that you assigned to describe the Flow\n * @property {object} definition - JSON representation of flow definition\n * @property {flow.status} status - The status of the Flow\n * @property {number} revision -\n *          The latest revision number of the Flow's definition\n * @property {string} commitMessage - Description of change made in the revision\n * @property {boolean} valid - Boolean if the flow definition is valid\n * @property {object} errors - List of error in the flow definition\n * @property {object} warnings - List of warnings in the flow definition\n * @property {Date} dateCreated -\n *          The ISO 8601 date and time in GMT when the resource was created\n * @property {Date} dateUpdated -\n *          The ISO 8601 date and time in GMT when the resource was last updated\n * @property {string} webhookUrl - The webhook_url\n * @property {string} url - The absolute URL of the resource\n * @property {string} links - Nested resource URLs\n *\n * @param {V2} version - Version of the resource\n * @param {FlowPayload} payload - The instance payload\n * @param {sid} sid - The SID that identifies the resource to fetch\n */\n\n/* jshint ignore:end */\n\n\nFlowInstance = function FlowInstance(version, payload, sid) {\n  this._version = version; // Marshaled Properties\n\n  this.sid = payload.sid; // jshint ignore:line\n\n  this.accountSid = payload.account_sid; // jshint ignore:line\n\n  this.friendlyName = payload.friendly_name; // jshint ignore:line\n\n  this.definition = payload.definition; // jshint ignore:line\n\n  this.status = payload.status; // jshint ignore:line\n\n  this.revision = deserialize.integer(payload.revision); // jshint ignore:line\n\n  this.commitMessage = payload.commit_message; // jshint ignore:line\n\n  this.valid = payload.valid; // jshint ignore:line\n\n  this.errors = payload.errors; // jshint ignore:line\n\n  this.warnings = payload.warnings; // jshint ignore:line\n\n  this.dateCreated = deserialize.iso8601DateTime(payload.date_created); // jshint ignore:line\n\n  this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated); // jshint ignore:line\n\n  this.webhookUrl = payload.webhook_url; // jshint ignore:line\n\n  this.url = payload.url; // jshint ignore:line\n\n  this.links = payload.links; // jshint ignore:line\n  // Context\n\n  this._context = undefined;\n  this._solution = {\n    sid: sid || this.sid\n  };\n};\n\nObject.defineProperty(FlowInstance.prototype, '_proxy', {\n  get: function () {\n    if (!this._context) {\n      this._context = new FlowContext(this._version, this._solution.sid);\n    }\n\n    return this._context;\n  }\n});\n/* jshint ignore:start */\n\n/**\n * update a FlowInstance\n *\n * @function update\n * @memberof Twilio.Studio.V2.FlowInstance#\n *\n * @param {object} opts - Options for request\n * @param {flow.status} opts.status - The status of the Flow\n * @param {string} [opts.friendlyName] -\n *          The string that you assigned to describe the Flow\n * @param {object} [opts.definition] - JSON representation of flow definition\n * @param {string} [opts.commitMessage] -\n *          Description of change made in the revision\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed FlowInstance\n */\n\n/* jshint ignore:end */\n\nFlowInstance.prototype.update = function update(opts, callback) {\n  return this._proxy.update(opts, callback);\n};\n/* jshint ignore:start */\n\n/**\n * fetch a FlowInstance\n *\n * @function fetch\n * @memberof Twilio.Studio.V2.FlowInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed FlowInstance\n */\n\n/* jshint ignore:end */\n\n\nFlowInstance.prototype.fetch = function fetch(callback) {\n  return this._proxy.fetch(callback);\n};\n/* jshint ignore:start */\n\n/**\n * remove a FlowInstance\n *\n * @function remove\n * @memberof Twilio.Studio.V2.FlowInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed FlowInstance\n */\n\n/* jshint ignore:end */\n\n\nFlowInstance.prototype.remove = function remove(callback) {\n  return this._proxy.remove(callback);\n};\n/* jshint ignore:start */\n\n/**\n * Access the revisions\n *\n * @function revisions\n * @memberof Twilio.Studio.V2.FlowInstance#\n *\n * @returns {Twilio.Studio.V2.FlowContext.FlowRevisionList}\n */\n\n/* jshint ignore:end */\n\n\nFlowInstance.prototype.revisions = function revisions() {\n  return this._proxy.revisions;\n};\n/* jshint ignore:start */\n\n/**\n * Access the testUsers\n *\n * @function testUsers\n * @memberof Twilio.Studio.V2.FlowInstance#\n *\n * @returns {Twilio.Studio.V2.FlowContext.FlowTestUserList}\n */\n\n/* jshint ignore:end */\n\n\nFlowInstance.prototype.testUsers = function testUsers() {\n  return this._proxy.testUsers;\n};\n/* jshint ignore:start */\n\n/**\n * Access the executions\n *\n * @function executions\n * @memberof Twilio.Studio.V2.FlowInstance#\n *\n * @returns {Twilio.Studio.V2.FlowContext.ExecutionList}\n */\n\n/* jshint ignore:end */\n\n\nFlowInstance.prototype.executions = function executions() {\n  return this._proxy.executions;\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Studio.V2.FlowInstance#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nFlowInstance.prototype.toJSON = function toJSON() {\n  let clone = {};\n\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n\n  return clone;\n};\n\nFlowInstance.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the FlowContext\n *\n * @constructor Twilio.Studio.V2.FlowContext\n *\n * @property {Twilio.Studio.V2.FlowContext.FlowRevisionList} revisions -\n *          revisions resource\n * @property {Twilio.Studio.V2.FlowContext.FlowTestUserList} testUsers -\n *          testUsers resource\n * @property {Twilio.Studio.V2.FlowContext.ExecutionList} executions -\n *          executions resource\n *\n * @param {V2} version - Version of the resource\n * @param {sid} sid - The SID that identifies the resource to fetch\n */\n\n/* jshint ignore:end */\n\n\nFlowContext = function FlowContext(version, sid) {\n  this._version = version; // Path Solution\n\n  this._solution = {\n    sid: sid\n  };\n  this._uri = `/Flows/${sid}`; // Dependents\n\n  this._revisions = undefined;\n  this._testUsers = undefined;\n  this._executions = undefined;\n};\n/* jshint ignore:start */\n\n/**\n * update a FlowInstance\n *\n * @function update\n * @memberof Twilio.Studio.V2.FlowContext#\n *\n * @param {object} opts - Options for request\n * @param {flow.status} opts.status - The status of the Flow\n * @param {string} [opts.friendlyName] -\n *          The string that you assigned to describe the Flow\n * @param {object} [opts.definition] - JSON representation of flow definition\n * @param {string} [opts.commitMessage] -\n *          Description of change made in the revision\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed FlowInstance\n */\n\n/* jshint ignore:end */\n\n\nFlowContext.prototype.update = function update(opts, callback) {\n  if (_.isUndefined(opts)) {\n    throw new Error('Required parameter \"opts\" missing.');\n  }\n\n  if (_.isUndefined(opts['status'])) {\n    throw new Error('Required parameter \"opts[\\'status\\']\" missing.');\n  }\n\n  var deferred = Q.defer();\n  var data = values.of({\n    'Status': _.get(opts, 'status'),\n    'FriendlyName': _.get(opts, 'friendlyName'),\n    'Definition': serialize.object(_.get(opts, 'definition')),\n    'CommitMessage': _.get(opts, 'commitMessage')\n  });\n\n  var promise = this._version.update({\n    uri: this._uri,\n    method: 'POST',\n    data: data\n  });\n\n  promise = promise.then(function (payload) {\n    deferred.resolve(new FlowInstance(this._version, payload, this._solution.sid));\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n/* jshint ignore:start */\n\n/**\n * fetch a FlowInstance\n *\n * @function fetch\n * @memberof Twilio.Studio.V2.FlowContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed FlowInstance\n */\n\n/* jshint ignore:end */\n\n\nFlowContext.prototype.fetch = function fetch(callback) {\n  var deferred = Q.defer();\n\n  var promise = this._version.fetch({\n    uri: this._uri,\n    method: 'GET'\n  });\n\n  promise = promise.then(function (payload) {\n    deferred.resolve(new FlowInstance(this._version, payload, this._solution.sid));\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n/* jshint ignore:start */\n\n/**\n * remove a FlowInstance\n *\n * @function remove\n * @memberof Twilio.Studio.V2.FlowContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed FlowInstance\n */\n\n/* jshint ignore:end */\n\n\nFlowContext.prototype.remove = function remove(callback) {\n  var deferred = Q.defer();\n\n  var promise = this._version.remove({\n    uri: this._uri,\n    method: 'DELETE'\n  });\n\n  promise = promise.then(function (payload) {\n    deferred.resolve(payload);\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\nObject.defineProperty(FlowContext.prototype, 'revisions', {\n  get: function () {\n    if (!this._revisions) {\n      this._revisions = new FlowRevisionList(this._version, this._solution.sid);\n    }\n\n    return this._revisions;\n  }\n});\nObject.defineProperty(FlowContext.prototype, 'testUsers', {\n  get: function () {\n    if (!this._testUsers) {\n      this._testUsers = new FlowTestUserList(this._version, this._solution.sid);\n    }\n\n    return this._testUsers;\n  }\n});\nObject.defineProperty(FlowContext.prototype, 'executions', {\n  get: function () {\n    if (!this._executions) {\n      this._executions = new ExecutionList(this._version, this._solution.sid);\n    }\n\n    return this._executions;\n  }\n});\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Studio.V2.FlowContext#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\nFlowContext.prototype.toJSON = function toJSON() {\n  return this._solution;\n};\n\nFlowContext.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\nmodule.exports = {\n  FlowList: FlowList,\n  FlowPage: FlowPage,\n  FlowInstance: FlowInstance,\n  FlowContext: FlowContext\n};","map":{"version":3,"names":["Q","require","_","util","ExecutionList","FlowRevisionList","FlowTestUserList","Page","deserialize","serialize","values","FlowList","FlowPage","FlowInstance","FlowContext","version","FlowListInstance","sid","get","_version","_solution","_uri","create","opts","callback","isUndefined","Error","deferred","defer","data","of","object","promise","uri","method","then","payload","resolve","bind","catch","error","reject","isFunction","nodeify","each","done","currentPage","currentResource","limits","readLimits","limit","pageSize","onComplete","fetchNextPage","fn","page","instances","instance","nextPage","merge","list","allResources","resource","push","length","pageToken","pageNumber","params","getPage","targetUrl","_domain","twilio","request","toJSON","inspect","custom","depth","options","response","solution","prototype","constructor","call","extend","getInstance","clone","forOwn","value","key","startsWith","accountSid","account_sid","friendlyName","friendly_name","definition","status","revision","integer","commitMessage","commit_message","valid","errors","warnings","dateCreated","iso8601DateTime","date_created","dateUpdated","date_updated","webhookUrl","webhook_url","url","links","_context","undefined","Object","defineProperty","update","_proxy","fetch","remove","revisions","testUsers","executions","_revisions","_testUsers","_executions","module","exports"],"sources":["/Users/hooniesun/rmit/fwp/assessment1/lan/node_modules/twilio/lib/rest/studio/v2/flow.js"],"sourcesContent":["'use strict';\n\n/* jshint ignore:start */\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n/* jshint ignore:end */\n\nvar Q = require('q');  /* jshint ignore:line */\nvar _ = require('lodash');  /* jshint ignore:line */\nvar util = require('util');  /* jshint ignore:line */\nvar ExecutionList = require('./flow/execution').ExecutionList;\nvar FlowRevisionList = require('./flow/flowRevision').FlowRevisionList;\nvar FlowTestUserList = require('./flow/testUser').FlowTestUserList;\nvar Page = require('../../../base/Page');  /* jshint ignore:line */\nvar deserialize = require(\n    '../../../base/deserialize');  /* jshint ignore:line */\nvar serialize = require('../../../base/serialize');  /* jshint ignore:line */\nvar values = require('../../../base/values');  /* jshint ignore:line */\n\nvar FlowList;\nvar FlowPage;\nvar FlowInstance;\nvar FlowContext;\n\n/* jshint ignore:start */\n/**\n * Initialize the FlowList\n *\n * @constructor Twilio.Studio.V2.FlowList\n *\n * @param {Twilio.Studio.V2} version - Version of the resource\n */\n/* jshint ignore:end */\nFlowList = function FlowList(version) {\n  /* jshint ignore:start */\n  /**\n   * @function flows\n   * @memberof Twilio.Studio.V2#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Studio.V2.FlowContext}\n   */\n  /* jshint ignore:end */\n  function FlowListInstance(sid) {\n    return FlowListInstance.get(sid);\n  }\n\n  FlowListInstance._version = version;\n  // Path Solution\n  FlowListInstance._solution = {};\n  FlowListInstance._uri = `/Flows`;\n  /* jshint ignore:start */\n  /**\n   * create a FlowInstance\n   *\n   * @function create\n   * @memberof Twilio.Studio.V2.FlowList#\n   *\n   * @param {object} opts - Options for request\n   * @param {string} opts.friendlyName -\n   *          The string that you assigned to describe the Flow\n   * @param {flow.status} opts.status - The status of the Flow\n   * @param {object} opts.definition - JSON representation of flow definition\n   * @param {string} [opts.commitMessage] -\n   *          Description of change made in the revision\n   * @param {function} [callback] - Callback to handle processed record\n   *\n   * @returns {Promise} Resolves to processed FlowInstance\n   */\n  /* jshint ignore:end */\n  FlowListInstance.create = function create(opts, callback) {\n    if (_.isUndefined(opts)) {\n      throw new Error('Required parameter \"opts\" missing.');\n    }\n    if (_.isUndefined(opts['friendlyName'])) {\n      throw new Error('Required parameter \"opts[\\'friendlyName\\']\" missing.');\n    }\n    if (_.isUndefined(opts['status'])) {\n      throw new Error('Required parameter \"opts[\\'status\\']\" missing.');\n    }\n    if (_.isUndefined(opts['definition'])) {\n      throw new Error('Required parameter \"opts[\\'definition\\']\" missing.');\n    }\n\n    var deferred = Q.defer();\n    var data = values.of({\n      'FriendlyName': _.get(opts, 'friendlyName'),\n      'Status': _.get(opts, 'status'),\n      'Definition': serialize.object(_.get(opts, 'definition')),\n      'CommitMessage': _.get(opts, 'commitMessage')\n    });\n\n    var promise = this._version.create({uri: this._uri, method: 'POST', data: data});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new FlowInstance(this._version, payload, this._solution.sid));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Streams FlowInstance records from the API.\n   *\n   * This operation lazily loads records as efficiently as possible until the limit\n   * is reached.\n   *\n   * The results are passed into the callback function, so this operation is memory\n   * efficient.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function each\n   * @memberof Twilio.Studio.V2.FlowList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         each() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no pageSize is defined but a limit is defined,\n   *         each() will attempt to read the limit with the most efficient\n   *         page size, i.e. min(limit, 1000)\n   * @param {Function} [opts.callback] -\n   *         Function to process each record. If this and a positional\n   *         callback are passed, this one will be used\n   * @param {Function} [opts.done] -\n   *          Function to be called upon completion of streaming\n   * @param {Function} [callback] - Function to process each record\n   */\n  /* jshint ignore:end */\n  FlowListInstance.each = function each(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    if (opts.callback) {\n      callback = opts.callback;\n    }\n    if (_.isUndefined(callback)) {\n      throw new Error('Callback function must be provided');\n    }\n\n    var done = false;\n    var currentPage = 1;\n    var currentResource = 0;\n    var limits = this._version.readLimits({\n      limit: opts.limit,\n      pageSize: opts.pageSize\n    });\n\n    function onComplete(error) {\n      done = true;\n      if (_.isFunction(opts.done)) {\n        opts.done(error);\n      }\n    }\n\n    function fetchNextPage(fn) {\n      var promise = fn();\n      if (_.isUndefined(promise)) {\n        onComplete();\n        return;\n      }\n\n      promise.then(function(page) {\n        _.each(page.instances, function(instance) {\n          if (done || (!_.isUndefined(opts.limit) && currentResource >= opts.limit)) {\n            done = true;\n            return false;\n          }\n\n          currentResource++;\n          callback(instance, onComplete);\n        });\n\n        if (!done) {\n          currentPage++;\n          fetchNextPage(_.bind(page.nextPage, page));\n        } else {\n          onComplete();\n        }\n      });\n\n      promise.catch(onComplete);\n    }\n\n    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Lists FlowInstance records from the API as a list.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function list\n   * @memberof Twilio.Studio.V2.FlowList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         list() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no page_size is defined but a limit is defined,\n   *         list() will attempt to read the limit with the most\n   *         efficient page size, i.e. min(limit, 1000)\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  FlowListInstance.list = function list(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    var deferred = Q.defer();\n    var allResources = [];\n    opts.callback = function(resource, done) {\n      allResources.push(resource);\n\n      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {\n        done();\n      }\n    };\n\n    opts.done = function(error) {\n      if (_.isUndefined(error)) {\n        deferred.resolve(allResources);\n      } else {\n        deferred.reject(error);\n      }\n    };\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    this.each(opts);\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single page of FlowInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function page\n   * @memberof Twilio.Studio.V2.FlowList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.pageToken] - PageToken provided by the API\n   * @param {number} [opts.pageNumber] -\n   *          Page Number, this value is simply for client state\n   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  FlowListInstance.page = function page(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n\n    var deferred = Q.defer();\n    var data = values.of({\n      'PageToken': opts.pageToken,\n      'Page': opts.pageNumber,\n      'PageSize': opts.pageSize\n    });\n\n    var promise = this._version.page({uri: this._uri, method: 'GET', params: data});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new FlowPage(this._version, payload, this._solution));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single target page of FlowInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function getPage\n   * @memberof Twilio.Studio.V2.FlowList#\n   *\n   * @param {string} [targetUrl] - API-generated URL for the requested results page\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  FlowListInstance.getPage = function getPage(targetUrl, callback) {\n    var deferred = Q.defer();\n\n    var promise = this._version._domain.twilio.request({method: 'GET', uri: targetUrl});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new FlowPage(this._version, payload, this._solution));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Constructs a flow\n   *\n   * @function get\n   * @memberof Twilio.Studio.V2.FlowList#\n   *\n   * @param {string} sid - The SID that identifies the resource to fetch\n   *\n   * @returns {Twilio.Studio.V2.FlowContext}\n   */\n  /* jshint ignore:end */\n  FlowListInstance.get = function get(sid) {\n    return new FlowContext(this._version, sid);\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Studio.V2.FlowList#\n   *\n   * @returns Object\n   */\n  /* jshint ignore:end */\n  FlowListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n\n  FlowListInstance[util.inspect.custom] = function inspect(depth, options) {\n    return util.inspect(this.toJSON(), options);\n  };\n\n  return FlowListInstance;\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the FlowPage\n *\n * @constructor Twilio.Studio.V2.FlowPage\n *\n * @param {V2} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {FlowSolution} solution - Path solution\n *\n * @returns FlowPage\n */\n/* jshint ignore:end */\nFlowPage = function FlowPage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n\n_.extend(FlowPage.prototype, Page.prototype);\nFlowPage.prototype.constructor = FlowPage;\n\n/* jshint ignore:start */\n/**\n * Build an instance of FlowInstance\n *\n * @function getInstance\n * @memberof Twilio.Studio.V2.FlowPage#\n *\n * @param {FlowPayload} payload - Payload response from the API\n *\n * @returns FlowInstance\n */\n/* jshint ignore:end */\nFlowPage.prototype.getInstance = function getInstance(payload) {\n  return new FlowInstance(this._version, payload);\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Studio.V2.FlowPage#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nFlowPage.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function(value, key) {\n    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\n\nFlowPage.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the FlowContext\n *\n * @constructor Twilio.Studio.V2.FlowInstance\n *\n * @property {string} sid - The unique string that identifies the resource\n * @property {string} accountSid - The SID of the Account that created the resource\n * @property {string} friendlyName -\n *          The string that you assigned to describe the Flow\n * @property {object} definition - JSON representation of flow definition\n * @property {flow.status} status - The status of the Flow\n * @property {number} revision -\n *          The latest revision number of the Flow's definition\n * @property {string} commitMessage - Description of change made in the revision\n * @property {boolean} valid - Boolean if the flow definition is valid\n * @property {object} errors - List of error in the flow definition\n * @property {object} warnings - List of warnings in the flow definition\n * @property {Date} dateCreated -\n *          The ISO 8601 date and time in GMT when the resource was created\n * @property {Date} dateUpdated -\n *          The ISO 8601 date and time in GMT when the resource was last updated\n * @property {string} webhookUrl - The webhook_url\n * @property {string} url - The absolute URL of the resource\n * @property {string} links - Nested resource URLs\n *\n * @param {V2} version - Version of the resource\n * @param {FlowPayload} payload - The instance payload\n * @param {sid} sid - The SID that identifies the resource to fetch\n */\n/* jshint ignore:end */\nFlowInstance = function FlowInstance(version, payload, sid) {\n  this._version = version;\n\n  // Marshaled Properties\n  this.sid = payload.sid; // jshint ignore:line\n  this.accountSid = payload.account_sid; // jshint ignore:line\n  this.friendlyName = payload.friendly_name; // jshint ignore:line\n  this.definition = payload.definition; // jshint ignore:line\n  this.status = payload.status; // jshint ignore:line\n  this.revision = deserialize.integer(payload.revision); // jshint ignore:line\n  this.commitMessage = payload.commit_message; // jshint ignore:line\n  this.valid = payload.valid; // jshint ignore:line\n  this.errors = payload.errors; // jshint ignore:line\n  this.warnings = payload.warnings; // jshint ignore:line\n  this.dateCreated = deserialize.iso8601DateTime(payload.date_created); // jshint ignore:line\n  this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated); // jshint ignore:line\n  this.webhookUrl = payload.webhook_url; // jshint ignore:line\n  this.url = payload.url; // jshint ignore:line\n  this.links = payload.links; // jshint ignore:line\n\n  // Context\n  this._context = undefined;\n  this._solution = {sid: sid || this.sid, };\n};\n\nObject.defineProperty(FlowInstance.prototype,\n  '_proxy', {\n    get: function() {\n      if (!this._context) {\n        this._context = new FlowContext(this._version, this._solution.sid);\n      }\n\n      return this._context;\n    }\n});\n\n/* jshint ignore:start */\n/**\n * update a FlowInstance\n *\n * @function update\n * @memberof Twilio.Studio.V2.FlowInstance#\n *\n * @param {object} opts - Options for request\n * @param {flow.status} opts.status - The status of the Flow\n * @param {string} [opts.friendlyName] -\n *          The string that you assigned to describe the Flow\n * @param {object} [opts.definition] - JSON representation of flow definition\n * @param {string} [opts.commitMessage] -\n *          Description of change made in the revision\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed FlowInstance\n */\n/* jshint ignore:end */\nFlowInstance.prototype.update = function update(opts, callback) {\n  return this._proxy.update(opts, callback);\n};\n\n/* jshint ignore:start */\n/**\n * fetch a FlowInstance\n *\n * @function fetch\n * @memberof Twilio.Studio.V2.FlowInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed FlowInstance\n */\n/* jshint ignore:end */\nFlowInstance.prototype.fetch = function fetch(callback) {\n  return this._proxy.fetch(callback);\n};\n\n/* jshint ignore:start */\n/**\n * remove a FlowInstance\n *\n * @function remove\n * @memberof Twilio.Studio.V2.FlowInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed FlowInstance\n */\n/* jshint ignore:end */\nFlowInstance.prototype.remove = function remove(callback) {\n  return this._proxy.remove(callback);\n};\n\n/* jshint ignore:start */\n/**\n * Access the revisions\n *\n * @function revisions\n * @memberof Twilio.Studio.V2.FlowInstance#\n *\n * @returns {Twilio.Studio.V2.FlowContext.FlowRevisionList}\n */\n/* jshint ignore:end */\nFlowInstance.prototype.revisions = function revisions() {\n  return this._proxy.revisions;\n};\n\n/* jshint ignore:start */\n/**\n * Access the testUsers\n *\n * @function testUsers\n * @memberof Twilio.Studio.V2.FlowInstance#\n *\n * @returns {Twilio.Studio.V2.FlowContext.FlowTestUserList}\n */\n/* jshint ignore:end */\nFlowInstance.prototype.testUsers = function testUsers() {\n  return this._proxy.testUsers;\n};\n\n/* jshint ignore:start */\n/**\n * Access the executions\n *\n * @function executions\n * @memberof Twilio.Studio.V2.FlowInstance#\n *\n * @returns {Twilio.Studio.V2.FlowContext.ExecutionList}\n */\n/* jshint ignore:end */\nFlowInstance.prototype.executions = function executions() {\n  return this._proxy.executions;\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Studio.V2.FlowInstance#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nFlowInstance.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function(value, key) {\n    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\n\nFlowInstance.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the FlowContext\n *\n * @constructor Twilio.Studio.V2.FlowContext\n *\n * @property {Twilio.Studio.V2.FlowContext.FlowRevisionList} revisions -\n *          revisions resource\n * @property {Twilio.Studio.V2.FlowContext.FlowTestUserList} testUsers -\n *          testUsers resource\n * @property {Twilio.Studio.V2.FlowContext.ExecutionList} executions -\n *          executions resource\n *\n * @param {V2} version - Version of the resource\n * @param {sid} sid - The SID that identifies the resource to fetch\n */\n/* jshint ignore:end */\nFlowContext = function FlowContext(version, sid) {\n  this._version = version;\n\n  // Path Solution\n  this._solution = {sid: sid, };\n  this._uri = `/Flows/${sid}`;\n\n  // Dependents\n  this._revisions = undefined;\n  this._testUsers = undefined;\n  this._executions = undefined;\n};\n\n/* jshint ignore:start */\n/**\n * update a FlowInstance\n *\n * @function update\n * @memberof Twilio.Studio.V2.FlowContext#\n *\n * @param {object} opts - Options for request\n * @param {flow.status} opts.status - The status of the Flow\n * @param {string} [opts.friendlyName] -\n *          The string that you assigned to describe the Flow\n * @param {object} [opts.definition] - JSON representation of flow definition\n * @param {string} [opts.commitMessage] -\n *          Description of change made in the revision\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed FlowInstance\n */\n/* jshint ignore:end */\nFlowContext.prototype.update = function update(opts, callback) {\n  if (_.isUndefined(opts)) {\n    throw new Error('Required parameter \"opts\" missing.');\n  }\n  if (_.isUndefined(opts['status'])) {\n    throw new Error('Required parameter \"opts[\\'status\\']\" missing.');\n  }\n\n  var deferred = Q.defer();\n  var data = values.of({\n    'Status': _.get(opts, 'status'),\n    'FriendlyName': _.get(opts, 'friendlyName'),\n    'Definition': serialize.object(_.get(opts, 'definition')),\n    'CommitMessage': _.get(opts, 'commitMessage')\n  });\n\n  var promise = this._version.update({uri: this._uri, method: 'POST', data: data});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(new FlowInstance(this._version, payload, this._solution.sid));\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * fetch a FlowInstance\n *\n * @function fetch\n * @memberof Twilio.Studio.V2.FlowContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed FlowInstance\n */\n/* jshint ignore:end */\nFlowContext.prototype.fetch = function fetch(callback) {\n  var deferred = Q.defer();\n  var promise = this._version.fetch({uri: this._uri, method: 'GET'});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(new FlowInstance(this._version, payload, this._solution.sid));\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * remove a FlowInstance\n *\n * @function remove\n * @memberof Twilio.Studio.V2.FlowContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed FlowInstance\n */\n/* jshint ignore:end */\nFlowContext.prototype.remove = function remove(callback) {\n  var deferred = Q.defer();\n  var promise = this._version.remove({uri: this._uri, method: 'DELETE'});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(payload);\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\nObject.defineProperty(FlowContext.prototype,\n  'revisions', {\n    get: function() {\n      if (!this._revisions) {\n        this._revisions = new FlowRevisionList(this._version, this._solution.sid);\n      }\n      return this._revisions;\n    }\n});\n\nObject.defineProperty(FlowContext.prototype,\n  'testUsers', {\n    get: function() {\n      if (!this._testUsers) {\n        this._testUsers = new FlowTestUserList(this._version, this._solution.sid);\n      }\n      return this._testUsers;\n    }\n});\n\nObject.defineProperty(FlowContext.prototype,\n  'executions', {\n    get: function() {\n      if (!this._executions) {\n        this._executions = new ExecutionList(this._version, this._solution.sid);\n      }\n      return this._executions;\n    }\n});\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Studio.V2.FlowContext#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nFlowContext.prototype.toJSON = function toJSON() {\n  return this._solution;\n};\n\nFlowContext.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\nmodule.exports = {\n  FlowList: FlowList,\n  FlowPage: FlowPage,\n  FlowInstance: FlowInstance,\n  FlowContext: FlowContext\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}