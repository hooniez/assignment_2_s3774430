{"ast":null,"code":"'use strict';\n/* jshint ignore:start */\n\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n\n/* jshint ignore:end */\n\nvar Q = require('q');\n/* jshint ignore:line */\n\n\nvar _ = require('lodash');\n/* jshint ignore:line */\n\n\nvar util = require('util');\n/* jshint ignore:line */\n\n\nvar Page = require('../../../../../base/Page');\n/* jshint ignore:line */\n\n\nvar deserialize = require('../../../../../base/deserialize');\n/* jshint ignore:line */\n\n\nvar serialize = require('../../../../../base/serialize');\n/* jshint ignore:line */\n\n\nvar values = require('../../../../../base/values');\n/* jshint ignore:line */\n\n\nvar MachineToMachineList;\nvar MachineToMachinePage;\nvar MachineToMachineInstance;\n/* jshint ignore:start */\n\n/**\n * Initialize the MachineToMachineList\n *\n * @constructor Twilio.Api.V2010.AccountContext.AvailablePhoneNumberCountryContext.MachineToMachineList\n *\n * @param {Twilio.Api.V2010} version - Version of the resource\n * @param {string} accountSid - The account_sid\n * @param {string} countryCode - The ISO-3166-1 country code of the country.\n */\n\n/* jshint ignore:end */\n\nMachineToMachineList = function MachineToMachineList(version, accountSid, countryCode) {\n  /* jshint ignore:start */\n\n  /**\n   * @function machineToMachine\n   * @memberof Twilio.Api.V2010.AccountContext.AvailablePhoneNumberCountryContext#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Api.V2010.AccountContext.AvailablePhoneNumberCountryContext.MachineToMachineContext}\n   */\n\n  /* jshint ignore:end */\n  function MachineToMachineListInstance(sid) {\n    return MachineToMachineListInstance.get(sid);\n  }\n\n  MachineToMachineListInstance._version = version; // Path Solution\n\n  MachineToMachineListInstance._solution = {\n    accountSid: accountSid,\n    countryCode: countryCode\n  };\n  MachineToMachineListInstance._uri = `/Accounts/${accountSid}/AvailablePhoneNumbers/${countryCode}/MachineToMachine.json`;\n  /* jshint ignore:start */\n\n  /**\n   * Streams MachineToMachineInstance records from the API.\n   *\n   * This operation lazily loads records as efficiently as possible until the limit\n   * is reached.\n   *\n   * The results are passed into the callback function, so this operation is memory\n   * efficient.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function each\n   * @memberof Twilio.Api.V2010.AccountContext.AvailablePhoneNumberCountryContext.MachineToMachineList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.areaCode] - The area code of the phone numbers to read\n   * @param {string} [opts.contains] - The pattern on which to match phone numbers\n   * @param {boolean} [opts.smsEnabled] -\n   *          Whether the phone numbers can receive text messages\n   * @param {boolean} [opts.mmsEnabled] -\n   *          Whether the phone numbers can receive MMS messages\n   * @param {boolean} [opts.voiceEnabled] -\n   *          Whether the phone numbers can receive calls.\n   * @param {boolean} [opts.excludeAllAddressRequired] -\n   *          Whether to exclude phone numbers that require an Address\n   * @param {boolean} [opts.excludeLocalAddressRequired] -\n   *          Whether to exclude phone numbers that require a local address\n   * @param {boolean} [opts.excludeForeignAddressRequired] -\n   *          Whether to exclude phone numbers that require a foreign address\n   * @param {boolean} [opts.beta] -\n   *          Whether to read phone numbers new to the Twilio platform\n   * @param {string} [opts.nearNumber] -\n   *          Given a phone number, find a geographically close number within distance miles. (US/Canada only)\n   * @param {string} [opts.nearLatLong] -\n   *          Given a latitude/longitude pair lat,long find geographically close numbers within distance miles. (US/Canada only)\n   * @param {number} [opts.distance] -\n   *          The search radius, in miles, for a near_ query. (US/Canada only)\n   * @param {string} [opts.inPostalCode] -\n   *          Limit results to a particular postal code. (US/Canada only)\n   * @param {string} [opts.inRegion] -\n   *          Limit results to a particular region. (US/Canada only)\n   * @param {string} [opts.inRateCenter] -\n   *          Limit results to a specific rate center, or given a phone number search within the same rate center as that number. (US/Canada only)\n   * @param {string} [opts.inLata] -\n   *          Limit results to a specific local access and transport area. (US/Canada only)\n   * @param {string} [opts.inLocality] - Limit results to a particular locality\n   * @param {boolean} [opts.faxEnabled] - Whether the phone numbers can receive faxes\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         each() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no pageSize is defined but a limit is defined,\n   *         each() will attempt to read the limit with the most efficient\n   *         page size, i.e. min(limit, 1000)\n   * @param {Function} [opts.callback] -\n   *         Function to process each record. If this and a positional\n   *         callback are passed, this one will be used\n   * @param {Function} [opts.done] -\n   *          Function to be called upon completion of streaming\n   * @param {Function} [callback] - Function to process each record\n   */\n\n  /* jshint ignore:end */\n\n  MachineToMachineListInstance.each = function each(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n\n    if (opts.callback) {\n      callback = opts.callback;\n    }\n\n    if (_.isUndefined(callback)) {\n      throw new Error('Callback function must be provided');\n    }\n\n    var done = false;\n    var currentPage = 1;\n    var currentResource = 0;\n\n    var limits = this._version.readLimits({\n      limit: opts.limit,\n      pageSize: opts.pageSize\n    });\n\n    function onComplete(error) {\n      done = true;\n\n      if (_.isFunction(opts.done)) {\n        opts.done(error);\n      }\n    }\n\n    function fetchNextPage(fn) {\n      var promise = fn();\n\n      if (_.isUndefined(promise)) {\n        onComplete();\n        return;\n      }\n\n      promise.then(function (page) {\n        _.each(page.instances, function (instance) {\n          if (done || !_.isUndefined(opts.limit) && currentResource >= opts.limit) {\n            done = true;\n            return false;\n          }\n\n          currentResource++;\n          callback(instance, onComplete);\n        });\n\n        if (!done) {\n          currentPage++;\n          fetchNextPage(_.bind(page.nextPage, page));\n        } else {\n          onComplete();\n        }\n      });\n      promise.catch(onComplete);\n    }\n\n    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Lists MachineToMachineInstance records from the API as a list.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function list\n   * @memberof Twilio.Api.V2010.AccountContext.AvailablePhoneNumberCountryContext.MachineToMachineList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.areaCode] - The area code of the phone numbers to read\n   * @param {string} [opts.contains] - The pattern on which to match phone numbers\n   * @param {boolean} [opts.smsEnabled] -\n   *          Whether the phone numbers can receive text messages\n   * @param {boolean} [opts.mmsEnabled] -\n   *          Whether the phone numbers can receive MMS messages\n   * @param {boolean} [opts.voiceEnabled] -\n   *          Whether the phone numbers can receive calls.\n   * @param {boolean} [opts.excludeAllAddressRequired] -\n   *          Whether to exclude phone numbers that require an Address\n   * @param {boolean} [opts.excludeLocalAddressRequired] -\n   *          Whether to exclude phone numbers that require a local address\n   * @param {boolean} [opts.excludeForeignAddressRequired] -\n   *          Whether to exclude phone numbers that require a foreign address\n   * @param {boolean} [opts.beta] -\n   *          Whether to read phone numbers new to the Twilio platform\n   * @param {string} [opts.nearNumber] -\n   *          Given a phone number, find a geographically close number within distance miles. (US/Canada only)\n   * @param {string} [opts.nearLatLong] -\n   *          Given a latitude/longitude pair lat,long find geographically close numbers within distance miles. (US/Canada only)\n   * @param {number} [opts.distance] -\n   *          The search radius, in miles, for a near_ query. (US/Canada only)\n   * @param {string} [opts.inPostalCode] -\n   *          Limit results to a particular postal code. (US/Canada only)\n   * @param {string} [opts.inRegion] -\n   *          Limit results to a particular region. (US/Canada only)\n   * @param {string} [opts.inRateCenter] -\n   *          Limit results to a specific rate center, or given a phone number search within the same rate center as that number. (US/Canada only)\n   * @param {string} [opts.inLata] -\n   *          Limit results to a specific local access and transport area. (US/Canada only)\n   * @param {string} [opts.inLocality] - Limit results to a particular locality\n   * @param {boolean} [opts.faxEnabled] - Whether the phone numbers can receive faxes\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         list() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no page_size is defined but a limit is defined,\n   *         list() will attempt to read the limit with the most\n   *         efficient page size, i.e. min(limit, 1000)\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  MachineToMachineListInstance.list = function list(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n    var deferred = Q.defer();\n    var allResources = [];\n\n    opts.callback = function (resource, done) {\n      allResources.push(resource);\n\n      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {\n        done();\n      }\n    };\n\n    opts.done = function (error) {\n      if (_.isUndefined(error)) {\n        deferred.resolve(allResources);\n      } else {\n        deferred.reject(error);\n      }\n    };\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    this.each(opts);\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Retrieve a single page of MachineToMachineInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function page\n   * @memberof Twilio.Api.V2010.AccountContext.AvailablePhoneNumberCountryContext.MachineToMachineList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.areaCode] - The area code of the phone numbers to read\n   * @param {string} [opts.contains] - The pattern on which to match phone numbers\n   * @param {boolean} [opts.smsEnabled] -\n   *          Whether the phone numbers can receive text messages\n   * @param {boolean} [opts.mmsEnabled] -\n   *          Whether the phone numbers can receive MMS messages\n   * @param {boolean} [opts.voiceEnabled] -\n   *          Whether the phone numbers can receive calls.\n   * @param {boolean} [opts.excludeAllAddressRequired] -\n   *          Whether to exclude phone numbers that require an Address\n   * @param {boolean} [opts.excludeLocalAddressRequired] -\n   *          Whether to exclude phone numbers that require a local address\n   * @param {boolean} [opts.excludeForeignAddressRequired] -\n   *          Whether to exclude phone numbers that require a foreign address\n   * @param {boolean} [opts.beta] -\n   *          Whether to read phone numbers new to the Twilio platform\n   * @param {string} [opts.nearNumber] -\n   *          Given a phone number, find a geographically close number within distance miles. (US/Canada only)\n   * @param {string} [opts.nearLatLong] -\n   *          Given a latitude/longitude pair lat,long find geographically close numbers within distance miles. (US/Canada only)\n   * @param {number} [opts.distance] -\n   *          The search radius, in miles, for a near_ query. (US/Canada only)\n   * @param {string} [opts.inPostalCode] -\n   *          Limit results to a particular postal code. (US/Canada only)\n   * @param {string} [opts.inRegion] -\n   *          Limit results to a particular region. (US/Canada only)\n   * @param {string} [opts.inRateCenter] -\n   *          Limit results to a specific rate center, or given a phone number search within the same rate center as that number. (US/Canada only)\n   * @param {string} [opts.inLata] -\n   *          Limit results to a specific local access and transport area. (US/Canada only)\n   * @param {string} [opts.inLocality] - Limit results to a particular locality\n   * @param {boolean} [opts.faxEnabled] - Whether the phone numbers can receive faxes\n   * @param {string} [opts.pageToken] - PageToken provided by the API\n   * @param {number} [opts.pageNumber] -\n   *          Page Number, this value is simply for client state\n   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  MachineToMachineListInstance.page = function page(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n    var deferred = Q.defer();\n    var data = values.of({\n      'AreaCode': _.get(opts, 'areaCode'),\n      'Contains': _.get(opts, 'contains'),\n      'SmsEnabled': serialize.bool(_.get(opts, 'smsEnabled')),\n      'MmsEnabled': serialize.bool(_.get(opts, 'mmsEnabled')),\n      'VoiceEnabled': serialize.bool(_.get(opts, 'voiceEnabled')),\n      'ExcludeAllAddressRequired': serialize.bool(_.get(opts, 'excludeAllAddressRequired')),\n      'ExcludeLocalAddressRequired': serialize.bool(_.get(opts, 'excludeLocalAddressRequired')),\n      'ExcludeForeignAddressRequired': serialize.bool(_.get(opts, 'excludeForeignAddressRequired')),\n      'Beta': serialize.bool(_.get(opts, 'beta')),\n      'NearNumber': _.get(opts, 'nearNumber'),\n      'NearLatLong': _.get(opts, 'nearLatLong'),\n      'Distance': _.get(opts, 'distance'),\n      'InPostalCode': _.get(opts, 'inPostalCode'),\n      'InRegion': _.get(opts, 'inRegion'),\n      'InRateCenter': _.get(opts, 'inRateCenter'),\n      'InLata': _.get(opts, 'inLata'),\n      'InLocality': _.get(opts, 'inLocality'),\n      'FaxEnabled': serialize.bool(_.get(opts, 'faxEnabled')),\n      'PageToken': opts.pageToken,\n      'Page': opts.pageNumber,\n      'PageSize': opts.pageSize\n    });\n\n    var promise = this._version.page({\n      uri: this._uri,\n      method: 'GET',\n      params: data\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new MachineToMachinePage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Retrieve a single target page of MachineToMachineInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function getPage\n   * @memberof Twilio.Api.V2010.AccountContext.AvailablePhoneNumberCountryContext.MachineToMachineList#\n   *\n   * @param {string} [targetUrl] - API-generated URL for the requested results page\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  MachineToMachineListInstance.getPage = function getPage(targetUrl, callback) {\n    var deferred = Q.defer();\n\n    var promise = this._version._domain.twilio.request({\n      method: 'GET',\n      uri: targetUrl\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new MachineToMachinePage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Api.V2010.AccountContext.AvailablePhoneNumberCountryContext.MachineToMachineList#\n   *\n   * @returns Object\n   */\n\n  /* jshint ignore:end */\n\n\n  MachineToMachineListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n\n  MachineToMachineListInstance[util.inspect.custom] = function inspect(depth, options) {\n    return util.inspect(this.toJSON(), options);\n  };\n\n  return MachineToMachineListInstance;\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the MachineToMachinePage\n *\n * @constructor Twilio.Api.V2010.AccountContext.AvailablePhoneNumberCountryContext.MachineToMachinePage\n *\n * @param {V2010} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {MachineToMachineSolution} solution - Path solution\n *\n * @returns MachineToMachinePage\n */\n\n/* jshint ignore:end */\n\n\nMachineToMachinePage = function MachineToMachinePage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n\n_.extend(MachineToMachinePage.prototype, Page.prototype);\n\nMachineToMachinePage.prototype.constructor = MachineToMachinePage;\n/* jshint ignore:start */\n\n/**\n * Build an instance of MachineToMachineInstance\n *\n * @function getInstance\n * @memberof Twilio.Api.V2010.AccountContext.AvailablePhoneNumberCountryContext.MachineToMachinePage#\n *\n * @param {MachineToMachinePayload} payload - Payload response from the API\n *\n * @returns MachineToMachineInstance\n */\n\n/* jshint ignore:end */\n\nMachineToMachinePage.prototype.getInstance = function getInstance(payload) {\n  return new MachineToMachineInstance(this._version, payload, this._solution.accountSid, this._solution.countryCode);\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Api.V2010.AccountContext.AvailablePhoneNumberCountryContext.MachineToMachinePage#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nMachineToMachinePage.prototype.toJSON = function toJSON() {\n  let clone = {};\n\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n\n  return clone;\n};\n\nMachineToMachinePage.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the MachineToMachineContext\n *\n * @constructor Twilio.Api.V2010.AccountContext.AvailablePhoneNumberCountryContext.MachineToMachineInstance\n *\n * @property {string} friendlyName - A formatted version of the phone number\n * @property {string} phoneNumber - The phone number in E.164 format\n * @property {string} lata - The LATA of this phone number\n * @property {string} locality -\n *          The locality or city of this phone number's location\n * @property {string} rateCenter - The rate center of this phone number\n * @property {number} latitude - The latitude of this phone number's location\n * @property {number} longitude - The longitude of this phone number's location\n * @property {string} region -\n *          The two-letter state or province abbreviation of this phone number's location\n * @property {string} postalCode -\n *          The postal or ZIP code of this phone number's location\n * @property {string} isoCountry - The ISO country code of this phone number\n * @property {string} addressRequirements -\n *          The type of Address resource the phone number requires\n * @property {boolean} beta -\n *          Whether the phone number is new to the Twilio platform\n * @property {PhoneNumberCapabilities} capabilities -\n *          Whether a phone number can receive calls or messages\n *\n * @param {V2010} version - Version of the resource\n * @param {MachineToMachinePayload} payload - The instance payload\n * @param {account_sid} accountSid - The account_sid\n * @param {iso_country_code} countryCode -\n *          The ISO-3166-1 country code of the country.\n */\n\n/* jshint ignore:end */\n\n\nMachineToMachineInstance = function MachineToMachineInstance(version, payload, accountSid, countryCode) {\n  this._version = version; // Marshaled Properties\n\n  this.friendlyName = payload.friendly_name; // jshint ignore:line\n\n  this.phoneNumber = payload.phone_number; // jshint ignore:line\n\n  this.lata = payload.lata; // jshint ignore:line\n\n  this.locality = payload.locality; // jshint ignore:line\n\n  this.rateCenter = payload.rate_center; // jshint ignore:line\n\n  this.latitude = deserialize.decimal(payload.latitude); // jshint ignore:line\n\n  this.longitude = deserialize.decimal(payload.longitude); // jshint ignore:line\n\n  this.region = payload.region; // jshint ignore:line\n\n  this.postalCode = payload.postal_code; // jshint ignore:line\n\n  this.isoCountry = payload.iso_country; // jshint ignore:line\n\n  this.addressRequirements = payload.address_requirements; // jshint ignore:line\n\n  this.beta = payload.beta; // jshint ignore:line\n\n  this.capabilities = payload.capabilities; // jshint ignore:line\n  // Context\n\n  this._context = undefined;\n  this._solution = {\n    accountSid: accountSid,\n    countryCode: countryCode\n  };\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Api.V2010.AccountContext.AvailablePhoneNumberCountryContext.MachineToMachineInstance#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nMachineToMachineInstance.prototype.toJSON = function toJSON() {\n  let clone = {};\n\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n\n  return clone;\n};\n\nMachineToMachineInstance.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\nmodule.exports = {\n  MachineToMachineList: MachineToMachineList,\n  MachineToMachinePage: MachineToMachinePage,\n  MachineToMachineInstance: MachineToMachineInstance\n};","map":{"version":3,"names":["Q","require","_","util","Page","deserialize","serialize","values","MachineToMachineList","MachineToMachinePage","MachineToMachineInstance","version","accountSid","countryCode","MachineToMachineListInstance","sid","get","_version","_solution","_uri","each","opts","callback","isFunction","isUndefined","Error","done","currentPage","currentResource","limits","readLimits","limit","pageSize","onComplete","error","fetchNextPage","fn","promise","then","page","instances","instance","bind","nextPage","catch","merge","list","deferred","defer","allResources","resource","push","length","resolve","reject","nodeify","data","of","bool","pageToken","pageNumber","uri","method","params","payload","getPage","targetUrl","_domain","twilio","request","toJSON","inspect","custom","depth","options","response","solution","prototype","constructor","call","extend","getInstance","clone","forOwn","value","key","startsWith","friendlyName","friendly_name","phoneNumber","phone_number","lata","locality","rateCenter","rate_center","latitude","decimal","longitude","region","postalCode","postal_code","isoCountry","iso_country","addressRequirements","address_requirements","beta","capabilities","_context","undefined","module","exports"],"sources":["/Users/hooniesun/rmit/fwp/assessment1/lan/node_modules/twilio/lib/rest/api/v2010/account/availablePhoneNumber/machineToMachine.js"],"sourcesContent":["'use strict';\n\n/* jshint ignore:start */\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n/* jshint ignore:end */\n\nvar Q = require('q');  /* jshint ignore:line */\nvar _ = require('lodash');  /* jshint ignore:line */\nvar util = require('util');  /* jshint ignore:line */\nvar Page = require('../../../../../base/Page');  /* jshint ignore:line */\nvar deserialize = require(\n    '../../../../../base/deserialize');  /* jshint ignore:line */\nvar serialize = require(\n    '../../../../../base/serialize');  /* jshint ignore:line */\nvar values = require('../../../../../base/values');  /* jshint ignore:line */\n\nvar MachineToMachineList;\nvar MachineToMachinePage;\nvar MachineToMachineInstance;\n\n/* jshint ignore:start */\n/**\n * Initialize the MachineToMachineList\n *\n * @constructor Twilio.Api.V2010.AccountContext.AvailablePhoneNumberCountryContext.MachineToMachineList\n *\n * @param {Twilio.Api.V2010} version - Version of the resource\n * @param {string} accountSid - The account_sid\n * @param {string} countryCode - The ISO-3166-1 country code of the country.\n */\n/* jshint ignore:end */\nMachineToMachineList = function MachineToMachineList(version, accountSid,\n                                                      countryCode) {\n  /* jshint ignore:start */\n  /**\n   * @function machineToMachine\n   * @memberof Twilio.Api.V2010.AccountContext.AvailablePhoneNumberCountryContext#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Api.V2010.AccountContext.AvailablePhoneNumberCountryContext.MachineToMachineContext}\n   */\n  /* jshint ignore:end */\n  function MachineToMachineListInstance(sid) {\n    return MachineToMachineListInstance.get(sid);\n  }\n\n  MachineToMachineListInstance._version = version;\n  // Path Solution\n  MachineToMachineListInstance._solution = {accountSid: accountSid, countryCode: countryCode};\n  MachineToMachineListInstance._uri = `/Accounts/${accountSid}/AvailablePhoneNumbers/${countryCode}/MachineToMachine.json`;\n  /* jshint ignore:start */\n  /**\n   * Streams MachineToMachineInstance records from the API.\n   *\n   * This operation lazily loads records as efficiently as possible until the limit\n   * is reached.\n   *\n   * The results are passed into the callback function, so this operation is memory\n   * efficient.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function each\n   * @memberof Twilio.Api.V2010.AccountContext.AvailablePhoneNumberCountryContext.MachineToMachineList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.areaCode] - The area code of the phone numbers to read\n   * @param {string} [opts.contains] - The pattern on which to match phone numbers\n   * @param {boolean} [opts.smsEnabled] -\n   *          Whether the phone numbers can receive text messages\n   * @param {boolean} [opts.mmsEnabled] -\n   *          Whether the phone numbers can receive MMS messages\n   * @param {boolean} [opts.voiceEnabled] -\n   *          Whether the phone numbers can receive calls.\n   * @param {boolean} [opts.excludeAllAddressRequired] -\n   *          Whether to exclude phone numbers that require an Address\n   * @param {boolean} [opts.excludeLocalAddressRequired] -\n   *          Whether to exclude phone numbers that require a local address\n   * @param {boolean} [opts.excludeForeignAddressRequired] -\n   *          Whether to exclude phone numbers that require a foreign address\n   * @param {boolean} [opts.beta] -\n   *          Whether to read phone numbers new to the Twilio platform\n   * @param {string} [opts.nearNumber] -\n   *          Given a phone number, find a geographically close number within distance miles. (US/Canada only)\n   * @param {string} [opts.nearLatLong] -\n   *          Given a latitude/longitude pair lat,long find geographically close numbers within distance miles. (US/Canada only)\n   * @param {number} [opts.distance] -\n   *          The search radius, in miles, for a near_ query. (US/Canada only)\n   * @param {string} [opts.inPostalCode] -\n   *          Limit results to a particular postal code. (US/Canada only)\n   * @param {string} [opts.inRegion] -\n   *          Limit results to a particular region. (US/Canada only)\n   * @param {string} [opts.inRateCenter] -\n   *          Limit results to a specific rate center, or given a phone number search within the same rate center as that number. (US/Canada only)\n   * @param {string} [opts.inLata] -\n   *          Limit results to a specific local access and transport area. (US/Canada only)\n   * @param {string} [opts.inLocality] - Limit results to a particular locality\n   * @param {boolean} [opts.faxEnabled] - Whether the phone numbers can receive faxes\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         each() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no pageSize is defined but a limit is defined,\n   *         each() will attempt to read the limit with the most efficient\n   *         page size, i.e. min(limit, 1000)\n   * @param {Function} [opts.callback] -\n   *         Function to process each record. If this and a positional\n   *         callback are passed, this one will be used\n   * @param {Function} [opts.done] -\n   *          Function to be called upon completion of streaming\n   * @param {Function} [callback] - Function to process each record\n   */\n  /* jshint ignore:end */\n  MachineToMachineListInstance.each = function each(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    if (opts.callback) {\n      callback = opts.callback;\n    }\n    if (_.isUndefined(callback)) {\n      throw new Error('Callback function must be provided');\n    }\n\n    var done = false;\n    var currentPage = 1;\n    var currentResource = 0;\n    var limits = this._version.readLimits({\n      limit: opts.limit,\n      pageSize: opts.pageSize\n    });\n\n    function onComplete(error) {\n      done = true;\n      if (_.isFunction(opts.done)) {\n        opts.done(error);\n      }\n    }\n\n    function fetchNextPage(fn) {\n      var promise = fn();\n      if (_.isUndefined(promise)) {\n        onComplete();\n        return;\n      }\n\n      promise.then(function(page) {\n        _.each(page.instances, function(instance) {\n          if (done || (!_.isUndefined(opts.limit) && currentResource >= opts.limit)) {\n            done = true;\n            return false;\n          }\n\n          currentResource++;\n          callback(instance, onComplete);\n        });\n\n        if (!done) {\n          currentPage++;\n          fetchNextPage(_.bind(page.nextPage, page));\n        } else {\n          onComplete();\n        }\n      });\n\n      promise.catch(onComplete);\n    }\n\n    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Lists MachineToMachineInstance records from the API as a list.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function list\n   * @memberof Twilio.Api.V2010.AccountContext.AvailablePhoneNumberCountryContext.MachineToMachineList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.areaCode] - The area code of the phone numbers to read\n   * @param {string} [opts.contains] - The pattern on which to match phone numbers\n   * @param {boolean} [opts.smsEnabled] -\n   *          Whether the phone numbers can receive text messages\n   * @param {boolean} [opts.mmsEnabled] -\n   *          Whether the phone numbers can receive MMS messages\n   * @param {boolean} [opts.voiceEnabled] -\n   *          Whether the phone numbers can receive calls.\n   * @param {boolean} [opts.excludeAllAddressRequired] -\n   *          Whether to exclude phone numbers that require an Address\n   * @param {boolean} [opts.excludeLocalAddressRequired] -\n   *          Whether to exclude phone numbers that require a local address\n   * @param {boolean} [opts.excludeForeignAddressRequired] -\n   *          Whether to exclude phone numbers that require a foreign address\n   * @param {boolean} [opts.beta] -\n   *          Whether to read phone numbers new to the Twilio platform\n   * @param {string} [opts.nearNumber] -\n   *          Given a phone number, find a geographically close number within distance miles. (US/Canada only)\n   * @param {string} [opts.nearLatLong] -\n   *          Given a latitude/longitude pair lat,long find geographically close numbers within distance miles. (US/Canada only)\n   * @param {number} [opts.distance] -\n   *          The search radius, in miles, for a near_ query. (US/Canada only)\n   * @param {string} [opts.inPostalCode] -\n   *          Limit results to a particular postal code. (US/Canada only)\n   * @param {string} [opts.inRegion] -\n   *          Limit results to a particular region. (US/Canada only)\n   * @param {string} [opts.inRateCenter] -\n   *          Limit results to a specific rate center, or given a phone number search within the same rate center as that number. (US/Canada only)\n   * @param {string} [opts.inLata] -\n   *          Limit results to a specific local access and transport area. (US/Canada only)\n   * @param {string} [opts.inLocality] - Limit results to a particular locality\n   * @param {boolean} [opts.faxEnabled] - Whether the phone numbers can receive faxes\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         list() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no page_size is defined but a limit is defined,\n   *         list() will attempt to read the limit with the most\n   *         efficient page size, i.e. min(limit, 1000)\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  MachineToMachineListInstance.list = function list(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    var deferred = Q.defer();\n    var allResources = [];\n    opts.callback = function(resource, done) {\n      allResources.push(resource);\n\n      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {\n        done();\n      }\n    };\n\n    opts.done = function(error) {\n      if (_.isUndefined(error)) {\n        deferred.resolve(allResources);\n      } else {\n        deferred.reject(error);\n      }\n    };\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    this.each(opts);\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single page of MachineToMachineInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function page\n   * @memberof Twilio.Api.V2010.AccountContext.AvailablePhoneNumberCountryContext.MachineToMachineList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.areaCode] - The area code of the phone numbers to read\n   * @param {string} [opts.contains] - The pattern on which to match phone numbers\n   * @param {boolean} [opts.smsEnabled] -\n   *          Whether the phone numbers can receive text messages\n   * @param {boolean} [opts.mmsEnabled] -\n   *          Whether the phone numbers can receive MMS messages\n   * @param {boolean} [opts.voiceEnabled] -\n   *          Whether the phone numbers can receive calls.\n   * @param {boolean} [opts.excludeAllAddressRequired] -\n   *          Whether to exclude phone numbers that require an Address\n   * @param {boolean} [opts.excludeLocalAddressRequired] -\n   *          Whether to exclude phone numbers that require a local address\n   * @param {boolean} [opts.excludeForeignAddressRequired] -\n   *          Whether to exclude phone numbers that require a foreign address\n   * @param {boolean} [opts.beta] -\n   *          Whether to read phone numbers new to the Twilio platform\n   * @param {string} [opts.nearNumber] -\n   *          Given a phone number, find a geographically close number within distance miles. (US/Canada only)\n   * @param {string} [opts.nearLatLong] -\n   *          Given a latitude/longitude pair lat,long find geographically close numbers within distance miles. (US/Canada only)\n   * @param {number} [opts.distance] -\n   *          The search radius, in miles, for a near_ query. (US/Canada only)\n   * @param {string} [opts.inPostalCode] -\n   *          Limit results to a particular postal code. (US/Canada only)\n   * @param {string} [opts.inRegion] -\n   *          Limit results to a particular region. (US/Canada only)\n   * @param {string} [opts.inRateCenter] -\n   *          Limit results to a specific rate center, or given a phone number search within the same rate center as that number. (US/Canada only)\n   * @param {string} [opts.inLata] -\n   *          Limit results to a specific local access and transport area. (US/Canada only)\n   * @param {string} [opts.inLocality] - Limit results to a particular locality\n   * @param {boolean} [opts.faxEnabled] - Whether the phone numbers can receive faxes\n   * @param {string} [opts.pageToken] - PageToken provided by the API\n   * @param {number} [opts.pageNumber] -\n   *          Page Number, this value is simply for client state\n   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  MachineToMachineListInstance.page = function page(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n\n    var deferred = Q.defer();\n    var data = values.of({\n      'AreaCode': _.get(opts, 'areaCode'),\n      'Contains': _.get(opts, 'contains'),\n      'SmsEnabled': serialize.bool(_.get(opts, 'smsEnabled')),\n      'MmsEnabled': serialize.bool(_.get(opts, 'mmsEnabled')),\n      'VoiceEnabled': serialize.bool(_.get(opts, 'voiceEnabled')),\n      'ExcludeAllAddressRequired': serialize.bool(_.get(opts, 'excludeAllAddressRequired')),\n      'ExcludeLocalAddressRequired': serialize.bool(_.get(opts, 'excludeLocalAddressRequired')),\n      'ExcludeForeignAddressRequired': serialize.bool(_.get(opts, 'excludeForeignAddressRequired')),\n      'Beta': serialize.bool(_.get(opts, 'beta')),\n      'NearNumber': _.get(opts, 'nearNumber'),\n      'NearLatLong': _.get(opts, 'nearLatLong'),\n      'Distance': _.get(opts, 'distance'),\n      'InPostalCode': _.get(opts, 'inPostalCode'),\n      'InRegion': _.get(opts, 'inRegion'),\n      'InRateCenter': _.get(opts, 'inRateCenter'),\n      'InLata': _.get(opts, 'inLata'),\n      'InLocality': _.get(opts, 'inLocality'),\n      'FaxEnabled': serialize.bool(_.get(opts, 'faxEnabled')),\n      'PageToken': opts.pageToken,\n      'Page': opts.pageNumber,\n      'PageSize': opts.pageSize\n    });\n\n    var promise = this._version.page({uri: this._uri, method: 'GET', params: data});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new MachineToMachinePage(this._version, payload, this._solution));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single target page of MachineToMachineInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function getPage\n   * @memberof Twilio.Api.V2010.AccountContext.AvailablePhoneNumberCountryContext.MachineToMachineList#\n   *\n   * @param {string} [targetUrl] - API-generated URL for the requested results page\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  MachineToMachineListInstance.getPage = function getPage(targetUrl, callback) {\n    var deferred = Q.defer();\n\n    var promise = this._version._domain.twilio.request({method: 'GET', uri: targetUrl});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new MachineToMachinePage(this._version, payload, this._solution));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Api.V2010.AccountContext.AvailablePhoneNumberCountryContext.MachineToMachineList#\n   *\n   * @returns Object\n   */\n  /* jshint ignore:end */\n  MachineToMachineListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n\n  MachineToMachineListInstance[util.inspect.custom] = function inspect(depth,\n      options) {\n    return util.inspect(this.toJSON(), options);\n  };\n\n  return MachineToMachineListInstance;\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the MachineToMachinePage\n *\n * @constructor Twilio.Api.V2010.AccountContext.AvailablePhoneNumberCountryContext.MachineToMachinePage\n *\n * @param {V2010} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {MachineToMachineSolution} solution - Path solution\n *\n * @returns MachineToMachinePage\n */\n/* jshint ignore:end */\nMachineToMachinePage = function MachineToMachinePage(version, response,\n                                                      solution) {\n  // Path Solution\n  this._solution = solution;\n\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n\n_.extend(MachineToMachinePage.prototype, Page.prototype);\nMachineToMachinePage.prototype.constructor = MachineToMachinePage;\n\n/* jshint ignore:start */\n/**\n * Build an instance of MachineToMachineInstance\n *\n * @function getInstance\n * @memberof Twilio.Api.V2010.AccountContext.AvailablePhoneNumberCountryContext.MachineToMachinePage#\n *\n * @param {MachineToMachinePayload} payload - Payload response from the API\n *\n * @returns MachineToMachineInstance\n */\n/* jshint ignore:end */\nMachineToMachinePage.prototype.getInstance = function getInstance(payload) {\n  return new MachineToMachineInstance(\n    this._version,\n    payload,\n    this._solution.accountSid,\n    this._solution.countryCode\n  );\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Api.V2010.AccountContext.AvailablePhoneNumberCountryContext.MachineToMachinePage#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nMachineToMachinePage.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function(value, key) {\n    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\n\nMachineToMachinePage.prototype[util.inspect.custom] = function inspect(depth,\n    options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the MachineToMachineContext\n *\n * @constructor Twilio.Api.V2010.AccountContext.AvailablePhoneNumberCountryContext.MachineToMachineInstance\n *\n * @property {string} friendlyName - A formatted version of the phone number\n * @property {string} phoneNumber - The phone number in E.164 format\n * @property {string} lata - The LATA of this phone number\n * @property {string} locality -\n *          The locality or city of this phone number's location\n * @property {string} rateCenter - The rate center of this phone number\n * @property {number} latitude - The latitude of this phone number's location\n * @property {number} longitude - The longitude of this phone number's location\n * @property {string} region -\n *          The two-letter state or province abbreviation of this phone number's location\n * @property {string} postalCode -\n *          The postal or ZIP code of this phone number's location\n * @property {string} isoCountry - The ISO country code of this phone number\n * @property {string} addressRequirements -\n *          The type of Address resource the phone number requires\n * @property {boolean} beta -\n *          Whether the phone number is new to the Twilio platform\n * @property {PhoneNumberCapabilities} capabilities -\n *          Whether a phone number can receive calls or messages\n *\n * @param {V2010} version - Version of the resource\n * @param {MachineToMachinePayload} payload - The instance payload\n * @param {account_sid} accountSid - The account_sid\n * @param {iso_country_code} countryCode -\n *          The ISO-3166-1 country code of the country.\n */\n/* jshint ignore:end */\nMachineToMachineInstance = function MachineToMachineInstance(version, payload,\n    accountSid, countryCode) {\n  this._version = version;\n\n  // Marshaled Properties\n  this.friendlyName = payload.friendly_name; // jshint ignore:line\n  this.phoneNumber = payload.phone_number; // jshint ignore:line\n  this.lata = payload.lata; // jshint ignore:line\n  this.locality = payload.locality; // jshint ignore:line\n  this.rateCenter = payload.rate_center; // jshint ignore:line\n  this.latitude = deserialize.decimal(payload.latitude); // jshint ignore:line\n  this.longitude = deserialize.decimal(payload.longitude); // jshint ignore:line\n  this.region = payload.region; // jshint ignore:line\n  this.postalCode = payload.postal_code; // jshint ignore:line\n  this.isoCountry = payload.iso_country; // jshint ignore:line\n  this.addressRequirements = payload.address_requirements; // jshint ignore:line\n  this.beta = payload.beta; // jshint ignore:line\n  this.capabilities = payload.capabilities; // jshint ignore:line\n\n  // Context\n  this._context = undefined;\n  this._solution = {accountSid: accountSid, countryCode: countryCode, };\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Api.V2010.AccountContext.AvailablePhoneNumberCountryContext.MachineToMachineInstance#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nMachineToMachineInstance.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function(value, key) {\n    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\n\nMachineToMachineInstance.prototype[util.inspect.custom] = function\n    inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\nmodule.exports = {\n  MachineToMachineList: MachineToMachineList,\n  MachineToMachinePage: MachineToMachinePage,\n  MachineToMachineInstance: MachineToMachineInstance\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}