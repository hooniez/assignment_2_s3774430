{"ast":null,"code":"'use strict';\n/* jshint ignore:start */\n\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n\n/* jshint ignore:end */\n\nvar Q = require('q');\n/* jshint ignore:line */\n\n\nvar _ = require('lodash');\n/* jshint ignore:line */\n\n\nvar util = require('util');\n/* jshint ignore:line */\n\n\nvar NotificationList = require('./challenge/notification').NotificationList;\n\nvar Page = require('../../../../../base/Page');\n/* jshint ignore:line */\n\n\nvar deserialize = require('../../../../../base/deserialize');\n/* jshint ignore:line */\n\n\nvar serialize = require('../../../../../base/serialize');\n/* jshint ignore:line */\n\n\nvar values = require('../../../../../base/values');\n/* jshint ignore:line */\n\n\nvar ChallengeList;\nvar ChallengePage;\nvar ChallengeInstance;\nvar ChallengeContext;\n/* jshint ignore:start */\n\n/**\n * Initialize the ChallengeList\n *\n * PLEASE NOTE that this class contains beta products that are subject to change.\n * Use them with caution.\n *\n * @constructor Twilio.Verify.V2.ServiceContext.EntityContext.ChallengeList\n *\n * @param {Twilio.Verify.V2} version - Version of the resource\n * @param {string} serviceSid - Service Sid.\n * @param {string} identity - Unique external identifier of the Entity\n */\n\n/* jshint ignore:end */\n\nChallengeList = function ChallengeList(version, serviceSid, identity) {\n  /* jshint ignore:start */\n\n  /**\n   * @function challenges\n   * @memberof Twilio.Verify.V2.ServiceContext.EntityContext#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Verify.V2.ServiceContext.EntityContext.ChallengeContext}\n   */\n\n  /* jshint ignore:end */\n  function ChallengeListInstance(sid) {\n    return ChallengeListInstance.get(sid);\n  }\n\n  ChallengeListInstance._version = version; // Path Solution\n\n  ChallengeListInstance._solution = {\n    serviceSid: serviceSid,\n    identity: identity\n  };\n  ChallengeListInstance._uri = `/Services/${serviceSid}/Entities/${identity}/Challenges`;\n  /* jshint ignore:start */\n\n  /**\n   * create a ChallengeInstance\n   *\n   * @function create\n   * @memberof Twilio.Verify.V2.ServiceContext.EntityContext.ChallengeList#\n   *\n   * @param {object} opts - Options for request\n   * @param {string} opts.factorSid - Factor Sid.\n   * @param {Date} [opts.expirationDate] - The date-time when this Challenge expires\n   * @param {string} [opts.details.message] -\n   *          Shown to the user when the push notification arrives\n   * @param {object|list} [opts.details.fields] -\n   *          A list of objects that describe the Fields included in the Challenge\n   * @param {object} [opts.hiddenDetails] -\n   *          Hidden details provided to contextualize the Challenge\n   * @param {string} [opts.authPayload] - Optional payload to verify the Challenge\n   * @param {function} [callback] - Callback to handle processed record\n   *\n   * @returns {Promise} Resolves to processed ChallengeInstance\n   */\n\n  /* jshint ignore:end */\n\n  ChallengeListInstance.create = function create(opts, callback) {\n    if (_.isUndefined(opts)) {\n      throw new Error('Required parameter \"opts\" missing.');\n    }\n\n    if (_.isUndefined(opts['factorSid'])) {\n      throw new Error('Required parameter \"opts[\\'factorSid\\']\" missing.');\n    }\n\n    var deferred = Q.defer();\n    var data = values.of({\n      'FactorSid': _.get(opts, 'factorSid'),\n      'ExpirationDate': serialize.iso8601DateTime(_.get(opts, 'expirationDate')),\n      'Details.Message': _.get(opts, 'details.message'),\n      'Details.Fields': serialize.map(_.get(opts, 'details.fields'), function (e) {\n        return serialize.object(e);\n      }),\n      'HiddenDetails': serialize.object(_.get(opts, 'hiddenDetails')),\n      'AuthPayload': _.get(opts, 'authPayload')\n    });\n\n    var promise = this._version.create({\n      uri: this._uri,\n      method: 'POST',\n      data: data\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new ChallengeInstance(this._version, payload, this._solution.serviceSid, this._solution.identity, this._solution.sid));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Streams ChallengeInstance records from the API.\n   *\n   * This operation lazily loads records as efficiently as possible until the limit\n   * is reached.\n   *\n   * The results are passed into the callback function, so this operation is memory\n   * efficient.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function each\n   * @memberof Twilio.Verify.V2.ServiceContext.EntityContext.ChallengeList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.factorSid] - Factor Sid.\n   * @param {challenge.challenge_statuses} [opts.status] -\n   *          The Status of theChallenges to fetch\n   * @param {challenge.list_orders} [opts.order] -\n   *          The sort order of the Challenges list\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         each() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no pageSize is defined but a limit is defined,\n   *         each() will attempt to read the limit with the most efficient\n   *         page size, i.e. min(limit, 1000)\n   * @param {Function} [opts.callback] -\n   *         Function to process each record. If this and a positional\n   *         callback are passed, this one will be used\n   * @param {Function} [opts.done] -\n   *          Function to be called upon completion of streaming\n   * @param {Function} [callback] - Function to process each record\n   */\n\n  /* jshint ignore:end */\n\n\n  ChallengeListInstance.each = function each(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n\n    if (opts.callback) {\n      callback = opts.callback;\n    }\n\n    if (_.isUndefined(callback)) {\n      throw new Error('Callback function must be provided');\n    }\n\n    var done = false;\n    var currentPage = 1;\n    var currentResource = 0;\n\n    var limits = this._version.readLimits({\n      limit: opts.limit,\n      pageSize: opts.pageSize\n    });\n\n    function onComplete(error) {\n      done = true;\n\n      if (_.isFunction(opts.done)) {\n        opts.done(error);\n      }\n    }\n\n    function fetchNextPage(fn) {\n      var promise = fn();\n\n      if (_.isUndefined(promise)) {\n        onComplete();\n        return;\n      }\n\n      promise.then(function (page) {\n        _.each(page.instances, function (instance) {\n          if (done || !_.isUndefined(opts.limit) && currentResource >= opts.limit) {\n            done = true;\n            return false;\n          }\n\n          currentResource++;\n          callback(instance, onComplete);\n        });\n\n        if (!done) {\n          currentPage++;\n          fetchNextPage(_.bind(page.nextPage, page));\n        } else {\n          onComplete();\n        }\n      });\n      promise.catch(onComplete);\n    }\n\n    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Lists ChallengeInstance records from the API as a list.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function list\n   * @memberof Twilio.Verify.V2.ServiceContext.EntityContext.ChallengeList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.factorSid] - Factor Sid.\n   * @param {challenge.challenge_statuses} [opts.status] -\n   *          The Status of theChallenges to fetch\n   * @param {challenge.list_orders} [opts.order] -\n   *          The sort order of the Challenges list\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         list() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no page_size is defined but a limit is defined,\n   *         list() will attempt to read the limit with the most\n   *         efficient page size, i.e. min(limit, 1000)\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  ChallengeListInstance.list = function list(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n    var deferred = Q.defer();\n    var allResources = [];\n\n    opts.callback = function (resource, done) {\n      allResources.push(resource);\n\n      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {\n        done();\n      }\n    };\n\n    opts.done = function (error) {\n      if (_.isUndefined(error)) {\n        deferred.resolve(allResources);\n      } else {\n        deferred.reject(error);\n      }\n    };\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    this.each(opts);\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Retrieve a single page of ChallengeInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function page\n   * @memberof Twilio.Verify.V2.ServiceContext.EntityContext.ChallengeList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.factorSid] - Factor Sid.\n   * @param {challenge.challenge_statuses} [opts.status] -\n   *          The Status of theChallenges to fetch\n   * @param {challenge.list_orders} [opts.order] -\n   *          The sort order of the Challenges list\n   * @param {string} [opts.pageToken] - PageToken provided by the API\n   * @param {number} [opts.pageNumber] -\n   *          Page Number, this value is simply for client state\n   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  ChallengeListInstance.page = function page(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n    var deferred = Q.defer();\n    var data = values.of({\n      'FactorSid': _.get(opts, 'factorSid'),\n      'Status': _.get(opts, 'status'),\n      'Order': _.get(opts, 'order'),\n      'PageToken': opts.pageToken,\n      'Page': opts.pageNumber,\n      'PageSize': opts.pageSize\n    });\n\n    var promise = this._version.page({\n      uri: this._uri,\n      method: 'GET',\n      params: data\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new ChallengePage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Retrieve a single target page of ChallengeInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function getPage\n   * @memberof Twilio.Verify.V2.ServiceContext.EntityContext.ChallengeList#\n   *\n   * @param {string} [targetUrl] - API-generated URL for the requested results page\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  ChallengeListInstance.getPage = function getPage(targetUrl, callback) {\n    var deferred = Q.defer();\n\n    var promise = this._version._domain.twilio.request({\n      method: 'GET',\n      uri: targetUrl\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new ChallengePage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Constructs a challenge\n   *\n   * @function get\n   * @memberof Twilio.Verify.V2.ServiceContext.EntityContext.ChallengeList#\n   *\n   * @param {string} sid - A string that uniquely identifies this Challenge.\n   *\n   * @returns {Twilio.Verify.V2.ServiceContext.EntityContext.ChallengeContext}\n   */\n\n  /* jshint ignore:end */\n\n\n  ChallengeListInstance.get = function get(sid) {\n    return new ChallengeContext(this._version, this._solution.serviceSid, this._solution.identity, sid);\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Verify.V2.ServiceContext.EntityContext.ChallengeList#\n   *\n   * @returns Object\n   */\n\n  /* jshint ignore:end */\n\n\n  ChallengeListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n\n  ChallengeListInstance[util.inspect.custom] = function inspect(depth, options) {\n    return util.inspect(this.toJSON(), options);\n  };\n\n  return ChallengeListInstance;\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the ChallengePage\n *\n * PLEASE NOTE that this class contains beta products that are subject to change.\n * Use them with caution.\n *\n * @constructor Twilio.Verify.V2.ServiceContext.EntityContext.ChallengePage\n *\n * @param {V2} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {ChallengeSolution} solution - Path solution\n *\n * @returns ChallengePage\n */\n\n/* jshint ignore:end */\n\n\nChallengePage = function ChallengePage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n\n_.extend(ChallengePage.prototype, Page.prototype);\n\nChallengePage.prototype.constructor = ChallengePage;\n/* jshint ignore:start */\n\n/**\n * Build an instance of ChallengeInstance\n *\n * @function getInstance\n * @memberof Twilio.Verify.V2.ServiceContext.EntityContext.ChallengePage#\n *\n * @param {ChallengePayload} payload - Payload response from the API\n *\n * @returns ChallengeInstance\n */\n\n/* jshint ignore:end */\n\nChallengePage.prototype.getInstance = function getInstance(payload) {\n  return new ChallengeInstance(this._version, payload, this._solution.serviceSid, this._solution.identity);\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Verify.V2.ServiceContext.EntityContext.ChallengePage#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nChallengePage.prototype.toJSON = function toJSON() {\n  let clone = {};\n\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n\n  return clone;\n};\n\nChallengePage.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the ChallengeContext\n *\n * PLEASE NOTE that this class contains beta products that are subject to change.\n * Use them with caution.\n *\n * @constructor Twilio.Verify.V2.ServiceContext.EntityContext.ChallengeInstance\n *\n * @property {string} sid - A string that uniquely identifies this Challenge.\n * @property {string} accountSid - Account Sid.\n * @property {string} serviceSid - Service Sid.\n * @property {string} entitySid - Entity Sid.\n * @property {string} identity - Unique external identifier of the Entity\n * @property {string} factorSid - Factor Sid.\n * @property {Date} dateCreated - The date this Challenge was created\n * @property {Date} dateUpdated - The date this Challenge was updated\n * @property {Date} dateResponded - The date this Challenge was responded\n * @property {Date} expirationDate - The date-time when this Challenge expires\n * @property {challenge.challenge_statuses} status - The Status of this Challenge\n * @property {challenge.challenge_reasons} respondedReason -\n *          The Reason of this Challenge `status`\n * @property {object} details - Details about the Challenge.\n * @property {object} hiddenDetails - Hidden details about the Challenge\n * @property {object} metadata - Metadata of the challenge.\n * @property {challenge.factor_types} factorType -\n *          The Factor Type of this Challenge\n * @property {string} url - The URL of this resource.\n * @property {string} links - Nested resource URLs.\n *\n * @param {V2} version - Version of the resource\n * @param {ChallengePayload} payload - The instance payload\n * @param {sid} serviceSid - Service Sid.\n * @param {string} identity - Unique external identifier of the Entity\n * @param {sid} sid - A string that uniquely identifies this Challenge.\n */\n\n/* jshint ignore:end */\n\n\nChallengeInstance = function ChallengeInstance(version, payload, serviceSid, identity, sid) {\n  this._version = version; // Marshaled Properties\n\n  this.sid = payload.sid; // jshint ignore:line\n\n  this.accountSid = payload.account_sid; // jshint ignore:line\n\n  this.serviceSid = payload.service_sid; // jshint ignore:line\n\n  this.entitySid = payload.entity_sid; // jshint ignore:line\n\n  this.identity = payload.identity; // jshint ignore:line\n\n  this.factorSid = payload.factor_sid; // jshint ignore:line\n\n  this.dateCreated = deserialize.iso8601DateTime(payload.date_created); // jshint ignore:line\n\n  this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated); // jshint ignore:line\n\n  this.dateResponded = deserialize.iso8601DateTime(payload.date_responded); // jshint ignore:line\n\n  this.expirationDate = deserialize.iso8601DateTime(payload.expiration_date); // jshint ignore:line\n\n  this.status = payload.status; // jshint ignore:line\n\n  this.respondedReason = payload.responded_reason; // jshint ignore:line\n\n  this.details = payload.details; // jshint ignore:line\n\n  this.hiddenDetails = payload.hidden_details; // jshint ignore:line\n\n  this.metadata = payload.metadata; // jshint ignore:line\n\n  this.factorType = payload.factor_type; // jshint ignore:line\n\n  this.url = payload.url; // jshint ignore:line\n\n  this.links = payload.links; // jshint ignore:line\n  // Context\n\n  this._context = undefined;\n  this._solution = {\n    serviceSid: serviceSid,\n    identity: identity,\n    sid: sid || this.sid\n  };\n};\n\nObject.defineProperty(ChallengeInstance.prototype, '_proxy', {\n  get: function () {\n    if (!this._context) {\n      this._context = new ChallengeContext(this._version, this._solution.serviceSid, this._solution.identity, this._solution.sid);\n    }\n\n    return this._context;\n  }\n});\n/* jshint ignore:start */\n\n/**\n * fetch a ChallengeInstance\n *\n * @function fetch\n * @memberof Twilio.Verify.V2.ServiceContext.EntityContext.ChallengeInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed ChallengeInstance\n */\n\n/* jshint ignore:end */\n\nChallengeInstance.prototype.fetch = function fetch(callback) {\n  return this._proxy.fetch(callback);\n};\n/* jshint ignore:start */\n\n/**\n * update a ChallengeInstance\n *\n * @function update\n * @memberof Twilio.Verify.V2.ServiceContext.EntityContext.ChallengeInstance#\n *\n * @param {object} [opts] - Options for request\n * @param {string} [opts.authPayload] - Optional payload to verify the Challenge\n * @param {object} [opts.metadata] - Metadata of the challenge.\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed ChallengeInstance\n */\n\n/* jshint ignore:end */\n\n\nChallengeInstance.prototype.update = function update(opts, callback) {\n  return this._proxy.update(opts, callback);\n};\n/* jshint ignore:start */\n\n/**\n * Access the notifications\n *\n * @function notifications\n * @memberof Twilio.Verify.V2.ServiceContext.EntityContext.ChallengeInstance#\n *\n * @returns {Twilio.Verify.V2.ServiceContext.EntityContext.ChallengeContext.NotificationList}\n */\n\n/* jshint ignore:end */\n\n\nChallengeInstance.prototype.notifications = function notifications() {\n  return this._proxy.notifications;\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Verify.V2.ServiceContext.EntityContext.ChallengeInstance#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nChallengeInstance.prototype.toJSON = function toJSON() {\n  let clone = {};\n\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n\n  return clone;\n};\n\nChallengeInstance.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the ChallengeContext\n *\n * PLEASE NOTE that this class contains beta products that are subject to change.\n * Use them with caution.\n *\n * @constructor Twilio.Verify.V2.ServiceContext.EntityContext.ChallengeContext\n *\n * @property {Twilio.Verify.V2.ServiceContext.EntityContext.ChallengeContext.NotificationList} notifications -\n *          notifications resource\n *\n * @param {V2} version - Version of the resource\n * @param {sid} serviceSid - Service Sid.\n * @param {string} identity - Unique external identifier of the Entity\n * @param {sid} sid - A string that uniquely identifies this Challenge.\n */\n\n/* jshint ignore:end */\n\n\nChallengeContext = function ChallengeContext(version, serviceSid, identity, sid) {\n  this._version = version; // Path Solution\n\n  this._solution = {\n    serviceSid: serviceSid,\n    identity: identity,\n    sid: sid\n  };\n  this._uri = `/Services/${serviceSid}/Entities/${identity}/Challenges/${sid}`; // Dependents\n\n  this._notifications = undefined;\n};\n/* jshint ignore:start */\n\n/**\n * fetch a ChallengeInstance\n *\n * @function fetch\n * @memberof Twilio.Verify.V2.ServiceContext.EntityContext.ChallengeContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed ChallengeInstance\n */\n\n/* jshint ignore:end */\n\n\nChallengeContext.prototype.fetch = function fetch(callback) {\n  var deferred = Q.defer();\n\n  var promise = this._version.fetch({\n    uri: this._uri,\n    method: 'GET'\n  });\n\n  promise = promise.then(function (payload) {\n    deferred.resolve(new ChallengeInstance(this._version, payload, this._solution.serviceSid, this._solution.identity, this._solution.sid));\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n/* jshint ignore:start */\n\n/**\n * update a ChallengeInstance\n *\n * @function update\n * @memberof Twilio.Verify.V2.ServiceContext.EntityContext.ChallengeContext#\n *\n * @param {object} [opts] - Options for request\n * @param {string} [opts.authPayload] - Optional payload to verify the Challenge\n * @param {object} [opts.metadata] - Metadata of the challenge.\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed ChallengeInstance\n */\n\n/* jshint ignore:end */\n\n\nChallengeContext.prototype.update = function update(opts, callback) {\n  if (_.isFunction(opts)) {\n    callback = opts;\n    opts = {};\n  }\n\n  opts = opts || {};\n  var deferred = Q.defer();\n  var data = values.of({\n    'AuthPayload': _.get(opts, 'authPayload'),\n    'Metadata': serialize.object(_.get(opts, 'metadata'))\n  });\n\n  var promise = this._version.update({\n    uri: this._uri,\n    method: 'POST',\n    data: data\n  });\n\n  promise = promise.then(function (payload) {\n    deferred.resolve(new ChallengeInstance(this._version, payload, this._solution.serviceSid, this._solution.identity, this._solution.sid));\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\nObject.defineProperty(ChallengeContext.prototype, 'notifications', {\n  get: function () {\n    if (!this._notifications) {\n      this._notifications = new NotificationList(this._version, this._solution.serviceSid, this._solution.identity, this._solution.sid);\n    }\n\n    return this._notifications;\n  }\n});\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Verify.V2.ServiceContext.EntityContext.ChallengeContext#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\nChallengeContext.prototype.toJSON = function toJSON() {\n  return this._solution;\n};\n\nChallengeContext.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\nmodule.exports = {\n  ChallengeList: ChallengeList,\n  ChallengePage: ChallengePage,\n  ChallengeInstance: ChallengeInstance,\n  ChallengeContext: ChallengeContext\n};","map":{"version":3,"names":["Q","require","_","util","NotificationList","Page","deserialize","serialize","values","ChallengeList","ChallengePage","ChallengeInstance","ChallengeContext","version","serviceSid","identity","ChallengeListInstance","sid","get","_version","_solution","_uri","create","opts","callback","isUndefined","Error","deferred","defer","data","of","iso8601DateTime","map","e","object","promise","uri","method","then","payload","resolve","bind","catch","error","reject","isFunction","nodeify","each","done","currentPage","currentResource","limits","readLimits","limit","pageSize","onComplete","fetchNextPage","fn","page","instances","instance","nextPage","merge","list","allResources","resource","push","length","pageToken","pageNumber","params","getPage","targetUrl","_domain","twilio","request","toJSON","inspect","custom","depth","options","response","solution","prototype","constructor","call","extend","getInstance","clone","forOwn","value","key","startsWith","accountSid","account_sid","service_sid","entitySid","entity_sid","factorSid","factor_sid","dateCreated","date_created","dateUpdated","date_updated","dateResponded","date_responded","expirationDate","expiration_date","status","respondedReason","responded_reason","details","hiddenDetails","hidden_details","metadata","factorType","factor_type","url","links","_context","undefined","Object","defineProperty","fetch","_proxy","update","notifications","_notifications","module","exports"],"sources":["/Users/hooniesun/rmit/fwp/assessment1/lan/node_modules/twilio/lib/rest/verify/v2/service/entity/challenge.js"],"sourcesContent":["'use strict';\n\n/* jshint ignore:start */\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n/* jshint ignore:end */\n\nvar Q = require('q');  /* jshint ignore:line */\nvar _ = require('lodash');  /* jshint ignore:line */\nvar util = require('util');  /* jshint ignore:line */\nvar NotificationList = require('./challenge/notification').NotificationList;\nvar Page = require('../../../../../base/Page');  /* jshint ignore:line */\nvar deserialize = require(\n    '../../../../../base/deserialize');  /* jshint ignore:line */\nvar serialize = require(\n    '../../../../../base/serialize');  /* jshint ignore:line */\nvar values = require('../../../../../base/values');  /* jshint ignore:line */\n\nvar ChallengeList;\nvar ChallengePage;\nvar ChallengeInstance;\nvar ChallengeContext;\n\n/* jshint ignore:start */\n/**\n * Initialize the ChallengeList\n *\n * PLEASE NOTE that this class contains beta products that are subject to change.\n * Use them with caution.\n *\n * @constructor Twilio.Verify.V2.ServiceContext.EntityContext.ChallengeList\n *\n * @param {Twilio.Verify.V2} version - Version of the resource\n * @param {string} serviceSid - Service Sid.\n * @param {string} identity - Unique external identifier of the Entity\n */\n/* jshint ignore:end */\nChallengeList = function ChallengeList(version, serviceSid, identity) {\n  /* jshint ignore:start */\n  /**\n   * @function challenges\n   * @memberof Twilio.Verify.V2.ServiceContext.EntityContext#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Verify.V2.ServiceContext.EntityContext.ChallengeContext}\n   */\n  /* jshint ignore:end */\n  function ChallengeListInstance(sid) {\n    return ChallengeListInstance.get(sid);\n  }\n\n  ChallengeListInstance._version = version;\n  // Path Solution\n  ChallengeListInstance._solution = {serviceSid: serviceSid, identity: identity};\n  ChallengeListInstance._uri = `/Services/${serviceSid}/Entities/${identity}/Challenges`;\n  /* jshint ignore:start */\n  /**\n   * create a ChallengeInstance\n   *\n   * @function create\n   * @memberof Twilio.Verify.V2.ServiceContext.EntityContext.ChallengeList#\n   *\n   * @param {object} opts - Options for request\n   * @param {string} opts.factorSid - Factor Sid.\n   * @param {Date} [opts.expirationDate] - The date-time when this Challenge expires\n   * @param {string} [opts.details.message] -\n   *          Shown to the user when the push notification arrives\n   * @param {object|list} [opts.details.fields] -\n   *          A list of objects that describe the Fields included in the Challenge\n   * @param {object} [opts.hiddenDetails] -\n   *          Hidden details provided to contextualize the Challenge\n   * @param {string} [opts.authPayload] - Optional payload to verify the Challenge\n   * @param {function} [callback] - Callback to handle processed record\n   *\n   * @returns {Promise} Resolves to processed ChallengeInstance\n   */\n  /* jshint ignore:end */\n  ChallengeListInstance.create = function create(opts, callback) {\n    if (_.isUndefined(opts)) {\n      throw new Error('Required parameter \"opts\" missing.');\n    }\n    if (_.isUndefined(opts['factorSid'])) {\n      throw new Error('Required parameter \"opts[\\'factorSid\\']\" missing.');\n    }\n\n    var deferred = Q.defer();\n    var data = values.of({\n      'FactorSid': _.get(opts, 'factorSid'),\n      'ExpirationDate': serialize.iso8601DateTime(_.get(opts, 'expirationDate')),\n      'Details.Message': _.get(opts, 'details.message'),\n      'Details.Fields': serialize.map(_.get(opts, 'details.fields'), function(e) { return serialize.object(e); }),\n      'HiddenDetails': serialize.object(_.get(opts, 'hiddenDetails')),\n      'AuthPayload': _.get(opts, 'authPayload')\n    });\n\n    var promise = this._version.create({uri: this._uri, method: 'POST', data: data});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new ChallengeInstance(\n        this._version,\n        payload,\n        this._solution.serviceSid,\n        this._solution.identity,\n        this._solution.sid\n      ));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Streams ChallengeInstance records from the API.\n   *\n   * This operation lazily loads records as efficiently as possible until the limit\n   * is reached.\n   *\n   * The results are passed into the callback function, so this operation is memory\n   * efficient.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function each\n   * @memberof Twilio.Verify.V2.ServiceContext.EntityContext.ChallengeList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.factorSid] - Factor Sid.\n   * @param {challenge.challenge_statuses} [opts.status] -\n   *          The Status of theChallenges to fetch\n   * @param {challenge.list_orders} [opts.order] -\n   *          The sort order of the Challenges list\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         each() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no pageSize is defined but a limit is defined,\n   *         each() will attempt to read the limit with the most efficient\n   *         page size, i.e. min(limit, 1000)\n   * @param {Function} [opts.callback] -\n   *         Function to process each record. If this and a positional\n   *         callback are passed, this one will be used\n   * @param {Function} [opts.done] -\n   *          Function to be called upon completion of streaming\n   * @param {Function} [callback] - Function to process each record\n   */\n  /* jshint ignore:end */\n  ChallengeListInstance.each = function each(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    if (opts.callback) {\n      callback = opts.callback;\n    }\n    if (_.isUndefined(callback)) {\n      throw new Error('Callback function must be provided');\n    }\n\n    var done = false;\n    var currentPage = 1;\n    var currentResource = 0;\n    var limits = this._version.readLimits({\n      limit: opts.limit,\n      pageSize: opts.pageSize\n    });\n\n    function onComplete(error) {\n      done = true;\n      if (_.isFunction(opts.done)) {\n        opts.done(error);\n      }\n    }\n\n    function fetchNextPage(fn) {\n      var promise = fn();\n      if (_.isUndefined(promise)) {\n        onComplete();\n        return;\n      }\n\n      promise.then(function(page) {\n        _.each(page.instances, function(instance) {\n          if (done || (!_.isUndefined(opts.limit) && currentResource >= opts.limit)) {\n            done = true;\n            return false;\n          }\n\n          currentResource++;\n          callback(instance, onComplete);\n        });\n\n        if (!done) {\n          currentPage++;\n          fetchNextPage(_.bind(page.nextPage, page));\n        } else {\n          onComplete();\n        }\n      });\n\n      promise.catch(onComplete);\n    }\n\n    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Lists ChallengeInstance records from the API as a list.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function list\n   * @memberof Twilio.Verify.V2.ServiceContext.EntityContext.ChallengeList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.factorSid] - Factor Sid.\n   * @param {challenge.challenge_statuses} [opts.status] -\n   *          The Status of theChallenges to fetch\n   * @param {challenge.list_orders} [opts.order] -\n   *          The sort order of the Challenges list\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         list() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no page_size is defined but a limit is defined,\n   *         list() will attempt to read the limit with the most\n   *         efficient page size, i.e. min(limit, 1000)\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  ChallengeListInstance.list = function list(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    var deferred = Q.defer();\n    var allResources = [];\n    opts.callback = function(resource, done) {\n      allResources.push(resource);\n\n      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {\n        done();\n      }\n    };\n\n    opts.done = function(error) {\n      if (_.isUndefined(error)) {\n        deferred.resolve(allResources);\n      } else {\n        deferred.reject(error);\n      }\n    };\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    this.each(opts);\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single page of ChallengeInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function page\n   * @memberof Twilio.Verify.V2.ServiceContext.EntityContext.ChallengeList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.factorSid] - Factor Sid.\n   * @param {challenge.challenge_statuses} [opts.status] -\n   *          The Status of theChallenges to fetch\n   * @param {challenge.list_orders} [opts.order] -\n   *          The sort order of the Challenges list\n   * @param {string} [opts.pageToken] - PageToken provided by the API\n   * @param {number} [opts.pageNumber] -\n   *          Page Number, this value is simply for client state\n   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  ChallengeListInstance.page = function page(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n\n    var deferred = Q.defer();\n    var data = values.of({\n      'FactorSid': _.get(opts, 'factorSid'),\n      'Status': _.get(opts, 'status'),\n      'Order': _.get(opts, 'order'),\n      'PageToken': opts.pageToken,\n      'Page': opts.pageNumber,\n      'PageSize': opts.pageSize\n    });\n\n    var promise = this._version.page({uri: this._uri, method: 'GET', params: data});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new ChallengePage(this._version, payload, this._solution));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single target page of ChallengeInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function getPage\n   * @memberof Twilio.Verify.V2.ServiceContext.EntityContext.ChallengeList#\n   *\n   * @param {string} [targetUrl] - API-generated URL for the requested results page\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  ChallengeListInstance.getPage = function getPage(targetUrl, callback) {\n    var deferred = Q.defer();\n\n    var promise = this._version._domain.twilio.request({method: 'GET', uri: targetUrl});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new ChallengePage(this._version, payload, this._solution));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Constructs a challenge\n   *\n   * @function get\n   * @memberof Twilio.Verify.V2.ServiceContext.EntityContext.ChallengeList#\n   *\n   * @param {string} sid - A string that uniquely identifies this Challenge.\n   *\n   * @returns {Twilio.Verify.V2.ServiceContext.EntityContext.ChallengeContext}\n   */\n  /* jshint ignore:end */\n  ChallengeListInstance.get = function get(sid) {\n    return new ChallengeContext(this._version, this._solution.serviceSid, this._solution.identity, sid);\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Verify.V2.ServiceContext.EntityContext.ChallengeList#\n   *\n   * @returns Object\n   */\n  /* jshint ignore:end */\n  ChallengeListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n\n  ChallengeListInstance[util.inspect.custom] = function inspect(depth, options) {\n    return util.inspect(this.toJSON(), options);\n  };\n\n  return ChallengeListInstance;\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the ChallengePage\n *\n * PLEASE NOTE that this class contains beta products that are subject to change.\n * Use them with caution.\n *\n * @constructor Twilio.Verify.V2.ServiceContext.EntityContext.ChallengePage\n *\n * @param {V2} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {ChallengeSolution} solution - Path solution\n *\n * @returns ChallengePage\n */\n/* jshint ignore:end */\nChallengePage = function ChallengePage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n\n_.extend(ChallengePage.prototype, Page.prototype);\nChallengePage.prototype.constructor = ChallengePage;\n\n/* jshint ignore:start */\n/**\n * Build an instance of ChallengeInstance\n *\n * @function getInstance\n * @memberof Twilio.Verify.V2.ServiceContext.EntityContext.ChallengePage#\n *\n * @param {ChallengePayload} payload - Payload response from the API\n *\n * @returns ChallengeInstance\n */\n/* jshint ignore:end */\nChallengePage.prototype.getInstance = function getInstance(payload) {\n  return new ChallengeInstance(\n    this._version,\n    payload,\n    this._solution.serviceSid,\n    this._solution.identity\n  );\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Verify.V2.ServiceContext.EntityContext.ChallengePage#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nChallengePage.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function(value, key) {\n    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\n\nChallengePage.prototype[util.inspect.custom] = function inspect(depth, options)\n    {\n  return util.inspect(this.toJSON(), options);\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the ChallengeContext\n *\n * PLEASE NOTE that this class contains beta products that are subject to change.\n * Use them with caution.\n *\n * @constructor Twilio.Verify.V2.ServiceContext.EntityContext.ChallengeInstance\n *\n * @property {string} sid - A string that uniquely identifies this Challenge.\n * @property {string} accountSid - Account Sid.\n * @property {string} serviceSid - Service Sid.\n * @property {string} entitySid - Entity Sid.\n * @property {string} identity - Unique external identifier of the Entity\n * @property {string} factorSid - Factor Sid.\n * @property {Date} dateCreated - The date this Challenge was created\n * @property {Date} dateUpdated - The date this Challenge was updated\n * @property {Date} dateResponded - The date this Challenge was responded\n * @property {Date} expirationDate - The date-time when this Challenge expires\n * @property {challenge.challenge_statuses} status - The Status of this Challenge\n * @property {challenge.challenge_reasons} respondedReason -\n *          The Reason of this Challenge `status`\n * @property {object} details - Details about the Challenge.\n * @property {object} hiddenDetails - Hidden details about the Challenge\n * @property {object} metadata - Metadata of the challenge.\n * @property {challenge.factor_types} factorType -\n *          The Factor Type of this Challenge\n * @property {string} url - The URL of this resource.\n * @property {string} links - Nested resource URLs.\n *\n * @param {V2} version - Version of the resource\n * @param {ChallengePayload} payload - The instance payload\n * @param {sid} serviceSid - Service Sid.\n * @param {string} identity - Unique external identifier of the Entity\n * @param {sid} sid - A string that uniquely identifies this Challenge.\n */\n/* jshint ignore:end */\nChallengeInstance = function ChallengeInstance(version, payload, serviceSid,\n                                                identity, sid) {\n  this._version = version;\n\n  // Marshaled Properties\n  this.sid = payload.sid; // jshint ignore:line\n  this.accountSid = payload.account_sid; // jshint ignore:line\n  this.serviceSid = payload.service_sid; // jshint ignore:line\n  this.entitySid = payload.entity_sid; // jshint ignore:line\n  this.identity = payload.identity; // jshint ignore:line\n  this.factorSid = payload.factor_sid; // jshint ignore:line\n  this.dateCreated = deserialize.iso8601DateTime(payload.date_created); // jshint ignore:line\n  this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated); // jshint ignore:line\n  this.dateResponded = deserialize.iso8601DateTime(payload.date_responded); // jshint ignore:line\n  this.expirationDate = deserialize.iso8601DateTime(payload.expiration_date); // jshint ignore:line\n  this.status = payload.status; // jshint ignore:line\n  this.respondedReason = payload.responded_reason; // jshint ignore:line\n  this.details = payload.details; // jshint ignore:line\n  this.hiddenDetails = payload.hidden_details; // jshint ignore:line\n  this.metadata = payload.metadata; // jshint ignore:line\n  this.factorType = payload.factor_type; // jshint ignore:line\n  this.url = payload.url; // jshint ignore:line\n  this.links = payload.links; // jshint ignore:line\n\n  // Context\n  this._context = undefined;\n  this._solution = {serviceSid: serviceSid, identity: identity, sid: sid || this.sid, };\n};\n\nObject.defineProperty(ChallengeInstance.prototype,\n  '_proxy', {\n    get: function() {\n      if (!this._context) {\n        this._context = new ChallengeContext(\n          this._version,\n          this._solution.serviceSid,\n          this._solution.identity,\n          this._solution.sid\n        );\n      }\n\n      return this._context;\n    }\n});\n\n/* jshint ignore:start */\n/**\n * fetch a ChallengeInstance\n *\n * @function fetch\n * @memberof Twilio.Verify.V2.ServiceContext.EntityContext.ChallengeInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed ChallengeInstance\n */\n/* jshint ignore:end */\nChallengeInstance.prototype.fetch = function fetch(callback) {\n  return this._proxy.fetch(callback);\n};\n\n/* jshint ignore:start */\n/**\n * update a ChallengeInstance\n *\n * @function update\n * @memberof Twilio.Verify.V2.ServiceContext.EntityContext.ChallengeInstance#\n *\n * @param {object} [opts] - Options for request\n * @param {string} [opts.authPayload] - Optional payload to verify the Challenge\n * @param {object} [opts.metadata] - Metadata of the challenge.\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed ChallengeInstance\n */\n/* jshint ignore:end */\nChallengeInstance.prototype.update = function update(opts, callback) {\n  return this._proxy.update(opts, callback);\n};\n\n/* jshint ignore:start */\n/**\n * Access the notifications\n *\n * @function notifications\n * @memberof Twilio.Verify.V2.ServiceContext.EntityContext.ChallengeInstance#\n *\n * @returns {Twilio.Verify.V2.ServiceContext.EntityContext.ChallengeContext.NotificationList}\n */\n/* jshint ignore:end */\nChallengeInstance.prototype.notifications = function notifications() {\n  return this._proxy.notifications;\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Verify.V2.ServiceContext.EntityContext.ChallengeInstance#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nChallengeInstance.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function(value, key) {\n    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\n\nChallengeInstance.prototype[util.inspect.custom] = function inspect(depth,\n    options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the ChallengeContext\n *\n * PLEASE NOTE that this class contains beta products that are subject to change.\n * Use them with caution.\n *\n * @constructor Twilio.Verify.V2.ServiceContext.EntityContext.ChallengeContext\n *\n * @property {Twilio.Verify.V2.ServiceContext.EntityContext.ChallengeContext.NotificationList} notifications -\n *          notifications resource\n *\n * @param {V2} version - Version of the resource\n * @param {sid} serviceSid - Service Sid.\n * @param {string} identity - Unique external identifier of the Entity\n * @param {sid} sid - A string that uniquely identifies this Challenge.\n */\n/* jshint ignore:end */\nChallengeContext = function ChallengeContext(version, serviceSid, identity, sid)\n                                              {\n  this._version = version;\n\n  // Path Solution\n  this._solution = {serviceSid: serviceSid, identity: identity, sid: sid, };\n  this._uri = `/Services/${serviceSid}/Entities/${identity}/Challenges/${sid}`;\n\n  // Dependents\n  this._notifications = undefined;\n};\n\n/* jshint ignore:start */\n/**\n * fetch a ChallengeInstance\n *\n * @function fetch\n * @memberof Twilio.Verify.V2.ServiceContext.EntityContext.ChallengeContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed ChallengeInstance\n */\n/* jshint ignore:end */\nChallengeContext.prototype.fetch = function fetch(callback) {\n  var deferred = Q.defer();\n  var promise = this._version.fetch({uri: this._uri, method: 'GET'});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(new ChallengeInstance(\n      this._version,\n      payload,\n      this._solution.serviceSid,\n      this._solution.identity,\n      this._solution.sid\n    ));\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * update a ChallengeInstance\n *\n * @function update\n * @memberof Twilio.Verify.V2.ServiceContext.EntityContext.ChallengeContext#\n *\n * @param {object} [opts] - Options for request\n * @param {string} [opts.authPayload] - Optional payload to verify the Challenge\n * @param {object} [opts.metadata] - Metadata of the challenge.\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed ChallengeInstance\n */\n/* jshint ignore:end */\nChallengeContext.prototype.update = function update(opts, callback) {\n  if (_.isFunction(opts)) {\n    callback = opts;\n    opts = {};\n  }\n  opts = opts || {};\n\n  var deferred = Q.defer();\n  var data = values.of({\n    'AuthPayload': _.get(opts, 'authPayload'),\n    'Metadata': serialize.object(_.get(opts, 'metadata'))\n  });\n\n  var promise = this._version.update({uri: this._uri, method: 'POST', data: data});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(new ChallengeInstance(\n      this._version,\n      payload,\n      this._solution.serviceSid,\n      this._solution.identity,\n      this._solution.sid\n    ));\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\nObject.defineProperty(ChallengeContext.prototype,\n  'notifications', {\n    get: function() {\n      if (!this._notifications) {\n        this._notifications = new NotificationList(\n          this._version,\n          this._solution.serviceSid,\n          this._solution.identity,\n          this._solution.sid\n        );\n      }\n      return this._notifications;\n    }\n});\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Verify.V2.ServiceContext.EntityContext.ChallengeContext#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nChallengeContext.prototype.toJSON = function toJSON() {\n  return this._solution;\n};\n\nChallengeContext.prototype[util.inspect.custom] = function inspect(depth,\n    options) {\n  return util.inspect(this.toJSON(), options);\n};\n\nmodule.exports = {\n  ChallengeList: ChallengeList,\n  ChallengePage: ChallengePage,\n  ChallengeInstance: ChallengeInstance,\n  ChallengeContext: ChallengeContext\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}