{"ast":null,"code":"var _jsxFileName = \"/Users/hooniesun/rmit/fwp/assessment1/lan/src/UI/Signup/SignUpForm.js\",\n    _s = $RefreshSig$();\n\nimport { useState } from \"react\";\nimport { Container, Button, Form } from \"react-bootstrap\";\nimport { useOutletContext, useNavigate } from \"react-router-dom\";\nimport formatDate from \"../../formatDate\";\nimport Loading from \"../Loading\";\nimport MFA from \"../MFA\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function SignUpForm() {\n  _s();\n\n  const [values, setValues] = useState({});\n  const [errors, setErrors] = useState({\n    email: false,\n    password: false,\n    passwords: false\n  });\n  const [isPasswordVisible, setIsPasswordVisble] = useState(false);\n  const [isLoadingVisble, setIsLoadingVisible] = useState(false);\n  const [isMFAVisble, setIsMFAVisble] = useState(false);\n  const [user, setUser] = useState({});\n  const [, dispatchUser, users] = useOutletContext();\n  const navigate = useNavigate(); // A list of avatars from which to assign to a user\n\n  const avatars = [\"male\", \"female\", \"human\", \"identicon\", \"initials\", \"bottts\", \"avataaars\", \"jdenticon\", \"gridy\", \"micah\"];\n\n  const togglePasswordVisability = () => {\n    setIsPasswordVisble(!isPasswordVisible);\n  };\n\n  let validatePasswordTimeoutId;\n  let confirmPasswordTimeoutId;\n  let validateEmailTimeoutId;\n  const timeDelayed = 1000; // The 3 handlers below only validate after timeDelayed microseconds\n\n  const realTimeChangeHandler = event;\n\n  const validateEmailHandler = event => {\n    clearTimeout(validateEmailTimeoutId);\n    validateEmailTimeoutId = setTimeout(() => {\n      setIsEmailValid(validateEmail(event.target.value));\n    }, timeDelayed);\n  };\n\n  const validatePasswordHandler = event => {\n    clearTimeout(validatePasswordTimeoutId);\n    validatePasswordTimeoutId = setTimeout(() => {\n      setIsPasswordValid(validatePassword(event.target.value));\n    }, timeDelayed);\n  };\n\n  const confirmPasswordHandler = event => {\n    clearTimeout(confirmPasswordTimeoutId);\n    confirmPasswordTimeoutId = setTimeout(() => {\n      setIsPasswordIdentical(confirmPassword(event.target.value));\n    }, timeDelayed);\n  };\n\n  const submitHandler = event => {\n    event.preventDefault();\n    let email = event.target[2].value;\n    let password = event.target[3].value;\n    let confirmedPassword = event.target[4].value; // Make sure to check whether all the entries are valid once more\n\n    if (validateEmail(email) && validatePassword(password) && confirmPassword(confirmedPassword)) {\n      // Before storing the user data, ensure the user has scanned a QR code in Google Authenticator\n      setIsMFAVisble(true);\n      setUser({\n        firstName: event.target[0].value,\n        lastName: event.target[1].value,\n        email: email,\n        password: confirmedPassword,\n        joinedDate: formatDate(),\n        avatarsrc: `https://avatars.dicebear.com/api/${avatars[Math.floor(Math.random() * avatars.length)]}/${email}.svg`,\n        posts: []\n      });\n    } else {\n      setIsEmailValid(validateEmail(email));\n      setIsPasswordValid(validatePassword(password));\n      setIsPasswordIdentical(confirmPassword(confirmedPassword));\n    }\n  }; // The function gets called within MFA if the user has successfully scanned the QR code and typed in the OTP\n\n\n  const signUpAuthenticatedUser = secret => {\n    dispatchUser({\n      type: \"SIGNUP_USER\",\n      payload: { ...user,\n        secret: secret\n      }\n    });\n    setIsLoadingVisible(true);\n    clearTimeout(validateEmailTimeoutId);\n    clearTimeout(confirmPasswordTimeoutId);\n    clearTimeout(validatePasswordTimeoutId);\n    setTimeout(() => {\n      setIsLoadingVisible(false);\n      navigate(\"/profile\");\n    }, timeDelayed);\n  };\n\n  return /*#__PURE__*/_jsxDEV(Container, {\n    children: [/*#__PURE__*/_jsxDEV(Loading, {\n      show: isLoadingVisble,\n      children: \"Logging in\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(MFA, {\n      show: isMFAVisble,\n      setShow: setIsMFAVisble,\n      hideQRcode: false,\n      signUpAuthenticatedUser: signUpAuthenticatedUser,\n      user: null\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Form, {\n      className: \"my-5\",\n      onSubmit: submitHandler,\n      children: [/*#__PURE__*/_jsxDEV(\"header\", {\n        className: \"mb-5\",\n        children: /*#__PURE__*/_jsxDEV(\"h1\", {\n          className: \"text-center\",\n          children: \"Sign up\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 133,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n        className: \"mb-4\",\n        controlId: \"firstName\",\n        children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n          visuallyHidden: \"true\",\n          children: \"First name\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 136,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n          type: \"text\",\n          required: true,\n          placeholder: \"First name\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n        className: \"mb-4\",\n        controlId: \"lastName\",\n        children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n          visuallyHidden: \"true\",\n          children: \"Last name\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 144,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n          type: \"text\",\n          required: true,\n          placeholder: \"Last name\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 145,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n        className: \"mb-5\",\n        controlId: \"email\",\n        children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n          visuallyHidden: true,\n          children: \"Email\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 152,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n          type: \"email\",\n          required: true,\n          placeholder: \"Email\",\n          onChange: validateEmailHandler,\n          isInvalid: !isEmailValid\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 153,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Form.Control.Feedback, {\n          type: \"invalid\",\n          children: \"The email already exists\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 160,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n        className: \"mb-4\",\n        controlId: \"password\",\n        children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n          visuallyHidden: true,\n          children: \"Password\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 166,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n          type: isPasswordVisible ? \"text\" : \"password\",\n          required: true,\n          placeholder: \"Password\",\n          onChange: validatePasswordHandler,\n          isInvalid: !isPasswordValid\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 167,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Form.Control.Feedback, {\n          type: \"invalid\",\n          children: \"Use 8 or more character with a mix of lowercase and uppercase letters, numbers & symbols\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 174,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n        className: \"mb-2\",\n        controlId: \"passwords\",\n        children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n          visuallyHidden: \"true\",\n          children: \"Confirm Password\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 181,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n          type: isPasswordVisible ? \"text\" : \"password\",\n          required: true,\n          placeholder: \"Confirm\",\n          isInvalid: !isPasswordIdentical,\n          onChange: confirmPasswordHandler\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 182,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Form.Control.Feedback, {\n          type: \"invalid\",\n          children: \"Passwords are not identical\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 189,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Form.Text, {\n          className: \"text-muted\",\n          children: \"Use 8 or more character with a mix of lowercase and uppercase letters, numbers & symbols\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 192,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 180,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n        className: \"mb-3\",\n        controlId: \"showPassword\",\n        children: /*#__PURE__*/_jsxDEV(Form.Check, {\n          type: \"checkbox\",\n          label: \"Show password\",\n          onClick: togglePasswordVisability\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 198,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 197,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"primary\",\n        type: \"submit\",\n        children: \"Sign Up\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 204,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 122,\n    columnNumber: 5\n  }, this);\n}\n\n_s(SignUpForm, \"LtmMYIlw0IFBZ6nHM5NBPxnLHBg=\", false, function () {\n  return [useOutletContext, useNavigate];\n});\n\n_c = SignUpForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"SignUpForm\");","map":{"version":3,"names":["useState","Container","Button","Form","useOutletContext","useNavigate","formatDate","Loading","MFA","SignUpForm","values","setValues","errors","setErrors","email","password","passwords","isPasswordVisible","setIsPasswordVisble","isLoadingVisble","setIsLoadingVisible","isMFAVisble","setIsMFAVisble","user","setUser","dispatchUser","users","navigate","avatars","togglePasswordVisability","validatePasswordTimeoutId","confirmPasswordTimeoutId","validateEmailTimeoutId","timeDelayed","realTimeChangeHandler","event","validateEmailHandler","clearTimeout","setTimeout","setIsEmailValid","validateEmail","target","value","validatePasswordHandler","setIsPasswordValid","validatePassword","confirmPasswordHandler","setIsPasswordIdentical","confirmPassword","submitHandler","preventDefault","confirmedPassword","firstName","lastName","joinedDate","avatarsrc","Math","floor","random","length","posts","signUpAuthenticatedUser","secret","type","payload","isEmailValid","isPasswordValid","isPasswordIdentical"],"sources":["/Users/hooniesun/rmit/fwp/assessment1/lan/src/UI/Signup/SignUpForm.js"],"sourcesContent":["import {useState} from \"react\";\nimport { Container, Button, Form } from \"react-bootstrap\";\nimport { useOutletContext, useNavigate } from \"react-router-dom\";\nimport formatDate from \"../../formatDate\";\nimport Loading from \"../Loading\";\nimport MFA from \"../MFA\";\n\nexport default function SignUpForm() {\n  const [values, setValues] = useState({});\n  const [errors, setErrors] = useState({email: false, password: false, passwords: false, });\n\n  const [isPasswordVisible, setIsPasswordVisble] = useState(false);\n  const [isLoadingVisble, setIsLoadingVisible] = useState(false);\n  const [isMFAVisble, setIsMFAVisble] = useState(false);\n\n  const [user, setUser] = useState({});\n\n  const [, dispatchUser, users] = useOutletContext();\n  const navigate = useNavigate();\n\n  // A list of avatars from which to assign to a user\n  const avatars = [\n    \"male\",\n    \"female\",\n    \"human\",\n    \"identicon\",\n    \"initials\",\n    \"bottts\",\n    \"avataaars\",\n    \"jdenticon\",\n    \"gridy\",\n    \"micah\",\n  ];\n\n  const togglePasswordVisability = () => {\n    setIsPasswordVisble(!isPasswordVisible);\n  };\n\n  let validatePasswordTimeoutId;\n  let confirmPasswordTimeoutId;\n  let validateEmailTimeoutId;\n  const timeDelayed = 1000;\n\n  // The 3 handlers below only validate after timeDelayed microseconds\n\n  const realTimeChangeHandler = (event)\n\n  const validateEmailHandler = (event) => {\n    clearTimeout(validateEmailTimeoutId);\n    validateEmailTimeoutId = setTimeout(() => {\n      setIsEmailValid(validateEmail(event.target.value));\n    }, timeDelayed);\n  };\n\n  const validatePasswordHandler = (event) => {\n    clearTimeout(validatePasswordTimeoutId);\n    validatePasswordTimeoutId = setTimeout(() => {\n      setIsPasswordValid(validatePassword(event.target.value));\n    }, timeDelayed);\n  };\n\n  const confirmPasswordHandler = (event) => {\n    clearTimeout(confirmPasswordTimeoutId);\n    confirmPasswordTimeoutId = setTimeout(() => {\n      setIsPasswordIdentical(confirmPassword(event.target.value));\n    }, timeDelayed);\n  };\n\n  const submitHandler = (event) => {\n    event.preventDefault();\n\n    let email = event.target[2].value;\n    let password = event.target[3].value;\n    let confirmedPassword = event.target[4].value;\n\n    // Make sure to check whether all the entries are valid once more\n    if (\n      validateEmail(email) &&\n      validatePassword(password) &&\n      confirmPassword(confirmedPassword)\n    ) {\n      // Before storing the user data, ensure the user has scanned a QR code in Google Authenticator\n      setIsMFAVisble(true);\n\n      setUser({\n        firstName: event.target[0].value,\n        lastName: event.target[1].value,\n        email: email,\n        password: confirmedPassword,\n        joinedDate: formatDate(),\n        avatarsrc: `https://avatars.dicebear.com/api/${\n          avatars[Math.floor(Math.random() * avatars.length)]\n        }/${email}.svg`,\n        posts: [],\n      });\n    } else {\n      setIsEmailValid(validateEmail(email));\n      setIsPasswordValid(validatePassword(password));\n      setIsPasswordIdentical(confirmPassword(confirmedPassword));\n    }\n  };\n\n  // The function gets called within MFA if the user has successfully scanned the QR code and typed in the OTP\n  const signUpAuthenticatedUser = (secret) => {\n    dispatchUser({\n      type: \"SIGNUP_USER\",\n      payload: { ...user, secret: secret },\n    });\n    setIsLoadingVisible(true);\n\n    clearTimeout(validateEmailTimeoutId);\n    clearTimeout(confirmPasswordTimeoutId);\n    clearTimeout(validatePasswordTimeoutId);\n\n    setTimeout(() => {\n      setIsLoadingVisible(false);\n      navigate(\"/profile\");\n    }, timeDelayed);\n  };\n\n  return (\n    <Container>\n      <Loading show={isLoadingVisble}>Logging in</Loading>\n      <MFA\n        show={isMFAVisble}\n        setShow={setIsMFAVisble}\n        hideQRcode={false}\n        signUpAuthenticatedUser={signUpAuthenticatedUser}\n        user={null}\n      ></MFA>\n      <Form className=\"my-5\" onSubmit={submitHandler}>\n        <header className=\"mb-5\">\n          <h1 className=\"text-center\">Sign up</h1>\n        </header>\n        <Form.Group className=\"mb-4\" controlId=\"firstName\">\n          <Form.Label visuallyHidden=\"true\">First name</Form.Label>\n          <Form.Control\n            type=\"text\"\n            required\n            placeholder=\"First name\"\n          ></Form.Control>\n        </Form.Group>\n        <Form.Group className=\"mb-4\" controlId=\"lastName\">\n          <Form.Label visuallyHidden=\"true\">Last name</Form.Label>\n          <Form.Control\n            type=\"text\"\n            required\n            placeholder=\"Last name\"\n          ></Form.Control>\n        </Form.Group>\n        <Form.Group className=\"mb-5\" controlId=\"email\">\n          <Form.Label visuallyHidden>Email</Form.Label>\n          <Form.Control\n            type=\"email\"\n            required\n            placeholder=\"Email\"\n            onChange={validateEmailHandler}\n            isInvalid={!isEmailValid}\n          />\n          <Form.Control.Feedback type=\"invalid\">\n            The email already exists\n          </Form.Control.Feedback>\n        </Form.Group>\n\n        <Form.Group className=\"mb-4\" controlId=\"password\">\n          <Form.Label visuallyHidden>Password</Form.Label>\n          <Form.Control\n            type={isPasswordVisible ? \"text\" : \"password\"}\n            required\n            placeholder=\"Password\"\n            onChange={validatePasswordHandler}\n            isInvalid={!isPasswordValid}\n          />\n          <Form.Control.Feedback type=\"invalid\">\n            Use 8 or more character with a mix of lowercase and uppercase\n            letters, numbers & symbols\n          </Form.Control.Feedback>\n        </Form.Group>\n\n        <Form.Group className=\"mb-2\" controlId=\"passwords\">\n          <Form.Label visuallyHidden=\"true\">Confirm Password</Form.Label>\n          <Form.Control\n            type={isPasswordVisible ? \"text\" : \"password\"}\n            required\n            placeholder=\"Confirm\"\n            isInvalid={!isPasswordIdentical}\n            onChange={confirmPasswordHandler}\n          />\n          <Form.Control.Feedback type=\"invalid\">\n            Passwords are not identical\n          </Form.Control.Feedback>\n          <Form.Text className=\"text-muted\">\n            Use 8 or more character with a mix of lowercase and uppercase\n            letters, numbers & symbols\n          </Form.Text>\n        </Form.Group>\n        <Form.Group className=\"mb-3\" controlId=\"showPassword\">\n          <Form.Check\n            type=\"checkbox\"\n            label=\"Show password\"\n            onClick={togglePasswordVisability}\n          />\n        </Form.Group>\n        <Button variant=\"primary\" type=\"submit\">\n          Sign Up\n        </Button>\n      </Form>\n    </Container>\n  );\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}