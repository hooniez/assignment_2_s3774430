{"ast":null,"code":"'use strict';\n/* jshint ignore:start */\n\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n\n/* jshint ignore:end */\n\nvar Q = require('q');\n/* jshint ignore:line */\n\n\nvar _ = require('lodash');\n/* jshint ignore:line */\n\n\nvar util = require('util');\n/* jshint ignore:line */\n\n\nvar Page = require('../../../base/Page');\n/* jshint ignore:line */\n\n\nvar deserialize = require('../../../base/deserialize');\n/* jshint ignore:line */\n\n\nvar values = require('../../../base/values');\n/* jshint ignore:line */\n\n\nvar MediaRecordingList;\nvar MediaRecordingPage;\nvar MediaRecordingInstance;\nvar MediaRecordingContext;\n/* jshint ignore:start */\n\n/**\n * Initialize the MediaRecordingList\n *\n * PLEASE NOTE that this class contains preview products that are subject to\n * change. Use them with caution. If you currently do not have developer preview\n * access, please contact help@twilio.com.\n *\n * @constructor Twilio.Media.V1.MediaRecordingList\n *\n * @param {Twilio.Media.V1} version - Version of the resource\n */\n\n/* jshint ignore:end */\n\nMediaRecordingList = function MediaRecordingList(version) {\n  /* jshint ignore:start */\n\n  /**\n   * @function mediaRecording\n   * @memberof Twilio.Media.V1#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Media.V1.MediaRecordingContext}\n   */\n\n  /* jshint ignore:end */\n  function MediaRecordingListInstance(sid) {\n    return MediaRecordingListInstance.get(sid);\n  }\n\n  MediaRecordingListInstance._version = version; // Path Solution\n\n  MediaRecordingListInstance._solution = {};\n  MediaRecordingListInstance._uri = `/MediaRecordings`;\n  /* jshint ignore:start */\n\n  /**\n   * Streams MediaRecordingInstance records from the API.\n   *\n   * This operation lazily loads records as efficiently as possible until the limit\n   * is reached.\n   *\n   * The results are passed into the callback function, so this operation is memory\n   * efficient.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function each\n   * @memberof Twilio.Media.V1.MediaRecordingList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {media_recording.order} [opts.order] - The sort order of the list\n   * @param {media_recording.status} [opts.status] - Status to filter by\n   * @param {string} [opts.processorSid] - MediaProcessor to filter by\n   * @param {string} [opts.sourceSid] - Source SID to filter by\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         each() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no pageSize is defined but a limit is defined,\n   *         each() will attempt to read the limit with the most efficient\n   *         page size, i.e. min(limit, 1000)\n   * @param {Function} [opts.callback] -\n   *         Function to process each record. If this and a positional\n   *         callback are passed, this one will be used\n   * @param {Function} [opts.done] -\n   *          Function to be called upon completion of streaming\n   * @param {Function} [callback] - Function to process each record\n   */\n\n  /* jshint ignore:end */\n\n  MediaRecordingListInstance.each = function each(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n\n    if (opts.callback) {\n      callback = opts.callback;\n    }\n\n    if (_.isUndefined(callback)) {\n      throw new Error('Callback function must be provided');\n    }\n\n    var done = false;\n    var currentPage = 1;\n    var currentResource = 0;\n\n    var limits = this._version.readLimits({\n      limit: opts.limit,\n      pageSize: opts.pageSize\n    });\n\n    function onComplete(error) {\n      done = true;\n\n      if (_.isFunction(opts.done)) {\n        opts.done(error);\n      }\n    }\n\n    function fetchNextPage(fn) {\n      var promise = fn();\n\n      if (_.isUndefined(promise)) {\n        onComplete();\n        return;\n      }\n\n      promise.then(function (page) {\n        _.each(page.instances, function (instance) {\n          if (done || !_.isUndefined(opts.limit) && currentResource >= opts.limit) {\n            done = true;\n            return false;\n          }\n\n          currentResource++;\n          callback(instance, onComplete);\n        });\n\n        if (!done) {\n          currentPage++;\n          fetchNextPage(_.bind(page.nextPage, page));\n        } else {\n          onComplete();\n        }\n      });\n      promise.catch(onComplete);\n    }\n\n    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Lists MediaRecordingInstance records from the API as a list.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function list\n   * @memberof Twilio.Media.V1.MediaRecordingList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {media_recording.order} [opts.order] - The sort order of the list\n   * @param {media_recording.status} [opts.status] - Status to filter by\n   * @param {string} [opts.processorSid] - MediaProcessor to filter by\n   * @param {string} [opts.sourceSid] - Source SID to filter by\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         list() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no page_size is defined but a limit is defined,\n   *         list() will attempt to read the limit with the most\n   *         efficient page size, i.e. min(limit, 1000)\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  MediaRecordingListInstance.list = function list(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n    var deferred = Q.defer();\n    var allResources = [];\n\n    opts.callback = function (resource, done) {\n      allResources.push(resource);\n\n      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {\n        done();\n      }\n    };\n\n    opts.done = function (error) {\n      if (_.isUndefined(error)) {\n        deferred.resolve(allResources);\n      } else {\n        deferred.reject(error);\n      }\n    };\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    this.each(opts);\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Retrieve a single page of MediaRecordingInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function page\n   * @memberof Twilio.Media.V1.MediaRecordingList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {media_recording.order} [opts.order] - The sort order of the list\n   * @param {media_recording.status} [opts.status] - Status to filter by\n   * @param {string} [opts.processorSid] - MediaProcessor to filter by\n   * @param {string} [opts.sourceSid] - Source SID to filter by\n   * @param {string} [opts.pageToken] - PageToken provided by the API\n   * @param {number} [opts.pageNumber] -\n   *          Page Number, this value is simply for client state\n   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  MediaRecordingListInstance.page = function page(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n    var deferred = Q.defer();\n    var data = values.of({\n      'Order': _.get(opts, 'order'),\n      'Status': _.get(opts, 'status'),\n      'ProcessorSid': _.get(opts, 'processorSid'),\n      'SourceSid': _.get(opts, 'sourceSid'),\n      'PageToken': opts.pageToken,\n      'Page': opts.pageNumber,\n      'PageSize': opts.pageSize\n    });\n\n    var promise = this._version.page({\n      uri: this._uri,\n      method: 'GET',\n      params: data\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new MediaRecordingPage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Retrieve a single target page of MediaRecordingInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function getPage\n   * @memberof Twilio.Media.V1.MediaRecordingList#\n   *\n   * @param {string} [targetUrl] - API-generated URL for the requested results page\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  MediaRecordingListInstance.getPage = function getPage(targetUrl, callback) {\n    var deferred = Q.defer();\n\n    var promise = this._version._domain.twilio.request({\n      method: 'GET',\n      uri: targetUrl\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new MediaRecordingPage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Constructs a media_recording\n   *\n   * @function get\n   * @memberof Twilio.Media.V1.MediaRecordingList#\n   *\n   * @param {string} sid - The SID that identifies the resource to fetch\n   *\n   * @returns {Twilio.Media.V1.MediaRecordingContext}\n   */\n\n  /* jshint ignore:end */\n\n\n  MediaRecordingListInstance.get = function get(sid) {\n    return new MediaRecordingContext(this._version, sid);\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Media.V1.MediaRecordingList#\n   *\n   * @returns Object\n   */\n\n  /* jshint ignore:end */\n\n\n  MediaRecordingListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n\n  MediaRecordingListInstance[util.inspect.custom] = function inspect(depth, options) {\n    return util.inspect(this.toJSON(), options);\n  };\n\n  return MediaRecordingListInstance;\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the MediaRecordingPage\n *\n * PLEASE NOTE that this class contains preview products that are subject to\n * change. Use them with caution. If you currently do not have developer preview\n * access, please contact help@twilio.com.\n *\n * @constructor Twilio.Media.V1.MediaRecordingPage\n *\n * @param {V1} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {MediaRecordingSolution} solution - Path solution\n *\n * @returns MediaRecordingPage\n */\n\n/* jshint ignore:end */\n\n\nMediaRecordingPage = function MediaRecordingPage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n\n_.extend(MediaRecordingPage.prototype, Page.prototype);\n\nMediaRecordingPage.prototype.constructor = MediaRecordingPage;\n/* jshint ignore:start */\n\n/**\n * Build an instance of MediaRecordingInstance\n *\n * @function getInstance\n * @memberof Twilio.Media.V1.MediaRecordingPage#\n *\n * @param {MediaRecordingPayload} payload - Payload response from the API\n *\n * @returns MediaRecordingInstance\n */\n\n/* jshint ignore:end */\n\nMediaRecordingPage.prototype.getInstance = function getInstance(payload) {\n  return new MediaRecordingInstance(this._version, payload);\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Media.V1.MediaRecordingPage#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nMediaRecordingPage.prototype.toJSON = function toJSON() {\n  let clone = {};\n\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n\n  return clone;\n};\n\nMediaRecordingPage.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the MediaRecordingContext\n *\n * PLEASE NOTE that this class contains preview products that are subject to\n * change. Use them with caution. If you currently do not have developer preview\n * access, please contact help@twilio.com.\n *\n * @constructor Twilio.Media.V1.MediaRecordingInstance\n *\n * @property {string} accountSid - The SID of the Account that created the resource\n * @property {Date} dateCreated -\n *          The ISO 8601 date and time in GMT when the resource was created\n * @property {Date} dateUpdated -\n *          The ISO 8601 date and time in GMT when the resource was last updated\n * @property {number} duration - The duration of the MediaRecording\n * @property {media_recording.format} format - The format of the MediaRecording\n * @property {string} links - The URLs of related resources\n * @property {string} processorSid - The SID of the MediaProcessor\n * @property {string} resolution - The dimensions of the video image in pixels\n * @property {string} sourceSid -\n *          The SID of the resource that generated the original media\n * @property {string} sid - The unique string that identifies the resource\n * @property {number} mediaSize - The size of the recording media\n * @property {media_recording.status} status - The status of the MediaRecording\n * @property {string} statusCallback -\n *          The URL to which Twilio will send MediaRecording event updates\n * @property {string} statusCallbackMethod -\n *          The HTTP method Twilio should use to call the `status_callback` URL\n * @property {string} url - The absolute URL of the resource\n *\n * @param {V1} version - Version of the resource\n * @param {MediaRecordingPayload} payload - The instance payload\n * @param {sid} sid - The SID that identifies the resource to fetch\n */\n\n/* jshint ignore:end */\n\n\nMediaRecordingInstance = function MediaRecordingInstance(version, payload, sid) {\n  this._version = version; // Marshaled Properties\n\n  this.accountSid = payload.account_sid; // jshint ignore:line\n\n  this.dateCreated = deserialize.iso8601DateTime(payload.date_created); // jshint ignore:line\n\n  this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated); // jshint ignore:line\n\n  this.duration = deserialize.integer(payload.duration); // jshint ignore:line\n\n  this.format = payload.format; // jshint ignore:line\n\n  this.links = payload.links; // jshint ignore:line\n\n  this.processorSid = payload.processor_sid; // jshint ignore:line\n\n  this.resolution = payload.resolution; // jshint ignore:line\n\n  this.sourceSid = payload.source_sid; // jshint ignore:line\n\n  this.sid = payload.sid; // jshint ignore:line\n\n  this.mediaSize = deserialize.integer(payload.media_size); // jshint ignore:line\n\n  this.status = payload.status; // jshint ignore:line\n\n  this.statusCallback = payload.status_callback; // jshint ignore:line\n\n  this.statusCallbackMethod = payload.status_callback_method; // jshint ignore:line\n\n  this.url = payload.url; // jshint ignore:line\n  // Context\n\n  this._context = undefined;\n  this._solution = {\n    sid: sid || this.sid\n  };\n};\n\nObject.defineProperty(MediaRecordingInstance.prototype, '_proxy', {\n  get: function () {\n    if (!this._context) {\n      this._context = new MediaRecordingContext(this._version, this._solution.sid);\n    }\n\n    return this._context;\n  }\n});\n/* jshint ignore:start */\n\n/**\n * remove a MediaRecordingInstance\n *\n * @function remove\n * @memberof Twilio.Media.V1.MediaRecordingInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed MediaRecordingInstance\n */\n\n/* jshint ignore:end */\n\nMediaRecordingInstance.prototype.remove = function remove(callback) {\n  return this._proxy.remove(callback);\n};\n/* jshint ignore:start */\n\n/**\n * fetch a MediaRecordingInstance\n *\n * @function fetch\n * @memberof Twilio.Media.V1.MediaRecordingInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed MediaRecordingInstance\n */\n\n/* jshint ignore:end */\n\n\nMediaRecordingInstance.prototype.fetch = function fetch(callback) {\n  return this._proxy.fetch(callback);\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Media.V1.MediaRecordingInstance#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nMediaRecordingInstance.prototype.toJSON = function toJSON() {\n  let clone = {};\n\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n\n  return clone;\n};\n\nMediaRecordingInstance.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the MediaRecordingContext\n *\n * PLEASE NOTE that this class contains preview products that are subject to\n * change. Use them with caution. If you currently do not have developer preview\n * access, please contact help@twilio.com.\n *\n * @constructor Twilio.Media.V1.MediaRecordingContext\n *\n * @param {V1} version - Version of the resource\n * @param {sid} sid - The SID that identifies the resource to fetch\n */\n\n/* jshint ignore:end */\n\n\nMediaRecordingContext = function MediaRecordingContext(version, sid) {\n  this._version = version; // Path Solution\n\n  this._solution = {\n    sid: sid\n  };\n  this._uri = `/MediaRecordings/${sid}`;\n};\n/* jshint ignore:start */\n\n/**\n * remove a MediaRecordingInstance\n *\n * @function remove\n * @memberof Twilio.Media.V1.MediaRecordingContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed MediaRecordingInstance\n */\n\n/* jshint ignore:end */\n\n\nMediaRecordingContext.prototype.remove = function remove(callback) {\n  var deferred = Q.defer();\n\n  var promise = this._version.remove({\n    uri: this._uri,\n    method: 'DELETE'\n  });\n\n  promise = promise.then(function (payload) {\n    deferred.resolve(payload);\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n/* jshint ignore:start */\n\n/**\n * fetch a MediaRecordingInstance\n *\n * @function fetch\n * @memberof Twilio.Media.V1.MediaRecordingContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed MediaRecordingInstance\n */\n\n/* jshint ignore:end */\n\n\nMediaRecordingContext.prototype.fetch = function fetch(callback) {\n  var deferred = Q.defer();\n\n  var promise = this._version.fetch({\n    uri: this._uri,\n    method: 'GET'\n  });\n\n  promise = promise.then(function (payload) {\n    deferred.resolve(new MediaRecordingInstance(this._version, payload, this._solution.sid));\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Media.V1.MediaRecordingContext#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nMediaRecordingContext.prototype.toJSON = function toJSON() {\n  return this._solution;\n};\n\nMediaRecordingContext.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\nmodule.exports = {\n  MediaRecordingList: MediaRecordingList,\n  MediaRecordingPage: MediaRecordingPage,\n  MediaRecordingInstance: MediaRecordingInstance,\n  MediaRecordingContext: MediaRecordingContext\n};","map":{"version":3,"names":["Q","require","_","util","Page","deserialize","values","MediaRecordingList","MediaRecordingPage","MediaRecordingInstance","MediaRecordingContext","version","MediaRecordingListInstance","sid","get","_version","_solution","_uri","each","opts","callback","isFunction","isUndefined","Error","done","currentPage","currentResource","limits","readLimits","limit","pageSize","onComplete","error","fetchNextPage","fn","promise","then","page","instances","instance","bind","nextPage","catch","merge","list","deferred","defer","allResources","resource","push","length","resolve","reject","nodeify","data","of","pageToken","pageNumber","uri","method","params","payload","getPage","targetUrl","_domain","twilio","request","toJSON","inspect","custom","depth","options","response","solution","prototype","constructor","call","extend","getInstance","clone","forOwn","value","key","startsWith","accountSid","account_sid","dateCreated","iso8601DateTime","date_created","dateUpdated","date_updated","duration","integer","format","links","processorSid","processor_sid","resolution","sourceSid","source_sid","mediaSize","media_size","status","statusCallback","status_callback","statusCallbackMethod","status_callback_method","url","_context","undefined","Object","defineProperty","remove","_proxy","fetch","module","exports"],"sources":["/Users/hooniesun/rmit/fwp/assessment1/lan/node_modules/twilio/lib/rest/media/v1/mediaRecording.js"],"sourcesContent":["'use strict';\n\n/* jshint ignore:start */\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n/* jshint ignore:end */\n\nvar Q = require('q');  /* jshint ignore:line */\nvar _ = require('lodash');  /* jshint ignore:line */\nvar util = require('util');  /* jshint ignore:line */\nvar Page = require('../../../base/Page');  /* jshint ignore:line */\nvar deserialize = require(\n    '../../../base/deserialize');  /* jshint ignore:line */\nvar values = require('../../../base/values');  /* jshint ignore:line */\n\nvar MediaRecordingList;\nvar MediaRecordingPage;\nvar MediaRecordingInstance;\nvar MediaRecordingContext;\n\n/* jshint ignore:start */\n/**\n * Initialize the MediaRecordingList\n *\n * PLEASE NOTE that this class contains preview products that are subject to\n * change. Use them with caution. If you currently do not have developer preview\n * access, please contact help@twilio.com.\n *\n * @constructor Twilio.Media.V1.MediaRecordingList\n *\n * @param {Twilio.Media.V1} version - Version of the resource\n */\n/* jshint ignore:end */\nMediaRecordingList = function MediaRecordingList(version) {\n  /* jshint ignore:start */\n  /**\n   * @function mediaRecording\n   * @memberof Twilio.Media.V1#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Media.V1.MediaRecordingContext}\n   */\n  /* jshint ignore:end */\n  function MediaRecordingListInstance(sid) {\n    return MediaRecordingListInstance.get(sid);\n  }\n\n  MediaRecordingListInstance._version = version;\n  // Path Solution\n  MediaRecordingListInstance._solution = {};\n  MediaRecordingListInstance._uri = `/MediaRecordings`;\n  /* jshint ignore:start */\n  /**\n   * Streams MediaRecordingInstance records from the API.\n   *\n   * This operation lazily loads records as efficiently as possible until the limit\n   * is reached.\n   *\n   * The results are passed into the callback function, so this operation is memory\n   * efficient.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function each\n   * @memberof Twilio.Media.V1.MediaRecordingList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {media_recording.order} [opts.order] - The sort order of the list\n   * @param {media_recording.status} [opts.status] - Status to filter by\n   * @param {string} [opts.processorSid] - MediaProcessor to filter by\n   * @param {string} [opts.sourceSid] - Source SID to filter by\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         each() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no pageSize is defined but a limit is defined,\n   *         each() will attempt to read the limit with the most efficient\n   *         page size, i.e. min(limit, 1000)\n   * @param {Function} [opts.callback] -\n   *         Function to process each record. If this and a positional\n   *         callback are passed, this one will be used\n   * @param {Function} [opts.done] -\n   *          Function to be called upon completion of streaming\n   * @param {Function} [callback] - Function to process each record\n   */\n  /* jshint ignore:end */\n  MediaRecordingListInstance.each = function each(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    if (opts.callback) {\n      callback = opts.callback;\n    }\n    if (_.isUndefined(callback)) {\n      throw new Error('Callback function must be provided');\n    }\n\n    var done = false;\n    var currentPage = 1;\n    var currentResource = 0;\n    var limits = this._version.readLimits({\n      limit: opts.limit,\n      pageSize: opts.pageSize\n    });\n\n    function onComplete(error) {\n      done = true;\n      if (_.isFunction(opts.done)) {\n        opts.done(error);\n      }\n    }\n\n    function fetchNextPage(fn) {\n      var promise = fn();\n      if (_.isUndefined(promise)) {\n        onComplete();\n        return;\n      }\n\n      promise.then(function(page) {\n        _.each(page.instances, function(instance) {\n          if (done || (!_.isUndefined(opts.limit) && currentResource >= opts.limit)) {\n            done = true;\n            return false;\n          }\n\n          currentResource++;\n          callback(instance, onComplete);\n        });\n\n        if (!done) {\n          currentPage++;\n          fetchNextPage(_.bind(page.nextPage, page));\n        } else {\n          onComplete();\n        }\n      });\n\n      promise.catch(onComplete);\n    }\n\n    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Lists MediaRecordingInstance records from the API as a list.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function list\n   * @memberof Twilio.Media.V1.MediaRecordingList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {media_recording.order} [opts.order] - The sort order of the list\n   * @param {media_recording.status} [opts.status] - Status to filter by\n   * @param {string} [opts.processorSid] - MediaProcessor to filter by\n   * @param {string} [opts.sourceSid] - Source SID to filter by\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         list() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no page_size is defined but a limit is defined,\n   *         list() will attempt to read the limit with the most\n   *         efficient page size, i.e. min(limit, 1000)\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  MediaRecordingListInstance.list = function list(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    var deferred = Q.defer();\n    var allResources = [];\n    opts.callback = function(resource, done) {\n      allResources.push(resource);\n\n      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {\n        done();\n      }\n    };\n\n    opts.done = function(error) {\n      if (_.isUndefined(error)) {\n        deferred.resolve(allResources);\n      } else {\n        deferred.reject(error);\n      }\n    };\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    this.each(opts);\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single page of MediaRecordingInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function page\n   * @memberof Twilio.Media.V1.MediaRecordingList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {media_recording.order} [opts.order] - The sort order of the list\n   * @param {media_recording.status} [opts.status] - Status to filter by\n   * @param {string} [opts.processorSid] - MediaProcessor to filter by\n   * @param {string} [opts.sourceSid] - Source SID to filter by\n   * @param {string} [opts.pageToken] - PageToken provided by the API\n   * @param {number} [opts.pageNumber] -\n   *          Page Number, this value is simply for client state\n   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  MediaRecordingListInstance.page = function page(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n\n    var deferred = Q.defer();\n    var data = values.of({\n      'Order': _.get(opts, 'order'),\n      'Status': _.get(opts, 'status'),\n      'ProcessorSid': _.get(opts, 'processorSid'),\n      'SourceSid': _.get(opts, 'sourceSid'),\n      'PageToken': opts.pageToken,\n      'Page': opts.pageNumber,\n      'PageSize': opts.pageSize\n    });\n\n    var promise = this._version.page({uri: this._uri, method: 'GET', params: data});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new MediaRecordingPage(this._version, payload, this._solution));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single target page of MediaRecordingInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function getPage\n   * @memberof Twilio.Media.V1.MediaRecordingList#\n   *\n   * @param {string} [targetUrl] - API-generated URL for the requested results page\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  MediaRecordingListInstance.getPage = function getPage(targetUrl, callback) {\n    var deferred = Q.defer();\n\n    var promise = this._version._domain.twilio.request({method: 'GET', uri: targetUrl});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new MediaRecordingPage(this._version, payload, this._solution));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Constructs a media_recording\n   *\n   * @function get\n   * @memberof Twilio.Media.V1.MediaRecordingList#\n   *\n   * @param {string} sid - The SID that identifies the resource to fetch\n   *\n   * @returns {Twilio.Media.V1.MediaRecordingContext}\n   */\n  /* jshint ignore:end */\n  MediaRecordingListInstance.get = function get(sid) {\n    return new MediaRecordingContext(this._version, sid);\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Media.V1.MediaRecordingList#\n   *\n   * @returns Object\n   */\n  /* jshint ignore:end */\n  MediaRecordingListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n\n  MediaRecordingListInstance[util.inspect.custom] = function inspect(depth,\n      options) {\n    return util.inspect(this.toJSON(), options);\n  };\n\n  return MediaRecordingListInstance;\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the MediaRecordingPage\n *\n * PLEASE NOTE that this class contains preview products that are subject to\n * change. Use them with caution. If you currently do not have developer preview\n * access, please contact help@twilio.com.\n *\n * @constructor Twilio.Media.V1.MediaRecordingPage\n *\n * @param {V1} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {MediaRecordingSolution} solution - Path solution\n *\n * @returns MediaRecordingPage\n */\n/* jshint ignore:end */\nMediaRecordingPage = function MediaRecordingPage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n\n_.extend(MediaRecordingPage.prototype, Page.prototype);\nMediaRecordingPage.prototype.constructor = MediaRecordingPage;\n\n/* jshint ignore:start */\n/**\n * Build an instance of MediaRecordingInstance\n *\n * @function getInstance\n * @memberof Twilio.Media.V1.MediaRecordingPage#\n *\n * @param {MediaRecordingPayload} payload - Payload response from the API\n *\n * @returns MediaRecordingInstance\n */\n/* jshint ignore:end */\nMediaRecordingPage.prototype.getInstance = function getInstance(payload) {\n  return new MediaRecordingInstance(this._version, payload);\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Media.V1.MediaRecordingPage#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nMediaRecordingPage.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function(value, key) {\n    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\n\nMediaRecordingPage.prototype[util.inspect.custom] = function inspect(depth,\n    options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the MediaRecordingContext\n *\n * PLEASE NOTE that this class contains preview products that are subject to\n * change. Use them with caution. If you currently do not have developer preview\n * access, please contact help@twilio.com.\n *\n * @constructor Twilio.Media.V1.MediaRecordingInstance\n *\n * @property {string} accountSid - The SID of the Account that created the resource\n * @property {Date} dateCreated -\n *          The ISO 8601 date and time in GMT when the resource was created\n * @property {Date} dateUpdated -\n *          The ISO 8601 date and time in GMT when the resource was last updated\n * @property {number} duration - The duration of the MediaRecording\n * @property {media_recording.format} format - The format of the MediaRecording\n * @property {string} links - The URLs of related resources\n * @property {string} processorSid - The SID of the MediaProcessor\n * @property {string} resolution - The dimensions of the video image in pixels\n * @property {string} sourceSid -\n *          The SID of the resource that generated the original media\n * @property {string} sid - The unique string that identifies the resource\n * @property {number} mediaSize - The size of the recording media\n * @property {media_recording.status} status - The status of the MediaRecording\n * @property {string} statusCallback -\n *          The URL to which Twilio will send MediaRecording event updates\n * @property {string} statusCallbackMethod -\n *          The HTTP method Twilio should use to call the `status_callback` URL\n * @property {string} url - The absolute URL of the resource\n *\n * @param {V1} version - Version of the resource\n * @param {MediaRecordingPayload} payload - The instance payload\n * @param {sid} sid - The SID that identifies the resource to fetch\n */\n/* jshint ignore:end */\nMediaRecordingInstance = function MediaRecordingInstance(version, payload, sid)\n                                                          {\n  this._version = version;\n\n  // Marshaled Properties\n  this.accountSid = payload.account_sid; // jshint ignore:line\n  this.dateCreated = deserialize.iso8601DateTime(payload.date_created); // jshint ignore:line\n  this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated); // jshint ignore:line\n  this.duration = deserialize.integer(payload.duration); // jshint ignore:line\n  this.format = payload.format; // jshint ignore:line\n  this.links = payload.links; // jshint ignore:line\n  this.processorSid = payload.processor_sid; // jshint ignore:line\n  this.resolution = payload.resolution; // jshint ignore:line\n  this.sourceSid = payload.source_sid; // jshint ignore:line\n  this.sid = payload.sid; // jshint ignore:line\n  this.mediaSize = deserialize.integer(payload.media_size); // jshint ignore:line\n  this.status = payload.status; // jshint ignore:line\n  this.statusCallback = payload.status_callback; // jshint ignore:line\n  this.statusCallbackMethod = payload.status_callback_method; // jshint ignore:line\n  this.url = payload.url; // jshint ignore:line\n\n  // Context\n  this._context = undefined;\n  this._solution = {sid: sid || this.sid, };\n};\n\nObject.defineProperty(MediaRecordingInstance.prototype,\n  '_proxy', {\n    get: function() {\n      if (!this._context) {\n        this._context = new MediaRecordingContext(this._version, this._solution.sid);\n      }\n\n      return this._context;\n    }\n});\n\n/* jshint ignore:start */\n/**\n * remove a MediaRecordingInstance\n *\n * @function remove\n * @memberof Twilio.Media.V1.MediaRecordingInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed MediaRecordingInstance\n */\n/* jshint ignore:end */\nMediaRecordingInstance.prototype.remove = function remove(callback) {\n  return this._proxy.remove(callback);\n};\n\n/* jshint ignore:start */\n/**\n * fetch a MediaRecordingInstance\n *\n * @function fetch\n * @memberof Twilio.Media.V1.MediaRecordingInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed MediaRecordingInstance\n */\n/* jshint ignore:end */\nMediaRecordingInstance.prototype.fetch = function fetch(callback) {\n  return this._proxy.fetch(callback);\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Media.V1.MediaRecordingInstance#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nMediaRecordingInstance.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function(value, key) {\n    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\n\nMediaRecordingInstance.prototype[util.inspect.custom] = function inspect(depth,\n    options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the MediaRecordingContext\n *\n * PLEASE NOTE that this class contains preview products that are subject to\n * change. Use them with caution. If you currently do not have developer preview\n * access, please contact help@twilio.com.\n *\n * @constructor Twilio.Media.V1.MediaRecordingContext\n *\n * @param {V1} version - Version of the resource\n * @param {sid} sid - The SID that identifies the resource to fetch\n */\n/* jshint ignore:end */\nMediaRecordingContext = function MediaRecordingContext(version, sid) {\n  this._version = version;\n\n  // Path Solution\n  this._solution = {sid: sid, };\n  this._uri = `/MediaRecordings/${sid}`;\n};\n\n/* jshint ignore:start */\n/**\n * remove a MediaRecordingInstance\n *\n * @function remove\n * @memberof Twilio.Media.V1.MediaRecordingContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed MediaRecordingInstance\n */\n/* jshint ignore:end */\nMediaRecordingContext.prototype.remove = function remove(callback) {\n  var deferred = Q.defer();\n  var promise = this._version.remove({uri: this._uri, method: 'DELETE'});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(payload);\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * fetch a MediaRecordingInstance\n *\n * @function fetch\n * @memberof Twilio.Media.V1.MediaRecordingContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed MediaRecordingInstance\n */\n/* jshint ignore:end */\nMediaRecordingContext.prototype.fetch = function fetch(callback) {\n  var deferred = Q.defer();\n  var promise = this._version.fetch({uri: this._uri, method: 'GET'});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(new MediaRecordingInstance(this._version, payload, this._solution.sid));\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Media.V1.MediaRecordingContext#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nMediaRecordingContext.prototype.toJSON = function toJSON() {\n  return this._solution;\n};\n\nMediaRecordingContext.prototype[util.inspect.custom] = function inspect(depth,\n    options) {\n  return util.inspect(this.toJSON(), options);\n};\n\nmodule.exports = {\n  MediaRecordingList: MediaRecordingList,\n  MediaRecordingPage: MediaRecordingPage,\n  MediaRecordingInstance: MediaRecordingInstance,\n  MediaRecordingContext: MediaRecordingContext\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}