{"ast":null,"code":"'use strict';\n/* jshint ignore:start */\n\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n\n/* jshint ignore:end */\n\nvar Q = require('q');\n/* jshint ignore:line */\n\n\nvar _ = require('lodash');\n/* jshint ignore:line */\n\n\nvar util = require('util');\n/* jshint ignore:line */\n\n\nvar Page = require('../../../../../base/Page');\n/* jshint ignore:line */\n\n\nvar deserialize = require('../../../../../base/deserialize');\n/* jshint ignore:line */\n\n\nvar values = require('../../../../../base/values');\n/* jshint ignore:line */\n\n\nvar TriggerList;\nvar TriggerPage;\nvar TriggerInstance;\nvar TriggerContext;\n/* jshint ignore:start */\n\n/**\n * Initialize the TriggerList\n *\n * @constructor Twilio.Api.V2010.AccountContext.UsageContext.TriggerList\n *\n * @param {Twilio.Api.V2010} version - Version of the resource\n * @param {string} accountSid -\n *          A 34 character string that uniquely identifies this resource.\n */\n\n/* jshint ignore:end */\n\nTriggerList = function TriggerList(version, accountSid) {\n  /* jshint ignore:start */\n\n  /**\n   * @function triggers\n   * @memberof Twilio.Api.V2010.AccountContext.UsageContext#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Api.V2010.AccountContext.UsageContext.TriggerContext}\n   */\n\n  /* jshint ignore:end */\n  function TriggerListInstance(sid) {\n    return TriggerListInstance.get(sid);\n  }\n\n  TriggerListInstance._version = version; // Path Solution\n\n  TriggerListInstance._solution = {\n    accountSid: accountSid\n  };\n  TriggerListInstance._uri = `/Accounts/${accountSid}/Usage/Triggers.json`;\n  /* jshint ignore:start */\n\n  /**\n   * create a TriggerInstance\n   *\n   * @function create\n   * @memberof Twilio.Api.V2010.AccountContext.UsageContext.TriggerList#\n   *\n   * @param {object} opts - Options for request\n   * @param {string} opts.callbackUrl - The URL we call when the trigger fires\n   * @param {string} opts.triggerValue -\n   *          The usage value at which the trigger should fire\n   * @param {trigger.usage_category} opts.usageCategory -\n   *          The usage category the trigger watches\n   * @param {string} [opts.callbackMethod] -\n   *          The HTTP method to use to call callback_url\n   * @param {string} [opts.friendlyName] - A string to describe the resource\n   * @param {trigger.recurring} [opts.recurring] -\n   *          The frequency of a recurring UsageTrigger\n   * @param {trigger.trigger_field} [opts.triggerBy] -\n   *          The field in the UsageRecord resource that fires the trigger\n   * @param {function} [callback] - Callback to handle processed record\n   *\n   * @returns {Promise} Resolves to processed TriggerInstance\n   */\n\n  /* jshint ignore:end */\n\n  TriggerListInstance.create = function create(opts, callback) {\n    if (_.isUndefined(opts)) {\n      throw new Error('Required parameter \"opts\" missing.');\n    }\n\n    if (_.isUndefined(opts['callbackUrl'])) {\n      throw new Error('Required parameter \"opts[\\'callbackUrl\\']\" missing.');\n    }\n\n    if (_.isUndefined(opts['triggerValue'])) {\n      throw new Error('Required parameter \"opts[\\'triggerValue\\']\" missing.');\n    }\n\n    if (_.isUndefined(opts['usageCategory'])) {\n      throw new Error('Required parameter \"opts[\\'usageCategory\\']\" missing.');\n    }\n\n    var deferred = Q.defer();\n    var data = values.of({\n      'CallbackUrl': _.get(opts, 'callbackUrl'),\n      'TriggerValue': _.get(opts, 'triggerValue'),\n      'UsageCategory': _.get(opts, 'usageCategory'),\n      'CallbackMethod': _.get(opts, 'callbackMethod'),\n      'FriendlyName': _.get(opts, 'friendlyName'),\n      'Recurring': _.get(opts, 'recurring'),\n      'TriggerBy': _.get(opts, 'triggerBy')\n    });\n\n    var promise = this._version.create({\n      uri: this._uri,\n      method: 'POST',\n      data: data\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new TriggerInstance(this._version, payload, this._solution.accountSid, this._solution.sid));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Streams TriggerInstance records from the API.\n   *\n   * This operation lazily loads records as efficiently as possible until the limit\n   * is reached.\n   *\n   * The results are passed into the callback function, so this operation is memory\n   * efficient.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function each\n   * @memberof Twilio.Api.V2010.AccountContext.UsageContext.TriggerList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {trigger.recurring} [opts.recurring] -\n   *          The frequency of recurring UsageTriggers to read\n   * @param {trigger.trigger_field} [opts.triggerBy] -\n   *          The trigger field of the UsageTriggers to read\n   * @param {trigger.usage_category} [opts.usageCategory] -\n   *          The usage category of the UsageTriggers to read\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         each() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no pageSize is defined but a limit is defined,\n   *         each() will attempt to read the limit with the most efficient\n   *         page size, i.e. min(limit, 1000)\n   * @param {Function} [opts.callback] -\n   *         Function to process each record. If this and a positional\n   *         callback are passed, this one will be used\n   * @param {Function} [opts.done] -\n   *          Function to be called upon completion of streaming\n   * @param {Function} [callback] - Function to process each record\n   */\n\n  /* jshint ignore:end */\n\n\n  TriggerListInstance.each = function each(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n\n    if (opts.callback) {\n      callback = opts.callback;\n    }\n\n    if (_.isUndefined(callback)) {\n      throw new Error('Callback function must be provided');\n    }\n\n    var done = false;\n    var currentPage = 1;\n    var currentResource = 0;\n\n    var limits = this._version.readLimits({\n      limit: opts.limit,\n      pageSize: opts.pageSize\n    });\n\n    function onComplete(error) {\n      done = true;\n\n      if (_.isFunction(opts.done)) {\n        opts.done(error);\n      }\n    }\n\n    function fetchNextPage(fn) {\n      var promise = fn();\n\n      if (_.isUndefined(promise)) {\n        onComplete();\n        return;\n      }\n\n      promise.then(function (page) {\n        _.each(page.instances, function (instance) {\n          if (done || !_.isUndefined(opts.limit) && currentResource >= opts.limit) {\n            done = true;\n            return false;\n          }\n\n          currentResource++;\n          callback(instance, onComplete);\n        });\n\n        if (!done) {\n          currentPage++;\n          fetchNextPage(_.bind(page.nextPage, page));\n        } else {\n          onComplete();\n        }\n      });\n      promise.catch(onComplete);\n    }\n\n    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Lists TriggerInstance records from the API as a list.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function list\n   * @memberof Twilio.Api.V2010.AccountContext.UsageContext.TriggerList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {trigger.recurring} [opts.recurring] -\n   *          The frequency of recurring UsageTriggers to read\n   * @param {trigger.trigger_field} [opts.triggerBy] -\n   *          The trigger field of the UsageTriggers to read\n   * @param {trigger.usage_category} [opts.usageCategory] -\n   *          The usage category of the UsageTriggers to read\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         list() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no page_size is defined but a limit is defined,\n   *         list() will attempt to read the limit with the most\n   *         efficient page size, i.e. min(limit, 1000)\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  TriggerListInstance.list = function list(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n    var deferred = Q.defer();\n    var allResources = [];\n\n    opts.callback = function (resource, done) {\n      allResources.push(resource);\n\n      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {\n        done();\n      }\n    };\n\n    opts.done = function (error) {\n      if (_.isUndefined(error)) {\n        deferred.resolve(allResources);\n      } else {\n        deferred.reject(error);\n      }\n    };\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    this.each(opts);\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Retrieve a single page of TriggerInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function page\n   * @memberof Twilio.Api.V2010.AccountContext.UsageContext.TriggerList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {trigger.recurring} [opts.recurring] -\n   *          The frequency of recurring UsageTriggers to read\n   * @param {trigger.trigger_field} [opts.triggerBy] -\n   *          The trigger field of the UsageTriggers to read\n   * @param {trigger.usage_category} [opts.usageCategory] -\n   *          The usage category of the UsageTriggers to read\n   * @param {string} [opts.pageToken] - PageToken provided by the API\n   * @param {number} [opts.pageNumber] -\n   *          Page Number, this value is simply for client state\n   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  TriggerListInstance.page = function page(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n    var deferred = Q.defer();\n    var data = values.of({\n      'Recurring': _.get(opts, 'recurring'),\n      'TriggerBy': _.get(opts, 'triggerBy'),\n      'UsageCategory': _.get(opts, 'usageCategory'),\n      'PageToken': opts.pageToken,\n      'Page': opts.pageNumber,\n      'PageSize': opts.pageSize\n    });\n\n    var promise = this._version.page({\n      uri: this._uri,\n      method: 'GET',\n      params: data\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new TriggerPage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Retrieve a single target page of TriggerInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function getPage\n   * @memberof Twilio.Api.V2010.AccountContext.UsageContext.TriggerList#\n   *\n   * @param {string} [targetUrl] - API-generated URL for the requested results page\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  TriggerListInstance.getPage = function getPage(targetUrl, callback) {\n    var deferred = Q.defer();\n\n    var promise = this._version._domain.twilio.request({\n      method: 'GET',\n      uri: targetUrl\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new TriggerPage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Constructs a trigger\n   *\n   * @function get\n   * @memberof Twilio.Api.V2010.AccountContext.UsageContext.TriggerList#\n   *\n   * @param {string} sid - The unique string that identifies the resource\n   *\n   * @returns {Twilio.Api.V2010.AccountContext.UsageContext.TriggerContext}\n   */\n\n  /* jshint ignore:end */\n\n\n  TriggerListInstance.get = function get(sid) {\n    return new TriggerContext(this._version, this._solution.accountSid, sid);\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Api.V2010.AccountContext.UsageContext.TriggerList#\n   *\n   * @returns Object\n   */\n\n  /* jshint ignore:end */\n\n\n  TriggerListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n\n  TriggerListInstance[util.inspect.custom] = function inspect(depth, options) {\n    return util.inspect(this.toJSON(), options);\n  };\n\n  return TriggerListInstance;\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the TriggerPage\n *\n * @constructor Twilio.Api.V2010.AccountContext.UsageContext.TriggerPage\n *\n * @param {V2010} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {TriggerSolution} solution - Path solution\n *\n * @returns TriggerPage\n */\n\n/* jshint ignore:end */\n\n\nTriggerPage = function TriggerPage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n\n_.extend(TriggerPage.prototype, Page.prototype);\n\nTriggerPage.prototype.constructor = TriggerPage;\n/* jshint ignore:start */\n\n/**\n * Build an instance of TriggerInstance\n *\n * @function getInstance\n * @memberof Twilio.Api.V2010.AccountContext.UsageContext.TriggerPage#\n *\n * @param {TriggerPayload} payload - Payload response from the API\n *\n * @returns TriggerInstance\n */\n\n/* jshint ignore:end */\n\nTriggerPage.prototype.getInstance = function getInstance(payload) {\n  return new TriggerInstance(this._version, payload, this._solution.accountSid);\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Api.V2010.AccountContext.UsageContext.TriggerPage#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nTriggerPage.prototype.toJSON = function toJSON() {\n  let clone = {};\n\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n\n  return clone;\n};\n\nTriggerPage.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the TriggerContext\n *\n * @constructor Twilio.Api.V2010.AccountContext.UsageContext.TriggerInstance\n *\n * @property {string} accountSid -\n *          The SID of the Account that this trigger monitors\n * @property {string} apiVersion - The API version used to create the resource\n * @property {string} callbackMethod - The HTTP method we use to call callback_url\n * @property {string} callbackUrl - he URL we call when the trigger fires\n * @property {string} currentValue -\n *          The current value of the field the trigger is watching\n * @property {Date} dateCreated -\n *          The RFC 2822 date and time in GMT that the resource was created\n * @property {Date} dateFired -\n *          The RFC 2822 date and time in GMT that the trigger was last fired\n * @property {Date} dateUpdated -\n *          The RFC 2822 date and time in GMT that the resource was last updated\n * @property {string} friendlyName -\n *          The string that you assigned to describe the trigger\n * @property {trigger.recurring} recurring -\n *          The frequency of a recurring UsageTrigger\n * @property {string} sid - The unique string that identifies the resource\n * @property {trigger.trigger_field} triggerBy -\n *          The field in the UsageRecord resource that fires the trigger\n * @property {string} triggerValue - The value at which the trigger will fire\n * @property {string} uri -\n *          The URI of the resource, relative to `https://api.twilio.com`\n * @property {trigger.usage_category} usageCategory -\n *          The usage category the trigger watches\n * @property {string} usageRecordUri -\n *          The URI of the UsageRecord resource this trigger watches\n *\n * @param {V2010} version - Version of the resource\n * @param {TriggerPayload} payload - The instance payload\n * @param {sid} accountSid -\n *          A 34 character string that uniquely identifies this resource.\n * @param {sid} sid - The unique string that identifies the resource\n */\n\n/* jshint ignore:end */\n\n\nTriggerInstance = function TriggerInstance(version, payload, accountSid, sid) {\n  this._version = version; // Marshaled Properties\n\n  this.accountSid = payload.account_sid; // jshint ignore:line\n\n  this.apiVersion = payload.api_version; // jshint ignore:line\n\n  this.callbackMethod = payload.callback_method; // jshint ignore:line\n\n  this.callbackUrl = payload.callback_url; // jshint ignore:line\n\n  this.currentValue = payload.current_value; // jshint ignore:line\n\n  this.dateCreated = deserialize.rfc2822DateTime(payload.date_created); // jshint ignore:line\n\n  this.dateFired = deserialize.rfc2822DateTime(payload.date_fired); // jshint ignore:line\n\n  this.dateUpdated = deserialize.rfc2822DateTime(payload.date_updated); // jshint ignore:line\n\n  this.friendlyName = payload.friendly_name; // jshint ignore:line\n\n  this.recurring = payload.recurring; // jshint ignore:line\n\n  this.sid = payload.sid; // jshint ignore:line\n\n  this.triggerBy = payload.trigger_by; // jshint ignore:line\n\n  this.triggerValue = payload.trigger_value; // jshint ignore:line\n\n  this.uri = payload.uri; // jshint ignore:line\n\n  this.usageCategory = payload.usage_category; // jshint ignore:line\n\n  this.usageRecordUri = payload.usage_record_uri; // jshint ignore:line\n  // Context\n\n  this._context = undefined;\n  this._solution = {\n    accountSid: accountSid,\n    sid: sid || this.sid\n  };\n};\n\nObject.defineProperty(TriggerInstance.prototype, '_proxy', {\n  get: function () {\n    if (!this._context) {\n      this._context = new TriggerContext(this._version, this._solution.accountSid, this._solution.sid);\n    }\n\n    return this._context;\n  }\n});\n/* jshint ignore:start */\n\n/**\n * fetch a TriggerInstance\n *\n * @function fetch\n * @memberof Twilio.Api.V2010.AccountContext.UsageContext.TriggerInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed TriggerInstance\n */\n\n/* jshint ignore:end */\n\nTriggerInstance.prototype.fetch = function fetch(callback) {\n  return this._proxy.fetch(callback);\n};\n/* jshint ignore:start */\n\n/**\n * update a TriggerInstance\n *\n * @function update\n * @memberof Twilio.Api.V2010.AccountContext.UsageContext.TriggerInstance#\n *\n * @param {object} [opts] - Options for request\n * @param {string} [opts.callbackMethod] -\n *          The HTTP method to use to call callback_url\n * @param {string} [opts.callbackUrl] - The URL we call when the trigger fires\n * @param {string} [opts.friendlyName] - A string to describe the resource\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed TriggerInstance\n */\n\n/* jshint ignore:end */\n\n\nTriggerInstance.prototype.update = function update(opts, callback) {\n  return this._proxy.update(opts, callback);\n};\n/* jshint ignore:start */\n\n/**\n * remove a TriggerInstance\n *\n * @function remove\n * @memberof Twilio.Api.V2010.AccountContext.UsageContext.TriggerInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed TriggerInstance\n */\n\n/* jshint ignore:end */\n\n\nTriggerInstance.prototype.remove = function remove(callback) {\n  return this._proxy.remove(callback);\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Api.V2010.AccountContext.UsageContext.TriggerInstance#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nTriggerInstance.prototype.toJSON = function toJSON() {\n  let clone = {};\n\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n\n  return clone;\n};\n\nTriggerInstance.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the TriggerContext\n *\n * @constructor Twilio.Api.V2010.AccountContext.UsageContext.TriggerContext\n *\n * @param {V2010} version - Version of the resource\n * @param {sid} accountSid -\n *          The SID of the Account that created the resource to fetch\n * @param {sid} sid - The unique string that identifies the resource\n */\n\n/* jshint ignore:end */\n\n\nTriggerContext = function TriggerContext(version, accountSid, sid) {\n  this._version = version; // Path Solution\n\n  this._solution = {\n    accountSid: accountSid,\n    sid: sid\n  };\n  this._uri = `/Accounts/${accountSid}/Usage/Triggers/${sid}.json`;\n};\n/* jshint ignore:start */\n\n/**\n * fetch a TriggerInstance\n *\n * @function fetch\n * @memberof Twilio.Api.V2010.AccountContext.UsageContext.TriggerContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed TriggerInstance\n */\n\n/* jshint ignore:end */\n\n\nTriggerContext.prototype.fetch = function fetch(callback) {\n  var deferred = Q.defer();\n\n  var promise = this._version.fetch({\n    uri: this._uri,\n    method: 'GET'\n  });\n\n  promise = promise.then(function (payload) {\n    deferred.resolve(new TriggerInstance(this._version, payload, this._solution.accountSid, this._solution.sid));\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n/* jshint ignore:start */\n\n/**\n * update a TriggerInstance\n *\n * @function update\n * @memberof Twilio.Api.V2010.AccountContext.UsageContext.TriggerContext#\n *\n * @param {object} [opts] - Options for request\n * @param {string} [opts.callbackMethod] -\n *          The HTTP method to use to call callback_url\n * @param {string} [opts.callbackUrl] - The URL we call when the trigger fires\n * @param {string} [opts.friendlyName] - A string to describe the resource\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed TriggerInstance\n */\n\n/* jshint ignore:end */\n\n\nTriggerContext.prototype.update = function update(opts, callback) {\n  if (_.isFunction(opts)) {\n    callback = opts;\n    opts = {};\n  }\n\n  opts = opts || {};\n  var deferred = Q.defer();\n  var data = values.of({\n    'CallbackMethod': _.get(opts, 'callbackMethod'),\n    'CallbackUrl': _.get(opts, 'callbackUrl'),\n    'FriendlyName': _.get(opts, 'friendlyName')\n  });\n\n  var promise = this._version.update({\n    uri: this._uri,\n    method: 'POST',\n    data: data\n  });\n\n  promise = promise.then(function (payload) {\n    deferred.resolve(new TriggerInstance(this._version, payload, this._solution.accountSid, this._solution.sid));\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n/* jshint ignore:start */\n\n/**\n * remove a TriggerInstance\n *\n * @function remove\n * @memberof Twilio.Api.V2010.AccountContext.UsageContext.TriggerContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed TriggerInstance\n */\n\n/* jshint ignore:end */\n\n\nTriggerContext.prototype.remove = function remove(callback) {\n  var deferred = Q.defer();\n\n  var promise = this._version.remove({\n    uri: this._uri,\n    method: 'DELETE'\n  });\n\n  promise = promise.then(function (payload) {\n    deferred.resolve(payload);\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Api.V2010.AccountContext.UsageContext.TriggerContext#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nTriggerContext.prototype.toJSON = function toJSON() {\n  return this._solution;\n};\n\nTriggerContext.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\nmodule.exports = {\n  TriggerList: TriggerList,\n  TriggerPage: TriggerPage,\n  TriggerInstance: TriggerInstance,\n  TriggerContext: TriggerContext\n};","map":{"version":3,"names":["Q","require","_","util","Page","deserialize","values","TriggerList","TriggerPage","TriggerInstance","TriggerContext","version","accountSid","TriggerListInstance","sid","get","_version","_solution","_uri","create","opts","callback","isUndefined","Error","deferred","defer","data","of","promise","uri","method","then","payload","resolve","bind","catch","error","reject","isFunction","nodeify","each","done","currentPage","currentResource","limits","readLimits","limit","pageSize","onComplete","fetchNextPage","fn","page","instances","instance","nextPage","merge","list","allResources","resource","push","length","pageToken","pageNumber","params","getPage","targetUrl","_domain","twilio","request","toJSON","inspect","custom","depth","options","response","solution","prototype","constructor","call","extend","getInstance","clone","forOwn","value","key","startsWith","account_sid","apiVersion","api_version","callbackMethod","callback_method","callbackUrl","callback_url","currentValue","current_value","dateCreated","rfc2822DateTime","date_created","dateFired","date_fired","dateUpdated","date_updated","friendlyName","friendly_name","recurring","triggerBy","trigger_by","triggerValue","trigger_value","usageCategory","usage_category","usageRecordUri","usage_record_uri","_context","undefined","Object","defineProperty","fetch","_proxy","update","remove","module","exports"],"sources":["/Users/hooniesun/rmit/fwp/assessment1/lan/node_modules/twilio/lib/rest/api/v2010/account/usage/trigger.js"],"sourcesContent":["'use strict';\n\n/* jshint ignore:start */\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n/* jshint ignore:end */\n\nvar Q = require('q');  /* jshint ignore:line */\nvar _ = require('lodash');  /* jshint ignore:line */\nvar util = require('util');  /* jshint ignore:line */\nvar Page = require('../../../../../base/Page');  /* jshint ignore:line */\nvar deserialize = require(\n    '../../../../../base/deserialize');  /* jshint ignore:line */\nvar values = require('../../../../../base/values');  /* jshint ignore:line */\n\nvar TriggerList;\nvar TriggerPage;\nvar TriggerInstance;\nvar TriggerContext;\n\n/* jshint ignore:start */\n/**\n * Initialize the TriggerList\n *\n * @constructor Twilio.Api.V2010.AccountContext.UsageContext.TriggerList\n *\n * @param {Twilio.Api.V2010} version - Version of the resource\n * @param {string} accountSid -\n *          A 34 character string that uniquely identifies this resource.\n */\n/* jshint ignore:end */\nTriggerList = function TriggerList(version, accountSid) {\n  /* jshint ignore:start */\n  /**\n   * @function triggers\n   * @memberof Twilio.Api.V2010.AccountContext.UsageContext#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Api.V2010.AccountContext.UsageContext.TriggerContext}\n   */\n  /* jshint ignore:end */\n  function TriggerListInstance(sid) {\n    return TriggerListInstance.get(sid);\n  }\n\n  TriggerListInstance._version = version;\n  // Path Solution\n  TriggerListInstance._solution = {accountSid: accountSid};\n  TriggerListInstance._uri = `/Accounts/${accountSid}/Usage/Triggers.json`;\n  /* jshint ignore:start */\n  /**\n   * create a TriggerInstance\n   *\n   * @function create\n   * @memberof Twilio.Api.V2010.AccountContext.UsageContext.TriggerList#\n   *\n   * @param {object} opts - Options for request\n   * @param {string} opts.callbackUrl - The URL we call when the trigger fires\n   * @param {string} opts.triggerValue -\n   *          The usage value at which the trigger should fire\n   * @param {trigger.usage_category} opts.usageCategory -\n   *          The usage category the trigger watches\n   * @param {string} [opts.callbackMethod] -\n   *          The HTTP method to use to call callback_url\n   * @param {string} [opts.friendlyName] - A string to describe the resource\n   * @param {trigger.recurring} [opts.recurring] -\n   *          The frequency of a recurring UsageTrigger\n   * @param {trigger.trigger_field} [opts.triggerBy] -\n   *          The field in the UsageRecord resource that fires the trigger\n   * @param {function} [callback] - Callback to handle processed record\n   *\n   * @returns {Promise} Resolves to processed TriggerInstance\n   */\n  /* jshint ignore:end */\n  TriggerListInstance.create = function create(opts, callback) {\n    if (_.isUndefined(opts)) {\n      throw new Error('Required parameter \"opts\" missing.');\n    }\n    if (_.isUndefined(opts['callbackUrl'])) {\n      throw new Error('Required parameter \"opts[\\'callbackUrl\\']\" missing.');\n    }\n    if (_.isUndefined(opts['triggerValue'])) {\n      throw new Error('Required parameter \"opts[\\'triggerValue\\']\" missing.');\n    }\n    if (_.isUndefined(opts['usageCategory'])) {\n      throw new Error('Required parameter \"opts[\\'usageCategory\\']\" missing.');\n    }\n\n    var deferred = Q.defer();\n    var data = values.of({\n      'CallbackUrl': _.get(opts, 'callbackUrl'),\n      'TriggerValue': _.get(opts, 'triggerValue'),\n      'UsageCategory': _.get(opts, 'usageCategory'),\n      'CallbackMethod': _.get(opts, 'callbackMethod'),\n      'FriendlyName': _.get(opts, 'friendlyName'),\n      'Recurring': _.get(opts, 'recurring'),\n      'TriggerBy': _.get(opts, 'triggerBy')\n    });\n\n    var promise = this._version.create({uri: this._uri, method: 'POST', data: data});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new TriggerInstance(\n        this._version,\n        payload,\n        this._solution.accountSid,\n        this._solution.sid\n      ));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Streams TriggerInstance records from the API.\n   *\n   * This operation lazily loads records as efficiently as possible until the limit\n   * is reached.\n   *\n   * The results are passed into the callback function, so this operation is memory\n   * efficient.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function each\n   * @memberof Twilio.Api.V2010.AccountContext.UsageContext.TriggerList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {trigger.recurring} [opts.recurring] -\n   *          The frequency of recurring UsageTriggers to read\n   * @param {trigger.trigger_field} [opts.triggerBy] -\n   *          The trigger field of the UsageTriggers to read\n   * @param {trigger.usage_category} [opts.usageCategory] -\n   *          The usage category of the UsageTriggers to read\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         each() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no pageSize is defined but a limit is defined,\n   *         each() will attempt to read the limit with the most efficient\n   *         page size, i.e. min(limit, 1000)\n   * @param {Function} [opts.callback] -\n   *         Function to process each record. If this and a positional\n   *         callback are passed, this one will be used\n   * @param {Function} [opts.done] -\n   *          Function to be called upon completion of streaming\n   * @param {Function} [callback] - Function to process each record\n   */\n  /* jshint ignore:end */\n  TriggerListInstance.each = function each(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    if (opts.callback) {\n      callback = opts.callback;\n    }\n    if (_.isUndefined(callback)) {\n      throw new Error('Callback function must be provided');\n    }\n\n    var done = false;\n    var currentPage = 1;\n    var currentResource = 0;\n    var limits = this._version.readLimits({\n      limit: opts.limit,\n      pageSize: opts.pageSize\n    });\n\n    function onComplete(error) {\n      done = true;\n      if (_.isFunction(opts.done)) {\n        opts.done(error);\n      }\n    }\n\n    function fetchNextPage(fn) {\n      var promise = fn();\n      if (_.isUndefined(promise)) {\n        onComplete();\n        return;\n      }\n\n      promise.then(function(page) {\n        _.each(page.instances, function(instance) {\n          if (done || (!_.isUndefined(opts.limit) && currentResource >= opts.limit)) {\n            done = true;\n            return false;\n          }\n\n          currentResource++;\n          callback(instance, onComplete);\n        });\n\n        if (!done) {\n          currentPage++;\n          fetchNextPage(_.bind(page.nextPage, page));\n        } else {\n          onComplete();\n        }\n      });\n\n      promise.catch(onComplete);\n    }\n\n    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Lists TriggerInstance records from the API as a list.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function list\n   * @memberof Twilio.Api.V2010.AccountContext.UsageContext.TriggerList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {trigger.recurring} [opts.recurring] -\n   *          The frequency of recurring UsageTriggers to read\n   * @param {trigger.trigger_field} [opts.triggerBy] -\n   *          The trigger field of the UsageTriggers to read\n   * @param {trigger.usage_category} [opts.usageCategory] -\n   *          The usage category of the UsageTriggers to read\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         list() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no page_size is defined but a limit is defined,\n   *         list() will attempt to read the limit with the most\n   *         efficient page size, i.e. min(limit, 1000)\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  TriggerListInstance.list = function list(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    var deferred = Q.defer();\n    var allResources = [];\n    opts.callback = function(resource, done) {\n      allResources.push(resource);\n\n      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {\n        done();\n      }\n    };\n\n    opts.done = function(error) {\n      if (_.isUndefined(error)) {\n        deferred.resolve(allResources);\n      } else {\n        deferred.reject(error);\n      }\n    };\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    this.each(opts);\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single page of TriggerInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function page\n   * @memberof Twilio.Api.V2010.AccountContext.UsageContext.TriggerList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {trigger.recurring} [opts.recurring] -\n   *          The frequency of recurring UsageTriggers to read\n   * @param {trigger.trigger_field} [opts.triggerBy] -\n   *          The trigger field of the UsageTriggers to read\n   * @param {trigger.usage_category} [opts.usageCategory] -\n   *          The usage category of the UsageTriggers to read\n   * @param {string} [opts.pageToken] - PageToken provided by the API\n   * @param {number} [opts.pageNumber] -\n   *          Page Number, this value is simply for client state\n   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  TriggerListInstance.page = function page(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n\n    var deferred = Q.defer();\n    var data = values.of({\n      'Recurring': _.get(opts, 'recurring'),\n      'TriggerBy': _.get(opts, 'triggerBy'),\n      'UsageCategory': _.get(opts, 'usageCategory'),\n      'PageToken': opts.pageToken,\n      'Page': opts.pageNumber,\n      'PageSize': opts.pageSize\n    });\n\n    var promise = this._version.page({uri: this._uri, method: 'GET', params: data});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new TriggerPage(this._version, payload, this._solution));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single target page of TriggerInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function getPage\n   * @memberof Twilio.Api.V2010.AccountContext.UsageContext.TriggerList#\n   *\n   * @param {string} [targetUrl] - API-generated URL for the requested results page\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  TriggerListInstance.getPage = function getPage(targetUrl, callback) {\n    var deferred = Q.defer();\n\n    var promise = this._version._domain.twilio.request({method: 'GET', uri: targetUrl});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new TriggerPage(this._version, payload, this._solution));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Constructs a trigger\n   *\n   * @function get\n   * @memberof Twilio.Api.V2010.AccountContext.UsageContext.TriggerList#\n   *\n   * @param {string} sid - The unique string that identifies the resource\n   *\n   * @returns {Twilio.Api.V2010.AccountContext.UsageContext.TriggerContext}\n   */\n  /* jshint ignore:end */\n  TriggerListInstance.get = function get(sid) {\n    return new TriggerContext(this._version, this._solution.accountSid, sid);\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Api.V2010.AccountContext.UsageContext.TriggerList#\n   *\n   * @returns Object\n   */\n  /* jshint ignore:end */\n  TriggerListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n\n  TriggerListInstance[util.inspect.custom] = function inspect(depth, options) {\n    return util.inspect(this.toJSON(), options);\n  };\n\n  return TriggerListInstance;\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the TriggerPage\n *\n * @constructor Twilio.Api.V2010.AccountContext.UsageContext.TriggerPage\n *\n * @param {V2010} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {TriggerSolution} solution - Path solution\n *\n * @returns TriggerPage\n */\n/* jshint ignore:end */\nTriggerPage = function TriggerPage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n\n_.extend(TriggerPage.prototype, Page.prototype);\nTriggerPage.prototype.constructor = TriggerPage;\n\n/* jshint ignore:start */\n/**\n * Build an instance of TriggerInstance\n *\n * @function getInstance\n * @memberof Twilio.Api.V2010.AccountContext.UsageContext.TriggerPage#\n *\n * @param {TriggerPayload} payload - Payload response from the API\n *\n * @returns TriggerInstance\n */\n/* jshint ignore:end */\nTriggerPage.prototype.getInstance = function getInstance(payload) {\n  return new TriggerInstance(this._version, payload, this._solution.accountSid);\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Api.V2010.AccountContext.UsageContext.TriggerPage#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nTriggerPage.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function(value, key) {\n    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\n\nTriggerPage.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the TriggerContext\n *\n * @constructor Twilio.Api.V2010.AccountContext.UsageContext.TriggerInstance\n *\n * @property {string} accountSid -\n *          The SID of the Account that this trigger monitors\n * @property {string} apiVersion - The API version used to create the resource\n * @property {string} callbackMethod - The HTTP method we use to call callback_url\n * @property {string} callbackUrl - he URL we call when the trigger fires\n * @property {string} currentValue -\n *          The current value of the field the trigger is watching\n * @property {Date} dateCreated -\n *          The RFC 2822 date and time in GMT that the resource was created\n * @property {Date} dateFired -\n *          The RFC 2822 date and time in GMT that the trigger was last fired\n * @property {Date} dateUpdated -\n *          The RFC 2822 date and time in GMT that the resource was last updated\n * @property {string} friendlyName -\n *          The string that you assigned to describe the trigger\n * @property {trigger.recurring} recurring -\n *          The frequency of a recurring UsageTrigger\n * @property {string} sid - The unique string that identifies the resource\n * @property {trigger.trigger_field} triggerBy -\n *          The field in the UsageRecord resource that fires the trigger\n * @property {string} triggerValue - The value at which the trigger will fire\n * @property {string} uri -\n *          The URI of the resource, relative to `https://api.twilio.com`\n * @property {trigger.usage_category} usageCategory -\n *          The usage category the trigger watches\n * @property {string} usageRecordUri -\n *          The URI of the UsageRecord resource this trigger watches\n *\n * @param {V2010} version - Version of the resource\n * @param {TriggerPayload} payload - The instance payload\n * @param {sid} accountSid -\n *          A 34 character string that uniquely identifies this resource.\n * @param {sid} sid - The unique string that identifies the resource\n */\n/* jshint ignore:end */\nTriggerInstance = function TriggerInstance(version, payload, accountSid, sid) {\n  this._version = version;\n\n  // Marshaled Properties\n  this.accountSid = payload.account_sid; // jshint ignore:line\n  this.apiVersion = payload.api_version; // jshint ignore:line\n  this.callbackMethod = payload.callback_method; // jshint ignore:line\n  this.callbackUrl = payload.callback_url; // jshint ignore:line\n  this.currentValue = payload.current_value; // jshint ignore:line\n  this.dateCreated = deserialize.rfc2822DateTime(payload.date_created); // jshint ignore:line\n  this.dateFired = deserialize.rfc2822DateTime(payload.date_fired); // jshint ignore:line\n  this.dateUpdated = deserialize.rfc2822DateTime(payload.date_updated); // jshint ignore:line\n  this.friendlyName = payload.friendly_name; // jshint ignore:line\n  this.recurring = payload.recurring; // jshint ignore:line\n  this.sid = payload.sid; // jshint ignore:line\n  this.triggerBy = payload.trigger_by; // jshint ignore:line\n  this.triggerValue = payload.trigger_value; // jshint ignore:line\n  this.uri = payload.uri; // jshint ignore:line\n  this.usageCategory = payload.usage_category; // jshint ignore:line\n  this.usageRecordUri = payload.usage_record_uri; // jshint ignore:line\n\n  // Context\n  this._context = undefined;\n  this._solution = {accountSid: accountSid, sid: sid || this.sid, };\n};\n\nObject.defineProperty(TriggerInstance.prototype,\n  '_proxy', {\n    get: function() {\n      if (!this._context) {\n        this._context = new TriggerContext(this._version, this._solution.accountSid, this._solution.sid);\n      }\n\n      return this._context;\n    }\n});\n\n/* jshint ignore:start */\n/**\n * fetch a TriggerInstance\n *\n * @function fetch\n * @memberof Twilio.Api.V2010.AccountContext.UsageContext.TriggerInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed TriggerInstance\n */\n/* jshint ignore:end */\nTriggerInstance.prototype.fetch = function fetch(callback) {\n  return this._proxy.fetch(callback);\n};\n\n/* jshint ignore:start */\n/**\n * update a TriggerInstance\n *\n * @function update\n * @memberof Twilio.Api.V2010.AccountContext.UsageContext.TriggerInstance#\n *\n * @param {object} [opts] - Options for request\n * @param {string} [opts.callbackMethod] -\n *          The HTTP method to use to call callback_url\n * @param {string} [opts.callbackUrl] - The URL we call when the trigger fires\n * @param {string} [opts.friendlyName] - A string to describe the resource\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed TriggerInstance\n */\n/* jshint ignore:end */\nTriggerInstance.prototype.update = function update(opts, callback) {\n  return this._proxy.update(opts, callback);\n};\n\n/* jshint ignore:start */\n/**\n * remove a TriggerInstance\n *\n * @function remove\n * @memberof Twilio.Api.V2010.AccountContext.UsageContext.TriggerInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed TriggerInstance\n */\n/* jshint ignore:end */\nTriggerInstance.prototype.remove = function remove(callback) {\n  return this._proxy.remove(callback);\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Api.V2010.AccountContext.UsageContext.TriggerInstance#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nTriggerInstance.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function(value, key) {\n    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\n\nTriggerInstance.prototype[util.inspect.custom] = function inspect(depth,\n    options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the TriggerContext\n *\n * @constructor Twilio.Api.V2010.AccountContext.UsageContext.TriggerContext\n *\n * @param {V2010} version - Version of the resource\n * @param {sid} accountSid -\n *          The SID of the Account that created the resource to fetch\n * @param {sid} sid - The unique string that identifies the resource\n */\n/* jshint ignore:end */\nTriggerContext = function TriggerContext(version, accountSid, sid) {\n  this._version = version;\n\n  // Path Solution\n  this._solution = {accountSid: accountSid, sid: sid, };\n  this._uri = `/Accounts/${accountSid}/Usage/Triggers/${sid}.json`;\n};\n\n/* jshint ignore:start */\n/**\n * fetch a TriggerInstance\n *\n * @function fetch\n * @memberof Twilio.Api.V2010.AccountContext.UsageContext.TriggerContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed TriggerInstance\n */\n/* jshint ignore:end */\nTriggerContext.prototype.fetch = function fetch(callback) {\n  var deferred = Q.defer();\n  var promise = this._version.fetch({uri: this._uri, method: 'GET'});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(new TriggerInstance(\n      this._version,\n      payload,\n      this._solution.accountSid,\n      this._solution.sid\n    ));\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * update a TriggerInstance\n *\n * @function update\n * @memberof Twilio.Api.V2010.AccountContext.UsageContext.TriggerContext#\n *\n * @param {object} [opts] - Options for request\n * @param {string} [opts.callbackMethod] -\n *          The HTTP method to use to call callback_url\n * @param {string} [opts.callbackUrl] - The URL we call when the trigger fires\n * @param {string} [opts.friendlyName] - A string to describe the resource\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed TriggerInstance\n */\n/* jshint ignore:end */\nTriggerContext.prototype.update = function update(opts, callback) {\n  if (_.isFunction(opts)) {\n    callback = opts;\n    opts = {};\n  }\n  opts = opts || {};\n\n  var deferred = Q.defer();\n  var data = values.of({\n    'CallbackMethod': _.get(opts, 'callbackMethod'),\n    'CallbackUrl': _.get(opts, 'callbackUrl'),\n    'FriendlyName': _.get(opts, 'friendlyName')\n  });\n\n  var promise = this._version.update({uri: this._uri, method: 'POST', data: data});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(new TriggerInstance(\n      this._version,\n      payload,\n      this._solution.accountSid,\n      this._solution.sid\n    ));\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * remove a TriggerInstance\n *\n * @function remove\n * @memberof Twilio.Api.V2010.AccountContext.UsageContext.TriggerContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed TriggerInstance\n */\n/* jshint ignore:end */\nTriggerContext.prototype.remove = function remove(callback) {\n  var deferred = Q.defer();\n  var promise = this._version.remove({uri: this._uri, method: 'DELETE'});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(payload);\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Api.V2010.AccountContext.UsageContext.TriggerContext#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nTriggerContext.prototype.toJSON = function toJSON() {\n  return this._solution;\n};\n\nTriggerContext.prototype[util.inspect.custom] = function inspect(depth, options)\n    {\n  return util.inspect(this.toJSON(), options);\n};\n\nmodule.exports = {\n  TriggerList: TriggerList,\n  TriggerPage: TriggerPage,\n  TriggerInstance: TriggerInstance,\n  TriggerContext: TriggerContext\n};\n"],"mappings":"AAAA;AAEA;;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;;AAEA,IAAIA,CAAC,GAAGC,OAAO,CAAC,GAAD,CAAf;AAAuB;;;AACvB,IAAIC,CAAC,GAAGD,OAAO,CAAC,QAAD,CAAf;AAA4B;;;AAC5B,IAAIE,IAAI,GAAGF,OAAO,CAAC,MAAD,CAAlB;AAA6B;;;AAC7B,IAAIG,IAAI,GAAGH,OAAO,CAAC,0BAAD,CAAlB;AAAiD;;;AACjD,IAAII,WAAW,GAAGJ,OAAO,CACrB,iCADqB,CAAzB;AACyC;;;AACzC,IAAIK,MAAM,GAAGL,OAAO,CAAC,4BAAD,CAApB;AAAqD;;;AAErD,IAAIM,WAAJ;AACA,IAAIC,WAAJ;AACA,IAAIC,eAAJ;AACA,IAAIC,cAAJ;AAEA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;;AACAH,WAAW,GAAG,SAASA,WAAT,CAAqBI,OAArB,EAA8BC,UAA9B,EAA0C;EACtD;;EACA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;;EACE;EACA,SAASC,mBAAT,CAA6BC,GAA7B,EAAkC;IAChC,OAAOD,mBAAmB,CAACE,GAApB,CAAwBD,GAAxB,CAAP;EACD;;EAEDD,mBAAmB,CAACG,QAApB,GAA+BL,OAA/B,CAfsD,CAgBtD;;EACAE,mBAAmB,CAACI,SAApB,GAAgC;IAACL,UAAU,EAAEA;EAAb,CAAhC;EACAC,mBAAmB,CAACK,IAApB,GAA4B,aAAYN,UAAW,sBAAnD;EACA;;EACA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EACE;;EACAC,mBAAmB,CAACM,MAApB,GAA6B,SAASA,MAAT,CAAgBC,IAAhB,EAAsBC,QAAtB,EAAgC;IAC3D,IAAInB,CAAC,CAACoB,WAAF,CAAcF,IAAd,CAAJ,EAAyB;MACvB,MAAM,IAAIG,KAAJ,CAAU,oCAAV,CAAN;IACD;;IACD,IAAIrB,CAAC,CAACoB,WAAF,CAAcF,IAAI,CAAC,aAAD,CAAlB,CAAJ,EAAwC;MACtC,MAAM,IAAIG,KAAJ,CAAU,qDAAV,CAAN;IACD;;IACD,IAAIrB,CAAC,CAACoB,WAAF,CAAcF,IAAI,CAAC,cAAD,CAAlB,CAAJ,EAAyC;MACvC,MAAM,IAAIG,KAAJ,CAAU,sDAAV,CAAN;IACD;;IACD,IAAIrB,CAAC,CAACoB,WAAF,CAAcF,IAAI,CAAC,eAAD,CAAlB,CAAJ,EAA0C;MACxC,MAAM,IAAIG,KAAJ,CAAU,uDAAV,CAAN;IACD;;IAED,IAAIC,QAAQ,GAAGxB,CAAC,CAACyB,KAAF,EAAf;IACA,IAAIC,IAAI,GAAGpB,MAAM,CAACqB,EAAP,CAAU;MACnB,eAAezB,CAAC,CAACa,GAAF,CAAMK,IAAN,EAAY,aAAZ,CADI;MAEnB,gBAAgBlB,CAAC,CAACa,GAAF,CAAMK,IAAN,EAAY,cAAZ,CAFG;MAGnB,iBAAiBlB,CAAC,CAACa,GAAF,CAAMK,IAAN,EAAY,eAAZ,CAHE;MAInB,kBAAkBlB,CAAC,CAACa,GAAF,CAAMK,IAAN,EAAY,gBAAZ,CAJC;MAKnB,gBAAgBlB,CAAC,CAACa,GAAF,CAAMK,IAAN,EAAY,cAAZ,CALG;MAMnB,aAAalB,CAAC,CAACa,GAAF,CAAMK,IAAN,EAAY,WAAZ,CANM;MAOnB,aAAalB,CAAC,CAACa,GAAF,CAAMK,IAAN,EAAY,WAAZ;IAPM,CAAV,CAAX;;IAUA,IAAIQ,OAAO,GAAG,KAAKZ,QAAL,CAAcG,MAAd,CAAqB;MAACU,GAAG,EAAE,KAAKX,IAAX;MAAiBY,MAAM,EAAE,MAAzB;MAAiCJ,IAAI,EAAEA;IAAvC,CAArB,CAAd;;IAEAE,OAAO,GAAGA,OAAO,CAACG,IAAR,CAAa,UAASC,OAAT,EAAkB;MACvCR,QAAQ,CAACS,OAAT,CAAiB,IAAIxB,eAAJ,CACf,KAAKO,QADU,EAEfgB,OAFe,EAGf,KAAKf,SAAL,CAAeL,UAHA,EAIf,KAAKK,SAAL,CAAeH,GAJA,CAAjB;IAMD,CAPsB,CAOrBoB,IAPqB,CAOhB,IAPgB,CAAb,CAAV;IASAN,OAAO,CAACO,KAAR,CAAc,UAASC,KAAT,EAAgB;MAC5BZ,QAAQ,CAACa,MAAT,CAAgBD,KAAhB;IACD,CAFD;;IAIA,IAAIlC,CAAC,CAACoC,UAAF,CAAajB,QAAb,CAAJ,EAA4B;MAC1BG,QAAQ,CAACI,OAAT,CAAiBW,OAAjB,CAAyBlB,QAAzB;IACD;;IAED,OAAOG,QAAQ,CAACI,OAAhB;EACD,CA7CD;EA+CA;;EACA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EACE;;;EACAf,mBAAmB,CAAC2B,IAApB,GAA2B,SAASA,IAAT,CAAcpB,IAAd,EAAoBC,QAApB,EAA8B;IACvD,IAAInB,CAAC,CAACoC,UAAF,CAAalB,IAAb,CAAJ,EAAwB;MACtBC,QAAQ,GAAGD,IAAX;MACAA,IAAI,GAAG,EAAP;IACD;;IACDA,IAAI,GAAGA,IAAI,IAAI,EAAf;;IACA,IAAIA,IAAI,CAACC,QAAT,EAAmB;MACjBA,QAAQ,GAAGD,IAAI,CAACC,QAAhB;IACD;;IACD,IAAInB,CAAC,CAACoB,WAAF,CAAcD,QAAd,CAAJ,EAA6B;MAC3B,MAAM,IAAIE,KAAJ,CAAU,oCAAV,CAAN;IACD;;IAED,IAAIkB,IAAI,GAAG,KAAX;IACA,IAAIC,WAAW,GAAG,CAAlB;IACA,IAAIC,eAAe,GAAG,CAAtB;;IACA,IAAIC,MAAM,GAAG,KAAK5B,QAAL,CAAc6B,UAAd,CAAyB;MACpCC,KAAK,EAAE1B,IAAI,CAAC0B,KADwB;MAEpCC,QAAQ,EAAE3B,IAAI,CAAC2B;IAFqB,CAAzB,CAAb;;IAKA,SAASC,UAAT,CAAoBZ,KAApB,EAA2B;MACzBK,IAAI,GAAG,IAAP;;MACA,IAAIvC,CAAC,CAACoC,UAAF,CAAalB,IAAI,CAACqB,IAAlB,CAAJ,EAA6B;QAC3BrB,IAAI,CAACqB,IAAL,CAAUL,KAAV;MACD;IACF;;IAED,SAASa,aAAT,CAAuBC,EAAvB,EAA2B;MACzB,IAAItB,OAAO,GAAGsB,EAAE,EAAhB;;MACA,IAAIhD,CAAC,CAACoB,WAAF,CAAcM,OAAd,CAAJ,EAA4B;QAC1BoB,UAAU;QACV;MACD;;MAEDpB,OAAO,CAACG,IAAR,CAAa,UAASoB,IAAT,EAAe;QAC1BjD,CAAC,CAACsC,IAAF,CAAOW,IAAI,CAACC,SAAZ,EAAuB,UAASC,QAAT,EAAmB;UACxC,IAAIZ,IAAI,IAAK,CAACvC,CAAC,CAACoB,WAAF,CAAcF,IAAI,CAAC0B,KAAnB,CAAD,IAA8BH,eAAe,IAAIvB,IAAI,CAAC0B,KAAnE,EAA2E;YACzEL,IAAI,GAAG,IAAP;YACA,OAAO,KAAP;UACD;;UAEDE,eAAe;UACftB,QAAQ,CAACgC,QAAD,EAAWL,UAAX,CAAR;QACD,CARD;;QAUA,IAAI,CAACP,IAAL,EAAW;UACTC,WAAW;UACXO,aAAa,CAAC/C,CAAC,CAACgC,IAAF,CAAOiB,IAAI,CAACG,QAAZ,EAAsBH,IAAtB,CAAD,CAAb;QACD,CAHD,MAGO;UACLH,UAAU;QACX;MACF,CAjBD;MAmBApB,OAAO,CAACO,KAAR,CAAca,UAAd;IACD;;IAEDC,aAAa,CAAC/C,CAAC,CAACgC,IAAF,CAAO,KAAKiB,IAAZ,EAAkB,IAAlB,EAAwBjD,CAAC,CAACqD,KAAF,CAAQnC,IAAR,EAAcwB,MAAd,CAAxB,CAAD,CAAb;EACD,CA1DD;EA4DA;;EACA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EACE;;;EACA/B,mBAAmB,CAAC2C,IAApB,GAA2B,SAASA,IAAT,CAAcpC,IAAd,EAAoBC,QAApB,EAA8B;IACvD,IAAInB,CAAC,CAACoC,UAAF,CAAalB,IAAb,CAAJ,EAAwB;MACtBC,QAAQ,GAAGD,IAAX;MACAA,IAAI,GAAG,EAAP;IACD;;IACDA,IAAI,GAAGA,IAAI,IAAI,EAAf;IACA,IAAII,QAAQ,GAAGxB,CAAC,CAACyB,KAAF,EAAf;IACA,IAAIgC,YAAY,GAAG,EAAnB;;IACArC,IAAI,CAACC,QAAL,GAAgB,UAASqC,QAAT,EAAmBjB,IAAnB,EAAyB;MACvCgB,YAAY,CAACE,IAAb,CAAkBD,QAAlB;;MAEA,IAAI,CAACxD,CAAC,CAACoB,WAAF,CAAcF,IAAI,CAAC0B,KAAnB,CAAD,IAA8BW,YAAY,CAACG,MAAb,KAAwBxC,IAAI,CAAC0B,KAA/D,EAAsE;QACpEL,IAAI;MACL;IACF,CAND;;IAQArB,IAAI,CAACqB,IAAL,GAAY,UAASL,KAAT,EAAgB;MAC1B,IAAIlC,CAAC,CAACoB,WAAF,CAAcc,KAAd,CAAJ,EAA0B;QACxBZ,QAAQ,CAACS,OAAT,CAAiBwB,YAAjB;MACD,CAFD,MAEO;QACLjC,QAAQ,CAACa,MAAT,CAAgBD,KAAhB;MACD;IACF,CAND;;IAQA,IAAIlC,CAAC,CAACoC,UAAF,CAAajB,QAAb,CAAJ,EAA4B;MAC1BG,QAAQ,CAACI,OAAT,CAAiBW,OAAjB,CAAyBlB,QAAzB;IACD;;IAED,KAAKmB,IAAL,CAAUpB,IAAV;IACA,OAAOI,QAAQ,CAACI,OAAhB;EACD,CA9BD;EAgCA;;EACA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EACE;;;EACAf,mBAAmB,CAACsC,IAApB,GAA2B,SAASA,IAAT,CAAc/B,IAAd,EAAoBC,QAApB,EAA8B;IACvD,IAAInB,CAAC,CAACoC,UAAF,CAAalB,IAAb,CAAJ,EAAwB;MACtBC,QAAQ,GAAGD,IAAX;MACAA,IAAI,GAAG,EAAP;IACD;;IACDA,IAAI,GAAGA,IAAI,IAAI,EAAf;IAEA,IAAII,QAAQ,GAAGxB,CAAC,CAACyB,KAAF,EAAf;IACA,IAAIC,IAAI,GAAGpB,MAAM,CAACqB,EAAP,CAAU;MACnB,aAAazB,CAAC,CAACa,GAAF,CAAMK,IAAN,EAAY,WAAZ,CADM;MAEnB,aAAalB,CAAC,CAACa,GAAF,CAAMK,IAAN,EAAY,WAAZ,CAFM;MAGnB,iBAAiBlB,CAAC,CAACa,GAAF,CAAMK,IAAN,EAAY,eAAZ,CAHE;MAInB,aAAaA,IAAI,CAACyC,SAJC;MAKnB,QAAQzC,IAAI,CAAC0C,UALM;MAMnB,YAAY1C,IAAI,CAAC2B;IANE,CAAV,CAAX;;IASA,IAAInB,OAAO,GAAG,KAAKZ,QAAL,CAAcmC,IAAd,CAAmB;MAACtB,GAAG,EAAE,KAAKX,IAAX;MAAiBY,MAAM,EAAE,KAAzB;MAAgCiC,MAAM,EAAErC;IAAxC,CAAnB,CAAd;;IAEAE,OAAO,GAAGA,OAAO,CAACG,IAAR,CAAa,UAASC,OAAT,EAAkB;MACvCR,QAAQ,CAACS,OAAT,CAAiB,IAAIzB,WAAJ,CAAgB,KAAKQ,QAArB,EAA+BgB,OAA/B,EAAwC,KAAKf,SAA7C,CAAjB;IACD,CAFsB,CAErBiB,IAFqB,CAEhB,IAFgB,CAAb,CAAV;IAIAN,OAAO,CAACO,KAAR,CAAc,UAASC,KAAT,EAAgB;MAC5BZ,QAAQ,CAACa,MAAT,CAAgBD,KAAhB;IACD,CAFD;;IAIA,IAAIlC,CAAC,CAACoC,UAAF,CAAajB,QAAb,CAAJ,EAA4B;MAC1BG,QAAQ,CAACI,OAAT,CAAiBW,OAAjB,CAAyBlB,QAAzB;IACD;;IAED,OAAOG,QAAQ,CAACI,OAAhB;EACD,CAhCD;EAkCA;;EACA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EACE;;;EACAf,mBAAmB,CAACmD,OAApB,GAA8B,SAASA,OAAT,CAAiBC,SAAjB,EAA4B5C,QAA5B,EAAsC;IAClE,IAAIG,QAAQ,GAAGxB,CAAC,CAACyB,KAAF,EAAf;;IAEA,IAAIG,OAAO,GAAG,KAAKZ,QAAL,CAAckD,OAAd,CAAsBC,MAAtB,CAA6BC,OAA7B,CAAqC;MAACtC,MAAM,EAAE,KAAT;MAAgBD,GAAG,EAAEoC;IAArB,CAArC,CAAd;;IAEArC,OAAO,GAAGA,OAAO,CAACG,IAAR,CAAa,UAASC,OAAT,EAAkB;MACvCR,QAAQ,CAACS,OAAT,CAAiB,IAAIzB,WAAJ,CAAgB,KAAKQ,QAArB,EAA+BgB,OAA/B,EAAwC,KAAKf,SAA7C,CAAjB;IACD,CAFsB,CAErBiB,IAFqB,CAEhB,IAFgB,CAAb,CAAV;IAIAN,OAAO,CAACO,KAAR,CAAc,UAASC,KAAT,EAAgB;MAC5BZ,QAAQ,CAACa,MAAT,CAAgBD,KAAhB;IACD,CAFD;;IAIA,IAAIlC,CAAC,CAACoC,UAAF,CAAajB,QAAb,CAAJ,EAA4B;MAC1BG,QAAQ,CAACI,OAAT,CAAiBW,OAAjB,CAAyBlB,QAAzB;IACD;;IAED,OAAOG,QAAQ,CAACI,OAAhB;EACD,CAlBD;EAoBA;;EACA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EACE;;;EACAf,mBAAmB,CAACE,GAApB,GAA0B,SAASA,GAAT,CAAaD,GAAb,EAAkB;IAC1C,OAAO,IAAIJ,cAAJ,CAAmB,KAAKM,QAAxB,EAAkC,KAAKC,SAAL,CAAeL,UAAjD,EAA6DE,GAA7D,CAAP;EACD,CAFD;EAIA;;EACA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;;EACE;;;EACAD,mBAAmB,CAACwD,MAApB,GAA6B,SAASA,MAAT,GAAkB;IAC7C,OAAO,KAAKpD,SAAZ;EACD,CAFD;;EAIAJ,mBAAmB,CAACV,IAAI,CAACmE,OAAL,CAAaC,MAAd,CAAnB,GAA2C,SAASD,OAAT,CAAiBE,KAAjB,EAAwBC,OAAxB,EAAiC;IAC1E,OAAOtE,IAAI,CAACmE,OAAL,CAAa,KAAKD,MAAL,EAAb,EAA4BI,OAA5B,CAAP;EACD,CAFD;;EAIA,OAAO5D,mBAAP;AACD,CAvYD;AA0YA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;;;AACAL,WAAW,GAAG,SAASA,WAAT,CAAqBG,OAArB,EAA8B+D,QAA9B,EAAwCC,QAAxC,EAAkD;EAC9D;EACA,KAAK1D,SAAL,GAAiB0D,QAAjB;EAEAvE,IAAI,CAACwE,SAAL,CAAeC,WAAf,CAA2BC,IAA3B,CAAgC,IAAhC,EAAsCnE,OAAtC,EAA+C+D,QAA/C,EAAyD,KAAKzD,SAA9D;AACD,CALD;;AAOAf,CAAC,CAAC6E,MAAF,CAASvE,WAAW,CAACoE,SAArB,EAAgCxE,IAAI,CAACwE,SAArC;;AACApE,WAAW,CAACoE,SAAZ,CAAsBC,WAAtB,GAAoCrE,WAApC;AAEA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;;AACAA,WAAW,CAACoE,SAAZ,CAAsBI,WAAtB,GAAoC,SAASA,WAAT,CAAqBhD,OAArB,EAA8B;EAChE,OAAO,IAAIvB,eAAJ,CAAoB,KAAKO,QAAzB,EAAmCgB,OAAnC,EAA4C,KAAKf,SAAL,CAAeL,UAA3D,CAAP;AACD,CAFD;AAIA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;;;AACAJ,WAAW,CAACoE,SAAZ,CAAsBP,MAAtB,GAA+B,SAASA,MAAT,GAAkB;EAC/C,IAAIY,KAAK,GAAG,EAAZ;;EACA/E,CAAC,CAACgF,MAAF,CAAS,IAAT,EAAe,UAASC,KAAT,EAAgBC,GAAhB,EAAqB;IAClC,IAAI,CAAClF,CAAC,CAACmF,UAAF,CAAaD,GAAb,EAAkB,GAAlB,CAAD,IAA2B,CAAElF,CAAC,CAACoC,UAAF,CAAa6C,KAAb,CAAjC,EAAsD;MACpDF,KAAK,CAACG,GAAD,CAAL,GAAaD,KAAb;IACD;EACF,CAJD;;EAKA,OAAOF,KAAP;AACD,CARD;;AAUAzE,WAAW,CAACoE,SAAZ,CAAsBzE,IAAI,CAACmE,OAAL,CAAaC,MAAnC,IAA6C,SAASD,OAAT,CAAiBE,KAAjB,EAAwBC,OAAxB,EAAiC;EAC5E,OAAOtE,IAAI,CAACmE,OAAL,CAAa,KAAKD,MAAL,EAAb,EAA4BI,OAA5B,CAAP;AACD,CAFD;AAKA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;;;AACAhE,eAAe,GAAG,SAASA,eAAT,CAAyBE,OAAzB,EAAkCqB,OAAlC,EAA2CpB,UAA3C,EAAuDE,GAAvD,EAA4D;EAC5E,KAAKE,QAAL,GAAgBL,OAAhB,CAD4E,CAG5E;;EACA,KAAKC,UAAL,GAAkBoB,OAAO,CAACsD,WAA1B,CAJ4E,CAIrC;;EACvC,KAAKC,UAAL,GAAkBvD,OAAO,CAACwD,WAA1B,CAL4E,CAKrC;;EACvC,KAAKC,cAAL,GAAsBzD,OAAO,CAAC0D,eAA9B,CAN4E,CAM7B;;EAC/C,KAAKC,WAAL,GAAmB3D,OAAO,CAAC4D,YAA3B,CAP4E,CAOnC;;EACzC,KAAKC,YAAL,GAAoB7D,OAAO,CAAC8D,aAA5B,CAR4E,CAQjC;;EAC3C,KAAKC,WAAL,GAAmB1F,WAAW,CAAC2F,eAAZ,CAA4BhE,OAAO,CAACiE,YAApC,CAAnB,CAT4E,CASN;;EACtE,KAAKC,SAAL,GAAiB7F,WAAW,CAAC2F,eAAZ,CAA4BhE,OAAO,CAACmE,UAApC,CAAjB,CAV4E,CAUV;;EAClE,KAAKC,WAAL,GAAmB/F,WAAW,CAAC2F,eAAZ,CAA4BhE,OAAO,CAACqE,YAApC,CAAnB,CAX4E,CAWN;;EACtE,KAAKC,YAAL,GAAoBtE,OAAO,CAACuE,aAA5B,CAZ4E,CAYjC;;EAC3C,KAAKC,SAAL,GAAiBxE,OAAO,CAACwE,SAAzB,CAb4E,CAaxC;;EACpC,KAAK1F,GAAL,GAAWkB,OAAO,CAAClB,GAAnB,CAd4E,CAcpD;;EACxB,KAAK2F,SAAL,GAAiBzE,OAAO,CAAC0E,UAAzB,CAf4E,CAevC;;EACrC,KAAKC,YAAL,GAAoB3E,OAAO,CAAC4E,aAA5B,CAhB4E,CAgBjC;;EAC3C,KAAK/E,GAAL,GAAWG,OAAO,CAACH,GAAnB,CAjB4E,CAiBpD;;EACxB,KAAKgF,aAAL,GAAqB7E,OAAO,CAAC8E,cAA7B,CAlB4E,CAkB/B;;EAC7C,KAAKC,cAAL,GAAsB/E,OAAO,CAACgF,gBAA9B,CAnB4E,CAmB5B;EAEhD;;EACA,KAAKC,QAAL,GAAgBC,SAAhB;EACA,KAAKjG,SAAL,GAAiB;IAACL,UAAU,EAAEA,UAAb;IAAyBE,GAAG,EAAEA,GAAG,IAAI,KAAKA;EAA1C,CAAjB;AACD,CAxBD;;AA0BAqG,MAAM,CAACC,cAAP,CAAsB3G,eAAe,CAACmE,SAAtC,EACE,QADF,EACY;EACR7D,GAAG,EAAE,YAAW;IACd,IAAI,CAAC,KAAKkG,QAAV,EAAoB;MAClB,KAAKA,QAAL,GAAgB,IAAIvG,cAAJ,CAAmB,KAAKM,QAAxB,EAAkC,KAAKC,SAAL,CAAeL,UAAjD,EAA6D,KAAKK,SAAL,CAAeH,GAA5E,CAAhB;IACD;;IAED,OAAO,KAAKmG,QAAZ;EACD;AAPO,CADZ;AAWA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;;AACAxG,eAAe,CAACmE,SAAhB,CAA0ByC,KAA1B,GAAkC,SAASA,KAAT,CAAehG,QAAf,EAAyB;EACzD,OAAO,KAAKiG,MAAL,CAAYD,KAAZ,CAAkBhG,QAAlB,CAAP;AACD,CAFD;AAIA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;;;AACAZ,eAAe,CAACmE,SAAhB,CAA0B2C,MAA1B,GAAmC,SAASA,MAAT,CAAgBnG,IAAhB,EAAsBC,QAAtB,EAAgC;EACjE,OAAO,KAAKiG,MAAL,CAAYC,MAAZ,CAAmBnG,IAAnB,EAAyBC,QAAzB,CAAP;AACD,CAFD;AAIA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;;;AACAZ,eAAe,CAACmE,SAAhB,CAA0B4C,MAA1B,GAAmC,SAASA,MAAT,CAAgBnG,QAAhB,EAA0B;EAC3D,OAAO,KAAKiG,MAAL,CAAYE,MAAZ,CAAmBnG,QAAnB,CAAP;AACD,CAFD;AAIA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;;;AACAZ,eAAe,CAACmE,SAAhB,CAA0BP,MAA1B,GAAmC,SAASA,MAAT,GAAkB;EACnD,IAAIY,KAAK,GAAG,EAAZ;;EACA/E,CAAC,CAACgF,MAAF,CAAS,IAAT,EAAe,UAASC,KAAT,EAAgBC,GAAhB,EAAqB;IAClC,IAAI,CAAClF,CAAC,CAACmF,UAAF,CAAaD,GAAb,EAAkB,GAAlB,CAAD,IAA2B,CAAElF,CAAC,CAACoC,UAAF,CAAa6C,KAAb,CAAjC,EAAsD;MACpDF,KAAK,CAACG,GAAD,CAAL,GAAaD,KAAb;IACD;EACF,CAJD;;EAKA,OAAOF,KAAP;AACD,CARD;;AAUAxE,eAAe,CAACmE,SAAhB,CAA0BzE,IAAI,CAACmE,OAAL,CAAaC,MAAvC,IAAiD,SAASD,OAAT,CAAiBE,KAAjB,EAC7CC,OAD6C,EACpC;EACX,OAAOtE,IAAI,CAACmE,OAAL,CAAa,KAAKD,MAAL,EAAb,EAA4BI,OAA5B,CAAP;AACD,CAHD;AAMA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;;;AACA/D,cAAc,GAAG,SAASA,cAAT,CAAwBC,OAAxB,EAAiCC,UAAjC,EAA6CE,GAA7C,EAAkD;EACjE,KAAKE,QAAL,GAAgBL,OAAhB,CADiE,CAGjE;;EACA,KAAKM,SAAL,GAAiB;IAACL,UAAU,EAAEA,UAAb;IAAyBE,GAAG,EAAEA;EAA9B,CAAjB;EACA,KAAKI,IAAL,GAAa,aAAYN,UAAW,mBAAkBE,GAAI,OAA1D;AACD,CAND;AAQA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;;;AACAJ,cAAc,CAACkE,SAAf,CAAyByC,KAAzB,GAAiC,SAASA,KAAT,CAAehG,QAAf,EAAyB;EACxD,IAAIG,QAAQ,GAAGxB,CAAC,CAACyB,KAAF,EAAf;;EACA,IAAIG,OAAO,GAAG,KAAKZ,QAAL,CAAcqG,KAAd,CAAoB;IAACxF,GAAG,EAAE,KAAKX,IAAX;IAAiBY,MAAM,EAAE;EAAzB,CAApB,CAAd;;EAEAF,OAAO,GAAGA,OAAO,CAACG,IAAR,CAAa,UAASC,OAAT,EAAkB;IACvCR,QAAQ,CAACS,OAAT,CAAiB,IAAIxB,eAAJ,CACf,KAAKO,QADU,EAEfgB,OAFe,EAGf,KAAKf,SAAL,CAAeL,UAHA,EAIf,KAAKK,SAAL,CAAeH,GAJA,CAAjB;EAMD,CAPsB,CAOrBoB,IAPqB,CAOhB,IAPgB,CAAb,CAAV;EASAN,OAAO,CAACO,KAAR,CAAc,UAASC,KAAT,EAAgB;IAC5BZ,QAAQ,CAACa,MAAT,CAAgBD,KAAhB;EACD,CAFD;;EAIA,IAAIlC,CAAC,CAACoC,UAAF,CAAajB,QAAb,CAAJ,EAA4B;IAC1BG,QAAQ,CAACI,OAAT,CAAiBW,OAAjB,CAAyBlB,QAAzB;EACD;;EAED,OAAOG,QAAQ,CAACI,OAAhB;AACD,CAtBD;AAwBA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;;;AACAlB,cAAc,CAACkE,SAAf,CAAyB2C,MAAzB,GAAkC,SAASA,MAAT,CAAgBnG,IAAhB,EAAsBC,QAAtB,EAAgC;EAChE,IAAInB,CAAC,CAACoC,UAAF,CAAalB,IAAb,CAAJ,EAAwB;IACtBC,QAAQ,GAAGD,IAAX;IACAA,IAAI,GAAG,EAAP;EACD;;EACDA,IAAI,GAAGA,IAAI,IAAI,EAAf;EAEA,IAAII,QAAQ,GAAGxB,CAAC,CAACyB,KAAF,EAAf;EACA,IAAIC,IAAI,GAAGpB,MAAM,CAACqB,EAAP,CAAU;IACnB,kBAAkBzB,CAAC,CAACa,GAAF,CAAMK,IAAN,EAAY,gBAAZ,CADC;IAEnB,eAAelB,CAAC,CAACa,GAAF,CAAMK,IAAN,EAAY,aAAZ,CAFI;IAGnB,gBAAgBlB,CAAC,CAACa,GAAF,CAAMK,IAAN,EAAY,cAAZ;EAHG,CAAV,CAAX;;EAMA,IAAIQ,OAAO,GAAG,KAAKZ,QAAL,CAAcuG,MAAd,CAAqB;IAAC1F,GAAG,EAAE,KAAKX,IAAX;IAAiBY,MAAM,EAAE,MAAzB;IAAiCJ,IAAI,EAAEA;EAAvC,CAArB,CAAd;;EAEAE,OAAO,GAAGA,OAAO,CAACG,IAAR,CAAa,UAASC,OAAT,EAAkB;IACvCR,QAAQ,CAACS,OAAT,CAAiB,IAAIxB,eAAJ,CACf,KAAKO,QADU,EAEfgB,OAFe,EAGf,KAAKf,SAAL,CAAeL,UAHA,EAIf,KAAKK,SAAL,CAAeH,GAJA,CAAjB;EAMD,CAPsB,CAOrBoB,IAPqB,CAOhB,IAPgB,CAAb,CAAV;EASAN,OAAO,CAACO,KAAR,CAAc,UAASC,KAAT,EAAgB;IAC5BZ,QAAQ,CAACa,MAAT,CAAgBD,KAAhB;EACD,CAFD;;EAIA,IAAIlC,CAAC,CAACoC,UAAF,CAAajB,QAAb,CAAJ,EAA4B;IAC1BG,QAAQ,CAACI,OAAT,CAAiBW,OAAjB,CAAyBlB,QAAzB;EACD;;EAED,OAAOG,QAAQ,CAACI,OAAhB;AACD,CAlCD;AAoCA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;;;AACAlB,cAAc,CAACkE,SAAf,CAAyB4C,MAAzB,GAAkC,SAASA,MAAT,CAAgBnG,QAAhB,EAA0B;EAC1D,IAAIG,QAAQ,GAAGxB,CAAC,CAACyB,KAAF,EAAf;;EACA,IAAIG,OAAO,GAAG,KAAKZ,QAAL,CAAcwG,MAAd,CAAqB;IAAC3F,GAAG,EAAE,KAAKX,IAAX;IAAiBY,MAAM,EAAE;EAAzB,CAArB,CAAd;;EAEAF,OAAO,GAAGA,OAAO,CAACG,IAAR,CAAa,UAASC,OAAT,EAAkB;IACvCR,QAAQ,CAACS,OAAT,CAAiBD,OAAjB;EACD,CAFsB,CAErBE,IAFqB,CAEhB,IAFgB,CAAb,CAAV;EAIAN,OAAO,CAACO,KAAR,CAAc,UAASC,KAAT,EAAgB;IAC5BZ,QAAQ,CAACa,MAAT,CAAgBD,KAAhB;EACD,CAFD;;EAIA,IAAIlC,CAAC,CAACoC,UAAF,CAAajB,QAAb,CAAJ,EAA4B;IAC1BG,QAAQ,CAACI,OAAT,CAAiBW,OAAjB,CAAyBlB,QAAzB;EACD;;EAED,OAAOG,QAAQ,CAACI,OAAhB;AACD,CAjBD;AAmBA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;;;AACAlB,cAAc,CAACkE,SAAf,CAAyBP,MAAzB,GAAkC,SAASA,MAAT,GAAkB;EAClD,OAAO,KAAKpD,SAAZ;AACD,CAFD;;AAIAP,cAAc,CAACkE,SAAf,CAAyBzE,IAAI,CAACmE,OAAL,CAAaC,MAAtC,IAAgD,SAASD,OAAT,CAAiBE,KAAjB,EAAwBC,OAAxB,EAC5C;EACF,OAAOtE,IAAI,CAACmE,OAAL,CAAa,KAAKD,MAAL,EAAb,EAA4BI,OAA5B,CAAP;AACD,CAHD;;AAKAgD,MAAM,CAACC,OAAP,GAAiB;EACfnH,WAAW,EAAEA,WADE;EAEfC,WAAW,EAAEA,WAFE;EAGfC,eAAe,EAAEA,eAHF;EAIfC,cAAc,EAAEA;AAJD,CAAjB"},"metadata":{},"sourceType":"script"}