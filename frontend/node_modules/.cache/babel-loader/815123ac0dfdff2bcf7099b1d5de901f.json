{"ast":null,"code":"'use strict';\n/* jshint ignore:start */\n\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n\n/* jshint ignore:end */\n\nvar Q = require('q');\n/* jshint ignore:line */\n\n\nvar _ = require('lodash');\n/* jshint ignore:line */\n\n\nvar util = require('util');\n/* jshint ignore:line */\n\n\nvar Page = require('../../../../base/Page');\n/* jshint ignore:line */\n\n\nvar TaskQueueCumulativeStatisticsList = require('./taskQueue/taskQueueCumulativeStatistics').TaskQueueCumulativeStatisticsList;\n\nvar TaskQueueRealTimeStatisticsList = require('./taskQueue/taskQueueRealTimeStatistics').TaskQueueRealTimeStatisticsList;\n\nvar TaskQueueStatisticsList = require('./taskQueue/taskQueueStatistics').TaskQueueStatisticsList;\n\nvar TaskQueuesStatisticsList = require('./taskQueue/taskQueuesStatistics').TaskQueuesStatisticsList;\n\nvar deserialize = require('../../../../base/deserialize');\n/* jshint ignore:line */\n\n\nvar values = require('../../../../base/values');\n/* jshint ignore:line */\n\n\nvar TaskQueueList;\nvar TaskQueuePage;\nvar TaskQueueInstance;\nvar TaskQueueContext;\n/* jshint ignore:start */\n\n/**\n * Initialize the TaskQueueList\n *\n * @constructor Twilio.Taskrouter.V1.WorkspaceContext.TaskQueueList\n *\n * @param {Twilio.Taskrouter.V1} version - Version of the resource\n * @param {string} workspaceSid -\n *          The SID of the Workspace that contains the TaskQueue\n */\n\n/* jshint ignore:end */\n\nTaskQueueList = function TaskQueueList(version, workspaceSid) {\n  /* jshint ignore:start */\n\n  /**\n   * @function taskQueues\n   * @memberof Twilio.Taskrouter.V1.WorkspaceContext#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Taskrouter.V1.WorkspaceContext.TaskQueueContext}\n   */\n\n  /* jshint ignore:end */\n  function TaskQueueListInstance(sid) {\n    return TaskQueueListInstance.get(sid);\n  }\n\n  TaskQueueListInstance._version = version; // Path Solution\n\n  TaskQueueListInstance._solution = {\n    workspaceSid: workspaceSid\n  };\n  TaskQueueListInstance._uri = `/Workspaces/${workspaceSid}/TaskQueues`; // Components\n\n  TaskQueueListInstance._statistics = undefined;\n  /* jshint ignore:start */\n\n  /**\n   * Streams TaskQueueInstance records from the API.\n   *\n   * This operation lazily loads records as efficiently as possible until the limit\n   * is reached.\n   *\n   * The results are passed into the callback function, so this operation is memory\n   * efficient.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function each\n   * @memberof Twilio.Taskrouter.V1.WorkspaceContext.TaskQueueList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.friendlyName] -\n   *          The friendly_name of the TaskQueue resources to read\n   * @param {string} [opts.evaluateWorkerAttributes] -\n   *          The attributes of the Workers to read\n   * @param {string} [opts.workerSid] -\n   *          The SID of the Worker with the TaskQueue resources to read\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         each() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no pageSize is defined but a limit is defined,\n   *         each() will attempt to read the limit with the most efficient\n   *         page size, i.e. min(limit, 1000)\n   * @param {Function} [opts.callback] -\n   *         Function to process each record. If this and a positional\n   *         callback are passed, this one will be used\n   * @param {Function} [opts.done] -\n   *          Function to be called upon completion of streaming\n   * @param {Function} [callback] - Function to process each record\n   */\n\n  /* jshint ignore:end */\n\n  TaskQueueListInstance.each = function each(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n\n    if (opts.callback) {\n      callback = opts.callback;\n    }\n\n    if (_.isUndefined(callback)) {\n      throw new Error('Callback function must be provided');\n    }\n\n    var done = false;\n    var currentPage = 1;\n    var currentResource = 0;\n\n    var limits = this._version.readLimits({\n      limit: opts.limit,\n      pageSize: opts.pageSize\n    });\n\n    function onComplete(error) {\n      done = true;\n\n      if (_.isFunction(opts.done)) {\n        opts.done(error);\n      }\n    }\n\n    function fetchNextPage(fn) {\n      var promise = fn();\n\n      if (_.isUndefined(promise)) {\n        onComplete();\n        return;\n      }\n\n      promise.then(function (page) {\n        _.each(page.instances, function (instance) {\n          if (done || !_.isUndefined(opts.limit) && currentResource >= opts.limit) {\n            done = true;\n            return false;\n          }\n\n          currentResource++;\n          callback(instance, onComplete);\n        });\n\n        if (!done) {\n          currentPage++;\n          fetchNextPage(_.bind(page.nextPage, page));\n        } else {\n          onComplete();\n        }\n      });\n      promise.catch(onComplete);\n    }\n\n    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Lists TaskQueueInstance records from the API as a list.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function list\n   * @memberof Twilio.Taskrouter.V1.WorkspaceContext.TaskQueueList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.friendlyName] -\n   *          The friendly_name of the TaskQueue resources to read\n   * @param {string} [opts.evaluateWorkerAttributes] -\n   *          The attributes of the Workers to read\n   * @param {string} [opts.workerSid] -\n   *          The SID of the Worker with the TaskQueue resources to read\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         list() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no page_size is defined but a limit is defined,\n   *         list() will attempt to read the limit with the most\n   *         efficient page size, i.e. min(limit, 1000)\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  TaskQueueListInstance.list = function list(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n    var deferred = Q.defer();\n    var allResources = [];\n\n    opts.callback = function (resource, done) {\n      allResources.push(resource);\n\n      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {\n        done();\n      }\n    };\n\n    opts.done = function (error) {\n      if (_.isUndefined(error)) {\n        deferred.resolve(allResources);\n      } else {\n        deferred.reject(error);\n      }\n    };\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    this.each(opts);\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Retrieve a single page of TaskQueueInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function page\n   * @memberof Twilio.Taskrouter.V1.WorkspaceContext.TaskQueueList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.friendlyName] -\n   *          The friendly_name of the TaskQueue resources to read\n   * @param {string} [opts.evaluateWorkerAttributes] -\n   *          The attributes of the Workers to read\n   * @param {string} [opts.workerSid] -\n   *          The SID of the Worker with the TaskQueue resources to read\n   * @param {string} [opts.pageToken] - PageToken provided by the API\n   * @param {number} [opts.pageNumber] -\n   *          Page Number, this value is simply for client state\n   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  TaskQueueListInstance.page = function page(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n    var deferred = Q.defer();\n    var data = values.of({\n      'FriendlyName': _.get(opts, 'friendlyName'),\n      'EvaluateWorkerAttributes': _.get(opts, 'evaluateWorkerAttributes'),\n      'WorkerSid': _.get(opts, 'workerSid'),\n      'PageToken': opts.pageToken,\n      'Page': opts.pageNumber,\n      'PageSize': opts.pageSize\n    });\n\n    var promise = this._version.page({\n      uri: this._uri,\n      method: 'GET',\n      params: data\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new TaskQueuePage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Retrieve a single target page of TaskQueueInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function getPage\n   * @memberof Twilio.Taskrouter.V1.WorkspaceContext.TaskQueueList#\n   *\n   * @param {string} [targetUrl] - API-generated URL for the requested results page\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  TaskQueueListInstance.getPage = function getPage(targetUrl, callback) {\n    var deferred = Q.defer();\n\n    var promise = this._version._domain.twilio.request({\n      method: 'GET',\n      uri: targetUrl\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new TaskQueuePage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * create a TaskQueueInstance\n   *\n   * @function create\n   * @memberof Twilio.Taskrouter.V1.WorkspaceContext.TaskQueueList#\n   *\n   * @param {object} opts - Options for request\n   * @param {string} opts.friendlyName - A string to describe the resource\n   * @param {string} [opts.targetWorkers] -\n   *          A string describing the Worker selection criteria for any Tasks that enter the TaskQueue\n   * @param {number} [opts.maxReservedWorkers] -\n   *          The maximum number of Workers to reserve\n   * @param {task_queue.task_order} [opts.taskOrder] -\n   *          How Tasks will be assigned to Workers\n   * @param {string} [opts.reservationActivitySid] -\n   *          The SID of the Activity to assign Workers when a task is reserved for them\n   * @param {string} [opts.assignmentActivitySid] -\n   *          The SID of the Activity to assign Workers once a task is assigned to them\n   * @param {function} [callback] - Callback to handle processed record\n   *\n   * @returns {Promise} Resolves to processed TaskQueueInstance\n   */\n\n  /* jshint ignore:end */\n\n\n  TaskQueueListInstance.create = function create(opts, callback) {\n    if (_.isUndefined(opts)) {\n      throw new Error('Required parameter \"opts\" missing.');\n    }\n\n    if (_.isUndefined(opts['friendlyName'])) {\n      throw new Error('Required parameter \"opts[\\'friendlyName\\']\" missing.');\n    }\n\n    var deferred = Q.defer();\n    var data = values.of({\n      'FriendlyName': _.get(opts, 'friendlyName'),\n      'TargetWorkers': _.get(opts, 'targetWorkers'),\n      'MaxReservedWorkers': _.get(opts, 'maxReservedWorkers'),\n      'TaskOrder': _.get(opts, 'taskOrder'),\n      'ReservationActivitySid': _.get(opts, 'reservationActivitySid'),\n      'AssignmentActivitySid': _.get(opts, 'assignmentActivitySid')\n    });\n\n    var promise = this._version.create({\n      uri: this._uri,\n      method: 'POST',\n      data: data\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new TaskQueueInstance(this._version, payload, this._solution.workspaceSid, this._solution.sid));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Constructs a task_queue\n   *\n   * @function get\n   * @memberof Twilio.Taskrouter.V1.WorkspaceContext.TaskQueueList#\n   *\n   * @param {string} sid - The SID of the resource to\n   *\n   * @returns {Twilio.Taskrouter.V1.WorkspaceContext.TaskQueueContext}\n   */\n\n  /* jshint ignore:end */\n\n\n  TaskQueueListInstance.get = function get(sid) {\n    return new TaskQueueContext(this._version, this._solution.workspaceSid, sid);\n  };\n\n  Object.defineProperty(TaskQueueListInstance, 'statistics', {\n    get: function statistics() {\n      if (!this._statistics) {\n        this._statistics = new TaskQueuesStatisticsList(this._version, this._solution.workspaceSid);\n      }\n\n      return this._statistics;\n    }\n  });\n  /* jshint ignore:start */\n\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Taskrouter.V1.WorkspaceContext.TaskQueueList#\n   *\n   * @returns Object\n   */\n\n  /* jshint ignore:end */\n\n  TaskQueueListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n\n  TaskQueueListInstance[util.inspect.custom] = function inspect(depth, options) {\n    return util.inspect(this.toJSON(), options);\n  };\n\n  return TaskQueueListInstance;\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the TaskQueuePage\n *\n * @constructor Twilio.Taskrouter.V1.WorkspaceContext.TaskQueuePage\n *\n * @param {V1} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {TaskQueueSolution} solution - Path solution\n *\n * @returns TaskQueuePage\n */\n\n/* jshint ignore:end */\n\n\nTaskQueuePage = function TaskQueuePage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n\n_.extend(TaskQueuePage.prototype, Page.prototype);\n\nTaskQueuePage.prototype.constructor = TaskQueuePage;\n/* jshint ignore:start */\n\n/**\n * Build an instance of TaskQueueInstance\n *\n * @function getInstance\n * @memberof Twilio.Taskrouter.V1.WorkspaceContext.TaskQueuePage#\n *\n * @param {TaskQueuePayload} payload - Payload response from the API\n *\n * @returns TaskQueueInstance\n */\n\n/* jshint ignore:end */\n\nTaskQueuePage.prototype.getInstance = function getInstance(payload) {\n  return new TaskQueueInstance(this._version, payload, this._solution.workspaceSid);\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Taskrouter.V1.WorkspaceContext.TaskQueuePage#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nTaskQueuePage.prototype.toJSON = function toJSON() {\n  let clone = {};\n\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n\n  return clone;\n};\n\nTaskQueuePage.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the TaskQueueContext\n *\n * @constructor Twilio.Taskrouter.V1.WorkspaceContext.TaskQueueInstance\n *\n * @property {string} accountSid - The SID of the Account that created the resource\n * @property {string} assignmentActivitySid -\n *          The SID of the Activity to assign Workers when a task is assigned for them\n * @property {string} assignmentActivityName -\n *          The name of the Activity to assign Workers when a task is assigned for them\n * @property {Date} dateCreated -\n *          The RFC 2822 date and time in GMT when the resource was created\n * @property {Date} dateUpdated -\n *          The RFC 2822 date and time in GMT when the resource was last updated\n * @property {string} friendlyName -\n *          The string that you assigned to describe the resource\n * @property {number} maxReservedWorkers - The maximum number of Workers to reserve\n * @property {string} reservationActivitySid -\n *          The SID of the Activity to assign Workers once a task is reserved for them\n * @property {string} reservationActivityName -\n *          The name of the Activity to assign Workers once a task is reserved for them\n * @property {string} sid - The unique string that identifies the resource\n * @property {string} targetWorkers -\n *          A string describing the Worker selection criteria for any Tasks that enter the TaskQueue\n * @property {task_queue.task_order} taskOrder -\n *          How Tasks will be assigned to Workers\n * @property {string} url - The absolute URL of the TaskQueue resource\n * @property {string} workspaceSid -\n *          The SID of the Workspace that contains the TaskQueue\n * @property {string} links - The URLs of related resources\n *\n * @param {V1} version - Version of the resource\n * @param {TaskQueuePayload} payload - The instance payload\n * @param {sid} workspaceSid - The SID of the Workspace that contains the TaskQueue\n * @param {sid} sid - The SID of the resource to\n */\n\n/* jshint ignore:end */\n\n\nTaskQueueInstance = function TaskQueueInstance(version, payload, workspaceSid, sid) {\n  this._version = version; // Marshaled Properties\n\n  this.accountSid = payload.account_sid; // jshint ignore:line\n\n  this.assignmentActivitySid = payload.assignment_activity_sid; // jshint ignore:line\n\n  this.assignmentActivityName = payload.assignment_activity_name; // jshint ignore:line\n\n  this.dateCreated = deserialize.iso8601DateTime(payload.date_created); // jshint ignore:line\n\n  this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated); // jshint ignore:line\n\n  this.friendlyName = payload.friendly_name; // jshint ignore:line\n\n  this.maxReservedWorkers = deserialize.integer(payload.max_reserved_workers); // jshint ignore:line\n\n  this.reservationActivitySid = payload.reservation_activity_sid; // jshint ignore:line\n\n  this.reservationActivityName = payload.reservation_activity_name; // jshint ignore:line\n\n  this.sid = payload.sid; // jshint ignore:line\n\n  this.targetWorkers = payload.target_workers; // jshint ignore:line\n\n  this.taskOrder = payload.task_order; // jshint ignore:line\n\n  this.url = payload.url; // jshint ignore:line\n\n  this.workspaceSid = payload.workspace_sid; // jshint ignore:line\n\n  this.links = payload.links; // jshint ignore:line\n  // Context\n\n  this._context = undefined;\n  this._solution = {\n    workspaceSid: workspaceSid,\n    sid: sid || this.sid\n  };\n};\n\nObject.defineProperty(TaskQueueInstance.prototype, '_proxy', {\n  get: function () {\n    if (!this._context) {\n      this._context = new TaskQueueContext(this._version, this._solution.workspaceSid, this._solution.sid);\n    }\n\n    return this._context;\n  }\n});\n/* jshint ignore:start */\n\n/**\n * fetch a TaskQueueInstance\n *\n * @function fetch\n * @memberof Twilio.Taskrouter.V1.WorkspaceContext.TaskQueueInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed TaskQueueInstance\n */\n\n/* jshint ignore:end */\n\nTaskQueueInstance.prototype.fetch = function fetch(callback) {\n  return this._proxy.fetch(callback);\n};\n/* jshint ignore:start */\n\n/**\n * update a TaskQueueInstance\n *\n * @function update\n * @memberof Twilio.Taskrouter.V1.WorkspaceContext.TaskQueueInstance#\n *\n * @param {object} [opts] - Options for request\n * @param {string} [opts.friendlyName] - A string to describe the resource\n * @param {string} [opts.targetWorkers] -\n *          A string describing the Worker selection criteria for any Tasks that enter the TaskQueue\n * @param {string} [opts.reservationActivitySid] -\n *          The SID of the Activity to assign Workers when a task is reserved for them\n * @param {string} [opts.assignmentActivitySid] -\n *          The SID of the Activity to assign Workers when a task is assigned for them\n * @param {number} [opts.maxReservedWorkers] -\n *          The maximum number of Workers to create reservations for the assignment of a task while in the queue\n * @param {task_queue.task_order} [opts.taskOrder] -\n *          How Tasks will be assigned to Workers\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed TaskQueueInstance\n */\n\n/* jshint ignore:end */\n\n\nTaskQueueInstance.prototype.update = function update(opts, callback) {\n  return this._proxy.update(opts, callback);\n};\n/* jshint ignore:start */\n\n/**\n * remove a TaskQueueInstance\n *\n * @function remove\n * @memberof Twilio.Taskrouter.V1.WorkspaceContext.TaskQueueInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed TaskQueueInstance\n */\n\n/* jshint ignore:end */\n\n\nTaskQueueInstance.prototype.remove = function remove(callback) {\n  return this._proxy.remove(callback);\n};\n/* jshint ignore:start */\n\n/**\n * Access the statistics\n *\n * @function statistics\n * @memberof Twilio.Taskrouter.V1.WorkspaceContext.TaskQueueInstance#\n *\n * @returns {Twilio.Taskrouter.V1.WorkspaceContext.TaskQueueContext.TaskQueueStatisticsList}\n */\n\n/* jshint ignore:end */\n\n\nTaskQueueInstance.prototype.statistics = function statistics() {\n  return this._proxy.statistics;\n};\n/* jshint ignore:start */\n\n/**\n * Access the realTimeStatistics\n *\n * @function realTimeStatistics\n * @memberof Twilio.Taskrouter.V1.WorkspaceContext.TaskQueueInstance#\n *\n * @returns {Twilio.Taskrouter.V1.WorkspaceContext.TaskQueueContext.TaskQueueRealTimeStatisticsList}\n */\n\n/* jshint ignore:end */\n\n\nTaskQueueInstance.prototype.realTimeStatistics = function realTimeStatistics() {\n  return this._proxy.realTimeStatistics;\n};\n/* jshint ignore:start */\n\n/**\n * Access the cumulativeStatistics\n *\n * @function cumulativeStatistics\n * @memberof Twilio.Taskrouter.V1.WorkspaceContext.TaskQueueInstance#\n *\n * @returns {Twilio.Taskrouter.V1.WorkspaceContext.TaskQueueContext.TaskQueueCumulativeStatisticsList}\n */\n\n/* jshint ignore:end */\n\n\nTaskQueueInstance.prototype.cumulativeStatistics = function cumulativeStatistics() {\n  return this._proxy.cumulativeStatistics;\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Taskrouter.V1.WorkspaceContext.TaskQueueInstance#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nTaskQueueInstance.prototype.toJSON = function toJSON() {\n  let clone = {};\n\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n\n  return clone;\n};\n\nTaskQueueInstance.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the TaskQueueContext\n *\n * @constructor Twilio.Taskrouter.V1.WorkspaceContext.TaskQueueContext\n *\n * @property {Twilio.Taskrouter.V1.WorkspaceContext.TaskQueueContext.TaskQueueStatisticsList} statistics -\n *          statistics resource\n * @property {Twilio.Taskrouter.V1.WorkspaceContext.TaskQueueContext.TaskQueueRealTimeStatisticsList} realTimeStatistics -\n *          realTimeStatistics resource\n * @property {Twilio.Taskrouter.V1.WorkspaceContext.TaskQueueContext.TaskQueueCumulativeStatisticsList} cumulativeStatistics -\n *          cumulativeStatistics resource\n *\n * @param {V1} version - Version of the resource\n * @param {sid} workspaceSid - The SID of the Workspace with the TaskQueue to fetch\n * @param {sid} sid - The SID of the resource to\n */\n\n/* jshint ignore:end */\n\n\nTaskQueueContext = function TaskQueueContext(version, workspaceSid, sid) {\n  this._version = version; // Path Solution\n\n  this._solution = {\n    workspaceSid: workspaceSid,\n    sid: sid\n  };\n  this._uri = `/Workspaces/${workspaceSid}/TaskQueues/${sid}`; // Dependents\n\n  this._statistics = undefined;\n  this._realTimeStatistics = undefined;\n  this._cumulativeStatistics = undefined;\n};\n/* jshint ignore:start */\n\n/**\n * fetch a TaskQueueInstance\n *\n * @function fetch\n * @memberof Twilio.Taskrouter.V1.WorkspaceContext.TaskQueueContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed TaskQueueInstance\n */\n\n/* jshint ignore:end */\n\n\nTaskQueueContext.prototype.fetch = function fetch(callback) {\n  var deferred = Q.defer();\n\n  var promise = this._version.fetch({\n    uri: this._uri,\n    method: 'GET'\n  });\n\n  promise = promise.then(function (payload) {\n    deferred.resolve(new TaskQueueInstance(this._version, payload, this._solution.workspaceSid, this._solution.sid));\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n/* jshint ignore:start */\n\n/**\n * update a TaskQueueInstance\n *\n * @function update\n * @memberof Twilio.Taskrouter.V1.WorkspaceContext.TaskQueueContext#\n *\n * @param {object} [opts] - Options for request\n * @param {string} [opts.friendlyName] - A string to describe the resource\n * @param {string} [opts.targetWorkers] -\n *          A string describing the Worker selection criteria for any Tasks that enter the TaskQueue\n * @param {string} [opts.reservationActivitySid] -\n *          The SID of the Activity to assign Workers when a task is reserved for them\n * @param {string} [opts.assignmentActivitySid] -\n *          The SID of the Activity to assign Workers when a task is assigned for them\n * @param {number} [opts.maxReservedWorkers] -\n *          The maximum number of Workers to create reservations for the assignment of a task while in the queue\n * @param {task_queue.task_order} [opts.taskOrder] -\n *          How Tasks will be assigned to Workers\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed TaskQueueInstance\n */\n\n/* jshint ignore:end */\n\n\nTaskQueueContext.prototype.update = function update(opts, callback) {\n  if (_.isFunction(opts)) {\n    callback = opts;\n    opts = {};\n  }\n\n  opts = opts || {};\n  var deferred = Q.defer();\n  var data = values.of({\n    'FriendlyName': _.get(opts, 'friendlyName'),\n    'TargetWorkers': _.get(opts, 'targetWorkers'),\n    'ReservationActivitySid': _.get(opts, 'reservationActivitySid'),\n    'AssignmentActivitySid': _.get(opts, 'assignmentActivitySid'),\n    'MaxReservedWorkers': _.get(opts, 'maxReservedWorkers'),\n    'TaskOrder': _.get(opts, 'taskOrder')\n  });\n\n  var promise = this._version.update({\n    uri: this._uri,\n    method: 'POST',\n    data: data\n  });\n\n  promise = promise.then(function (payload) {\n    deferred.resolve(new TaskQueueInstance(this._version, payload, this._solution.workspaceSid, this._solution.sid));\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n/* jshint ignore:start */\n\n/**\n * remove a TaskQueueInstance\n *\n * @function remove\n * @memberof Twilio.Taskrouter.V1.WorkspaceContext.TaskQueueContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed TaskQueueInstance\n */\n\n/* jshint ignore:end */\n\n\nTaskQueueContext.prototype.remove = function remove(callback) {\n  var deferred = Q.defer();\n\n  var promise = this._version.remove({\n    uri: this._uri,\n    method: 'DELETE'\n  });\n\n  promise = promise.then(function (payload) {\n    deferred.resolve(payload);\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\nObject.defineProperty(TaskQueueContext.prototype, 'statistics', {\n  get: function () {\n    if (!this._statistics) {\n      this._statistics = new TaskQueueStatisticsList(this._version, this._solution.workspaceSid, this._solution.sid);\n    }\n\n    return this._statistics;\n  }\n});\nObject.defineProperty(TaskQueueContext.prototype, 'realTimeStatistics', {\n  get: function () {\n    if (!this._realTimeStatistics) {\n      this._realTimeStatistics = new TaskQueueRealTimeStatisticsList(this._version, this._solution.workspaceSid, this._solution.sid);\n    }\n\n    return this._realTimeStatistics;\n  }\n});\nObject.defineProperty(TaskQueueContext.prototype, 'cumulativeStatistics', {\n  get: function () {\n    if (!this._cumulativeStatistics) {\n      this._cumulativeStatistics = new TaskQueueCumulativeStatisticsList(this._version, this._solution.workspaceSid, this._solution.sid);\n    }\n\n    return this._cumulativeStatistics;\n  }\n});\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Taskrouter.V1.WorkspaceContext.TaskQueueContext#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\nTaskQueueContext.prototype.toJSON = function toJSON() {\n  return this._solution;\n};\n\nTaskQueueContext.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\nmodule.exports = {\n  TaskQueueList: TaskQueueList,\n  TaskQueuePage: TaskQueuePage,\n  TaskQueueInstance: TaskQueueInstance,\n  TaskQueueContext: TaskQueueContext\n};","map":{"version":3,"names":["Q","require","_","util","Page","TaskQueueCumulativeStatisticsList","TaskQueueRealTimeStatisticsList","TaskQueueStatisticsList","TaskQueuesStatisticsList","deserialize","values","TaskQueueList","TaskQueuePage","TaskQueueInstance","TaskQueueContext","version","workspaceSid","TaskQueueListInstance","sid","get","_version","_solution","_uri","_statistics","undefined","each","opts","callback","isFunction","isUndefined","Error","done","currentPage","currentResource","limits","readLimits","limit","pageSize","onComplete","error","fetchNextPage","fn","promise","then","page","instances","instance","bind","nextPage","catch","merge","list","deferred","defer","allResources","resource","push","length","resolve","reject","nodeify","data","of","pageToken","pageNumber","uri","method","params","payload","getPage","targetUrl","_domain","twilio","request","create","Object","defineProperty","statistics","toJSON","inspect","custom","depth","options","response","solution","prototype","constructor","call","extend","getInstance","clone","forOwn","value","key","startsWith","accountSid","account_sid","assignmentActivitySid","assignment_activity_sid","assignmentActivityName","assignment_activity_name","dateCreated","iso8601DateTime","date_created","dateUpdated","date_updated","friendlyName","friendly_name","maxReservedWorkers","integer","max_reserved_workers","reservationActivitySid","reservation_activity_sid","reservationActivityName","reservation_activity_name","targetWorkers","target_workers","taskOrder","task_order","url","workspace_sid","links","_context","fetch","_proxy","update","remove","realTimeStatistics","cumulativeStatistics","_realTimeStatistics","_cumulativeStatistics","module","exports"],"sources":["/Users/hooniesun/rmit/fwp/assessment1/lan/node_modules/twilio/lib/rest/taskrouter/v1/workspace/taskQueue.js"],"sourcesContent":["'use strict';\n\n/* jshint ignore:start */\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n/* jshint ignore:end */\n\nvar Q = require('q');  /* jshint ignore:line */\nvar _ = require('lodash');  /* jshint ignore:line */\nvar util = require('util');  /* jshint ignore:line */\nvar Page = require('../../../../base/Page');  /* jshint ignore:line */\nvar TaskQueueCumulativeStatisticsList = require(\n    './taskQueue/taskQueueCumulativeStatistics').TaskQueueCumulativeStatisticsList;\nvar TaskQueueRealTimeStatisticsList = require(\n    './taskQueue/taskQueueRealTimeStatistics').TaskQueueRealTimeStatisticsList;\nvar TaskQueueStatisticsList = require(\n    './taskQueue/taskQueueStatistics').TaskQueueStatisticsList;\nvar TaskQueuesStatisticsList = require(\n    './taskQueue/taskQueuesStatistics').TaskQueuesStatisticsList;\nvar deserialize = require(\n    '../../../../base/deserialize');  /* jshint ignore:line */\nvar values = require('../../../../base/values');  /* jshint ignore:line */\n\nvar TaskQueueList;\nvar TaskQueuePage;\nvar TaskQueueInstance;\nvar TaskQueueContext;\n\n/* jshint ignore:start */\n/**\n * Initialize the TaskQueueList\n *\n * @constructor Twilio.Taskrouter.V1.WorkspaceContext.TaskQueueList\n *\n * @param {Twilio.Taskrouter.V1} version - Version of the resource\n * @param {string} workspaceSid -\n *          The SID of the Workspace that contains the TaskQueue\n */\n/* jshint ignore:end */\nTaskQueueList = function TaskQueueList(version, workspaceSid) {\n  /* jshint ignore:start */\n  /**\n   * @function taskQueues\n   * @memberof Twilio.Taskrouter.V1.WorkspaceContext#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Taskrouter.V1.WorkspaceContext.TaskQueueContext}\n   */\n  /* jshint ignore:end */\n  function TaskQueueListInstance(sid) {\n    return TaskQueueListInstance.get(sid);\n  }\n\n  TaskQueueListInstance._version = version;\n  // Path Solution\n  TaskQueueListInstance._solution = {workspaceSid: workspaceSid};\n  TaskQueueListInstance._uri = `/Workspaces/${workspaceSid}/TaskQueues`;\n\n  // Components\n  TaskQueueListInstance._statistics = undefined;\n\n  /* jshint ignore:start */\n  /**\n   * Streams TaskQueueInstance records from the API.\n   *\n   * This operation lazily loads records as efficiently as possible until the limit\n   * is reached.\n   *\n   * The results are passed into the callback function, so this operation is memory\n   * efficient.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function each\n   * @memberof Twilio.Taskrouter.V1.WorkspaceContext.TaskQueueList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.friendlyName] -\n   *          The friendly_name of the TaskQueue resources to read\n   * @param {string} [opts.evaluateWorkerAttributes] -\n   *          The attributes of the Workers to read\n   * @param {string} [opts.workerSid] -\n   *          The SID of the Worker with the TaskQueue resources to read\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         each() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no pageSize is defined but a limit is defined,\n   *         each() will attempt to read the limit with the most efficient\n   *         page size, i.e. min(limit, 1000)\n   * @param {Function} [opts.callback] -\n   *         Function to process each record. If this and a positional\n   *         callback are passed, this one will be used\n   * @param {Function} [opts.done] -\n   *          Function to be called upon completion of streaming\n   * @param {Function} [callback] - Function to process each record\n   */\n  /* jshint ignore:end */\n  TaskQueueListInstance.each = function each(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    if (opts.callback) {\n      callback = opts.callback;\n    }\n    if (_.isUndefined(callback)) {\n      throw new Error('Callback function must be provided');\n    }\n\n    var done = false;\n    var currentPage = 1;\n    var currentResource = 0;\n    var limits = this._version.readLimits({\n      limit: opts.limit,\n      pageSize: opts.pageSize\n    });\n\n    function onComplete(error) {\n      done = true;\n      if (_.isFunction(opts.done)) {\n        opts.done(error);\n      }\n    }\n\n    function fetchNextPage(fn) {\n      var promise = fn();\n      if (_.isUndefined(promise)) {\n        onComplete();\n        return;\n      }\n\n      promise.then(function(page) {\n        _.each(page.instances, function(instance) {\n          if (done || (!_.isUndefined(opts.limit) && currentResource >= opts.limit)) {\n            done = true;\n            return false;\n          }\n\n          currentResource++;\n          callback(instance, onComplete);\n        });\n\n        if (!done) {\n          currentPage++;\n          fetchNextPage(_.bind(page.nextPage, page));\n        } else {\n          onComplete();\n        }\n      });\n\n      promise.catch(onComplete);\n    }\n\n    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Lists TaskQueueInstance records from the API as a list.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function list\n   * @memberof Twilio.Taskrouter.V1.WorkspaceContext.TaskQueueList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.friendlyName] -\n   *          The friendly_name of the TaskQueue resources to read\n   * @param {string} [opts.evaluateWorkerAttributes] -\n   *          The attributes of the Workers to read\n   * @param {string} [opts.workerSid] -\n   *          The SID of the Worker with the TaskQueue resources to read\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         list() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no page_size is defined but a limit is defined,\n   *         list() will attempt to read the limit with the most\n   *         efficient page size, i.e. min(limit, 1000)\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  TaskQueueListInstance.list = function list(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    var deferred = Q.defer();\n    var allResources = [];\n    opts.callback = function(resource, done) {\n      allResources.push(resource);\n\n      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {\n        done();\n      }\n    };\n\n    opts.done = function(error) {\n      if (_.isUndefined(error)) {\n        deferred.resolve(allResources);\n      } else {\n        deferred.reject(error);\n      }\n    };\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    this.each(opts);\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single page of TaskQueueInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function page\n   * @memberof Twilio.Taskrouter.V1.WorkspaceContext.TaskQueueList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.friendlyName] -\n   *          The friendly_name of the TaskQueue resources to read\n   * @param {string} [opts.evaluateWorkerAttributes] -\n   *          The attributes of the Workers to read\n   * @param {string} [opts.workerSid] -\n   *          The SID of the Worker with the TaskQueue resources to read\n   * @param {string} [opts.pageToken] - PageToken provided by the API\n   * @param {number} [opts.pageNumber] -\n   *          Page Number, this value is simply for client state\n   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  TaskQueueListInstance.page = function page(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n\n    var deferred = Q.defer();\n    var data = values.of({\n      'FriendlyName': _.get(opts, 'friendlyName'),\n      'EvaluateWorkerAttributes': _.get(opts, 'evaluateWorkerAttributes'),\n      'WorkerSid': _.get(opts, 'workerSid'),\n      'PageToken': opts.pageToken,\n      'Page': opts.pageNumber,\n      'PageSize': opts.pageSize\n    });\n\n    var promise = this._version.page({uri: this._uri, method: 'GET', params: data});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new TaskQueuePage(this._version, payload, this._solution));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single target page of TaskQueueInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function getPage\n   * @memberof Twilio.Taskrouter.V1.WorkspaceContext.TaskQueueList#\n   *\n   * @param {string} [targetUrl] - API-generated URL for the requested results page\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  TaskQueueListInstance.getPage = function getPage(targetUrl, callback) {\n    var deferred = Q.defer();\n\n    var promise = this._version._domain.twilio.request({method: 'GET', uri: targetUrl});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new TaskQueuePage(this._version, payload, this._solution));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * create a TaskQueueInstance\n   *\n   * @function create\n   * @memberof Twilio.Taskrouter.V1.WorkspaceContext.TaskQueueList#\n   *\n   * @param {object} opts - Options for request\n   * @param {string} opts.friendlyName - A string to describe the resource\n   * @param {string} [opts.targetWorkers] -\n   *          A string describing the Worker selection criteria for any Tasks that enter the TaskQueue\n   * @param {number} [opts.maxReservedWorkers] -\n   *          The maximum number of Workers to reserve\n   * @param {task_queue.task_order} [opts.taskOrder] -\n   *          How Tasks will be assigned to Workers\n   * @param {string} [opts.reservationActivitySid] -\n   *          The SID of the Activity to assign Workers when a task is reserved for them\n   * @param {string} [opts.assignmentActivitySid] -\n   *          The SID of the Activity to assign Workers once a task is assigned to them\n   * @param {function} [callback] - Callback to handle processed record\n   *\n   * @returns {Promise} Resolves to processed TaskQueueInstance\n   */\n  /* jshint ignore:end */\n  TaskQueueListInstance.create = function create(opts, callback) {\n    if (_.isUndefined(opts)) {\n      throw new Error('Required parameter \"opts\" missing.');\n    }\n    if (_.isUndefined(opts['friendlyName'])) {\n      throw new Error('Required parameter \"opts[\\'friendlyName\\']\" missing.');\n    }\n\n    var deferred = Q.defer();\n    var data = values.of({\n      'FriendlyName': _.get(opts, 'friendlyName'),\n      'TargetWorkers': _.get(opts, 'targetWorkers'),\n      'MaxReservedWorkers': _.get(opts, 'maxReservedWorkers'),\n      'TaskOrder': _.get(opts, 'taskOrder'),\n      'ReservationActivitySid': _.get(opts, 'reservationActivitySid'),\n      'AssignmentActivitySid': _.get(opts, 'assignmentActivitySid')\n    });\n\n    var promise = this._version.create({uri: this._uri, method: 'POST', data: data});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new TaskQueueInstance(\n        this._version,\n        payload,\n        this._solution.workspaceSid,\n        this._solution.sid\n      ));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Constructs a task_queue\n   *\n   * @function get\n   * @memberof Twilio.Taskrouter.V1.WorkspaceContext.TaskQueueList#\n   *\n   * @param {string} sid - The SID of the resource to\n   *\n   * @returns {Twilio.Taskrouter.V1.WorkspaceContext.TaskQueueContext}\n   */\n  /* jshint ignore:end */\n  TaskQueueListInstance.get = function get(sid) {\n    return new TaskQueueContext(this._version, this._solution.workspaceSid, sid);\n  };\n\n  Object.defineProperty(TaskQueueListInstance,\n    'statistics', {\n      get: function statistics() {\n        if (!this._statistics) {\n          this._statistics = new TaskQueuesStatisticsList(this._version, this._solution.workspaceSid);\n        }\n\n        return this._statistics;\n      }\n  });\n\n  /* jshint ignore:start */\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Taskrouter.V1.WorkspaceContext.TaskQueueList#\n   *\n   * @returns Object\n   */\n  /* jshint ignore:end */\n  TaskQueueListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n\n  TaskQueueListInstance[util.inspect.custom] = function inspect(depth, options) {\n    return util.inspect(this.toJSON(), options);\n  };\n\n  return TaskQueueListInstance;\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the TaskQueuePage\n *\n * @constructor Twilio.Taskrouter.V1.WorkspaceContext.TaskQueuePage\n *\n * @param {V1} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {TaskQueueSolution} solution - Path solution\n *\n * @returns TaskQueuePage\n */\n/* jshint ignore:end */\nTaskQueuePage = function TaskQueuePage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n\n_.extend(TaskQueuePage.prototype, Page.prototype);\nTaskQueuePage.prototype.constructor = TaskQueuePage;\n\n/* jshint ignore:start */\n/**\n * Build an instance of TaskQueueInstance\n *\n * @function getInstance\n * @memberof Twilio.Taskrouter.V1.WorkspaceContext.TaskQueuePage#\n *\n * @param {TaskQueuePayload} payload - Payload response from the API\n *\n * @returns TaskQueueInstance\n */\n/* jshint ignore:end */\nTaskQueuePage.prototype.getInstance = function getInstance(payload) {\n  return new TaskQueueInstance(this._version, payload, this._solution.workspaceSid);\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Taskrouter.V1.WorkspaceContext.TaskQueuePage#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nTaskQueuePage.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function(value, key) {\n    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\n\nTaskQueuePage.prototype[util.inspect.custom] = function inspect(depth, options)\n    {\n  return util.inspect(this.toJSON(), options);\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the TaskQueueContext\n *\n * @constructor Twilio.Taskrouter.V1.WorkspaceContext.TaskQueueInstance\n *\n * @property {string} accountSid - The SID of the Account that created the resource\n * @property {string} assignmentActivitySid -\n *          The SID of the Activity to assign Workers when a task is assigned for them\n * @property {string} assignmentActivityName -\n *          The name of the Activity to assign Workers when a task is assigned for them\n * @property {Date} dateCreated -\n *          The RFC 2822 date and time in GMT when the resource was created\n * @property {Date} dateUpdated -\n *          The RFC 2822 date and time in GMT when the resource was last updated\n * @property {string} friendlyName -\n *          The string that you assigned to describe the resource\n * @property {number} maxReservedWorkers - The maximum number of Workers to reserve\n * @property {string} reservationActivitySid -\n *          The SID of the Activity to assign Workers once a task is reserved for them\n * @property {string} reservationActivityName -\n *          The name of the Activity to assign Workers once a task is reserved for them\n * @property {string} sid - The unique string that identifies the resource\n * @property {string} targetWorkers -\n *          A string describing the Worker selection criteria for any Tasks that enter the TaskQueue\n * @property {task_queue.task_order} taskOrder -\n *          How Tasks will be assigned to Workers\n * @property {string} url - The absolute URL of the TaskQueue resource\n * @property {string} workspaceSid -\n *          The SID of the Workspace that contains the TaskQueue\n * @property {string} links - The URLs of related resources\n *\n * @param {V1} version - Version of the resource\n * @param {TaskQueuePayload} payload - The instance payload\n * @param {sid} workspaceSid - The SID of the Workspace that contains the TaskQueue\n * @param {sid} sid - The SID of the resource to\n */\n/* jshint ignore:end */\nTaskQueueInstance = function TaskQueueInstance(version, payload, workspaceSid,\n                                                sid) {\n  this._version = version;\n\n  // Marshaled Properties\n  this.accountSid = payload.account_sid; // jshint ignore:line\n  this.assignmentActivitySid = payload.assignment_activity_sid; // jshint ignore:line\n  this.assignmentActivityName = payload.assignment_activity_name; // jshint ignore:line\n  this.dateCreated = deserialize.iso8601DateTime(payload.date_created); // jshint ignore:line\n  this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated); // jshint ignore:line\n  this.friendlyName = payload.friendly_name; // jshint ignore:line\n  this.maxReservedWorkers = deserialize.integer(payload.max_reserved_workers); // jshint ignore:line\n  this.reservationActivitySid = payload.reservation_activity_sid; // jshint ignore:line\n  this.reservationActivityName = payload.reservation_activity_name; // jshint ignore:line\n  this.sid = payload.sid; // jshint ignore:line\n  this.targetWorkers = payload.target_workers; // jshint ignore:line\n  this.taskOrder = payload.task_order; // jshint ignore:line\n  this.url = payload.url; // jshint ignore:line\n  this.workspaceSid = payload.workspace_sid; // jshint ignore:line\n  this.links = payload.links; // jshint ignore:line\n\n  // Context\n  this._context = undefined;\n  this._solution = {workspaceSid: workspaceSid, sid: sid || this.sid, };\n};\n\nObject.defineProperty(TaskQueueInstance.prototype,\n  '_proxy', {\n    get: function() {\n      if (!this._context) {\n        this._context = new TaskQueueContext(\n          this._version,\n          this._solution.workspaceSid,\n          this._solution.sid\n        );\n      }\n\n      return this._context;\n    }\n});\n\n/* jshint ignore:start */\n/**\n * fetch a TaskQueueInstance\n *\n * @function fetch\n * @memberof Twilio.Taskrouter.V1.WorkspaceContext.TaskQueueInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed TaskQueueInstance\n */\n/* jshint ignore:end */\nTaskQueueInstance.prototype.fetch = function fetch(callback) {\n  return this._proxy.fetch(callback);\n};\n\n/* jshint ignore:start */\n/**\n * update a TaskQueueInstance\n *\n * @function update\n * @memberof Twilio.Taskrouter.V1.WorkspaceContext.TaskQueueInstance#\n *\n * @param {object} [opts] - Options for request\n * @param {string} [opts.friendlyName] - A string to describe the resource\n * @param {string} [opts.targetWorkers] -\n *          A string describing the Worker selection criteria for any Tasks that enter the TaskQueue\n * @param {string} [opts.reservationActivitySid] -\n *          The SID of the Activity to assign Workers when a task is reserved for them\n * @param {string} [opts.assignmentActivitySid] -\n *          The SID of the Activity to assign Workers when a task is assigned for them\n * @param {number} [opts.maxReservedWorkers] -\n *          The maximum number of Workers to create reservations for the assignment of a task while in the queue\n * @param {task_queue.task_order} [opts.taskOrder] -\n *          How Tasks will be assigned to Workers\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed TaskQueueInstance\n */\n/* jshint ignore:end */\nTaskQueueInstance.prototype.update = function update(opts, callback) {\n  return this._proxy.update(opts, callback);\n};\n\n/* jshint ignore:start */\n/**\n * remove a TaskQueueInstance\n *\n * @function remove\n * @memberof Twilio.Taskrouter.V1.WorkspaceContext.TaskQueueInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed TaskQueueInstance\n */\n/* jshint ignore:end */\nTaskQueueInstance.prototype.remove = function remove(callback) {\n  return this._proxy.remove(callback);\n};\n\n/* jshint ignore:start */\n/**\n * Access the statistics\n *\n * @function statistics\n * @memberof Twilio.Taskrouter.V1.WorkspaceContext.TaskQueueInstance#\n *\n * @returns {Twilio.Taskrouter.V1.WorkspaceContext.TaskQueueContext.TaskQueueStatisticsList}\n */\n/* jshint ignore:end */\nTaskQueueInstance.prototype.statistics = function statistics() {\n  return this._proxy.statistics;\n};\n\n/* jshint ignore:start */\n/**\n * Access the realTimeStatistics\n *\n * @function realTimeStatistics\n * @memberof Twilio.Taskrouter.V1.WorkspaceContext.TaskQueueInstance#\n *\n * @returns {Twilio.Taskrouter.V1.WorkspaceContext.TaskQueueContext.TaskQueueRealTimeStatisticsList}\n */\n/* jshint ignore:end */\nTaskQueueInstance.prototype.realTimeStatistics = function realTimeStatistics() {\n  return this._proxy.realTimeStatistics;\n};\n\n/* jshint ignore:start */\n/**\n * Access the cumulativeStatistics\n *\n * @function cumulativeStatistics\n * @memberof Twilio.Taskrouter.V1.WorkspaceContext.TaskQueueInstance#\n *\n * @returns {Twilio.Taskrouter.V1.WorkspaceContext.TaskQueueContext.TaskQueueCumulativeStatisticsList}\n */\n/* jshint ignore:end */\nTaskQueueInstance.prototype.cumulativeStatistics = function\n    cumulativeStatistics() {\n  return this._proxy.cumulativeStatistics;\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Taskrouter.V1.WorkspaceContext.TaskQueueInstance#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nTaskQueueInstance.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function(value, key) {\n    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\n\nTaskQueueInstance.prototype[util.inspect.custom] = function inspect(depth,\n    options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the TaskQueueContext\n *\n * @constructor Twilio.Taskrouter.V1.WorkspaceContext.TaskQueueContext\n *\n * @property {Twilio.Taskrouter.V1.WorkspaceContext.TaskQueueContext.TaskQueueStatisticsList} statistics -\n *          statistics resource\n * @property {Twilio.Taskrouter.V1.WorkspaceContext.TaskQueueContext.TaskQueueRealTimeStatisticsList} realTimeStatistics -\n *          realTimeStatistics resource\n * @property {Twilio.Taskrouter.V1.WorkspaceContext.TaskQueueContext.TaskQueueCumulativeStatisticsList} cumulativeStatistics -\n *          cumulativeStatistics resource\n *\n * @param {V1} version - Version of the resource\n * @param {sid} workspaceSid - The SID of the Workspace with the TaskQueue to fetch\n * @param {sid} sid - The SID of the resource to\n */\n/* jshint ignore:end */\nTaskQueueContext = function TaskQueueContext(version, workspaceSid, sid) {\n  this._version = version;\n\n  // Path Solution\n  this._solution = {workspaceSid: workspaceSid, sid: sid, };\n  this._uri = `/Workspaces/${workspaceSid}/TaskQueues/${sid}`;\n\n  // Dependents\n  this._statistics = undefined;\n  this._realTimeStatistics = undefined;\n  this._cumulativeStatistics = undefined;\n};\n\n/* jshint ignore:start */\n/**\n * fetch a TaskQueueInstance\n *\n * @function fetch\n * @memberof Twilio.Taskrouter.V1.WorkspaceContext.TaskQueueContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed TaskQueueInstance\n */\n/* jshint ignore:end */\nTaskQueueContext.prototype.fetch = function fetch(callback) {\n  var deferred = Q.defer();\n  var promise = this._version.fetch({uri: this._uri, method: 'GET'});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(new TaskQueueInstance(\n      this._version,\n      payload,\n      this._solution.workspaceSid,\n      this._solution.sid\n    ));\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * update a TaskQueueInstance\n *\n * @function update\n * @memberof Twilio.Taskrouter.V1.WorkspaceContext.TaskQueueContext#\n *\n * @param {object} [opts] - Options for request\n * @param {string} [opts.friendlyName] - A string to describe the resource\n * @param {string} [opts.targetWorkers] -\n *          A string describing the Worker selection criteria for any Tasks that enter the TaskQueue\n * @param {string} [opts.reservationActivitySid] -\n *          The SID of the Activity to assign Workers when a task is reserved for them\n * @param {string} [opts.assignmentActivitySid] -\n *          The SID of the Activity to assign Workers when a task is assigned for them\n * @param {number} [opts.maxReservedWorkers] -\n *          The maximum number of Workers to create reservations for the assignment of a task while in the queue\n * @param {task_queue.task_order} [opts.taskOrder] -\n *          How Tasks will be assigned to Workers\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed TaskQueueInstance\n */\n/* jshint ignore:end */\nTaskQueueContext.prototype.update = function update(opts, callback) {\n  if (_.isFunction(opts)) {\n    callback = opts;\n    opts = {};\n  }\n  opts = opts || {};\n\n  var deferred = Q.defer();\n  var data = values.of({\n    'FriendlyName': _.get(opts, 'friendlyName'),\n    'TargetWorkers': _.get(opts, 'targetWorkers'),\n    'ReservationActivitySid': _.get(opts, 'reservationActivitySid'),\n    'AssignmentActivitySid': _.get(opts, 'assignmentActivitySid'),\n    'MaxReservedWorkers': _.get(opts, 'maxReservedWorkers'),\n    'TaskOrder': _.get(opts, 'taskOrder')\n  });\n\n  var promise = this._version.update({uri: this._uri, method: 'POST', data: data});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(new TaskQueueInstance(\n      this._version,\n      payload,\n      this._solution.workspaceSid,\n      this._solution.sid\n    ));\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * remove a TaskQueueInstance\n *\n * @function remove\n * @memberof Twilio.Taskrouter.V1.WorkspaceContext.TaskQueueContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed TaskQueueInstance\n */\n/* jshint ignore:end */\nTaskQueueContext.prototype.remove = function remove(callback) {\n  var deferred = Q.defer();\n  var promise = this._version.remove({uri: this._uri, method: 'DELETE'});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(payload);\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\nObject.defineProperty(TaskQueueContext.prototype,\n  'statistics', {\n    get: function() {\n      if (!this._statistics) {\n        this._statistics = new TaskQueueStatisticsList(\n          this._version,\n          this._solution.workspaceSid,\n          this._solution.sid\n        );\n      }\n      return this._statistics;\n    }\n});\n\nObject.defineProperty(TaskQueueContext.prototype,\n  'realTimeStatistics', {\n    get: function() {\n      if (!this._realTimeStatistics) {\n        this._realTimeStatistics = new TaskQueueRealTimeStatisticsList(\n          this._version,\n          this._solution.workspaceSid,\n          this._solution.sid\n        );\n      }\n      return this._realTimeStatistics;\n    }\n});\n\nObject.defineProperty(TaskQueueContext.prototype,\n  'cumulativeStatistics', {\n    get: function() {\n      if (!this._cumulativeStatistics) {\n        this._cumulativeStatistics = new TaskQueueCumulativeStatisticsList(\n          this._version,\n          this._solution.workspaceSid,\n          this._solution.sid\n        );\n      }\n      return this._cumulativeStatistics;\n    }\n});\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Taskrouter.V1.WorkspaceContext.TaskQueueContext#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nTaskQueueContext.prototype.toJSON = function toJSON() {\n  return this._solution;\n};\n\nTaskQueueContext.prototype[util.inspect.custom] = function inspect(depth,\n    options) {\n  return util.inspect(this.toJSON(), options);\n};\n\nmodule.exports = {\n  TaskQueueList: TaskQueueList,\n  TaskQueuePage: TaskQueuePage,\n  TaskQueueInstance: TaskQueueInstance,\n  TaskQueueContext: TaskQueueContext\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}